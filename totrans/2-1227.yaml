- en: How to Plot Graphs using the DiagrammeR package in R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-plot-graphs-using-the-diagrammer-package-in-r-3fe4642091cc](https://towardsdatascience.com/how-to-plot-graphs-using-the-diagrammer-package-in-r-3fe4642091cc)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: DiagrammeR , grViz()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://indhumathychelliah.medium.com/?source=post_page-----3fe4642091cc--------------------------------)[![Indhumathy
    Chelliah](../Images/5c8a238adb411a43f854953caf7d3e3a.png)](https://indhumathychelliah.medium.com/?source=post_page-----3fe4642091cc--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3fe4642091cc--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3fe4642091cc--------------------------------)
    [Indhumathy Chelliah](https://indhumathychelliah.medium.com/?source=post_page-----3fe4642091cc--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3fe4642091cc--------------------------------)
    ·6 min read·Feb 15, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/80964a39441eb55c198a4dd56ff83581.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Photo by Lukas: [https://www.pexels.com/photo/person-holding-blue-pen-590014/](https://www.pexels.com/photo/person-holding-blue-pen-590014/)'
  prefs: []
  type: TYPE_NORMAL
- en: DiagrammeR is a package in R that is used to create graphs and flowcharts using
    graphviz and mermaid.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, let’s look at how to create graphs using the grViz() in the
    DiagrammeR package.
  prefs: []
  type: TYPE_NORMAL
- en: What is DiagrammeR?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is grViz()?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to create nodes, edges, labels, and their substitution and connection using
    grViz()
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to knit to HTML
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is DiagrammeR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DiagrammeR is a package within htmlwidgets for R. It is used to generate graphs
    using graphviz and mermaid library.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Create an RMarkdown document.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In RStudio -> Go to File → New File →R Markdown. then give the title and select
    the output format as HTML.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c3c92c437d98aab11c22d91b85c9e646.png)'
  prefs: []
  type: TYPE_IMG
- en: The R Markdown document will have the document title and other information at
    the top.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/94f2a45a20c4772e297295909a780952.png)'
  prefs: []
  type: TYPE_IMG
- en: Below that we will have r chunks which have delimiters [PRE0]{r} [PRE1]` [PRE2]`
  prefs: []
  type: TYPE_NORMAL
- en: When you render the R Markdown document, it will run each chunk and embed the
    results beneath the code chunk or you can run each code chunk and the result will
    be displayed for that code chunk.
  prefs: []
  type: TYPE_NORMAL
- en: We can knit the R Markdown document to HTML output. Let’s see how to do that
    in this article.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Install the DiagrammeR package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to Packages → Install on the right side of the RStudio and enter the package
    name DiagrammeR and click Install.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/506d97d6347c9ac92b730356f86f1e9a.png)'
  prefs: []
  type: TYPE_IMG
- en: 2\. What is grViz?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DiagrammeR package uses the grViz() function for Graphviz graphs. Let’s see
    how to use grViz() function to create graphs.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. How to create nodes, edges, labels, and their substitution and connections
    using grViz()?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While creating a graph, we have to mention the layout, node attributes, edge
    attributes, and connection.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/82cf2c07876f79e5eb90b3bfb716d92f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how to create the above-displayed graph. In the above graph, * * green
    color circles are called nodes. A=15, B=10, etc-> are the labels of the nodes.
    The arrow mark is known as the edges.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Mention the layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The default layout is the dot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**2\. Mention the Node attributes:**'
  prefs: []
  type: TYPE_NORMAL
- en: We can mention node shape, color, style, width, etc.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**3\. Mention the Edge Attributes:**'
  prefs: []
  type: TYPE_NORMAL
- en: Edge attributes include color, arrowhead, arrow tail, pen width, direction,
    etc.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**4\. Mention the label and substitutions:**'
  prefs: []
  type: TYPE_NORMAL
- en: We have to mention the label and substitution for the node.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here A -> node name
  prefs: []
  type: TYPE_NORMAL
- en: A=@@1 → This is the label.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '@@1 -> is the substitution. Here 1 is the footnote number. The value 15 will
    be substituted in place of 1 when the graph is rendered.'
  prefs: []
  type: TYPE_NORMAL
- en: '**5\. Mention the connection details**'
  prefs: []
  type: TYPE_NORMAL
- en: In my graph A is connected to B and C. B is connected to D and C is connected
    to E.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Full R code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]{r , echo=FALSE}'
  prefs: []
  type: TYPE_NORMAL
- en: library(DiagrammeR)
  prefs: []
  type: TYPE_NORMAL
- en: grViz("
  prefs: []
  type: TYPE_NORMAL
- en: digraph {
  prefs: []
  type: TYPE_NORMAL
- en: layout = dot
  prefs: []
  type: TYPE_NORMAL
- en: node [shape = circle,color=green,style=filled,fixedsize=True,width=0.6]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: edge[color=grey,arrowhead=vee]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A[label = 'A= @@1']
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: B[label = 'B=@@2']
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: C[label = 'C=@@3']
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: D[label = 'D=@@4']
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: E[label = 'E=@@5']
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A->B
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A->C
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: B->D
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: C->E
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[1]:15'
  prefs: []
  type: TYPE_NORMAL
- en: '[2]:10'
  prefs: []
  type: TYPE_NORMAL
- en: '[3]:20'
  prefs: []
  type: TYPE_NORMAL
- en: '[4]:2'
  prefs: []
  type: TYPE_NORMAL
- en: '[5]:2'
  prefs: []
  type: TYPE_NORMAL
- en: '")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: rank=same {A->C}
  prefs: []
  type: TYPE_NORMAL
- en: rank=same {B->E}
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Output graph:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/a5fd989f0f752da1684ecfdd47f6a76f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create a node from the down arrow of another node.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/962d5d77523140e19853c88b0e14aca5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at how to create the graph mentioned above.
  prefs: []
  type: TYPE_NORMAL
- en: First, we have to create a blank node.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/48875fc8e70010dde0a205495050e31b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: After that we can make the blank node label= “ “ and the width and height to
    be very small (0.01)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**Full code**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]{r , echo=FALSE}'
  prefs: []
  type: TYPE_NORMAL
- en: library(DiagrammeR)
  prefs: []
  type: TYPE_NORMAL
- en: grViz("
  prefs: []
  type: TYPE_NORMAL
- en: digraph {
  prefs: []
  type: TYPE_NORMAL
- en: layout = dot
  prefs: []
  type: TYPE_NORMAL
- en: node [shape = circle,color=green,style=filled,fontsize=45,fixedsize=True,width=4.0]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: edge[color=grey,arrowhead=vee,penwidth=5,arrowsize=5]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A[label = 'A= @@1']
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: B[label = 'B=@@2']
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: C[label = 'C=@@3']
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: D[label = 'D=@@4']
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: E[label = 'E=@@5']
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: blank1[label = '', width = 0.01, height = 0.01]
  prefs: []
  type: TYPE_NORMAL
- en: A -> blank1;
  prefs: []
  type: TYPE_NORMAL
- en: blank1 -> B[minlen=10];
  prefs: []
  type: TYPE_NORMAL
- en: '{{ rank = same; blank1 B }}'
  prefs: []
  type: TYPE_NORMAL
- en: blank1 -> C
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: blank2[label = '', width = 0.01, height = 0.01]
  prefs: []
  type: TYPE_NORMAL
- en: C -> blank2;
  prefs: []
  type: TYPE_NORMAL
- en: blank2 -> D[minlen=1];
  prefs: []
  type: TYPE_NORMAL
- en: '{{ rank = same; blank2 E }}'
  prefs: []
  type: TYPE_NORMAL
- en: blank2 -> E [minlen=10]
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[1]:15'
  prefs: []
  type: TYPE_NORMAL
- en: '[2]:10'
  prefs: []
  type: TYPE_NORMAL
- en: '[3]:20'
  prefs: []
  type: TYPE_NORMAL
- en: '[4]:2'
  prefs: []
  type: TYPE_NORMAL
- en: '[5]:2'
  prefs: []
  type: TYPE_NORMAL
- en: '")[PRE18]'
  prefs: []
  type: TYPE_NORMAL
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3f9bb201e8790b2d5a3124188300732a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to remove the arrow mark. It can be removed by mentioning the
    edge attribute “dir=none”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '**Full code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]{r , echo=FALSE}'
  prefs: []
  type: TYPE_NORMAL
- en: library(DiagrammeR)
  prefs: []
  type: TYPE_NORMAL
- en: grViz("
  prefs: []
  type: TYPE_NORMAL
- en: digraph {
  prefs: []
  type: TYPE_NORMAL
- en: layout = dot
  prefs: []
  type: TYPE_NORMAL
- en: node [shape = circle,color=green,style=filled,fontsize=45,fixedsize=True,width=4.0]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: edge[color=grey,arrowhead=vee,penwidth=5,arrowsize=5]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A[label = 'A= @@1']
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: B[label = 'B=@@2']
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: C[label = 'C=@@3']
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: D[label = 'D=@@4']
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: E[label = 'E=@@5']
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: blank1[label = '', width = 0.01, height = 0.01]
  prefs: []
  type: TYPE_NORMAL
- en: A -> blank1[dir=none];
  prefs: []
  type: TYPE_NORMAL
- en: blank1 -> B[minlen=10];
  prefs: []
  type: TYPE_NORMAL
- en: '{{ rank = same; blank1 B }}'
  prefs: []
  type: TYPE_NORMAL
- en: blank1 -> C
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: blank2[label = '', width = 0.01, height = 0.01]
  prefs: []
  type: TYPE_NORMAL
- en: C -> blank2[dir=none];
  prefs: []
  type: TYPE_NORMAL
- en: blank2 -> D[minlen=1];
  prefs: []
  type: TYPE_NORMAL
- en: '{{ rank = same; blank2 E }}'
  prefs: []
  type: TYPE_NORMAL
- en: blank2 -> E [minlen=10]
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[1]:15'
  prefs: []
  type: TYPE_NORMAL
- en: '[2]:10'
  prefs: []
  type: TYPE_NORMAL
- en: '[3]:20'
  prefs: []
  type: TYPE_NORMAL
- en: '[4]:2'
  prefs: []
  type: TYPE_NORMAL
- en: '[5]:2'
  prefs: []
  type: TYPE_NORMAL
- en: '")[PRE22]'
  prefs: []
  type: TYPE_NORMAL
- en: 'Output:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/f7f401c9037a35f787f62e05f746fd19.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Knit to html
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Select the option knit -> knit to html
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c4fe1fccaa6fe03de549fdd75ff158fe.png)'
  prefs: []
  type: TYPE_IMG
- en: The whole R-Markdown document will be rendered into an HTML document.
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t want the r-code to be displayed in the HTML output, mention echo
    =False in the r-chunk code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]{r , echo=FALSE}[PRE24]'
  prefs: []
  type: TYPE_NORMAL
- en: This HTML page can be downloaded from my GitHub link.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/IndhumathyChelliah/R-Projects](https://github.com/IndhumathyChelliah/R-Projects)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Conclusion:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DiagrammeR is a package in R that allows the creation of graphs using Graphviz
    and mermaid styles. In this article, we have covered using GraphViz style. We
    have covered how to create nodes, labels, edges, connections, and layouts for
    the graphs using the grViz() function in the DiagrammeR package. We have also
    covered node attributes, edge attributes, labels, and their substitutions. We
    have covered only the dot layout, which is the default layout in this article.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading and hope you all like it!
  prefs: []
  type: TYPE_NORMAL
- en: 'References:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[](https://rich-iannone.github.io/DiagrammeR/?source=post_page-----3fe4642091cc--------------------------------)
    [## DiagrammeR'
  prefs: []
  type: TYPE_NORMAL
- en: DiagrammeR, an R package that allows you to create flowcharts, diagrams, and
    grhs with Markdown-like text.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: rich-iannone.github.io](https://rich-iannone.github.io/DiagrammeR/?source=post_page-----3fe4642091cc--------------------------------)
    [](https://rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html?source=post_page-----3fe4642091cc--------------------------------)
    [## DiagrammeR — Documentation
  prefs: []
  type: TYPE_NORMAL
- en: Graphviz support is an integral part of the DiagrammeR package. Graphviz consists
    of a graph description language…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: rich-iannone.github.io](https://rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html?source=post_page-----3fe4642091cc--------------------------------)  [##
    dot
  prefs: []
  type: TYPE_NORMAL
- en: Graphviz dot is the default tool to use if edges have directionality. The layout
    algorithm aims edges in the same…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: graphviz.org](https://graphviz.org/docs/layouts/dot/?source=post_page-----3fe4642091cc--------------------------------)
  prefs: []
  type: TYPE_NORMAL
