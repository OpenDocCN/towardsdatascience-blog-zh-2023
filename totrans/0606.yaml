- en: Creating Incredible Decision Tree Visualizations with dtreeviz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/creating-incredible-decision-tree-visualizations-with-dtreeviz-820c6547b6a9](https://towardsdatascience.com/creating-incredible-decision-tree-visualizations-with-dtreeviz-820c6547b6a9)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to visualize decision tree models with this useful library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://amolmavuduru.medium.com/?source=post_page-----820c6547b6a9--------------------------------)[![Amol
    Mavuduru](../Images/56b4ae74cac10dd7c70d41d9192ce181.png)](https://amolmavuduru.medium.com/?source=post_page-----820c6547b6a9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----820c6547b6a9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----820c6547b6a9--------------------------------)
    [Amol Mavuduru](https://amolmavuduru.medium.com/?source=post_page-----820c6547b6a9--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----820c6547b6a9--------------------------------)
    ·6 min read·Jun 21, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/18a9ad0cc89c82cf3b9dbf37c38220eb.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author, created using dtreeviz.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to model explainability, decision trees are some of the most intuitive
    and explainable models. Every decision tree model can be explained as a set of
    human-interpretable rules. Being able to visualize decision tree models is important
    for model explainability and can help stakeholders and business managers gain
    trust in these models.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, we can easily visualize and interpret decision trees with the dtreeviz
    library. **In this article, I will demonstrate how you can use dtreeviz to visualize
    tree-based models for regression and classification.**
  prefs: []
  type: TYPE_NORMAL
- en: Installing dtreeviz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can easily install dtreeviz with pip using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: For a detailed list of dependencies and additional libraries that may need to
    be installed depending on your operating system, please refer to [this GitHub
    repository](https://github.com/parrt/dtreeviz).
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing Regression Trees
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will train a decision tree regressor on the [diabetes dataset](https://archive.ics.uci.edu/dataset/34/diabetes).
    Note that you can find all of the code for this tutorial in this GitHub repository.
    Keep in mind that I am using Jupyter as my environment for running this Python
    code. You can find all of the code I have written for this tutorial in [this Github
    repository](https://github.com/AmolMavuduru/DtreevizTutorial).
  prefs: []
  type: TYPE_NORMAL
- en: Import Libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the code block below I simply imported a few common libraries including the
    scikit-learn DecisionTree modules and dtreeviz.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Read Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The diabetes dataset is available in scikit-learn so we can use the code below
    to import the dataset and store the features and target values in numpy arrays
    named X and y.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Training the Decision Tree Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the purpose of making the tree easy to visualize, we can limit the max depth
    of the decision tree and train it on the data as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Visualizing the Tree
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the key features of dtreeviz is the ability to visualize decision tree
    models. Using the code below we can create a cool decision tree visualization
    that also visually depicts the decision boundaries at each node.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/18a9ad0cc89c82cf3b9dbf37c38220eb.png)'
  prefs: []
  type: TYPE_IMG
- en: Diabetes regression tree visualization. Image created with dtreeviz by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Notice how the visualization above also gives us the decision boundaries and
    feature space at each node as well as the regression outputs and sample size at
    each leaf.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the Leaf Distributions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another useful function that dtreeviz provides is the abilty to visualize leaf
    distributions. The leaf nodes of a decision tree contain the actual values that
    a decision tree will predict depending on each set of conditions. Using the **rtree_leaf_distributions**
    function, we can create this visualization for our regression tree.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/daebc012eb2585e5d913c79b55553331.png)'
  prefs: []
  type: TYPE_IMG
- en: Based on the visualization above, we can see that the decision tree can either
    predict 268.9, 208.6, 176.9, 137.7, 154.7, 274.0, 83.4, or 108.8 for the target
    variable named diabetes. The horizontally scattered points represent the distribution
    of values for the diabetes target variable and the small black line represents
    the average value which is used for predictions at that leaf node. Ideally, the
    leaf distributions should have low variance so that we can have more confidence
    in the average values used for predictions.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the Leaf Sizes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can also visualize the leaf sizes, or the number of samples at each leaf
    node, as demonstrated with the function below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f32fe2672f34390c9e1df196a810e50a.png)'
  prefs: []
  type: TYPE_IMG
- en: Based on the plot above, we can see the number of samples at each leaf. This
    visualization is a good tool for evaluating how confident we can be in the regression
    tree predictions.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing Classification Trees
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can also visualize classification trees with dtreeviz and the visualizations
    look slightly different from those created for regression trees. For this section,
    we will train and visualize a decision model using the [Breast Cancer Wisconsin
    dataset](https://www.kaggle.com/datasets/uciml/breast-cancer-wisconsin-data).
  prefs: []
  type: TYPE_NORMAL
- en: Read Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Breast Cancer Wisconsin dataset is available in scikit-learn so we can just
    load it using the code below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Training a Decision Tree Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As usual, training a decision tree model with scikit-learn is straightforward.
    We can also place a constraint on the maximum tree depth to make it easier to
    visualize the decision tree.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Visualizing the Decision Tree
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can use the exact same function from the regression tree section to visualize
    the classification tree. However, the visualization will look slightly different.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a299a34aa24357fefcc2b7ca5359227f.png)'
  prefs: []
  type: TYPE_IMG
- en: Cancer classification decision tree.
  prefs: []
  type: TYPE_NORMAL
- en: Notice how the classification tree visualization above is different from the
    regression tree visualization in the previous section. Instead of seeing a scatter
    plot at each node with the selected feature and the target, we see colored histograms
    that show the class distribution at each node.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the Leaf Distributions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can also visualize the class distributions for the leaves using the same
    function for visualizing the leaf distributions for the regression tree.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/512e690dc395fc3a347a655f2ffecc8e.png)'
  prefs: []
  type: TYPE_IMG
- en: Leaf distribution plot for the classification tree. Image created by the author
    using dtreeviz.
  prefs: []
  type: TYPE_NORMAL
- en: Each leaf has a stacked bar graph associated with it that presents the distribution
    of class labels for the samples at that leaf. Most of the leaves have samples
    that overwhelmingly belong to one class, which is a good sign and helps us gain
    some confidence in the model’s predictions.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the Feature Space
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can also visualize the feature space of the classifier using the function
    below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6da07c58667b04d62bcf16c1707b9adb.png)'
  prefs: []
  type: TYPE_IMG
- en: The feature space plot above gives us the training accuracy of the classification
    tree as well as a scatterplot of two features and a linear decision boundary that
    can be used for separating the two classes.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to visualizing tree-based models dtreeviz is a powerful library
    that provides several useful visualization functions. I have only covered a few
    of the functions provided in this library and there are many additional features
    that you can read about in the [dtreeviz GitHub repository](https://github.com/parrt/dtreeviz).
    As usual, you can find all of the code for this article on [my GitHub](https://github.com/AmolMavuduru/DtreevizTutorial).
  prefs: []
  type: TYPE_NORMAL
- en: Join my Mailing List
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Join my [mailing list](https://mailchi.mp/e8dd82679724/amols-data-science-blog)
    to get updates on my data science content. You’ll also get my free **Step-By-Step
    Guide to Solving Machine Learning Problems** when you [sign up](https://mailchi.mp/e8dd82679724/amols-data-science-blog)!
    You can also follow me on [Twitter](https://twitter.com/amolmavuduru1) for content
    updates.
  prefs: []
  type: TYPE_NORMAL
- en: And while you’re at it, consider [joining the Medium community](https://amolmavuduru.medium.com/membership)
    to read articles from thousands of other writers as well.
  prefs: []
  type: TYPE_NORMAL
- en: Sources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Terence Parr, [dtreeviz: Decision Tree Visualization](https://github.com/parrt/dtreeviz),
    (2023), GitHub.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
