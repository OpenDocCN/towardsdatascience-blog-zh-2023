- en: 'Data Version Control for the Modern Data Scientist: 7 DVC Concepts You Can’t
    Ignore'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/data-version-control-for-the-modern-data-scientist-7-dvc-concepts-you-cant-ignore-bb2433ccec88](https://towardsdatascience.com/data-version-control-for-the-modern-data-scientist-7-dvc-concepts-you-cant-ignore-bb2433ccec88)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A deeply illustrated guide to an essential practice in data science
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/?source=post_page-----bb2433ccec88--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----bb2433ccec88--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bb2433ccec88--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bb2433ccec88--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----bb2433ccec88--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bb2433ccec88--------------------------------)
    ·11 min read·May 25, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d9bfb2bb06fd41ecd7191c98085578d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me with Midjourney.
  prefs: []
  type: TYPE_NORMAL
- en: May 31, 2020
  prefs: []
  type: TYPE_NORMAL
- en: What a beautiful day! There I was, listening to **Data Beats FM** in my car
    when this advertisement caught my attention.
  prefs: []
  type: TYPE_NORMAL
- en: Data scientists have envied software engineers for a loooong time. While pure
    software engineers, let’s playfully call them evil programming wizards, glide
    through code commits and branches with trusty Git, we often find ourselves grappling
    with monstrous datasets and ML models that leave Git gasping for air. But fear
    not, there comes DVC in shining armor…
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I cranked up the volume, with a curious expression on my face.
  prefs: []
  type: TYPE_NORMAL
- en: DVC, with its exceptional capabilities, is here to liberate tens of thousands
    of data scientists from the clutches of Git’s struggle with managing those massive
    files that seem to defy every attempt at efficient versioning (Git-LFS just plain
    sucked).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I was smiling at this point.
  prefs: []
  type: TYPE_NORMAL
- en: It is time to bid adieu to the days of frantically deleting and re-uploading
    data to avoid Git’s size limitations. With DVC, we can finally reclaim our sanity
    and confidently march forward in our data-driven endeavors.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You could’ve counted all my teeth.
  prefs: []
  type: TYPE_NORMAL
- en: Check it out for free at…
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I got into a tunnel and lost the signal. Almost swearing with joy, I pulled
    over as soon as the tunnel ended and pulled out the traveling MacBook. I punched
    DVC into the search bar and…
  prefs: []
  type: TYPE_NORMAL
- en: This was taken from an imaginary data scientist’s imaginary diary. The entry
    goes on for a while, raving about the delights of data version control with DVC
    and how it skillfully fixes the Git-sucking-at-large-files problem.
  prefs: []
  type: TYPE_NORMAL
- en: I decided to skip that part and show the rest, where our imaginary friend explains
    eight of the most important DVC concepts that no self-respecting data scientist
    can afford to ignore. I have to say, the explanations are wonderful :)
  prefs: []
  type: TYPE_NORMAL
- en: Let’s read on.
  prefs: []
  type: TYPE_NORMAL
- en: 0\. DVC as a version control system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DVC is not a version control system when you get into it. Instead, it mimics
    Git’s functionality for large files while operating as a metadata management tool
    that runs alongside Git.
  prefs: []
  type: TYPE_NORMAL
- en: Rather than directly attacking massive datasets and ML models (large assets),
    DVC generates metadata file placeholders for them. These lightweight files allow
    for pseudo-tracking of the assets when you begin tracking them with Git.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, let’s say you’ve just written a script to apply image augmentation,
    thereby increasing the number of samples in your image dataset.
  prefs: []
  type: TYPE_NORMAL
- en: As DVC has created a placeholder file for the folder containing your images,
    it promptly detects the operation and updates the metadata file accordingly. Subsequently,
    since Git was tracking that metadata file, it also recognizes the change.
  prefs: []
  type: TYPE_NORMAL
- en: In this way, modifications to large files can become part of your Git commits
    and history without causing Git to crash and burn.
  prefs: []
  type: TYPE_NORMAL
- en: More on this in a bit.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Tracked and untracked files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When [initializing DVC](https://dvc.org/doc/start) within a Git-tracked repository,
    the files can be categorized into three categories.
  prefs: []
  type: TYPE_NORMAL
- en: Category 0 comprises files that are solely tracked by Git using the `git add
    filename` command. DVC has nothing to do with them. Typically, they include source
    code files (`.py`, `.jl`, `.R`, etc.), configuration files (`.ini`, `.cfg`, `.yaml`,
    `.json`), documentation files (Markdown, READMEs, and other text formats), or
    test files.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/404acaa2c4f8c3fe0ec3e765c22ee939.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me
  prefs: []
  type: TYPE_NORMAL
- en: Category 1 encompasses files listed in the `.gitignore` file. These are the
    ones that are never, ever tracked by Git.
  prefs: []
  type: TYPE_NORMAL
- en: In category 2, we have DVC-tracked files, which are the results of using `dvc
    add asset` commands.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, let’s consider a model file named `tuned.joblib` and an image
    dataset stored within the `images` folder. Once you execute `dvc add images tuned.joblib`,
    both the file and the folder are placed under DVC-watch and added to the `.gitignore`
    file, preventing accidental Git tracking.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, two new files with the `.dvc` extension will be generated: `images.dvc`
    and `tuned.joblib.dvc`.'
  prefs: []
  type: TYPE_NORMAL
- en: These lightweight metadata files fall under category 0, which means you should
    track them with Git using the command `git add images.dvc tuned.joblib.dvc`.
  prefs: []
  type: TYPE_NORMAL
- en: Typical files found in category 2 include notebooks (which may contain visuals
    and tables, potentially resulting in large sizes), datasets (such as images, videos,
    audios, CSVs, parquets, databases, etc.), and ML models.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, in category 3, we have the optional `.dvcignore` files. Similar to `.gitignore`
    files, you can use them to specify files that DVC should never track.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. `.dvc` files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`.dvc` files use [the YAML 1.2](https://yaml.org/) file format, which is a
    human-friendly data serialization format for all programming languages.'
  prefs: []
  type: TYPE_NORMAL
- en: As I mention above, DVC creates one lightweight `.dvc` file for each file or
    folder tracked with DVC.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you take a peek inside the contents of `images.dvc`, you will see the
    following entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/41acd5ee7cce06f660540504b6ff2569.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me
  prefs: []
  type: TYPE_NORMAL
- en: The most interesting part is `md5`. MD5 is a popular hashing function. It takes
    a file of arbitrary size and uses its contents to produce a string of characters
    of fixed length (32 characters in our case).
  prefs: []
  type: TYPE_NORMAL
- en: These characters can seem random, but they will always be the same if you rerun
    the hashing function on the file however many times. But, even if a single bit
    is changed in the file, the resulting hash will be completely different.
  prefs: []
  type: TYPE_NORMAL
- en: DVC uses these hashes (also called checksums) to differentiate whether two files
    are identical, completely different, or different versions of the same file.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if I add a new fake image to the `images` folder, the resulting
    MD5 hash inside `images.dvc` will be different:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/23f63ec01421bf9630a25cb9216aa746.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned earlier, you should track all `.dvc` files with Git so that modifications
    to large assets become a part of your Git commits and history.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Find out more about how `.dvc` files work from [this page](https://dvc.org/doc/user-guide/project-structure/dvc-files)
    of the DVC user guide.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. DVC cache
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you call `dvc add` on a large asset, it gets copied into a special directory
    called DVC cache, located under `.dvc/cache`.
  prefs: []
  type: TYPE_NORMAL
- en: The cache is the place where DVC keeps a pristine record of your data and models
    at different versions. The `.dvc` files in the current working directory may be
    showing the latest or some other version of the large assets, but the cache will
    include all the different states the assets have been in since you started tracking
    them with DVC.
  prefs: []
  type: TYPE_NORMAL
- en: For example, let’s say you added a 1 GB `data.csv` file to DVC. By default,
    the file will be both in your workspace and inside the `.dvc/cache` folder, taking
    up twice as much space (2 GB).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/af6f81847ed67dca42eb897fbe116bff.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me
  prefs: []
  type: TYPE_NORMAL
- en: Any subsequent changes tracked with `dvc add data.csv` will create a new version
    of `data.csv` with a new hash inside `.dvc/cache`, taking up another gigabyte
    of memory.
  prefs: []
  type: TYPE_NORMAL
- en: So, you might already be asking — isn’t this highly inefficient? And the answer
    would be yes! At least, for single files, but we will see methods to mitigate
    this problem in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: As for folders, it is a bit different.
  prefs: []
  type: TYPE_NORMAL
- en: When you track different versions of folders with `dvc add dirname`, DVC is
    smart enough to detect only the files that changed within that directory. This
    means that unless you update every single file in the directory, DVC will cache
    only the versions of the changed files, which won't take up much space.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, think of DVC cache as a counterpart to [Git’s staging area](https://medium.com/towards-data-science/git-for-the-modern-data-scientist-9-git-concepts-you-cant-ignore-b4eaf7a154c2#:~:text=a%20commit.-,3.%20Staging%20area,-By%20talking%20about).
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about the cache and internal DVC files from [this user guide section](https://dvc.org/doc/user-guide/project-structure/internal-files).
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Caching strategies in DVC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are three caching strategies in DVC.
  prefs: []
  type: TYPE_NORMAL
- en: We have already seen strategy 0, which simply copies tracked files into the
    cache. This is the safest and always available option, even though it is slow
    and memory-inefficient. But it allows you to edit the tracked files in-place as
    they are physically available in your workspace.
  prefs: []
  type: TYPE_NORMAL
- en: In strategy 1, DVC uses hard links to link large assets in the cache to your
    workspace without duplicating them. Think of hard links as identical twins of
    the tracked files.
  prefs: []
  type: TYPE_NORMAL
- en: It is like having multiple doors to the same room, but it is still the same
    space. Each door (or link) provides access to the room (or file) without duplicating
    its contents.
  prefs: []
  type: TYPE_NORMAL
- en: The second strategy, creating soft links, is exactly like hard links. But, soft
    links work better if your repository and DVC cache are located on different file
    systems or drives, while hard links are the best when they are on the same partition
    or storage device.
  prefs: []
  type: TYPE_NORMAL
- en: The downside of both hard and soft links is that you can’t edit them in-place
    as it will lead to cache corruption. To protect you from editing, DVC limits the
    permissions of these files to read-only.
  prefs: []
  type: TYPE_NORMAL
- en: The final third strategy is reflinks. They are the best and most efficient but
    only available in the most recent file systems. For example, it isn’t even available
    on my [WSL2](https://medium.com/towards-data-science/how-to-create-perfect-machine-learning-development-environment-with-wsl2-on-windows-10-11-2c80f8ea1f31),
    so DVC never uses this strategy on its own.
  prefs: []
  type: TYPE_NORMAL
- en: But when it is available, reflinks bring all the benefits of the rest. The tracked
    files are physically in the cache, but they are linked to the workspace as though
    they are duplicates. If you want to edit these files in-place, the file system
    will just copy the original file from the cache into the workspace for the duration
    of your edit.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4d284c15718598d91b03fd9e67ad907a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image taken from DVC docs. Apache-2.0 license.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default strategy is `copy` when you initialize DVC. To change it, you can
    run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Learn more about the differences between caching strategies and how to disable
    the *uneditable* downside of hard/soft links from [here](https://dvc.org/doc/user-guide/data-management/large-dataset-optimization)
    and [here](https://dvc.org/doc/user-guide/how-to/update-tracked-data).
  prefs: []
  type: TYPE_NORMAL
- en: 5\. DVC workflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The general idea of data version control is to include the changes made to large
    files in your Git commits and branches without hitting Git’s size limit. We have
    mentioned that DVC achieves this by creating small `.dvc` placeholders that change
    whenever you update DVC-tracked large files.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f89f7879643b60cfdb86eef6289b69b1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me
  prefs: []
  type: TYPE_NORMAL
- en: 'So, the basic workflow is this:'
  prefs: []
  type: TYPE_NORMAL
- en: You start tracking large assets with `dvc add large_assets`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: DVC adds the asset to `.gitignore` so it isn't visible to Git while also creating
    `large_assets.dvc` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You add this `large_assets.dvc` files to Git with `git add large_assets.dvc`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/49c3d7aff182f517fa3dae20a6aa125b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me
  prefs: []
  type: TYPE_NORMAL
- en: 'If you changed other files, say `train.py`, you add that change as well: `git
    add train.py` or you simply use `git add --all` to capture all changes visible
    to Git.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You make a commit with `git commit -m "Message"`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This way, you document both your code changes and large asset changes in your
    Git history. If you switch branches or commits with `git checkout branch_name/commit_hash`,
    DVC must show you the versions of your large assets for those specific commits
    or branches. To do this, you must call `dvc checkout` after `git checkout`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The command will fetch the version of your DVC assets from the cache using the
    `.dvc` files and the MD5 hashes within.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. DVC remote
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Git uses hosting platforms like GitHub to store your code repositories online
    so that others can collaborate on your project. But just like Git can’t handle
    your large assets, neither can GitHub. So, DVC solves this by having its own remote
    storage.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/91eaab05aab40c5141235faf3c0d796b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me
  prefs: []
  type: TYPE_NORMAL
- en: This remote storage, separate from the cache, can be on the same machine as
    your repository or on any cloud provider. DVC supports all the major ones, including
    AWS, GCP, and Azure. Similar to how you frequently push your Git commits to GitHub,
    you should use `dvc push` to send the assets in your DVC cache to the remote to
    keep it up-to-date.
  prefs: []
  type: TYPE_NORMAL
- en: Your chosen remote will be stated in your DVC configuration file, `.dvc/config`.
    When a person clones or forks your GitHub repository, they will get this config
    file along with `.dvc` placeholder files, but their DVC cache will be empty. So,
    they will use `dvc pull` to download all the large assets and their versions from
    the remote into their cache and the workspace.
  prefs: []
  type: TYPE_NORMAL
- en: That is the workflow to collaborate on DVC-enabled repositories.
  prefs: []
  type: TYPE_NORMAL
- en: The [DVC user guide on remotes](https://dvc.org/doc/start/data-management/data-versioning#storing-and-sharing)
    shows you the setup code.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. DVC pipelines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the best features of DVC is smart pipelines. A typical machine learning
    project consists of many steps like gathering data, cleaning and transforming
    it, choosing a model, tuning the chosen model, and finally deploying it. Each
    of these steps can consume and produce different assets like datasets, models,
    metrics, plots, docker images, etc.
  prefs: []
  type: TYPE_NORMAL
- en: The aim of DVC pipelines is to run all these steps in succession using a single
    command, `dvc repro`, which is short for *DVC reproduce*, and let DVC handle all
    the combination of assets under the hood. Sounds pretty awesome, right?
  prefs: []
  type: TYPE_NORMAL
- en: 'I won’t go into much detail about how to set up these pipelines because in
    the past, a certain author already did that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://pub.towardsai.net/how-to-create-highly-organized-ml-projects-anyone-can-reproduce-with-dvc-pipelines-fc3ac7867d16?source=post_page-----bb2433ccec88--------------------------------)
    [## How To Create Highly-Organized ML Projects Anyone Can Reproduce With DVC Pipelines'
  prefs: []
  type: TYPE_NORMAL
- en: Edit description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pub.towardsai.net](https://pub.towardsai.net/how-to-create-highly-organized-ml-projects-anyone-can-reproduce-with-dvc-pipelines-fc3ac7867d16?source=post_page-----bb2433ccec88--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: But I think it will be enough to pique your interest that when you call `dvc
    repro`, DVC eliminates the need to call `dvc add` on half a dozen assets any time
    you run your pipeline. I highly recommend reading the article.
  prefs: []
  type: TYPE_NORMAL
- en: Or you can also read the [excellent user guide on pipelines](https://dvc.org/doc/user-guide/pipelines).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I am going to wrap up this diary entry with a lot of hope for this library.
    It is only 2020 and the library version is 1.0.0, but I predict that sometime
    in 2023, just an arbitrary year came to mind, its [v3.0.0](https://github.com/iterative/dvc/releases/tag/3.0.0a0)
    will come with a lot of new features and enhancements.
  prefs: []
  type: TYPE_NORMAL
- en: I guess they will also add a feature to track [machine learning experiments](https://medium.com/towards-artificial-intelligence/how-to-track-ml-experiments-with-dvc-inside-vscode-to-boost-your-productivity-a654ace60bab)
    in the near future (possibly this November), but that’s just wishful thinking.
  prefs: []
  type: TYPE_NORMAL
- en: What a good day.
  prefs: []
  type: TYPE_NORMAL
- en: Loved this article and, let’s face it, its bizarre writing style? Imagine having
    access to dozens more just like it, all written by a brilliant, charming, witty
    author (that’s me, by the way :).
  prefs: []
  type: TYPE_NORMAL
- en: For only 4.99$ membership, you will get access to not just my stories, but a
    treasure trove of knowledge from the best and brightest minds on Medium. And if
    you use [my referral link](https://ibexorigin.medium.com/membership), you will
    earn my **supernova of gratitude** and a virtual high-five for supporting my work.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----bb2433ccec88--------------------------------)
    [## Join Medium with my referral link — Bex T.'
  prefs: []
  type: TYPE_NORMAL
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----bb2433ccec88--------------------------------)
    ![](../Images/a01b5e4fb641db5f35b8172a4388e821.png)
  prefs: []
  type: TYPE_NORMAL
- en: Image by me. Via Midjourney.
  prefs: []
  type: TYPE_NORMAL
- en: 'References:'
  prefs: []
  type: TYPE_NORMAL
- en: '[1] RealPython, [Data Version Control With Python and DVC](https://realpython.com/python-data-version-control/),
    2020, realpython.com'
  prefs: []
  type: TYPE_NORMAL
