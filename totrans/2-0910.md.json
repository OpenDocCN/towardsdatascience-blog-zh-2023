["```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\nsns.set_style('darkgrid')\ny = np.linspace(0, 100, 100)\nplt.plot(y)\nplt.show()\n```", "```py\ny_train = y[:80]\nfuture_y = y[80:]\nfuture_trend = future_y\n```", "```py\npip install TSUtilities\n```", "```py\nfrom TSUtilities.TSTrend.trend_dampen import TrendDampen\n```", "```py\ndampener = TrendDampen(damp_factor=.7,\n                       damp_style='smooth')\ndampened_trend = dampener.dampen(future_trend)\n```", "```py\ntrend = y_train\nseasonality = np.zeros(len(y_train))\n```", "```py\ndampener = TrendDampen(damp_factor='auto',\n                       damp_style='smooth')\ndampened_trend = dampener.dampen(future_trend,\n                                 y=y_train,\n                                 trend_component=trend,\n                                 seasonality_component=seasonality)\nplt.plot(future_trend, color='black', alpha=.5,label='Actual Trend', linestyle='dotted')\nplt.plot(dampened_trend, label='Damped Trend', alpha=.7)\nplt.legend()\nplt.show()\n```", "```py\nfor damp_factor in [.1, .3, .5, .7, .9, 'auto']:\n    dampener = TrendDampen(damp_factor=damp_factor,\n                           damp_style='smooth')\n    dampened_trend = dampener.dampen(future_trend,\n                                     y=y_train,\n                                     trend_component=trend,\n                                     seasonality_component=seasonality)\n    plt.plot(dampened_trend, label=damp_factor, alpha=.7)\n\nplt.plot(future_trend, color='black', alpha=.5,label='Actual Trend', linestyle='dotted')\nplt.legend()\nplt.show()\n```", "```py\ndef dampen_prophet(y, fit_df, forecast_df):\n    \"\"\"\n    A function that takes in the forecasted dataframe output of Prophet and\n    constrains the trend based on it's percieved strength'\n\n    Parameters\n    ----------\n    y : pd.Series\n        The single time series of actuals that are fitted with Prophet.\n    fit_df : pd.DataFrame\n        The Fitted DataFrame from Prophet.\n    forecast_df : pd.DataFrame\n        The future forecast dataframe from prophet which includes the predicted trend.\n\n    Returns\n    -------\n    forecasts_damped : np.array\n        The damped trend forecast.\n\n    \"\"\"\n    predictions = forecast_df.tail(len(forecast_df) - len(fit_df))\n    predicted_trend = predictions['trend'].values\n    trend_component = fit_df['trend'].values\n    if 'multiplicative_terms' in forecast_df.columns:\n        seasonality_component = fit_df['trend'].values * \\\n                                fit_df['multiplicative_terms'].values\n        dampener = TrendDampen(damp_factor='auto',\n                                damp_style='smooth')\n        dampened_trend = dampener.dampen(predicted_trend,\n                                         y=y,\n                                         trend_component=trend_component,\n                                         seasonality_component=seasonality_component)\n        forecasts_damped = predictions['additive_terms'].values + \\\n                           dampened_trend + \\\n                           (dampened_trend * \\\n                           predictions['multiplicative_terms'].values)\n    else:\n        seasonality_component = fit_df['additive_terms'].values\n        dampener = TrendDampen(damp_factor='auto',\n                                damp_style='smooth')\n        dampened_trend = dampener.dampen(predicted_trend,\n                                         y=y,\n                                         trend_component=trend_component,\n                                         seasonality_component=seasonality_component)\n        forecasts_damped = predictions['additive_terms'].values + dampened_trend\n    return forecasts_damped\n```", "```py\nfrom TSUtilities.functions import dampen_prophet\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom tqdm import tqdm\nimport pandas as pd\nfrom prophet import Prophet\nimport seaborn as sns\nsns.set_style('darkgrid')\n\ntrain_df = pd.read_csv(r'm4-weekly-train.csv')\ntest_df = pd.read_csv(r'm4-weekly-test.csv')\ntrain_df.index = train_df['V1']\ntrain_df = train_df.drop('V1', axis = 1)\ntest_df.index = test_df['V1']\ntest_df = test_df.drop('V1', axis = 1)\n```", "```py\ndef smape(A, F):\n    return 100/len(A) * np.sum(2 * np.abs(F - A) / (np.abs(A) + np.abs(F)))\n```", "```py\nseasonality = 52\nno_damp_smapes = []\ndamp_smapes = []\nnaive_smape = []\nj = tqdm(range(len(train_df)))\nfor row in j:\n    y = train_df.iloc[row, :].dropna()\n    y = y.iloc[-(3*seasonality):]\n    y_test = test_df.iloc[row, :].dropna()\n    #create a random datetime index to pass to Prophet\n    ds = pd.date_range(start='01-01-2000',\n                       periods=len(y) + len(y_test),\n                       freq='W')\n    ts = y.to_frame()\n    ts.columns = ['y']\n    ts['ds'] = ds[:len(y)]\n    j.set_description(f'{np.mean(no_damp_smapes)}, {np.mean(damp_smapes)}')\n    prophet = Prophet()\n    prophet.fit(ts)\n    fitted = prophet.predict()\n\n    # create a future data frame\n    future = prophet.make_future_dataframe(freq='W',periods=len(y_test))\n    forecast = prophet.predict(future)\n\n    #get predictions and required data inputs for auto-damping\n    predictions = forecast.tail(len(y_test))\n    predicted_trend = predictions['trend'].values\n    trend_component = fitted['trend'].values\n    seasonality_component = fitted['additive_terms'].values\n    forecasts_no_dampen = predictions['yhat'].values\n    forecasts_damped = dampen_prophet(y=y.values,\n                                      fit_df=fitted,\n                                      forecast_df=forecast)\n\n    #append smape for each method\n    no_damp_smapes.append(smape(y_test.values, forecasts_no_dampen))\n    damp_smapes.append(smape(y_test.values, forecasts_damped))\n    naive_smape.append(smape(y_test.values, np.tile(y.iloc[-1], len(y_test))))\nprint(f'Standard Prophet {np.mean(no_damp_smapes)}')\nprint(f'Damped Prophet {np.mean(damp_smapes)}')\nprint(f'Naive {np.mean(naive_smape)}')\n```"]