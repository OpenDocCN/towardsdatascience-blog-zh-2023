- en: Don’t Forget That Python Is Dynamic!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 别忘了 Python 是动态的！
- en: 原文：[https://towardsdatascience.com/dont-forget-that-python-is-dynamic-e298e2a30118](https://towardsdatascience.com/dont-forget-that-python-is-dynamic-e298e2a30118)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/dont-forget-that-python-is-dynamic-e298e2a30118](https://towardsdatascience.com/dont-forget-that-python-is-dynamic-e298e2a30118)
- en: PYTHON PROGRAMMING
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON 编程
- en: More and more static and dynamic checks… Is it where we want Python to head?
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 越来越多的静态和动态检查……这是我们希望 Python 发展的方向吗？
- en: '[](https://medium.com/@nyggus?source=post_page-----e298e2a30118--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----e298e2a30118--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e298e2a30118--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e298e2a30118--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----e298e2a30118--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus?source=post_page-----e298e2a30118--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----e298e2a30118--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e298e2a30118--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e298e2a30118--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----e298e2a30118--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e298e2a30118--------------------------------)
    ·8 min read·Jun 13, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e298e2a30118--------------------------------)
    ·8 分钟阅读·2023年6月13日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/6da0e0a508c5e05c453414dadb108c73.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6da0e0a508c5e05c453414dadb108c73.png)'
- en: Where does Python head to? Photo by [Jamie Templeton](https://unsplash.com/@jamietempleton?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python 将走向何方？照片由 [Jamie Templeton](https://unsplash.com/@jamietempleton?utm_source=medium&utm_medium=referral)
    拍摄，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Python is a dynamic language. Over recent years, however, more and more focus
    has been paid to static type checking. This, in turn, leads to an increased interest
    in runtime type checking. How far will we go with that? In this article, we will
    recall why Python was, not that long ago, considered a powerful dynamically typed
    programming language.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种动态语言。然而，近年来，越来越多的关注被放在了静态类型检查上。这反过来导致了对运行时类型检查的兴趣增加。我们将走多远呢？在这篇文章中，我们将回顾为什么
    Python 曾经被认为是一个强大的动态类型编程语言。
- en: Is it still?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在仍然如此吗？
- en: 'Python’s strength has always lied in its simplicity, which, at least partially,
    resulted from dynamic typing, not only because we can write Python code in REPL,
    but also for the following reasons:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的优势一直在于其简洁性，这至少部分源于动态类型，不仅因为我们可以在 REPL 中编写 Python 代码，还因为以下原因：
- en: You can easily change a variable’s type throughout a program.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在整个程序中轻松地改变变量的类型。
- en: You do not have to define the type of a variable.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不需要定义变量的类型。
- en: The code is (or can be) easy to read and understand.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码（或可以）易于阅读和理解。
- en: Sometimes, you can use a couple of lines of code in order to implement even
    quite a complex algorithm. A statically typed language usually needs much more
    — or at least more — lines of code.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时，你可以用几行代码实现即使是相当复杂的算法。而静态类型语言通常需要更多的——或者至少更多的——代码行数。
- en: 'Sure, dynamic typing does not come without cost. The first one is decreased
    performance, something we all know. This decrease comes from the fact that types
    — which aren’t declared — have to be checked at runtime (it’s done by Python).
    Another cost is the increased risk of runtime errors: since types are not checked
    at compile time but at runtime, related errors are thrown during program execution
    instead of during compiling.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，动态类型也有其代价。第一个是性能下降，这是我们都知道的。性能下降的原因在于，类型——这些类型没有被声明——必须在运行时进行检查（由 Python
    完成）。另一个代价是运行时错误的风险增加：由于类型不是在编译时检查，而是在运行时检查，相关错误会在程序执行期间抛出，而不是在编译期间。
- en: 'We need to remember that Python offers a set of tools to handle its decreased
    performance:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要记住，Python 提供了一系列工具来处理其性能下降的问题：
- en: '[](https://medium.com/pythoniq/the-speed-of-python-it-aint-that-bad-9f703dd2924e?source=post_page-----e298e2a30118--------------------------------)
    [## The Speed of Python: It Ain’t That Bad!'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/pythoniq/the-speed-of-python-it-aint-that-bad-9f703dd2924e?source=post_page-----e298e2a30118--------------------------------)
    [## Python 的速度：并没有那么糟糕！'
- en: I hear all the time that Python is way too slow. Is it?
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我总是听到 Python 非常慢。真的是这样吗？
- en: medium.com](https://medium.com/pythoniq/the-speed-of-python-it-aint-that-bad-9f703dd2924e?source=post_page-----e298e2a30118--------------------------------)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/pythoniq/the-speed-of-python-it-aint-that-bad-9f703dd2924e?source=post_page-----e298e2a30118--------------------------------)'
- en: For years, Pythonistas were both proud and happy that Python was a dynamically
    typed language. Sure, those who did not like Python claimed it was a bad language…
    What can I say? Everyone can think whatever they want to; programming is a free
    universe.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，Python 爱好者为 Python 是一种动态类型语言而感到自豪和高兴。当然，那些不喜欢 Python 的人声称它是一种糟糕的语言……我还能说什么呢？每个人都可以有自己的看法；编程是一个自由的世界。
- en: Programming is a free universe.
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 编程是一个自由的世界。
- en: 'For some time, however, Python has been moving towards the static side of programming.
    The most important aspect of this movement is type hints. Sure, they are optional,
    but most big projects written these days do implement type hints. You will more
    often hear that in a serious project you must hint types than that you don’t have
    to — not to mention that you shouldn’t. Be prepared to hear something like this:
    “Sure, type hints are optional, so for prototypes and short scripts you don’t
    need to use them, but for big projects — well, there is no other option than to
    hint types.” I’ve heard it not once and not twice.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最近一段时间，Python 正在向编程的静态方面发展。这一变化的最重要方面是类型提示。虽然它们是可选的，但现在大多数大型项目都实现了类型提示。你会更常听到在一个严肃的项目中你必须提示类型，而不是你不必这样做——更不用说你不应该这样做。准备好听到这样的说法：“当然，类型提示是可选的，因此对于原型和短脚本，你不需要使用它们，但对于大型项目——嗯，唯一的选择就是提示类型。”我听到过不止一次，也不止两次。
- en: 'This whole situation begs the following question: Do we indeed need all those
    type hints, static type checkers, and runtime type checkers?'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个情况引发了以下问题：我们真的需要所有这些类型提示、静态类型检查器和运行时类型检查器吗？
- en: I am not going to respond to this question. This is mainly because I am far
    from being one of those people who think they know everything about… well, about
    everything, or almost everything. But I hope to invite you to think about this
    yourself.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会对这个问题做出回应。这主要是因为我远不是那些自以为知道一切的人……嗯，几乎知道一切的人。但我希望邀请你自己思考这个问题。
- en: 'I will, however, remind you — and myself — that Python’s dynamic typing, also
    called [*duck typing*](https://en.wikipedia.org/wiki/Duck_typing), lies behind
    the success of this language. Below is the popular explanation of how duck typing
    works:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，我会提醒你——也提醒我自己——Python 的动态类型，也被称为 [*鸭子类型*](https://en.wikipedia.org/wiki/Duck_typing)，是这个语言成功的基础。以下是关于鸭子类型如何工作的流行解释：
- en: If it walks like a duck and it quacks like a duck, then it must be a duck.
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果它走起来像鸭子，叫起来也像鸭子，那它一定是一只鸭子。
- en: 'Duck typing can be very powerful *without* type hints and runtime type checking.
    I will show you this on very simple examples, and without further ado, let’s jump
    into this simple example:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Duck typing 在没有类型提示和运行时类型检查的情况下也可以非常强大。我将通过非常简单的示例向你展示这一点，不再赘述，让我们直接跳入这个简单的示例：
- en: '![](../Images/0b3388548021ed87f0f02651486867ca.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0b3388548021ed87f0f02651486867ca.png)'
- en: Catching errors by runtime type checking. Image by author
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行时类型检查捕捉错误。图片由作者提供
- en: 'Here, we’re checking types of `x` and `y`, and both should be strings (`str`).
    Note that this way, we’re sort of checking whether what we provide to the `str.join()`
    method is `tuple[str, str]`. Certainly, we don’t have to check if this method
    gets a tuple, since we’re creating it ourselves; enough to check the types of
    `x` and `y`. When either of them is not a string, the function will raise `TypeError`
    with a simple message: `"Provide a string!"`.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们检查 `x` 和 `y` 的类型，它们都应该是字符串（`str`）。注意，这样我们有点在检查我们提供给 `str.join()` 方法的内容是否是
    `tuple[str, str]`。当然，我们不必检查这个方法是否得到了一个元组，因为我们是自己创建的；只需检查 `x` 和 `y` 的类型。当其中任何一个不是字符串时，函数将抛出
    `TypeError` 并带有简单的消息：“`提供一个字符串！`”。
- en: 'Great, isn’t it? We’re safe that the function will be run only on values of
    correct types. If not, we will see a customized message. We could also use a custom
    error:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒，对吧？我们可以确保函数仅在正确类型的值上运行。如果不符合，我们会看到自定义的消息。我们也可以使用自定义错误：
- en: '[](/should-we-use-custom-exceptions-in-python-b4b4bca474ac?source=post_page-----e298e2a30118--------------------------------)
    [## Should we use custom exceptions in Python?'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/should-we-use-custom-exceptions-in-python-b4b4bca474ac?source=post_page-----e298e2a30118--------------------------------)
    [## 我们是否应该在 Python 中使用自定义异常？'
- en: Python has so many built-in exceptions that we rarely need to create and use
    custom ones. Or do we?
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 有这么多内置异常，我们很少需要创建和使用自定义异常。或者说我们需要吗？
- en: towardsdatascience.com](/should-we-use-custom-exceptions-in-python-b4b4bca474ac?source=post_page-----e298e2a30118--------------------------------)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/should-we-use-custom-exceptions-in-python-b4b4bca474ac?source=post_page-----e298e2a30118--------------------------------)'
- en: 'Now, let’s remove the type check and see how the function works:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们移除类型检查，看看函数的表现：
- en: '![](../Images/c4331b5e7ca686bf1c1a01b4743d808d.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c4331b5e7ca686bf1c1a01b4743d808d.png)'
- en: Catching errors without runtime type checking; the message is not custom by
    built-in. Image by author
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 捕捉没有运行时类型检查的错误；消息不是内置的。图片来源于作者
- en: Ha. It seems to be working in quite a similar way… I mean, an exception is raised
    basically in the same place, so we’re not risking anything. So…
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 哈，看起来确实以非常相似的方式工作……我的意思是，异常基本上在同一个地方被引发，所以我们没有冒任何风险。那么……
- en: Indeed, here the function `foo_no_check()` uses duck typing, which uses a concept
    of implicit types. In this very example, the `str.join()` method assumes it takes
    a tuple of strings, so both `x` and `y` have to be strings, and if they aren’t,
    the implicit type for `tuple[str, str]` has not been implemented. Hence the error.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，这里函数 `foo_no_check()` 使用了鸭子类型，它使用了一种隐式类型的概念。在这个例子中，`str.join()` 方法假设它接受一个字符串元组，因此
    `x` 和 `y` 必须是字符串，如果不是，隐式类型 `tuple[str, str]` 就没有被实现。因此出现了错误。
- en: 'You could say: “But hey! Look at the message! Before, we could use a custom
    message, and now we can’t!”'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会说：“但是嘿！看看消息！之前我们可以使用自定义消息，现在却不能了！”
- en: 'Can’t we indeed? Look:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真的不能吗？看看：
- en: '![](../Images/0e0e7dc4bcf49c5b4344d51969cfbe95.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0e0e7dc4bcf49c5b4344d51969cfbe95.png)'
- en: Catching errors without runtime type checking; the error message is customized.
    Image by author
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 捕捉没有运行时类型检查的错误；错误消息已自定义。图片来源于作者
- en: 'We can now see both messages: the built-in (`sequence item 1: expected str
    instance, in found`) and custom (`Provide string!`).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '我们现在可以看到两条消息：内置的（`sequence item 1: expected str instance, in found`）和自定义的（`提供字符串！`）。'
- en: Performance
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能
- en: 'You could ask: What’s the difference? So, I check types. What’s the problem?'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问：有什么区别？所以，我检查类型。有什么问题吗？
- en: 'Well, there *is* quite a difference: performance. Let’s benchmark the three
    versions of the function, using the `[perftester](https://github.com/nyggus/perftester)`
    package:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，确实有很大的区别：性能。让我们使用 `[perftester](https://github.com/nyggus/perftester)` 包来基准测试这三个版本的函数：
- en: '[](/benchmarking-python-functions-the-easy-way-perftester-77f75596bc81?source=post_page-----e298e2a30118--------------------------------)
    [## Benchmarking Python Functions the Easy Way: perftester'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/benchmarking-python-functions-the-easy-way-perftester-77f75596bc81?source=post_page-----e298e2a30118--------------------------------)
    [## 轻松基准测试 Python 函数：perftester'
- en: You can use perftester to benchmark Python functions the easy way
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你可以使用 perftester 来轻松地对 Python 函数进行基准测试
- en: towardsdatascience.com](/benchmarking-python-functions-the-easy-way-perftester-77f75596bc81?source=post_page-----e298e2a30118--------------------------------)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/benchmarking-python-functions-the-easy-way-perftester-77f75596bc81?source=post_page-----e298e2a30118--------------------------------)'
- en: 'Here are the benchmarks:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是基准测试结果：
- en: '![](../Images/7d410dbd2e1d304175c37f2558161f8f.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7d410dbd2e1d304175c37f2558161f8f.png)'
- en: Benchmarks performed using the perftester package. Image by author
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 perftester 包进行的基准测试。图片来源于作者
- en: For all benchmarks in this article, I used Python 3.11 on a Windows 10 machine,
    in WSL 1, 32GM of RAM and four physical (eight logical) cores.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文所有的基准测试中，我使用的是 Windows 10 机器上的 Python 3.11，WSL 1，32GB 内存和四个物理（八个逻辑）核心。
- en: In the second line, I set the default number of experiments to 10, and inside
    each run, each function it to be run a hundred million times. We take the best
    out of the ten runs, and report the mean time in seconds.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二行，我将默认实验次数设置为 10，在每次运行中，每个函数都要执行一亿次。我们从十次运行中取最好的一次，并报告平均时间（秒）。
- en: The `foo()` function, so the one with the runtime type checks, is significantly
    slower than the other two. The `foo_no_check()` function is the fastest, although
    `foo_no_check_tryexcept()` is only a little slower.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`foo()` 函数，即具有运行时类型检查的那个，明显比其他两个要慢。`foo_no_check()` 函数是最快的，尽管 `foo_no_check_tryexcept()`
    仅稍慢一点。'
- en: Conclusion? Runtime type checks are expensive.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 结论？运行时类型检查是昂贵的。
- en: 'You could say: “What? Are you kidding me? Expensive? It’s just a minor part
    of a second! Not even a microsecond!”'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会说：“什么？你在开玩笑吗？昂贵？这只是小于一秒的微小部分！甚至不到一微秒！”
- en: Indeed. It’s not much. But this is a very simple function with only two checks.
    Now imagine a big code base, with many classes, methods and functions — and a
    looooot of runtime type checks. Sometimes, this may mean a significant decrease
    in performance.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 确实。这并不多。但这是一个只有两个检查的非常简单的函数。现在想象一个庞大的代码库，有许多类、方法和函数——以及大量的运行时类型检查。有时候，这可能会显著降低性能。
- en: Runtime type checks are expensive.
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 运行时类型检查是昂贵的。
- en: Conclusion
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: When reading about duck typing, you will usually see examples with cats that
    meow, and dogs that don’t, and cows that moo. When you hear an animal meowing,
    it’s neither a dog nor a cow, it’s a cat. But not a tiger. I decided to use an
    atypical example, and I hope it was clear enough for you to see the strengths
    of duck typing.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读关于鸭子类型时，你通常会看到猫会喵、狗不会、牛会哞的例子。当你听到一种动物在喵的时候，它既不是狗也不是牛，而是一只猫。但不是老虎。我决定使用一个不寻常的例子，希望它足够清晰，让你看到鸭子类型的优势。
- en: As you see, Python exception handling does a great job in runtime type checking.
    You can help it by adding additional type checks when needed, but always remember
    that they will add some overhead time.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Python 异常处理在运行时类型检查方面做得很出色。你可以通过在需要时添加额外的类型检查来帮助它，但始终记住，它们会增加一些开销时间。
- en: Conclusion? Python has great exception-handling tools that work quite well.
    Oftentimes, we do not have to use runtime type checking at all. Sometimes, however,
    we may need to. When two types have similar interfaces, duck typing can fail.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 结论？Python 拥有很好的异常处理工具，效果非常好。很多时候，我们根本不需要使用运行时类型检查。然而，有时候我们可能需要。当两种类型具有相似的接口时，鸭子类型可能会失败。
- en: For instance, imagine you want to add two numbers (`x + y`), but the user provided
    two strings. This will *not* mean an error because you can add two strings. In
    such instances, you may need to add a runtime type check, if you don’t want the
    program to continue with these incorrect values. Sooner or later it can break
    anyway, so the question is whether you want the program to continue until then
    or not. If yes, you may risk an exception will be raised much later, so adding
    a type check can actually help save time. In addition, raising the exception later
    in the program flow can mean difficulties in finding a true reason behind the
    error.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你想要加两个数字（`x + y`），但用户提供了两个字符串。这*不会*意味着出错，因为你可以加两个字符串。在这种情况下，你可能需要添加运行时类型检查，如果你不想让程序继续使用这些不正确的值。迟早它会破坏，因此问题是你是否希望程序继续运行到那时。如果是的话，你可能会冒着异常被稍晚引发的风险，所以添加类型检查实际上可以节省时间。此外，稍晚在程序流中引发异常可能会导致找到错误真正原因的困难。
- en: All in all, I do not want to tell you that runtime type checking should never
    be used. But oftentimes, such checks are added when they are not needed.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 总而言之，我并不是说运行时类型检查绝对不应该使用。但很多时候，这些检查是在不需要的时候被添加的。
- en: I hope I intrigued and inspired you. Today, this is all I wanted to achieve.
    Please share your thoughts in the comments. Tell us if you would or would not
    use runtime type checks in such simple situations.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望我激发了你的兴趣和灵感。今天，这就是我想要达到的目标。请在评论中分享你的想法。告诉我们你是否会在这样简单的情况下使用运行时类型检查。
- en: 'I haven’t discuss static checking and goose typing. I have written several
    articles static checking and type hints:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有讨论静态检查和鹅类型。我已经写了几篇关于静态检查和类型提示的文章：
- en: '[](https://betterprogramming.pub/pythons-type-hinting-friend-foe-or-just-a-headache-73c7849039c7?source=post_page-----e298e2a30118--------------------------------)
    [## Python’s Type Hinting: Friend, Foe, or Just a Headache?'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://betterprogramming.pub/pythons-type-hinting-friend-foe-or-just-a-headache-73c7849039c7?source=post_page-----e298e2a30118--------------------------------)
    [## Python 的类型提示：朋友、敌人还是单纯的头疼？'
- en: Type hinting’s popularity is increasing in the Python community. Where will
    this lead us? What can we do to use it…
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型提示在 Python 社区中的受欢迎程度正在上升。这将引领我们到哪里？我们可以做些什么来使用它…
- en: 'betterprogramming.pub](https://betterprogramming.pub/pythons-type-hinting-friend-foe-or-just-a-headache-73c7849039c7?source=post_page-----e298e2a30118--------------------------------)
    [](/python-type-hinting-duck-type-compatibility-and-consistent-with-72e8b348d8ac?source=post_page-----e298e2a30118--------------------------------)
    [## Python Type Hinting: Duck Type Compatibility and Consistent-With'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[betterprogramming.pub](https://betterprogramming.pub/pythons-type-hinting-friend-foe-or-just-a-headache-73c7849039c7?source=post_page-----e298e2a30118--------------------------------)
    [](/python-type-hinting-duck-type-compatibility-and-consistent-with-72e8b348d8ac?source=post_page-----e298e2a30118--------------------------------)
    [## Python 类型提示：鸭子类型兼容性和一致性'
- en: You don’t have to hint int when you’re hinting float, or namedtuple when you’re
    hinting tuple. Why?
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当你提示`float`时，不必同时提示`int`，提示`tuple`时也不必提示`namedtuple`。为什么？
- en: 'towardsdatascience.com](/python-type-hinting-duck-type-compatibility-and-consistent-with-72e8b348d8ac?source=post_page-----e298e2a30118--------------------------------)
    [](/python-type-hinting-from-type-aliases-to-type-variables-and-new-types-a4a9e0400b6b?source=post_page-----e298e2a30118--------------------------------)
    [## Python Type Hinting: From Type Aliases To Type Variables and New Types'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/python-type-hinting-duck-type-compatibility-and-consistent-with-72e8b348d8ac?source=post_page-----e298e2a30118--------------------------------)
    [](/python-type-hinting-from-type-aliases-to-type-variables-and-new-types-a4a9e0400b6b?source=post_page-----e298e2a30118--------------------------------)
    [## Python 类型提示：从类型别名到类型变量和新类型
- en: See type aliases, type variables and new types in action
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查看类型别名、类型变量和新类型的实际应用
- en: towardsdatascience.com](/python-type-hinting-from-type-aliases-to-type-variables-and-new-types-a4a9e0400b6b?source=post_page-----e298e2a30118--------------------------------)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/python-type-hinting-from-type-aliases-to-type-variables-and-new-types-a4a9e0400b6b?source=post_page-----e298e2a30118--------------------------------)
- en: I haven’t yet written about goose typing, but sooner or later, the time will
    come.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我还没有写过关于鹅类型的内容，但迟早会有那一天。
- en: 'Is Python still considered a powerful dynamically typed language? To be honest,
    I don’t know. So much focus in Python is on static and runtime checking that I’m
    afraid many have forgotten that the true power of Python lied in completely different
    things: its simplicity, readability — and yes, duck typing.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Python是否仍被认为是一种强大的动态类型语言？说实话，我不知道。Python中如此多的关注点都集中在静态和运行时检查上，我担心很多人已经忘记了Python真正的力量在于完全不同的东西：它的简单性、可读性——还有，*鸭子类型*。
- en: I have heard, however, experienced Pythonistas expressing their sadness that
    Python is not what it was not that long ago. Some of them decided to move from
    Python to other languages, claiming that “If I want to use a language in which
    I need to define types for variables, Python would be my last choice!” It makes
    plenty of sense. Statically typed languages can be much faster than Python — and
    still, they can be quite simple and readable, like Go. But Python… Python offers
    simple and powerful duck typing… Duck typing that many seem to forget.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我听说过一些经验丰富的Python爱好者表达他们对Python不再像以前那样的失望之情。他们中的一些人决定从Python转向其他语言，声称“如果我需要在变量上定义类型，Python会是我最后的选择！”这非常有道理。静态类型语言可以比Python快得多——而且它们仍然可以像Go那样相当简单和可读。但Python…
    Python提供了简单而强大的鸭子类型… 许多人似乎忘记了这种*鸭子类型*。
- en: I myself love both Python and Go. Go is statically typed, and it’s one of the
    things that make it visibly faster than Python. But hey, you know what? Go’s statically
    typed code is, for me, often much easier to read and understand than Python’s
    code with type hints!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我自己喜欢Python和Go。Go是静态类型的，这使它比Python明显更快。但你知道吗？对我来说，Go的静态类型代码往往比带有类型提示的Python代码更容易阅读和理解！
- en: When I see runtime checks all over the code, I feel tired and discouraged. It’s
    not what Python was created for. Yes, type hints can be quite helpful — but only
    when used right and when *not overused*. If overused, they can become quite a
    burden.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当我看到代码中到处都是运行时检查时，我感到疲惫和沮丧。这不是Python创建的初衷。是的，类型提示可以非常有用——但只有在正确使用并且*不过度使用*时才有效。如果使用过度，它们可能成为相当大的负担。
- en: When I see runtime checks all over the code, I feel tired and discouraged. It’s
    not what Python was created for.
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当我看到代码中到处都是运行时检查时，我感到疲惫和沮丧。这不是Python创建的初衷。
- en: 'Thanks for reading. If you enjoyed this article, you may also enjoy other articles
    I wrote; you will see them [here](https://medium.com/@nyggus). And if you want
    to join Medium, please use my referral link below:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。如果你喜欢这篇文章，你可能也会喜欢我写的其他文章；你可以在[这里](https://medium.com/@nyggus)看到它们。如果你想加入Medium，请使用下面的推荐链接：
- en: '[](https://medium.com/@nyggus/membership?source=post_page-----e298e2a30118--------------------------------)
    [## Join Medium with my referral link - Marcin Kozak'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus/membership?source=post_page-----e298e2a30118--------------------------------)
    [## 使用我的推荐链接加入Medium - Marcin Kozak'
- en: Read every story from Marcin Kozak (and thousands of other writers on Medium).
    Your membership fee directly supports…
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读Marcin Kozak（以及Medium上的其他成千上万的作家）的每一篇故事。你的会员费直接支持…
- en: medium.com](https://medium.com/@nyggus/membership?source=post_page-----e298e2a30118--------------------------------)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@nyggus/membership?source=post_page-----e298e2a30118--------------------------------)
