["```py\n**[PROMPT TEMPLATE #1 DOCUMENT SUMMARY]**\n\nAct like a research assistant in the field of <field_name>.\nI will give you a report titled <title_of_the_report> as input.\nPlease access the report through the following link <URL_of_the_report> using the online browsing feature.\nSummarize the report in less than <summary_wordcount> and add <number_of_quotes> from the authors.\nMake sure to pick precise quotes and list them as bullet points.\n\n##\n\nDesired format:\n\nTitle: <title_of_the_report> \nLink: <URL_of_the_report>\n\nSummary of the report based on the previous instructions.\n\n- Quote #1\n- Quote #2\n- Quote #3\n- etc.\n\n##\n\nInputs:\n\n<field_name> = Placeholder for the field of expertise of your document.\n<title_of_the_report> = Placeholder for the title of the report you want summarize.\n<URL_of_the_report> = Placeholder for web address where the report can be found.\n<summary_wordcount> = Placeholder for the maximum word count for the summary. \n<number_of_quotes> =  Placeholder for the number of quotes to be extracted from the report. \n```", "```py\n**[PROMPT TEMPLATE #2 PRODUCT DESCRIPTION]**\n\nAct like an expert copywriter.\n\n##\nRole:\nWrite a product description for an e-commerce shop.\nUse the following structure and fill in the details based on the placeholders provided:\n\nProduct Name: <product_name>\n\nIntroduction: Start with a captivating opening sentence about <product_name>, suitable for <target_audience>.\n\nKey Features: List the main features of <product_name>. Include <product_features>.\n\nBenefits: Explain how <product_name> benefits the user, addressing <target_audience> needs.\n\nCall to Action: Encourage the reader to make a purchase decision with a compelling call-to-action.\n\nSEO Keywords: Integrate <seo_keywords> naturally within the text for SEO purposes.\n\nTone: Maintain a <brand_tone> throughout the description to align with the brand's voice.\n\n##\n\nInputs:\n\n<product_name> = Placeholder for the name of the product.\n<product_features> = Placeholder for listing the specific features of the product.\n<target_audience> = Placeholder to specify the target audience or demographic for the product.\n<seo_keywords> = Placeholder for SEO-optimized keywords relevant to the product.\n<brand_tone> = Placeholder to define the brand's tone of voice to be reflected in the product description. \n```", "```py\n**[PROMPT TEMPLATE #3 PROGRAMMING ASSISTANT]**\n\nAct like a software engineer.\n\n##\nRole:\nYour role is to write a program in <programming_language>.\nYour program must follow these instructions: <user_instructions>.\nReason step by step to make sure you understand the user's instructions before you generate the code.\nEnsure the code is clear, well-commented, and adheres to best practices in <programming_language>.\n\n##\nFormat:\nGive a clear title to each code snippet you generate.\nFor example you can title the first snippet \"Snippet #1 version 1,\" the second snippet \"Snippet #2 version 1,\" and an updated version of the second snippet can be \"Snippet #2 version 2.\"\n\n##\nInputs:\n<programming_language> = Placeholder for the programming language in which you want the code to be written (e.g., Python, JavaScript).\n<user_instructions> = Placeholder for the specific instructions or description of the task you want to be turned into code.\n```", "```py\n # Objective: Carry out a sentiment analysis on a series of comments stored in an Excel file\n# LLM choice: We'll use OpenAI API to call the gpt-4 model\n\nimport pandas as pd         # version used 2.1.3\nfrom openai import OpenAI   # version used 1.2.0\n\n# Define the path to your API key file\nAPI_key_path = \"C:/Users/.....API_Key.txt\"  # Replace with your actual API key file path\n\n# Read the API key from the file\nwith open(API_key_path, 'r') as file:\n    API_key = file.read().strip()  # .strip() removes any leading/trailing whitespace\n\n# Create the OpenAI client object with the API key\nclient = OpenAI(api_key=API_key)\n\n# Define a function that analyzes sentiment in a series of comments stored in an Excel file\n\ndef analyze_sentiments(input_file):\n    # Read the input Excel file\n    inputs_df = pd.read_excel(input_file)\n\n    # Select the column by its name 'comments'\n    if 'comments' in inputs_df.columns:\n        comments = inputs_df['comments']\n    else:\n        raise ValueError(\"Column 'comments' not found in the input file\")\n\n    sentiments = []\n\n    for comment in comments:\n        # Prepare API call\n        messages = [\n            {\n                \"role\": \"system\",\n                \"content\": \"Analyze the sentiment of the following comment. Use a single word to describe the sentiment. Either `Positive` or `Negative`. Refrain from writing any extra text. Thanks!\",            },\n            {\n                \"role\": \"user\",\n                \"content\": comment,\n            }\n        ]\n        model = \"gpt-4\"\n        temperature = 1.0\n        max_tokens= 100 # Adjust based on expected response length\n\n        # Make the API call\n        chat_completion = client.chat.completions.create(\n            model=model,\n            temperature=temperature,\n            max_tokens= max_tokens,  \n            messages=messages\n        )\n\n        # Extract response\n        if chat_completion.choices:\n            sentiment_result = chat_completion.choices[0].message.content.strip()\n        else:\n            sentiment_result = \"No response\"\n\n        sentiments.append(sentiment_result)\n\n    # Combine comments with their sentiments\n    result_df = pd.DataFrame({\n        'Comment': comments,\n        'Sentiment': sentiments\n    })\n\n    # Write to a new Excel file\n    output_file = \"path_to_your_output_file.xlsx\"  # Replace with your desired output file path\n    result_df.to_excel(output_file, index=False)\n    print(\"Sentiment analysis complete. Results saved to\", output_file)\n\n# Example usage\ninput_file = \"path_to_your_input_file.xlsx\"  # Replace with your input file path\nanalyze_sentiments(input_file)\n\n# Homework exercice: Write a function that uses a dynamic prompt to write a different response based on the result of sentiment analysis.\n```"]