- en: Best Practices for Python Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/best-practices-for-python-development-bf74c2880f87](https://towardsdatascience.com/best-practices-for-python-development-bf74c2880f87)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Set up and use a professional Python repository
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@hrmnmichaels?source=post_page-----bf74c2880f87--------------------------------)[![Oliver
    S](../Images/b5ee0fa2d5fb115f62e2e9dfcb92afdd.png)](https://medium.com/@hrmnmichaels?source=post_page-----bf74c2880f87--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bf74c2880f87--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bf74c2880f87--------------------------------)
    [Oliver S](https://medium.com/@hrmnmichaels?source=post_page-----bf74c2880f87--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bf74c2880f87--------------------------------)
    ·8 min read·Feb 8, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/89bfd14b512226b92a7b815046f0d5c8.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
- en: Photo by [Christina @ wocintechchat.com](https://unsplash.com/@wocintechchat?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/EkeThvO9VfM?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this post is sharing best practises for Python development — in
    particular how to set up, use, and manage a Github repository, which adheres to
    professional industry standards. We will discuss useful tools to keep your code
    clean and bug-free, show how to set up the repository and include previously introduced
    tools for automated CI (continuous integration) checks — and finally put it all
    together in a sample project. Note I am not claiming this list is complete or
    the only possible way to do these things. However, I want to share my professional
    experience from working as a software engineer, and can confirm that many large
    software companies follow a similar pattern.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: With that said, let’s dive straight into the meaty part — I hope you find this
    useful! You can find full code for this post [here](https://github.com/hermanmichaels/python-sample)
    and follow along as we go.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Used Tools
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we’ll present tools used in this article.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: poetry
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Poetry is a neat tool to manage Python versions and dependencies. It makes it
    easy to control and fix a Python version, and manage dependencies in a central
    way. Of all the ways of doing this, I recommend poetry. I wrote a [lengthier introduction
    about this](https://medium.com/@hrmnmichaels/dependency-management-with-poetry-f1d598591161)
    in another post, but will summarise the gist here.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'Core of poetry’s dependency management is the `pyproject.toml` file. For our
    project, it starts like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We can see a header defining and exposing certain project properties, followed
    by a paragraph defining needed dependencies.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: As a “user”, we just have to execute `poetry install` in our terminal, and poetry
    will automatically create a Python environment with all dependencies installed.
    We can then enter this via `poetry shell`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 作为“用户”，我们只需在终端中执行 `poetry install`，poetry 将自动创建一个安装了所有依赖项的 Python 环境。然后我们可以通过
    `poetry shell` 进入这个环境。
- en: Developers, after adding a new dependency, run `poetry update`. This will generate
    or update the `poetry.lock` file, which you can kind of picture as a binary representation
    of above specified dependencies. It will need to be added to the repository, too
    — and above described process of installing requirements actually uses this file.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者在添加新依赖后，运行 `poetry update`。这将生成或更新 `poetry.lock` 文件，你可以将其视为上述指定依赖项的二进制表示。这个文件也需要被添加到仓库中——而上述安装要求的过程实际上使用了这个文件。
- en: isort
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: isort
- en: '[PEP 8](https://peps.python.org/pep-0008/), the styleguide for Python, also
    defines [how to order imports](https://peps.python.org/pep-0008/#imports). The
    recommendation is to create the following groups:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[PEP 8](https://peps.python.org/pep-0008/)，Python 的风格指南，也定义了 [如何排序导入](https://peps.python.org/pep-0008/#imports)。建议创建以下几组：'
- en: Standard library imports (e.g. `os`, `sys`)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标准库导入（例如 `os`、`sys`）
- en: Related third party imports (e.g. `numpy`)
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 相关的第三方导入（例如 `numpy`）
- en: Local, project-specific imports (e.g. different files of the same project)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本地、项目特定的导入（例如，项目的不同文件）
- en: Inside these groups, imports should be sorted alphabetically.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些组内，导入应按字母顺序排序。
- en: '[isort](https://pycqa.github.io/isort/) is a tool which removes the necessity
    of remembering and doing this ourselves. Conveniently, isort and most of the tools
    presented in the next sections work well with poetry, and we even set their settings
    in the `pyproject.toml` file. For our use case, we set the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[isort](https://pycqa.github.io/isort/) 是一个工具，它消除了我们记住和执行这些操作的必要性。方便的是，isort
    和接下来章节中介绍的大多数工具都与 poetry 很好地配合使用，我们甚至在 `pyproject.toml` 文件中设置了它们的配置。对于我们的用例，我们设置了以下内容：'
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In addition to the Python version we tell isort that we will be working with
    the formatter black (see next section), and define how imports which are too long
    for a single line will be [re-formatted](https://pycqa.github.io/isort/docs/configuration/multi_line_output_modes.html).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Python 版本，我们告诉 isort 我们将使用格式化工具 black（见下一节），并定义如何处理过长的导入行，参考 [re-formatted](https://pycqa.github.io/isort/docs/configuration/multi_line_output_modes.html)。
- en: black
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: black
- en: '[black](https://black.readthedocs.io/en/stable/) is a code formatter for Python.
    Running it formats the code according to certain conventions. By having all developers
    use it, we enforce a specific, uniform style to our code. Think about line indents,
    number of blank lines after functions, etc.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[black](https://black.readthedocs.io/en/stable/) 是一个 Python 代码格式化工具。运行它会根据特定的约定格式化代码。通过让所有开发者使用它，我们强制执行一种特定的、统一的代码风格。考虑一下行缩进、函数后的空行数量等。'
- en: 'Settings are also managed by poetry, and we simply set:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 设置也由 poetry 管理，我们简单设置：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: I.e. a maximal line length of 80, and the target Python version.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 即最大行长度为 80，以及目标 Python 版本。
- en: flake8
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: flake8
- en: '[flake8](https://flake8.pycqa.org/en/latest/) is a code linter. Code linters
    and code formatters are very related, however, linters check the adherence of
    specific styles and guidelines, but do not format it. flake8 does several things,
    one is checking against the previously mentioned PEP 8 standard.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[flake8](https://flake8.pycqa.org/en/latest/) 是一个代码检查工具。代码检查工具和代码格式化工具密切相关，然而，检查工具检查特定风格和指南的遵循情况，但不进行格式化。flake8
    做了几件事，其中之一是检查是否符合前述的 PEP 8 标准。'
- en: mypy
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: mypy
- en: '[mypy](https://mypy.readthedocs.io/en/stable/) is a static type checker for
    Python. As you (most likely) know, Python is a [dynamically typed language](https://en.wikipedia.org/wiki/Type_system#DYNAMIC),
    meaning variable types are inferred at runtime (as opposed to e.g. C++). This
    flexibility we all love also comes with drawbacks, such as the higher probability
    of making mistakes, without a compiler or similar to act as a first line of defence.
    Thus, in recent years many efforts are actually focused on making type checking
    in Python stricter. mypy is such a type checker, meaning it will check your code,
    and see if you are using variables correctly. Most of this is automatic, however,
    but you can also make certain types explicit by annotating them (which is anyways
    recommended for function parameters and return types, for visibility).'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[mypy](https://mypy.readthedocs.io/en/stable/) 是一个用于Python的静态类型检查器。正如你（很可能）知道的那样，Python
    是一种 [动态类型语言](https://en.wikipedia.org/wiki/Type_system#DYNAMIC)，意味着变量类型是在运行时推断的（与C++等语言相对）。这种灵活性我们都喜欢，但也有缺点，比如更高的出错概率，没有编译器或类似的东西作为第一道防线。因此，近年来许多努力实际上都集中在使Python中的类型检查更严格。
    `mypy` 就是这样的一个类型检查器，它会检查你的代码，看你是否正确使用了变量。大部分工作是自动的，不过你也可以通过注解使某些类型显式（这对于函数参数和返回类型的可见性是推荐的）。'
- en: 'We can annotate function arguments and return types as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以如下注解函数参数和返回类型：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'mypy would then complain if we tried calling the function with wrong arguments,
    such as:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试使用错误的参数调用函数，`mypy` 会提出警告，例如：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We manage mypy settings in a separate `mypy.ini` file. This is mostly needed
    because some external dependencies cannot be type-checked, and we need to exclude
    them from being checked (although we can fix some).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在单独的 `mypy.ini` 文件中管理 `mypy` 设置。这主要是因为一些外部依赖不能进行类型检查，我们需要将它们排除在检查之外（尽管我们可以修复一些）。
- en: pytest
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pytest
- en: Unit testing is essential for any somewhat professional software project, and
    recommend for all. We will be using [pytest](https://docs.pytest.org/en/7.2.x/),
    which is preferred by many Python developers. I wrote a [lengthier introduction
    in another post](https://medium.com/@hrmnmichaels/unit-testing-with-pytest-5c59cdf89529),
    with some follow-ups, so I’d like to refer there (or of course any other great
    tutorial out there!) if you’re not familiar with it.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试对任何稍微专业的软件项目都是必不可少的，并且推荐所有人使用。我们将使用 [pytest](https://docs.pytest.org/en/7.2.x/)，这是许多Python开发者的首选。我在另一篇文章中写了一个
    [更详细的介绍](https://medium.com/@hrmnmichaels/unit-testing-with-pytest-5c59cdf89529)，有一些后续内容，所以如果你不熟悉它的话，可以参考那里（或者当然是其他任何优秀的教程！）。
- en: Unit testing helps us catch bugs, and thus keep the quality of written code
    at a high level.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试帮助我们发现错误，从而保持代码质量在高水平。
- en: Github Actions
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Github Actions
- en: '[Github Actions](https://docs.github.com/en/actions) allow automatising and
    running certain steps in the repository — all in the spirit of continuous integration.
    With them, we can create workflows to be run for certain events, such as pull
    requests (PRs). The workflow we will use here is actually an accumulation of above
    introduced tools — i.e. for every opened PR it will run things like formatting,
    linting, type checking and unit tests, and we expect all this to pass before merging
    — thus, protecting our main branch from committing any unclean or faulty code!'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[Github Actions](https://docs.github.com/en/actions) 允许自动化和运行仓库中的某些步骤——所有这些都是为了持续集成的精神。通过它们，我们可以创建在特定事件（如拉取请求（PRs））下运行的工作流。我们将在这里使用的工作流实际上是上述介绍的工具的积累——即每当有PR打开时，它会运行格式化、检查、类型检查和单元测试等操作，我们期望在合并之前所有这些都能通过——从而保护我们的主分支不被提交任何不干净或有缺陷的代码！'
- en: Also for this topic I would like to refer to a [previous post of mine](https://medium.com/gitconnected/introduction-to-github-actions-e742b5370bfa)
    for an introduction.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个主题，我想参考我之前的一篇 [文章](https://medium.com/gitconnected/introduction-to-github-actions-e742b5370bfa)
    来进行介绍。
- en: Configuring the Repository
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置仓库
- en: This post will not be an introduction to version control systems or setting
    up Github repositories from scratch. Instead some basic knowledge is expected,
    and I would refer to any other tutorial out there, such as the [official Github
    one](https://docs.github.com/en/get-started/quickstart/hello-world). Here we will
    only talk about settings in Git which basically any professional software repository
    will have.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 本文不会介绍版本控制系统或从头设置Github仓库。相反，期望读者有一些基本知识，我建议参考任何其他教程，例如 [官方Github教程](https://docs.github.com/en/get-started/quickstart/hello-world)。这里我们只讨论Git中的设置，基本上任何专业的软件仓库都会有这些设置。
- en: 'Broadly speaking, this is only one: protecting the main branch. We don’t want
    anybody to push to this without checks, and in particular require two things:
    approval from other developers, and passing of the CI tests we established. To
    do so, go to your repository and select “Settings”, then “Branches”:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 从广义上讲，这只有一个：保护主分支。我们不希望任何人未经检查就推送到这里，特别是需要两件事：其他开发者的审批和我们建立的CI测试的通过。为此，请转到你的代码库，选择“设置”，然后选择“分支”：
- en: '![](../Images/d850fbdecfd43ef7f392c86f9d976d51.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d850fbdecfd43ef7f392c86f9d976d51.png)'
- en: Screenshot by author
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 作者截图
- en: 'Then add a branch protection rule for your main branch, and enable:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后为你的主分支添加分支保护规则，并启用：
- en: Require a pull request before merging
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并前要求进行拉取请求
- en: Require approval (you can then select the number of necessary approvals)
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要审批（然后你可以选择必要的审批数量）
- en: Require status checks to pass before merging
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在合并之前要求状态检查通过
- en: Putting it All Together
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 综合起来
- en: This introduces all needed themes. Now we will put it together, set up a sample
    repository and show a workflow every developer should follow.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这介绍了所有需要的主题。现在我们将把它们结合起来，设置一个示例代码库，并展示每个开发者应遵循的工作流。
- en: Sample Project
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例项目
- en: 'Our sample project will have a folder `utils`, containing `math_utils.py` and
    a related unit test file (`math_utils_test.py`). In `math_utils` we will be re-implementing
    an exponentiation function for demonstrative purposes:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例项目将有一个`utils`文件夹，包含`math_utils.py`和一个相关的单元测试文件（`math_utils_test.py`）。在`math_utils`中，我们将重新实现一个幂函数以示范：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Thus, `exponentiate(2, [1, 2, 3])` will return `[2, 4, 8]`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`exponentiate(2, [1, 2, 3])`将返回`[2, 4, 8]`。
- en: 'We test the correctness of the function in the test file:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在测试文件中测试函数的正确性：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In our main file (`main.py`), we will use this to generate the first 10 powers
    of 2, and plot this with `matplotlib`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的主文件（`main.py`）中，我们将使用它生成前10个2的幂，并使用`matplotlib`绘制：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `pyproject.toml` file for this project looks as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目的`pyproject.toml`文件如下：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In addition, we exclude `matplotlib` from mypy checking to prevent errors by
    generating the following `mypy.ini` file:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将`matplotlib`排除在mypy检查之外，以防止错误，通过生成以下`mypy.ini`文件：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Github Workflow
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Github工作流
- en: 'We then define the following Github Actions workflow:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们定义以下Github Actions工作流：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Thus, this workflow is run for every new PR, and for every PR merged to main.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这个工作流在每个新的PR和每个合并到主分支的PR时运行。
- en: 'It has the following steps:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 它包括以下步骤：
- en: It checks out the repository.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它检查出代码库。
- en: It installs Python 3.10.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它安装了Python 3.10。
- en: It installs poetry, and installs our dependencies.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它安装了poetry，并安装了我们的依赖项。
- en: 'It then runs all our installed checks (note `poetry run X` is identical to
    entering the poetry environment via `poetry shell` and then executing `X`). In
    particular, these are: sort imports via isort, format code with black, lint with
    flake8, check types with mypy, and run pytest.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后它运行我们安装的所有检查（注意`poetry run X`与通过`poetry shell`进入诗歌环境后执行`X`是相同的）。特别地，包括：通过isort排序导入，使用black格式化代码，使用flake8进行lint检查，使用mypy检查类型，以及运行pytest。
- en: Local Developer Workflow
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地开发者工作流
- en: Now we describe the workflow every developer should do occasionally, and especially
    before raising a PR (sorry about the overloading of “workflow” — in the section
    above denoting the Github concept of grouping steps in a workflow, whereas here
    it simply describes a list of steps to execute by the developer).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们描述每个开发者应偶尔执行的工作流，尤其是在提交PR之前（对“工作流”的过度使用表示歉意——在上面的部分中表示Github概念的分组步骤，而这里仅仅描述开发者执行的步骤列表）。
- en: 'In essence, we don’t want to rely on and stress CI with finding all of our
    errors, but push PRs as “clean” as possible: this means simply running all steps
    run on CI by ourselves locally before pushing. This is achieved via:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 实质上，我们不想依赖CI来发现所有错误，而是尽可能将PR推送为“干净”的：这意味着在推送之前，在本地运行CI上运行的所有步骤。这通过以下方式实现：
- en: 'run isort to sort the imports: `isort .`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行isort以排序导入：`isort .`
- en: 'run black to format the code: `black .`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行black以格式化代码：`black .`
- en: 'run flake8 to check the code: `python -m flake8`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行flake8检查代码：`python -m flake8`
- en: 'run mypy for type checking: `mypy .` (note this might take quite a while the
    first time)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行mypy进行类型检查：`mypy .`（注意第一次运行可能需要相当长的时间）
- en: 'run all unit tests: `python -m pytest`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行所有单元测试：`python -m pytest`
- en: Conclusion
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'In this post we described useful tools to help manage, organize, and keep Python
    code in good shape and up to professional standards. We then showed how to set
    up a Git repository for versioning and sharing this code, and in particular how
    to use the previously introduced tools in CI: i.e. running certain checks to prevent
    any unclean or faulty commits to the main branch. Finally, we showed how developers
    can run all these tools locally first, to minimize the risk of CI failing.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们介绍了一些有用的工具，帮助管理、组织和保持 Python 代码的良好状态，并符合专业标准。接着，我们展示了如何设置一个 Git 仓库进行版本控制和代码共享，特别是如何在
    CI 中使用之前介绍的工具：即运行某些检查以防止任何不干净或有缺陷的提交到主分支。最后，我们展示了开发人员如何先在本地运行所有这些工具，以最小化 CI 失败的风险。
- en: I hope this post will be useful for your future private and professional projects.
    Let me know if there are any awesome tools you or your company are using, or you
    feel I missed something. Thanks for reading!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这篇文章对你未来的私人和专业项目有所帮助。如果你或你的公司正在使用一些很棒的工具，或者觉得我遗漏了什么，请告诉我。感谢阅读！
