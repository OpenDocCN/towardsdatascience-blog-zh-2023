["```py\nimport time\n\ndef fib(n):\n    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\nstart_time = time.time()\nprint(fib(40))\nprint(\"Execution Time: \", time.time() - start_time)\n\n>> 102334155\n>> Execution Time: 19.45328450202942\n```", "```py\nimport time\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None) # Invinite cache\ndef fib(n):\n    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\nstart_time = time.time()\nprint(fib(40))\nprint(\"Execution Time: \", time.time() - start_time)\n\n>> 102334155\n>> Execution Time: 8.893013000488281e-05\n```", "```py\n@lru_cache(maxsize=128)\ndef add_ten(number):\n    return number + 10\n\nprint(add_ten(5))\n\n>> 15\n```", "```py\n@lru_cache(maxsize=128)\ndef add_to_list(lst, item):\n    lst.append(item)\n    return lst\n\nprint(add_to_list([1, 2, 3], 4))  \n\n>> TypeError: unhashable type: 'list'\n```", "```py\nimport functools\nimport time\n\ndef simulate_external_source():\n    \"\"\"Simulate an external source that changes over time.\"\"\"\n    return time.time()\n\n@functools.lru_cache()\ndef dependent_function():\n    \"\"\"Function that depends on an external source.\"\"\"\n    return simulate_external_source()\n\n# Test lru_cache with a function that depends on external sources\nprint(\"Testing lru_cache with a function that depends on external sources:\")\nprint(\"Initial call:\", dependent_function())\ntime.sleep(1)  # Simulate a delay\nprint(\"Cached call:\", dependent_function())  # Should return the same result\ntime.sleep(1)  # Simulate a delay\nprint(\"Updated call:\", dependent_function())  # Should still return the same result\n\nprint()\n\n@functools.lru_cache(maxsize=1)\ndef expiring_function():\n    \"\"\"Function with cached entries that expire over time.\"\"\"\n    return simulate_external_source()\n\n# Test lru_cache with entries that expire over time\nprint(\"Testing lru_cache with entries that expire over time:\")\nprint(\"Initial call:\", expiring_function())\ntime.sleep(1)  # Simulate a delay\nprint(\"Expired call:\", expiring_function())  # Should trigger recalculation\ntime.sleep(1)  # Simulate a delay\nprint(\"Expired call:\", expiring_function())  # Should trigger recalculation again\n\nprint()\n\n___________________\nOutput\n-------------------\nTesting lru_cache with a function that depends on external sources:\nInitial call: 1685507725.6362917\nCached call: 1685507725.6362917\nUpdated call: 1685507725.6362917\n\nTesting lru_cache with entries that expire over time:\nInitial call: 1685507727.639048\nExpired call: 1685507727.639048\nExpired call: 1685507727.639048\n```"]