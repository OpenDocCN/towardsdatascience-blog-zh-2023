- en: How to Improve ChatGPT’s Generated Code with Prompt Engineering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-improve-chatgpts-generated-code-with-prompt-engineering-cd131f9ab55d](https://towardsdatascience.com/how-to-improve-chatgpts-generated-code-with-prompt-engineering-cd131f9ab55d)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A simple strategy for enhancing ChatGPT’s performance as your coding assistant
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@aashishnair?source=post_page-----cd131f9ab55d--------------------------------)[![Aashish
    Nair](../Images/23f4b3839e464419332b690a4098d824.png)](https://medium.com/@aashishnair?source=post_page-----cd131f9ab55d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cd131f9ab55d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cd131f9ab55d--------------------------------)
    [Aashish Nair](https://medium.com/@aashishnair?source=post_page-----cd131f9ab55d--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cd131f9ab55d--------------------------------)
    ·7 min read·Jul 21, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bb5ca25ff10ecd443c314b92f6047627.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Photo by cottonbro studio: [https://www.pexels.com/photo/hands-typing-on-a-laptop-keyboard-5483077/](https://www.pexels.com/photo/hands-typing-on-a-laptop-keyboard-5483077/)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While ChatGPT boasts countless features, there is one that appeals to programmers
    the most: the ability to generate code.'
  prefs: []
  type: TYPE_NORMAL
- en: ChatGPT has proven to be capable of generating functional code in a matter of
    seconds. As a result, it has transformed how programmers tackle their coding projects,
    with many saving time and energy by using the chatbot to handle the tedious or
    cumbersome aspects.
  prefs: []
  type: TYPE_NORMAL
- en: However, ChatGPT has a track record of generating ineffective code. In fact,
    StackOverflow previously imposed [a temporary ban](https://meta.stackoverflow.com/questions/421831/temporary-policy-generative-ai-e-g-chatgpt-is-banned)
    on content created by ChatGPT and other generated AI, citing their low rate of
    correct answers as the primary reason.
  prefs: []
  type: TYPE_NORMAL
- en: That being said, such outcomes often have less to do with the quality of the
    underlying large language model (LLM) and more to do with how the users interact
    with the chatbot.
  prefs: []
  type: TYPE_NORMAL
- en: People will reap more benefits from their chatbots once they learn to harness
    **prompt engineering**, a subject that has been gaining a lot of attention as
    of late.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we give a brief overview of why well-written prompts are so important
    for ChatGPT and how data scientists can utilize prompt engineering to get the
    most value out of this chatbot.
  prefs: []
  type: TYPE_NORMAL
- en: Why Prompts Matter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Code generated from ChatGPT has been shunned for various reasons, with some
    being suboptimal and others being irrelevant to the problem altogether. However,
    regardless of the issue, the underlying cause is the same: inadequate prompts.'
  prefs: []
  type: TYPE_NORMAL
- en: Models like GPT-3.5 and GPT-4.0 are very powerful, but they are sensitive to
    user-provided prompts. ChatGPT, powered by GPT-3.5, can only operate successfully
    when given prompts that provide sufficient context with appropriate language.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, even if your prompts are returning good responses, you can likely
    see better results by leveraging **prompt engineering**.
  prefs: []
  type: TYPE_NORMAL
- en: Prompt Engineering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Prompt engineering is a technique that entails tailoring prompts to yield the
    desired responses from a chatbot. The process not only involves determining the
    ideal type of context to provide in user prompts but also the ideal language and
    sentence structure that the context should be provided in.
  prefs: []
  type: TYPE_NORMAL
- en: Prompt engineering falls under the umbrella of “engineering” since it is a systematic
    approach to designing, testing, and evaluating prompts, often in an iterative
    process.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d955a2aa4720372e76d4d7403aad9637.png)'
  prefs: []
  type: TYPE_IMG
- en: Prompt Engineering in a Nutshell (Created by Author)
  prefs: []
  type: TYPE_NORMAL
- en: This process of developing prompts should ideally be documented. Documentation
    will help give insight into what aspects of the prompts promote high-quality code
    generation. Furthermore, recording the successful prompts will save you the trouble
    of repeating this process every time you need to solve similar problems using
    ChatGPT.
  prefs: []
  type: TYPE_NORMAL
- en: Prompt Engineering for Data Scientists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It should be clear by now why prompt engineering is such a relevant skill in
    data science. Data scientists can enjoy a surge of productivity when using ChatGPT,
    but only when they are inputting adequate prompts.
  prefs: []
  type: TYPE_NORMAL
- en: After all, in data science projects, context is everything.
  prefs: []
  type: TYPE_NORMAL
- en: The pre-defined elements in a project (e.g., the objective, the evaluation metrics,
    limitations/constraints, etc.) dictate what tools and techniques should be utilized
    in a given script.
  prefs: []
  type: TYPE_NORMAL
- en: Without a good prompt that adequately captures the relevant requirements, the
    chatbot is more likely to generate code that is both ineffective and inefficient.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, success with using ChatGPT for data science hinges on the ability of data
    scientists to use prompt engineering to craft prompts that produce satisfactory
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Case Study
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To demonstrate the importance of a well-crafted prompt, let’s suppose that we
    are building an XGBoost model and wish to create a Python script that executes
    hyperparameter tuning. The training data is both large and imbalanced.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll test two different prompts that aim to generate code that facilitates
    hyperparameter tuning. The first prompt gives the bare minimum context, while
    the second prompt provides some additional instructions.
  prefs: []
  type: TYPE_NORMAL
- en: '**Prompt 1: Write Python code that executes hyperparameter tuning on an XGBoost
    classifier.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code that ChatGPT generates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The output for the first prompt is a piece of functional code that would execute
    hyperparameter tuning on a given XGBoost model.
  prefs: []
  type: TYPE_NORMAL
- en: However, note that the prompt itself was limited in context and did not specify
    certain factors, such as the libraries, the hyperparameter tuning method, the
    hyperparameters to tune, or the evaluation metric. Any gaps of information in
    the prompt are left for ChatGPT to fill in. Here, we see that ChatGPT’s code uses
    the *Scikit Learn* module to carry out a *grid search* with *7* hyperparameters,
    using *accuracy* as the evaluation metric.
  prefs: []
  type: TYPE_NORMAL
- en: This is a working solution, but it is not ideal for large, imbalanced data.
    The grid search is a highly inefficient and time-consuming technique, and the
    accuracy metric is highly unreliable when handling imbalanced data.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, this proves how an insufficient prompt can yield suboptimal code.
  prefs: []
  type: TYPE_NORMAL
- en: This time, let’s add more instructions to the prompt and see what type of response
    is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '**Prompt 2: Write Python code that executes hyperparameter tuning on an XGBoost
    classifier. Carry out 50 trials using the Optuna library, with f-1 score as the
    evaluation metric. Only consider the following hyperparameters: n_estimators,
    learning_rate, gamma, and max_depth.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The prompt yields the following code output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This prompt leaves fewer things open to interpretation, specifying the library,
    the hyperparameters to tune, the number of trials, and the evaluation metric.
    The second prompt only has 2 more sentences than the first prompt, and yet it
    is able to return a much more adequate code!
  prefs: []
  type: TYPE_NORMAL
- en: Here, we see that ChatGPT’s code uses the *Optuna* module to carry out a *Bayesian
    search* with *4* hyperparameters, using the *f1-score* as the evaluation metric.
    This solution is much less costly and time-consuming than the previous one.
  prefs: []
  type: TYPE_NORMAL
- en: After examining the code, we can decide if the script meets all criteria or
    if it is failing to meet certain requirements.
  prefs: []
  type: TYPE_NORMAL
- en: If the generated code is lacking in some way, the prompt can be modified accordingly
    and then tested again. If the generated code is the ideal solution, the prompt
    should be documented. That way, whenever there is a need to perform similar operations
    in a different project, this prompt can be used as a reference.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tip: Browse the Web for Publicly Available Prompts'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/669a57e9a208974208f80c73c61a856e.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Campaign Creators](https://unsplash.com/@campaign_creators?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Are you not willing to put in the time to craft prompts that enable ChatGPT
    to churn out useful boilerplate code? That’s understandable.
  prefs: []
  type: TYPE_NORMAL
- en: If that is the case, consider browsing the web first for tried-and-tested prompts.
    After all, there’s no need to start developing prompts from scratch if someone
    else has done the work for you.
  prefs: []
  type: TYPE_NORMAL
- en: There are countless articles, social media posts, and public forums where people
    share their findings from their interactions with ChatGPT.
  prefs: []
  type: TYPE_NORMAL
- en: Key Takeaways
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/fd09247f1bf2132725103cc93abbc3f4.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Prateek Katyal](https://unsplash.com/@prateekkatyal?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: As we incorporate chatbots like ChatGPT in our day-to-day work, it becomes clear
    that our responsibilities as data scientists have shifted from writing code ourselves
    to interacting with chatbots powered by LLMs.
  prefs: []
  type: TYPE_NORMAL
- en: The quality of code generated by chatbots is directly proportional to the quality
    of prompts that are fed to them, so prompt engineering will gradually become an
    essential skill in the data science space. So, now is a good time to become familiar
    with the process of designing and developing effective prompts for your projects.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading!
  prefs: []
  type: TYPE_NORMAL
