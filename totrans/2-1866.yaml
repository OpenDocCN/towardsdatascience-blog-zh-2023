- en: 'Simulation 101: Conductive Heat Transfer'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟101：导热传输
- en: 原文：[https://towardsdatascience.com/simulation-101-conductive-heat-transfer-a4f09b3e16b4](https://towardsdatascience.com/simulation-101-conductive-heat-transfer-a4f09b3e16b4)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/simulation-101-conductive-heat-transfer-a4f09b3e16b4](https://towardsdatascience.com/simulation-101-conductive-heat-transfer-a4f09b3e16b4)
- en: A gentle introduction to computational physics
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算物理的温馨介绍
- en: '[](https://medium.com/@ln8378?source=post_page-----a4f09b3e16b4--------------------------------)[![Le
    Nguyen](../Images/05289b40bb528d5ba2a0ee00d1a75990.png)](https://medium.com/@ln8378?source=post_page-----a4f09b3e16b4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a4f09b3e16b4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a4f09b3e16b4--------------------------------)
    [Le Nguyen](https://medium.com/@ln8378?source=post_page-----a4f09b3e16b4--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@ln8378?source=post_page-----a4f09b3e16b4--------------------------------)[![Le
    Nguyen](../Images/05289b40bb528d5ba2a0ee00d1a75990.png)](https://medium.com/@ln8378?source=post_page-----a4f09b3e16b4--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a4f09b3e16b4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a4f09b3e16b4--------------------------------)
    [Le Nguyen](https://medium.com/@ln8378?source=post_page-----a4f09b3e16b4--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a4f09b3e16b4--------------------------------)
    ·11 min read·Jul 25, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----a4f09b3e16b4--------------------------------)
    ·11分钟阅读·2023年7月25日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Conduction, or heat transfer between objects, is something we experience everyday.
    Putting a pan on the stove or sitting on a hot park bench gives us an intuitive
    sense of conductive heat transfer but here we will formalize the process and build
    a basic computational framework to simulate it. Conduction is an excellent first
    simulation problem to tackle because it uses the basic tools found in many computational
    physics problems.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 传导或物体之间的热传递是我们每天都会经历的现象。将锅放在炉子上或坐在热公园长椅上让我们对导热传递有直观的感觉，但在这里我们将正式化这一过程并建立一个基本的计算框架来模拟它。传导是解决的第一个模拟问题，因为它使用了许多计算物理问题中的基本工具。
- en: '![](../Images/56a8db8885ed2a6a492829258bf71be3.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/56a8db8885ed2a6a492829258bf71be3.png)'
- en: 'In this article we will:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将：
- en: Create a mesh grid to represent materials
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建网格网格以表示材料
- en: Learn basic heat transfer equations and their computational equivalents
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习基本的热传递方程及其计算等效物
- en: Update the values in our mesh grid based on the underlying physics
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于基础物理更新网格网格中的值
- en: Simulate conductive heat transfer
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟导热传输
- en: Creating a Mesh Grid
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建网格网格
- en: A mesh grid is a computational tool used to discretize a continuous space. That
    is, we can’t perform calculations on all time and space in our problem, so we
    chose a representative subset of points, usually at regular intervals, to look
    at instead.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 网格网格是用于离散化连续空间的计算工具。也就是说，我们无法在问题的所有时间和空间上进行计算，因此我们选择一个代表性子集的点，通常间隔规则地查看。
- en: In figure 1 below we can see an example of a mesh grid. Here a space is subdivided
    into evenly spaced cells which is common practice is physics simulation. Instead
    of running calculations/simulation on the entire surface we can now work with
    only our grid points which makes our problem more feasible.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图1中，我们可以看到一个网格网格的示例。这里一个空间被细分为均匀间隔的单元，这在物理模拟中是常见做法。我们现在可以只处理网格点，这使得问题更具可行性。
- en: '![](../Images/091c6165eab1e8ad9f7fbf4a442a7b92.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/091c6165eab1e8ad9f7fbf4a442a7b92.png)'
- en: 'Figure 1: [Example of a mesh grid](https://www.javatpoint.com/numpy-meshgrid).
    In a simulation we break up our space into such a grid and compute values at every
    dotted grid point.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：[网格网格示例](https://www.javatpoint.com/numpy-meshgrid)。在模拟中，我们将空间划分成这样的网格，并在每个虚线网格点计算值。
- en: The mesh grid above was created using Python’s [numpy meshgrid](https://numpy.org/doc/stable/reference/generated/numpy.meshgrid.html)
    function which can take in a set of 1 dimensional arrays and create a mesh grid
    for us. For our simulation, we want to model a 2 dimensional surface, so we are
    going to generate 2 arrays filled with the starting values we want with a length
    of how many intervals we want to evaluate our simulation on. See the code snippet
    below where we create a 100x100 mesh grid of zeros as the basis of our simulation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的网格是使用 Python 的 [numpy meshgrid](https://numpy.org/doc/stable/reference/generated/numpy.meshgrid.html)
    函数创建的，该函数可以接受一组一维数组并为我们创建一个网格。对于我们的模拟，我们希望建模一个二维表面，因此我们将生成 2 个数组，填充我们想要的起始值，长度为我们希望在其上评估模拟的间隔数。请参见下面的代码片段，我们创建了一个
    100x100 的零网格作为模拟的基础。
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Before moving on from mesh grids, it’s important to note that every point on
    our grid is typically not a single value. Usually at every grid point we want
    an array of values that represent the properties we will be working with. In our
    heat transfer simulation we will need to know material properties as well as the
    temperature at every point on our mesh grid. So all the points on our grid will
    be an array that contains information like temperature, material density, material
    conductivity and anything else we need to know.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论网格之前，需要注意的是，我们的网格上的每个点通常不是单一值。通常在每个网格点上，我们希望有一个值的数组来表示我们将要处理的属性。在我们的热传导模拟中，我们需要知道每个网格点的材料属性以及温度。因此，网格上的所有点将是一个包含如温度、材料密度、材料导热性以及我们需要了解的其他信息的数组。
- en: An easy way to make a mesh grid that is an array of arrays is to create multiple
    mesh grids that contain a single value at each point and then stack then together
    as seen in figure 2.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 制作网格的简单方法是创建多个在每个点上包含单一值的网格，然后将它们叠加在一起，如图 2 所示。
- en: '![](../Images/00a13058fa4048ad02826d3e041a8799.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/00a13058fa4048ad02826d3e041a8799.png)'
- en: 'Figure 2: Stacking 2 mesh grids to create a new mesh grid that contain multiple
    values per point.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '图 2: 叠加 2 个网格以创建一个新的网格，其中每个点包含多个值。'
- en: Numpy comes in handy here again with the [dstack function](https://numpy.org/doc/stable/reference/generated/numpy.dstack.html)
    which will stack two arrays element wise for us. Below is a code snippet that
    will create 2 mesh grids and stack them.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy 在这里再次发挥作用，通过 [dstack 函数](https://numpy.org/doc/stable/reference/generated/numpy.dstack.html)可以按元素叠加两个数组。下面的代码片段将创建
    2 个网格并将它们叠加在一起。
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With the tools to create our own mesh grid to represent our simulation environment,
    we can move on to the physics.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有了创建我们自己的网格以表示模拟环境的工具后，我们可以继续研究物理学。
- en: Basics of Heat Transfer
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 热传导基础
- en: We will first start with the 1 dimensional time dependent heat conduction equation.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先从一维时间相关热传导方程开始。
- en: '![](../Images/26511d568a3aa31890f1f6ef4e237aaa.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/26511d568a3aa31890f1f6ef4e237aaa.png)'
- en: 'Equation 1: [1-dimensional time dependent heat conduction equation](http://geodynamics.usc.edu/~becker/teaching/557/problem_sets/problem_set_fd_explicit.pdf).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '方程 1: [一维时间相关热传导方程](http://geodynamics.usc.edu/~becker/teaching/557/problem_sets/problem_set_fd_explicit.pdf)。'
- en: The equation states the the change in temperature over time is based on the
    material’s thermal properties scaled by the change in temperature across the material
    (technically the change of the change of the temperature since it is a 2nd derivative).
    We don’t need to worry about the thermal properties of the material since they
    can be found in [look up tables](https://www.engineersedge.com/heat_transfer/thermal_diffusivity_table_13953.htm).
    What we need to do is convert the derivatives in the equation into something we
    can handle computationally. Luckily for us, this can be done with the [finite
    difference method](https://en.wikipedia.org/wiki/Finite_difference_method) which
    will convert equation 1 into equation 2 below.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 该方程表明温度随时间变化的原因是材料的热属性与材料内的温度变化的比例（严格来说是温度的二阶导数）。我们不需要担心材料的热属性，因为它们可以在 [查找表](https://www.engineersedge.com/heat_transfer/thermal_diffusivity_table_13953.htm)
    中找到。我们需要做的是将方程中的导数转换为我们可以计算的形式。幸运的是，这可以通过 [有限差分法](https://en.wikipedia.org/wiki/Finite_difference_method)
    完成，将方程 1 转换为下面的方程 2。
- en: '![](../Images/5b26e32f4604194293c7e3c0eb85df35.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5b26e32f4604194293c7e3c0eb85df35.png)'
- en: 'Equation 2: Computational [1-dimensional time dependent heat conduction equation](http://geodynamics.usc.edu/~becker/teaching/557/problem_sets/problem_set_fd_explicit.pdf).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '方程 2: 计算[一维时间依赖热传导方程](http://geodynamics.usc.edu/~becker/teaching/557/problem_sets/problem_set_fd_explicit.pdf)。'
- en: Equation 2 is a computational equivalent of the time dependent heat conduction
    equation that we can use to update the temperature in our simulation. Going through
    each cell in our mesh grid, we can update the temperature of that cell by its
    current temperature plus the difference in temperature between that cell and its
    neighboring cells (here i represents the mesh grid index) scaled by the thermal
    properties of the material and a time step of our choosing.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 方程 2 是时间依赖热传导方程的计算等效形式，我们可以用它来更新模拟中的温度。遍历网格图中的每个单元，我们可以通过该单元的当前温度加上该单元与其邻近单元之间的温差（这里
    i 代表网格索引），乘以材料的热属性和我们选择的时间步长来更新该单元的温度。
- en: Equation 1 & 2 are the 1-dimenstional heat equation but we want to run our simulation
    in 2-dimensions. Adding in a 2nd dimension is straight forward, especially having
    the computational version of the heat equation, we just need to add in all neighboring
    cells as seen below in equation 3.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 方程 1 和 2 是一维热方程，但我们希望在二维中运行我们的模拟。添加第二维是直接的，特别是当我们有热方程的计算版本时，我们只需将所有邻近单元添加到方程
    3 中。
- en: '![](../Images/0fa2ef2d25cc0a89bec1e3530d5b063f.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0fa2ef2d25cc0a89bec1e3530d5b063f.png)'
- en: 'Equation 3: [Computational 2-dimenstional time dependent heat conduction equation](https://resources.system-analysis.cadence.com/blog/msa2022-using-the-2d-finite-difference-method-for-heat-transfer-analysis).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '方程 3: [计算二维时间依赖热传导方程](https://resources.system-analysis.cadence.com/blog/msa2022-using-the-2d-finite-difference-method-for-heat-transfer-analysis)。'
- en: Now that we have translated the time dependent heat conduction equation into
    a computational expression, we can use it to update our mesh grid.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将时间依赖热传导方程转换为计算表达式，我们可以用它来更新我们的网格图。
- en: Updating Our Mesh Grid
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新我们的网格图
- en: Let’s first initialize a mesh grid using the tools we have developed so far.
    We know we need at least 2 features to plug into our temperature equation which
    is a current temperature and a thermal diffusivity constant for a material of
    our choosing. We will start with our material being at room temperature (20°C),
    and our material will be copper which has a thermal diffusivity of 1.11x10^-2
    cm²/s. We fill 2 mesh grids with these values and stack them to make our overall
    mesh.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用迄今为止开发的工具初始化一个网格图。我们知道我们需要至少 2 个特征来插入我们的温度方程，即当前温度和我们选择的材料的热扩散常数。我们将从室温（20°C）开始，材料为铜，其热扩散率为
    1.11x10^-2 cm²/s。我们用这些值填充 2 个网格图并将它们叠加以形成我们的整体网格。
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In our specific case, our mesh grid is symmetric (the feature values are the
    same in the x and y direction), so defining our x and y grid separately is not
    needed but it is still good practice because we will not always have such symmetry
    when we simulate. Now that we have our material represented by a mesh grid we
    need to add heat to it (as we saw in our physics equations, there has to be a
    difference in temperature for heat to transfer). To add heat to our material,
    we need to select the cells in our mesh grid we want to heat up and add value
    to their temper index. We will continue to keep things basic and add heat, let’s
    say 1000°C, in a square from index 35–65 in both the X and Y direction. The code
    to do this and a resulting plot of this can be seen below.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的具体情况下，我们的网格图是对称的（x 和 y 方向上的特征值相同），所以单独定义 x 和 y 网格不是必要的，但这仍然是一个好习惯，因为在模拟时我们不会总是有这样的对称性。现在我们已经用网格图表示了材料，我们需要给它添加热量（正如我们在物理方程中看到的，热量传递必须有温差）。为了给材料添加热量，我们需要选择网格图中要加热的单元，并增加它们的温度索引。我们将继续保持简单，假设在
    X 和 Y 方向的 35–65 索引范围内添加 1000°C 的热量。下面可以看到执行此操作的代码和结果图。
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/1dfcaf285776fa345b28ef8eaeb95860.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1dfcaf285776fa345b28ef8eaeb95860.png)'
- en: 'Figure 3: Visualization of added heat to our mesh grid.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '图 3: 我们的网格图上增加热量的可视化。'
- en: We’ve added a patch of heat to our mesh grid, which is a good start but now
    we need to evolve our system through time to see how the heat transfers. We will
    need to develop a few more tools to do this. The first will be a find neighbors’
    temperature function, which given a cell can get the temperature off all neighboring
    cells. This function is given below and loops over all 8 bordering cells of a
    given cell but ignores the corners to only retrieve cells that are up, down, left
    and right. Another thing we have to consider when looking at all of a cell’s neighbors
    is **boundary conditions** or what we want to do when we hit the end of our grid.
    If we are at a grid cell that is already at the edge of the grid, looking for
    all of its neighbors will throw an error since they don’t all exist. We can handle
    this with a try except statement in our loop which will give our boundary condition
    when we try to look for a cell that does not exist. Our boundary condition can
    be filled with the temperature we want to assume outside of our grid. In our simulation,
    we are going to say this is room temperature, so when we calculate the heat transfer
    at our mesh grid edges, room temperature will always be given as a neighboring
    value to an edge cell.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在网格中添加了一片热区，这只是一个好的开始，但现在我们需要随着时间推移来演变我们的系统，以观察热量的传递。我们还需要开发几个工具来完成这项工作。第一个工具是查找邻居温度的函数，该函数可以获取所有邻近单元格的温度。下面给出的函数循环遍历了给定单元格的所有8个边界单元格，但忽略了角落，仅检索上、下、左、右的单元格。我们在查看一个单元格的所有邻居时，还需要考虑**边界条件**，即当我们到达网格的边缘时我们想要做什么。如果我们处于已经在网格边缘的网格单元格中，寻找所有邻居将抛出一个错误，因为它们并不都存在。我们可以在循环中使用try
    except语句来处理这一点，当我们尝试查找不存在的单元格时，它将给出我们的边界条件。我们的边界条件可以填充我们想要假设在网格外部的温度。在我们的模拟中，我们将假设这是室温，因此当我们计算网格边缘的热传递时，室温将始终作为邻近值提供给边缘单元格。
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The next function we have to develop will implement the 2-dimensional time dependent
    heat conduction equation we found in the last section. We solved for the computational
    equivalent for this equation so the implementation is straight forward and given
    below. The function completes the heat conduction equation by taking in the temperature
    of a given cell, the temperature of the cells around it, a time step of our choosing,
    and the thermal diffusivity of the cell material.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们需要开发的函数将实现上一节中找到的二维时间相关热传导方程。我们已经解决了这个方程的计算等效，因此实现是直接的，下面给出。该函数通过获取给定单元格的温度、周围单元格的温度、我们选择的时间步长以及单元材料的热扩散率来完成热传导方程。
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The last function we need will combine the two previous functions to loop over
    every cell in our mesh grid and update its temperature. For every cell in our
    grid we first run “getNeighbors” to get all of the neighboring temperatures and
    then we pass the neighboring temperatures plus the current cell temperature and
    other arguments to update the cell’s temperature.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要的最后一个函数将结合之前的两个函数，循环遍历网格中的每个单元格，并更新其温度。对于网格中的每个单元格，我们首先运行“getNeighbors”来获取所有邻近的温度，然后将邻近的温度加上当前单元格的温度以及其他参数传递给更新单元格的温度。
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Finally, we can use our heat transfer equation to update our original mesh grid.
    The final code snippet will update our grid with a 30 second time step and compare
    the before and after.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以使用我们的热传递方程来更新原始网格。最终的代码片段将用30秒的时间步长更新我们的网格，并比较前后的结果。
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/f0156e44fc119b4ec8a142e6352d3009.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f0156e44fc119b4ec8a142e6352d3009.png)'
- en: 'Figure 4: Updating our mesh grid with our heat transfer heat with a 30 second
    time step.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图4：用30秒的时间步长更新我们的网格热传递。
- en: We now have all the tools need to run conductive heat transfer simulations,
    we will run a few in the next section.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在拥有了进行导热传递模拟所需的所有工具，接下来我们将在下一节中运行几个模拟。
- en: Simulation
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟
- en: With all of out simulation tools created, all we have to do is put our heat
    transfer equation inside of a loop and evolve the system for as many time steps
    as we want. The code to do this is given as well as a function to visualize our
    simulation as a gif.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 创建完所有模拟工具后，我们只需将热传递方程放入循环中，并根据我们想要的时间步长来演变系统。给出的代码以及一个将我们的模拟可视化为gif的函数。
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/4e729ac1eb63dbdbd183ca4fef031961.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4e729ac1eb63dbdbd183ca4fef031961.png)'
- en: 'Figure 5: Gif of our conductive heat transfer simulation'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图5：我们的导热传递模拟的gif
- en: And there we have it. We have ran a simulation of conductive heat transfer and
    visualized it (with the cool “inferno” color map). With the generalized set of
    tools we developed, we can run many different simulations with different time
    steps, starting temperatures, materials and geometries. The next and final section
    will show off a couple more scenarios made with our tools.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。我们已经运行了导热传递的模拟并进行了可视化（使用酷炫的“火焰”色彩图）。凭借我们开发的一套通用工具，我们可以运行许多不同的模拟，包括不同的时间步长、起始温度、材料和几何形状。下一节也是最后一节将展示使用我们的工具制作的几个更多场景。
- en: Example Scenarios
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例场景
- en: Welding
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 焊接
- en: The following is a simulation of a sheet of brass and steel being welded together.
    What is interesting is the brass (left side) has about 3x the thermal conductivity
    as steel (right side) and we can see the difference in the material properties
    as the heat dissipates.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是黄铜和钢板焊接的模拟。值得注意的是，黄铜（左侧）的热导率约为钢材（右侧）的3倍，我们可以看到热量散失过程中材料属性的差异。
- en: Note that we can add heat into out simulation iteratively as well by adding
    to the temperature layer of our mesh grid inside of our simulating loop.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们还可以通过在模拟循环内向网格温度层中添加热量来迭代地增加热量。
- en: '![](../Images/22de145ce9c61740c40c45b9c1a481db.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/22de145ce9c61740c40c45b9c1a481db.png)'
- en: 'Figure 6: Simulation of welding brass and steel together.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '图 6: 黄铜与钢材焊接的模拟。'
- en: Bruner
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布鲁纳
- en: Here a stove top burner is being simulated by adding a circular patch of heat
    to the mesh grid. The heat is being added gradually (3°C per second) until the
    burner is turned off and allowed to cool.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，通过向网格中添加一个圆形热斑来模拟炉灶顶部的加热。热量逐渐添加（每秒3°C），直到炉灶关闭并允许其冷却。
- en: '![](../Images/e669c13ee6e98c5e9439482054ca727c.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e669c13ee6e98c5e9439482054ca727c.png)'
- en: 'Figure 7: Simulation of a stove top burner being heated up and turned off.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '图 7: 模拟炉灶顶部加热并关闭的过程。'
- en: Full Code
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完整代码
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: References
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1]Finite difference example: 1D explicit heat equation [http://geodynamics.usc.edu/~becker/teaching/557/problem_sets/problem_set_fd_explicit.pdf](http://geodynamics.usc.edu/~becker/teaching/557/problem_sets/problem_set_fd_explicit.pdf)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 有限差分示例：1D 显式热方程 [http://geodynamics.usc.edu/~becker/teaching/557/problem_sets/problem_set_fd_explicit.pdf](http://geodynamics.usc.edu/~becker/teaching/557/problem_sets/problem_set_fd_explicit.pdf)'
- en: '[2] Using the 2D Finite Difference Method for Heat Transfer Analysis [https://resources.system-analysis.cadence.com/blog/msa2022-using-the-2d-finite-difference-method-for-heat-transfer-analysis](https://resources.system-analysis.cadence.com/blog/msa2022-using-the-2d-finite-difference-method-for-heat-transfer-analysis)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] 使用 2D 有限差分法进行热传递分析 [https://resources.system-analysis.cadence.com/blog/msa2022-using-the-2d-finite-difference-method-for-heat-transfer-analysis](https://resources.system-analysis.cadence.com/blog/msa2022-using-the-2d-finite-difference-method-for-heat-transfer-analysis)'
- en: '[3] Heat Conduction Equation [https://cecs.wright.edu/~sthomas/htchapter02.pdf](https://cecs.wright.edu/~sthomas/htchapter02.pdf)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] 热传导方程 [https://cecs.wright.edu/~sthomas/htchapter02.pdf](https://cecs.wright.edu/~sthomas/htchapter02.pdf)'
- en: '[4] Unless otherwise cited, all figures in this article were created by the
    author.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[4] 除非另有引用，本文中的所有图形均由作者创建。'
