["```py\ndf = pd.read_csv('data.csv', skiprows=1)\n```", "```py\n# Rename columns\ndf.columns = ['week',\n              'generative_ai',\n              'virtual_reality',\n              'ai_ethics',\n              'computer_vision',\n              'nlp']\n\n# Replace `<1` values with `1`\ndf = df.replace('<1', 1)\n\n# Set index to the week\ndf = df.set_index('week')\n\n# Change all data types to 'int'\ndf = df.astype(int)\n\n# Extract Month and Year Columns\ndf['month'] = df.index.astype('datetime64[ns]').month\ndf['year'] = df.index.astype('datetime64[ns]').year.astype(str)\n\n# Filter to use only data in the last 4 months of the year\ndf_end_year = df[df['month'].isin([9, 10, 11, 12])]\n\n# Group by year and take the average interest score\ndf_average_interest = df_end_year.groupby('year').mean().round(1)\n\n# Drop the month column\ndf_average_interest = df_average_interest.drop(columns='month')\n```", "```py\n# Change all values into integers and tranpose the dataframe\ndf_combined = df_average_interest.astype(int).T.reset_index()\n\n# Rename the 'index' column to 'category'\ndf_combined = df_combined.rename(columns={'index': 'category'})\n\n# Filter dataframe to only the years of interest\nyear1 = '2022'\nyear2 = '2023'\ndf_final = df_combined[['category', year1, year2]].copy()\n\ndef percent_change(new, old):\n    return (100 * ((new - old)/old)).astype(int)\n\n# Calculate the interest change between the two years and the % change\ndf_final['change'] = df_final[year2] - df_final[year1]\ndf_final['percent_change'] = percent_change(df_final[year2], df_final[year1])\n\n# Sort the DataFrame by the absolute change for better visualization\ndf_final = df_final.sort_values(by='change', ascending=False)\n```", "```py\n# Create a dictionary to map categories to colors\ndict_colors = {\n    'generative_ai': 'seagreen',\n    'ai_ethics': 'grey',\n    'computer_vision': 'grey',\n    'nlp': 'grey',\n    'virtual_reality': 'purple'\n}\n\n# Set the figure size\nplt.figure(figsize=(5, 7))\n\n# Create a slopegraph by plotting lines between 2022 and 2023 values\nfor index, row in df_final.iterrows():\n\n    # set color \n    color = dict_colors[row['category']]\n\n    # Set the label color and pct change labels to match the line color \n    plt.text(-.03, \n             row[year1], \n             str(row[year1]), \n             ha='right', \n             va='center', \n             color=color, \n             fontsize=12)\n    plt.text(1.03, \n             row[year2], \n             str(row[year2]), \n             ha='left', \n             va='center', \n             color=color, \n             fontsize=12)\n    plt.text(1.2, \n             row[year2], \n             f'{row[\"percent_change\"]:.0f}%', \n             ha='center', \n             va='center', \n             color=color, \n             fontsize=12)\n    plt.text(-.12, \n             row[year1], \n             row['category'], \n             ha='right', \n             va='center', \n             fontsize=12, \n             color=color)\n\n    # plot lineplot for each category\n    x_values = [0, 1]\n    y_values = [row[year1], row[year2]]\n    plt.plot(x_values, y_values, marker='o', color=color)\n\n# Set x and y ticks\nplt.yticks([])\nplt.xticks([0, 1], ['2022', '2023'])\n\n# Remove spines\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\n\n# Add vertical light grey lines at x-values 0 and 1\nplt.axvline(x=0, color='lightgrey', linestyle='--', alpha=0.6)\nplt.axvline(x=1, color='lightgrey', linestyle='--', alpha=0.6)\n\n# Set title\nplt.text(x=-.45,\n         y=58,\n         s='AI / Tech Trends Interest Change',\n         ha='left',\n         va='center',\n         color='black',\n         fontsize=30)\n\n# Show plot\nplt.show()\n```"]