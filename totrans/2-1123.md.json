["```py\npip install polars\n```", "```py\nimport numpy as np\n\nnp.random.seed(0)\n\nN_CUSTOMERS = 1_000_000\nN_PRODUCTS = 50_000\nN_PURCHASES_MEAN = 100 # customers buy 100 articles on average\n\nwith open(\"transactions.csv\", \"w\") as file:\n    file.write(f\"customer_id,article_id\\n\") # header\n\n    for customer_id in range(N_CUSTOMERS):\n        n_purchases = np.random.poisson(lam=N_PURCHASES_MEAN)\n        articles = np.random.randint(low=0, high=N_PRODUCTS, size=n_purchases)\n        for article_id in articles:\n            file.write(f\"{customer_id},{article_id}\\n\") # transaction as a row\n```", "```py\nimport pandas as pd\n\ndata = pd.read_csv(\"transactions.csv\", usecols=[\"article_id\"])\npurchase_counts = data[\"article_id\"].value_counts()\nmost_popular_articles = purchase_counts.head(10).index.tolist()\n```", "```py\nmost_popular_articles = (\n    pd.read_csv(\"transactions.csv\", usecols=[\"article_id\"])\n    .squeeze() # turn the dataframe with one column into a series\n    .value_counts()\n    .head(10)\n    .index\n    .tolist()\n)\n```", "```py\nimport polars as pl\n\nmost_popular_articles = (\n    pl.read_csv(\"transactions.csv\", columns=[\"article_id\"])\n    .get_column(\"article_id\")\n    .value_counts()\n    .sort(\"counts\", descending=True) # value_counts does not sort automatically\n    .head(10)\n    .get_column(\"article_id\") # there are no indices in polars\n    .to_list()\n)\n```", "```py\nmost_popular_articles_per_user = (\n    pl.read_csv(\"transactions.csv\")\n    .group_by([\"customer_id\", \"article_id\"]) # first arrow from the picture\n    .agg(pl.count())                        # first arrow from the picture\n    .group_by(\"customer_id\")                                               # second arrow\n    .agg(pl.col(\"article_id\").sort_by(\"count\", descending=True).head(10)) # second arrow\n)\n```", "```py\nimproved_recommendations = (\n    most_popular_articles_per_user\n    .with_columns([\n        pl.col(\"article_id\").fill_null([]).alias(\"personal_top_<=10\"),\n        pl.Series([most_popular_articles]).alias(\"global_top_10\")\n    ])\n    .with_columns(\n        pl.col(\"personal_top_<=10\").list.concat(pl.col(\"global_top_10\")).list.head(10).alias(\"padded_recommendations\")\n    )\n    .select([\"customer_id\", \"padded_recommendations\"])\n)\n```"]