- en: 'Julia for the Modern Data Scientist: 5 Excellent Features You Can’t Ignore'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代数据科学家必备的 Julia：5 个你不能忽视的卓越特性
- en: 原文：[https://towardsdatascience.com/julia-for-the-modern-data-scientist-5-excellent-features-you-cant-ignore-c5b5b389547f](https://towardsdatascience.com/julia-for-the-modern-data-scientist-5-excellent-features-you-cant-ignore-c5b5b389547f)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/julia-for-the-modern-data-scientist-5-excellent-features-you-cant-ignore-c5b5b389547f](https://towardsdatascience.com/julia-for-the-modern-data-scientist-5-excellent-features-you-cant-ignore-c5b5b389547f)
- en: Explained with fun and wit
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以趣味和机智进行解释
- en: '[](https://ibexorigin.medium.com/?source=post_page-----c5b5b389547f--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----c5b5b389547f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c5b5b389547f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c5b5b389547f--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----c5b5b389547f--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ibexorigin.medium.com/?source=post_page-----c5b5b389547f--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----c5b5b389547f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c5b5b389547f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c5b5b389547f--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----c5b5b389547f--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c5b5b389547f--------------------------------)
    ·9 min read·May 24, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c5b5b389547f--------------------------------)
    ·9 分钟阅读·2023 年 5 月 24 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/f36f5b7ab356b04818fef14c6844a5a1.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f36f5b7ab356b04818fef14c6844a5a1.png)'
- en: Image by me with Midjourney.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我使用 Midjourney 制作。
- en: Yes, Python is more widely used. Yes, it has more libraries. Yes, I make a living
    through Python, but these don’t prove the core native language is better than
    Julia.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，Python 的使用更为广泛。是的，它有更多的库。是的，我通过 Python 赚取生计，但这些并不能证明核心本地语言比 Julia 更好。
- en: This is like the iOS vs. Android debate. Just because more devices run on Android
    (many uses cases for Python) and it has much more third-party integrations (Python
    libraries), it doesn’t mean Android (Python) is actually better than iOS (bare-bones
    Julia).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这就像 iOS 与 Android 的争论一样。仅仅因为更多的设备运行在 Android 上（Python 的许多使用案例），并且它有更多的第三方集成（Python
    库），并不意味着 Android（Python）实际上比 iOS（基础的 Julia）更好。
- en: In fact, there are so many iOS features that Android has admired for years despite
    its massive user base. In this article, we will look at a few such features of
    Julia that I am sure Python developers would love to have.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，有很多 iOS 功能是 Android 多年来一直羡慕的，尽管 Android 拥有庞大的用户基础。在这篇文章中，我们将看看 Julia 的一些特性，我相信
    Python 开发者会喜欢这些特性。
- en: 1\. Speed
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 速度
- en: Julia users are so weirdly proud of the speed of their language — like a parent
    of their child. And they are right in doing so. Julia is one of the fastest languages
    in history and belongs in the [PetaFlop group](https://discourse.julialang.org/t/what-makes-a-language-reach-the-petaflop-mark/79963),
    along with C, C++, and Fortran.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 用户对其语言的速度感到异常自豪——就像对自己孩子的骄傲一样。他们这样做是对的。Julia 是历史上最快的语言之一，并且与 C、C++ 和 Fortran
    一起，属于[PetaFlop 组](https://discourse.julialang.org/t/what-makes-a-language-reach-the-petaflop-mark/79963)。
- en: Petaflops is a unit of computing speed equal to one thousand million million
    (¹⁰¹⁵) floating-point operations per second.
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Petaflops 是一个计算速度单位，相当于每秒一千亿亿（¹⁰¹⁵）次浮点运算。
- en: Now, most don’t have a machine that can reach PetaFlops, so we can only try
    a few basic things. Let’s start by comparing Flux.jl and TensorFlow, which are
    cornerstone deep learning libraries in both languages’ respective ecosystems.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，大多数人没有能够达到 PetaFlops 的机器，因此我们只能尝试一些基本操作。我们先来比较一下 Flux.jl 和 TensorFlow，它们是这两种语言各自生态系统中的基石深度学习库。
- en: 'We will use TensorFlow’s `GradientTape` to differentiate a polynomial and measure
    the performance:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 TensorFlow 的 `GradientTape` 来对一个多项式进行微分并测量性能：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The first run took more than one second, so I reran the code block to give
    TensorFlow a head start. Now, let’s do the same for Julia:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次运行花费了超过一秒钟，所以我重新运行了代码块，让 TensorFlow 有一个开局优势。现在，让我们对 Julia 做同样的事情：
- en: '![](../Images/08d1a650e680dcd3bf9eda93f120c51f.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/08d1a650e680dcd3bf9eda93f120c51f.png)'
- en: Image by me
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我制作
- en: The first run takes ~0.002, already faster than TensorFlow’s head start. The
    second run of Flux.jl is about 450 times faster! And it gets faster for other
    inputs as we run the code more times.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次运行大约需要 ~0.002，已经比 TensorFlow 的起始速度快。Flux.jl 的第二次运行速度快了大约 450 倍！随着我们运行代码更多次，它对其他输入也变得更快。
- en: If you think it is too narrow to compare deep learning libraries, let’s try
    native Python and Julia code. We will benchmark a simple function that returns
    the *nth* number of the Fibonacci sequence; that’ll be good enough.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得比较深度学习库范围太窄，我们可以尝试原生 Python 和 Julia 代码。我们将基准测试一个返回 *第 n 个* Fibonacci 数字的简单函数，这样就足够了。
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: I stupidly got into this comparison without knowing how much Python would take
    to calculate the 100th number in the Fibonacci sequence. It turns out it takes
    too darn long.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我愚蠢地进行这次比较时不知道 Python 计算 Fibonacci 数列第 100 个数字需要多长时间。结果发现要花很长时间。
- en: 'So, I tried the 40th number, and it took about 21 seconds:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我尝试了第 40 个数字，大约花了 21 秒：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Keep in mind that I deliberately chose the slowest method of finding the Fibonacci
    numbers to see how the languages compare in the worst-case scenarios.
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请记住，我故意选择了最慢的 Fibonacci 数字计算方法，以便查看在最坏情况下这些语言的比较。
- en: Now, let’s try Julia.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试 Julia。
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Julia’s version is around 40 times faster. This is like the twisted real-life
    version of the tortoise and the hare tale that ends with the hare consistently
    winning the race.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 的版本快了大约 40 倍。这就像现实生活中扭曲的乌龟与兔子的故事，最后兔子一直赢得比赛。
- en: To be fair to Python, NumPy is actually faster than Julia for matrix manipulation,
    but we have to keep in mind that most of NumPy is written in C.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 公平地说，NumPy 实际上在矩阵操作方面比 Julia 更快，但我们必须记住 NumPy 大部分是用 C 编写的。
- en: 2\. Interoperability
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 互操作性
- en: The inspiration for Julia comes from many languages, as stated in [the Greed
    of Julia](https://julialang.org/blog/2012/02/why-we-created-julia/). This makes
    Julia great friends with other languages, as you can easily call C, Python, Fortran,
    or R code. This allows smooth integration of code and libraries between these
    languages.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 的灵感来源于多种语言，如 [Julia 的贪婪](https://julialang.org/blog/2012/02/why-we-created-julia/)
    中所述。这使得 Julia 与其他语言友好，你可以轻松调用 C、Python、Fortran 或 R 代码。这允许这些语言之间的代码和库的平滑集成。
- en: 'Since we don’t care about the rest (including R), we will check out the `PyCall`
    package to run a Python library like Pandas:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们不关心其他内容（包括 R），我们将查看 `PyCall` 包，以运行像 Pandas 这样的 Python 库：
- en: '[PRE13]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/59f707f9a2cda85d5694dbdaa9404abd.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/59f707f9a2cda85d5694dbdaa9404abd.png)'
- en: Image by author
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: The `pyimport` function loads a Python library into a variable. Then, we can
    use Julia syntax and objects inside Pandas functions and classes, like we used
    a Julia dictionary to create a DataFrame above.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyimport` 函数将 Python 库加载到变量中。然后，我们可以在 Pandas 函数和类中使用 Julia 语法和对象，就像我们用 Julia
    字典创建 DataFrame 一样。'
- en: 'The `pd` object can be used almost identically to Python (`.plot()` is not
    supported yet):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd` 对象可以几乎与 Python 相同使用（`.plot()` 尚不支持）：'
- en: '[PRE15]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](../Images/157998acdb13c81e0883155220df20ad.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/157998acdb13c81e0883155220df20ad.png)'
- en: Image by me
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供
- en: 3\. Math support
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 数学支持
- en: One of Julia’s main selling points is that it is geared toward scientific computing,
    which means it has excellent support for math and statistics.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 的主要卖点之一是它专注于科学计算，这意味着它对数学和统计有很好的支持。
- en: 'First of all, let’s check out MATLAB-like syntax for writing polynomials:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看 MATLAB 风格的多项式书写语法：
- en: '[PRE19]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You can drop the multiplication symbol when writing coefficients and variables.
    This makes the code so much more readable and easier to type.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 写系数和变量时可以省略乘法符号。这使得代码更易读，更容易输入。
- en: 'Julia’s installation also comes with a whole suite of commonly-used math functions.
    Here is a list of powers, logarithms, and roots:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 的安装还附带了一整套常用的数学函数。以下是幂、对数和根的列表：
- en: '![](../Images/32a9678ef214615d3a9c612eda8f59d9.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/32a9678ef214615d3a9c612eda8f59d9.png)'
- en: Screenshot of Julia docs.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 文档的截图。
- en: 'And about 30 trigonometry functions:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以及大约 30 个三角函数：
- en: '![](../Images/136d517d95bc0e239ef4cf6f31585d24.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/136d517d95bc0e239ef4cf6f31585d24.png)'
- en: Screenshot of Julia docs.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 文档的截图。
- en: All these functions are directly available from the global scope — no imports
    are necessary. In Python, you would need the `math` module for basic math or install
    extra dependencies like `NumPy` or `SciPy`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些函数直接从全局范围内提供 —— 不需要导入。在 Python 中，你需要 `math` 模块来进行基本数学运算，或者安装额外的依赖项，如 `NumPy`
    或 `SciPy`。
- en: I think it’s embarrassing for a language that is acknowledged as the king of
    scientific computing not to support basic calculus and linear algebra natively,
    not to mention the lack of vectorization.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为，对于一个被公认为科学计算之王的语言，不支持基本的微积分和线性代数，以及缺乏向量化功能是很尴尬的。
- en: 'In Julia, vectorization is enabled for any array or matrix using any function,
    both native and user-defined:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Julia 中，任何数组或矩阵使用任何函数（无论是原生函数还是用户定义函数）都可以实现向量化：
- en: '[PRE24]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Simply adding a `.` (dot) before any function makes it vectorized (applies an
    operation to all array elements simultaneously rather than in a loop), which results
    in substantial performance gains.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在任何函数前添加一个 `.`（点），即可实现向量化（对所有数组元素同时应用操作，而不是在循环中），这会带来显著的性能提升。
- en: 'Vectorization is also possible for named functions; just add the dot before
    opening the brackets:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 向量化对于命名函数也是可能的；只需在打开括号前加点：
- en: '[PRE31]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 4\. Multiple dispatch
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4. 多重分发
- en: Julia is one of the best languages that implement multiple dispatch.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 是实现多重分发的最佳语言之一。
- en: Multiple dispatch is a technique that allows a single function to have multiple
    method implementations, each specialized for specific argument types. This technique
    is known as “generic function” or “multimethods”.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 多重分发是一种技术，允许一个函数具有多种方法实现，每种实现都专门针对特定的参数类型。这种技术被称为“通用函数”或“多方法”。
- en: Languages like Common Lisp, Dylan, and Scala also support this feature. Julia’s
    implementation is unique in that it is built-in to the language and is used extensively
    in the standard library, which results in more consistent and efficient use of
    the feature. Julia’s multiple dispatch is also designed to work seamlessly with
    its JIT compiler, which results in faster execution of code.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 像 Common Lisp、Dylan 和 Scala 这样的语言也支持此功能。Julia 的实现独特在于它是内置于语言中的，并且在标准库中广泛使用，这使得该功能的使用更加一致和高效。Julia
    的多重分发还设计为与其 JIT 编译器无缝配合，从而实现更快的代码执行。
- en: 'Here is an example of multiple dispatch with a simple `add` function:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的 `add` 函数的多重分发示例：
- en: '[PRE35]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Even if you don’t understand Julia, you can see that we are defining the addition
    operation between five different pairs of data types:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你不懂 Julia，你也可以看到我们在定义五种不同数据类型对之间的加法操作：
- en: Numbers
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数字
- en: Strings
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字符串
- en: Number and a unitful quantity, like meters or centimeters
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数字和带单位的量，如米或厘米
- en: A unitful quantity and number
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 带单位的量和数字
- en: Unitful quantities
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 带单位的量
- en: You can define `add` for as many pairs of data types as you want, and it will
    behave differently each time without any performance loss.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为任意多的数据类型对定义 `add`，它每次都会有不同的表现，而不会有任何性能损失。
- en: Python uses duck typing in functions and classes to determine an object’s type
    and behavior at runtime. While duck typing allows flexibility in code, it is less
    predictable and error-prone than multiple dispatch.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Python 在函数和类中使用鸭子类型来确定对象的类型和行为。这种鸭子类型虽然允许代码的灵活性，但比多重分发的预测性差且容易出错。
- en: 5\. The command-line
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5. 命令行
- en: I don’t think the Python Interpreter has been updated ever since Guido Van Rossum
    released the initial version of Python. It is painfully too basic and almost useless.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为自 Guido Van Rossum 发布 Python 初始版本以来，Python 解释器就没有更新过。它实在是过于基础，几乎没有用。
- en: As for the Julia REPL, it is like Jupyter but on the terminal. Let’s see a few
    of its great features, starting with the help mode.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 至于 Julia 的 REPL，它类似于 Jupyter 但在终端中运行。让我们看看它的一些伟大功能，从帮助模式开始。
- en: 'After entering the REPL by typing `julia`, you can get help on any variable,
    function, or class by pressing ''?'' and typing the name:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 输入 `julia` 进入 REPL 后，你可以通过按下‘？’并输入名称来获取任何变量、函数或类的帮助：
- en: '![](../Images/6acd12b4c8515adc337732a85ba4dd72.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6acd12b4c8515adc337732a85ba4dd72.png)'
- en: GIF by author
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: GIF 由作者提供
- en: As soon as you press ‘?’, the REPL enters the help mode. The output is nicely
    formatted with some code highlighting, which is already orders of magnitude better
    than the `help` function of Python Interpreter.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦按下‘？’，REPL 进入帮助模式。输出格式整齐，带有一些代码高亮，这已经比 Python 解释器的 `help` 函数好得多。
- en: The REPL also has a special `ans` variable, which stores the result of the last
    expression. This is like the `_` (underscore) operator in Jupyter, which performs
    similar functionality.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: REPL 还有一个特殊的 `ans` 变量，用于存储最后一个表达式的结果。这类似于 Jupyter 中的 `_`（下划线）操作符，功能类似。
- en: '![](../Images/1184f027df7de02eb7586dd163edd7be.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1184f027df7de02eb7586dd163edd7be.png)'
- en: GIF by author
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: GIF 由作者提供
- en: When in the REPL mode, you may need to run a terminal command or two, but you
    don’t want to lose the session variables. In Python Interpreter, that’s not possible.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在REPL模式下，您可能需要运行一两个终端命令，但又不希望丢失会话变量。在Python解释器中，这是不可能的。
- en: In the Julia REPL, you can enter the Shell Mode by pressing ‘;’ (semi-colon)
    on a new line. There, you can run as many terminal commands as you want and then
    come back to the session by pressing `Backspace`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在Julia REPL中，您可以通过在新行中按‘;’（分号）进入Shell模式。在那里，您可以运行任意数量的终端命令，然后通过按`Backspace`返回到会话中。
- en: '![](../Images/cb780a84ebda677c47c8b62291f523e4.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cb780a84ebda677c47c8b62291f523e4.png)'
- en: GIF by author
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的GIF
- en: Oh and did I mention the REPL has tab completion as well?
  id: totrans-118
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 哦，我提到过REPL还有制表符补全功能吗？
- en: 'The REPL also comes with a few magic commands like `@time`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: REPL还附带一些魔法命令，如`@time`：
- en: '[PRE40]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Conclusion
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, we’ve seen some of the best features of Julia compared to Python.
    While it will take quite a while for Julia to catch up with Python — definitely
    years — it is definitely off to a great start.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们看到了一些Julia相对于Python的最佳功能。虽然Julia要追赶Python还需要相当长的时间——绝对是几年——但它确实有了一个很好的开端。
- en: Analyzing the [TIOBE index](https://www.tiobe.com/tiobe-index/), we can see
    that Julia is one of the fastest-growing languages in the world relative to their
    initial release. This makes Julia a language worth keeping an eye on for anyone
    working in data science, scientific computing, or any other field that requires
    high performance and expressive code.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 分析[TIOBE指数](https://www.tiobe.com/tiobe-index/)，我们可以看到，Julia是相对于其初始发布而言增长最快的语言之一。这使得Julia成为任何从事数据科学、科学计算或需要高性能和表达性代码的领域的工作者值得关注的语言。
- en: Loved this article and, let’s face it, its bizarre writing style? Imagine having
    access to dozens more just like it, all written by a brilliant, charming, witty
    author (that’s me, by the way :).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 喜欢这篇文章和它那奇怪的写作风格吗？想象一下，您可以访问更多类似的文章，全部由一位才华横溢、迷人、风趣的作者（就是我 :）。
- en: For only 4.99$ membership, you will get access to not just my stories, but a
    treasure trove of knowledge from the best and brightest minds on Medium. And if
    you use [my referral link](https://ibexorigin.medium.com/membership), you will
    earn my **supernova of gratitude** and a virtual high-five for supporting my work.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 仅需4.99美元的会员费用，您不仅能获得我的故事，还有来自Medium上最聪明才智的知识宝库。如果您使用[我的推荐链接](https://ibexorigin.medium.com/membership)，您将获得我的**超级感激**和一个虚拟的击掌，以支持我的工作。
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----c5b5b389547f--------------------------------)
    [## Join Medium with my referral link — Bex T.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ibexorigin.medium.com/membership?source=post_page-----c5b5b389547f--------------------------------)
    [## 使用我的推荐链接加入Medium — Bex T.'
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取独家访问权限，享受所有⚡高级⚡内容，无限制地浏览Medium。通过买一杯咖啡来支持我的工作…
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----c5b5b389547f--------------------------------)
    ![](../Images/a01b5e4fb641db5f35b8172a4388e821.png)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----c5b5b389547f--------------------------------)
    ![](../Images/a01b5e4fb641db5f35b8172a4388e821.png)
- en: Image by me. Via Midjourney.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我提供。通过Midjourney。
