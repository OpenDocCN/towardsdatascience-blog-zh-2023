- en: 'Julia for the Modern Data Scientist: 5 Excellent Features You Can’t Ignore'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/julia-for-the-modern-data-scientist-5-excellent-features-you-cant-ignore-c5b5b389547f](https://towardsdatascience.com/julia-for-the-modern-data-scientist-5-excellent-features-you-cant-ignore-c5b5b389547f)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explained with fun and wit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/?source=post_page-----c5b5b389547f--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----c5b5b389547f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c5b5b389547f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c5b5b389547f--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----c5b5b389547f--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c5b5b389547f--------------------------------)
    ·9 min read·May 24, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f36f5b7ab356b04818fef14c6844a5a1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me with Midjourney.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, Python is more widely used. Yes, it has more libraries. Yes, I make a living
    through Python, but these don’t prove the core native language is better than
    Julia.
  prefs: []
  type: TYPE_NORMAL
- en: This is like the iOS vs. Android debate. Just because more devices run on Android
    (many uses cases for Python) and it has much more third-party integrations (Python
    libraries), it doesn’t mean Android (Python) is actually better than iOS (bare-bones
    Julia).
  prefs: []
  type: TYPE_NORMAL
- en: In fact, there are so many iOS features that Android has admired for years despite
    its massive user base. In this article, we will look at a few such features of
    Julia that I am sure Python developers would love to have.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Speed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Julia users are so weirdly proud of the speed of their language — like a parent
    of their child. And they are right in doing so. Julia is one of the fastest languages
    in history and belongs in the [PetaFlop group](https://discourse.julialang.org/t/what-makes-a-language-reach-the-petaflop-mark/79963),
    along with C, C++, and Fortran.
  prefs: []
  type: TYPE_NORMAL
- en: Petaflops is a unit of computing speed equal to one thousand million million
    (¹⁰¹⁵) floating-point operations per second.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now, most don’t have a machine that can reach PetaFlops, so we can only try
    a few basic things. Let’s start by comparing Flux.jl and TensorFlow, which are
    cornerstone deep learning libraries in both languages’ respective ecosystems.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use TensorFlow’s `GradientTape` to differentiate a polynomial and measure
    the performance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The first run took more than one second, so I reran the code block to give
    TensorFlow a head start. Now, let’s do the same for Julia:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/08d1a650e680dcd3bf9eda93f120c51f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me
  prefs: []
  type: TYPE_NORMAL
- en: The first run takes ~0.002, already faster than TensorFlow’s head start. The
    second run of Flux.jl is about 450 times faster! And it gets faster for other
    inputs as we run the code more times.
  prefs: []
  type: TYPE_NORMAL
- en: If you think it is too narrow to compare deep learning libraries, let’s try
    native Python and Julia code. We will benchmark a simple function that returns
    the *nth* number of the Fibonacci sequence; that’ll be good enough.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: I stupidly got into this comparison without knowing how much Python would take
    to calculate the 100th number in the Fibonacci sequence. It turns out it takes
    too darn long.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, I tried the 40th number, and it took about 21 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Keep in mind that I deliberately chose the slowest method of finding the Fibonacci
    numbers to see how the languages compare in the worst-case scenarios.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now, let’s try Julia.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Julia’s version is around 40 times faster. This is like the twisted real-life
    version of the tortoise and the hare tale that ends with the hare consistently
    winning the race.
  prefs: []
  type: TYPE_NORMAL
- en: To be fair to Python, NumPy is actually faster than Julia for matrix manipulation,
    but we have to keep in mind that most of NumPy is written in C.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Interoperability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The inspiration for Julia comes from many languages, as stated in [the Greed
    of Julia](https://julialang.org/blog/2012/02/why-we-created-julia/). This makes
    Julia great friends with other languages, as you can easily call C, Python, Fortran,
    or R code. This allows smooth integration of code and libraries between these
    languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we don’t care about the rest (including R), we will check out the `PyCall`
    package to run a Python library like Pandas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/59f707f9a2cda85d5694dbdaa9404abd.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The `pyimport` function loads a Python library into a variable. Then, we can
    use Julia syntax and objects inside Pandas functions and classes, like we used
    a Julia dictionary to create a DataFrame above.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `pd` object can be used almost identically to Python (`.plot()` is not
    supported yet):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/157998acdb13c81e0883155220df20ad.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by me
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Math support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of Julia’s main selling points is that it is geared toward scientific computing,
    which means it has excellent support for math and statistics.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, let’s check out MATLAB-like syntax for writing polynomials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: You can drop the multiplication symbol when writing coefficients and variables.
    This makes the code so much more readable and easier to type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Julia’s installation also comes with a whole suite of commonly-used math functions.
    Here is a list of powers, logarithms, and roots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/32a9678ef214615d3a9c612eda8f59d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of Julia docs.
  prefs: []
  type: TYPE_NORMAL
- en: 'And about 30 trigonometry functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/136d517d95bc0e239ef4cf6f31585d24.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of Julia docs.
  prefs: []
  type: TYPE_NORMAL
- en: All these functions are directly available from the global scope — no imports
    are necessary. In Python, you would need the `math` module for basic math or install
    extra dependencies like `NumPy` or `SciPy`.
  prefs: []
  type: TYPE_NORMAL
- en: I think it’s embarrassing for a language that is acknowledged as the king of
    scientific computing not to support basic calculus and linear algebra natively,
    not to mention the lack of vectorization.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Julia, vectorization is enabled for any array or matrix using any function,
    both native and user-defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Simply adding a `.` (dot) before any function makes it vectorized (applies an
    operation to all array elements simultaneously rather than in a loop), which results
    in substantial performance gains.
  prefs: []
  type: TYPE_NORMAL
- en: 'Vectorization is also possible for named functions; just add the dot before
    opening the brackets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 4\. Multiple dispatch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Julia is one of the best languages that implement multiple dispatch.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple dispatch is a technique that allows a single function to have multiple
    method implementations, each specialized for specific argument types. This technique
    is known as “generic function” or “multimethods”.
  prefs: []
  type: TYPE_NORMAL
- en: Languages like Common Lisp, Dylan, and Scala also support this feature. Julia’s
    implementation is unique in that it is built-in to the language and is used extensively
    in the standard library, which results in more consistent and efficient use of
    the feature. Julia’s multiple dispatch is also designed to work seamlessly with
    its JIT compiler, which results in faster execution of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of multiple dispatch with a simple `add` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Even if you don’t understand Julia, you can see that we are defining the addition
    operation between five different pairs of data types:'
  prefs: []
  type: TYPE_NORMAL
- en: Numbers
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Strings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Number and a unitful quantity, like meters or centimeters
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A unitful quantity and number
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unitful quantities
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can define `add` for as many pairs of data types as you want, and it will
    behave differently each time without any performance loss.
  prefs: []
  type: TYPE_NORMAL
- en: Python uses duck typing in functions and classes to determine an object’s type
    and behavior at runtime. While duck typing allows flexibility in code, it is less
    predictable and error-prone than multiple dispatch.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. The command-line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I don’t think the Python Interpreter has been updated ever since Guido Van Rossum
    released the initial version of Python. It is painfully too basic and almost useless.
  prefs: []
  type: TYPE_NORMAL
- en: As for the Julia REPL, it is like Jupyter but on the terminal. Let’s see a few
    of its great features, starting with the help mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'After entering the REPL by typing `julia`, you can get help on any variable,
    function, or class by pressing ''?'' and typing the name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6acd12b4c8515adc337732a85ba4dd72.png)'
  prefs: []
  type: TYPE_IMG
- en: GIF by author
  prefs: []
  type: TYPE_NORMAL
- en: As soon as you press ‘?’, the REPL enters the help mode. The output is nicely
    formatted with some code highlighting, which is already orders of magnitude better
    than the `help` function of Python Interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: The REPL also has a special `ans` variable, which stores the result of the last
    expression. This is like the `_` (underscore) operator in Jupyter, which performs
    similar functionality.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1184f027df7de02eb7586dd163edd7be.png)'
  prefs: []
  type: TYPE_IMG
- en: GIF by author
  prefs: []
  type: TYPE_NORMAL
- en: When in the REPL mode, you may need to run a terminal command or two, but you
    don’t want to lose the session variables. In Python Interpreter, that’s not possible.
  prefs: []
  type: TYPE_NORMAL
- en: In the Julia REPL, you can enter the Shell Mode by pressing ‘;’ (semi-colon)
    on a new line. There, you can run as many terminal commands as you want and then
    come back to the session by pressing `Backspace`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cb780a84ebda677c47c8b62291f523e4.png)'
  prefs: []
  type: TYPE_IMG
- en: GIF by author
  prefs: []
  type: TYPE_NORMAL
- en: Oh and did I mention the REPL has tab completion as well?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The REPL also comes with a few magic commands like `@time`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this article, we’ve seen some of the best features of Julia compared to Python.
    While it will take quite a while for Julia to catch up with Python — definitely
    years — it is definitely off to a great start.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing the [TIOBE index](https://www.tiobe.com/tiobe-index/), we can see
    that Julia is one of the fastest-growing languages in the world relative to their
    initial release. This makes Julia a language worth keeping an eye on for anyone
    working in data science, scientific computing, or any other field that requires
    high performance and expressive code.
  prefs: []
  type: TYPE_NORMAL
- en: Loved this article and, let’s face it, its bizarre writing style? Imagine having
    access to dozens more just like it, all written by a brilliant, charming, witty
    author (that’s me, by the way :).
  prefs: []
  type: TYPE_NORMAL
- en: For only 4.99$ membership, you will get access to not just my stories, but a
    treasure trove of knowledge from the best and brightest minds on Medium. And if
    you use [my referral link](https://ibexorigin.medium.com/membership), you will
    earn my **supernova of gratitude** and a virtual high-five for supporting my work.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----c5b5b389547f--------------------------------)
    [## Join Medium with my referral link — Bex T.'
  prefs: []
  type: TYPE_NORMAL
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----c5b5b389547f--------------------------------)
    ![](../Images/a01b5e4fb641db5f35b8172a4388e821.png)
  prefs: []
  type: TYPE_NORMAL
- en: Image by me. Via Midjourney.
  prefs: []
  type: TYPE_NORMAL
