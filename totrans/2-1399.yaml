- en: Lazy Evaluation Using Recursive Python Generators
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 懒惰评估使用递归 Python 生成器
- en: 原文：[https://towardsdatascience.com/lazy-evaluation-using-recursive-python-generators-9ee6af0dd803](https://towardsdatascience.com/lazy-evaluation-using-recursive-python-generators-9ee6af0dd803)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/lazy-evaluation-using-recursive-python-generators-9ee6af0dd803](https://towardsdatascience.com/lazy-evaluation-using-recursive-python-generators-9ee6af0dd803)
- en: Can recursive functions use *“lazy evaluation”*? — Yes, they can — Using Python’s
    generator functions!
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 递归函数可以使用*“懒惰评估”*吗？——是的，它们可以——通过使用 Python 的生成器函数！
- en: '[](https://medium.com/@martin.heinz?source=post_page-----9ee6af0dd803--------------------------------)[![Martin
    Heinz](../Images/a8d1540fd32998ee9bda4af0f0232f7d.png)](https://medium.com/@martin.heinz?source=post_page-----9ee6af0dd803--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9ee6af0dd803--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9ee6af0dd803--------------------------------)
    [Martin Heinz](https://medium.com/@martin.heinz?source=post_page-----9ee6af0dd803--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@martin.heinz?source=post_page-----9ee6af0dd803--------------------------------)[![Martin
    Heinz](../Images/a8d1540fd32998ee9bda4af0f0232f7d.png)](https://medium.com/@martin.heinz?source=post_page-----9ee6af0dd803--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9ee6af0dd803--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9ee6af0dd803--------------------------------)
    [Martin Heinz](https://medium.com/@martin.heinz?source=post_page-----9ee6af0dd803--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9ee6af0dd803--------------------------------)
    ·5 min read·Jan 4, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9ee6af0dd803--------------------------------)
    ·5 分钟阅读·2023年1月4日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/84db954d46d54cd7ea660368b0737fa3.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/84db954d46d54cd7ea660368b0737fa3.png)'
- en: Generated with Stable Diffusion
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 生成自稳定扩散
- en: We all are familiar with Python’s generators and all their benefits. But, what
    if I told you that we can make them even better by combining them with recursion?
    So, let’s see how we can use them to implement *“lazy recursion”* and supercharge
    what we already do with generators in Python!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都熟悉 Python 的生成器及其所有优点。但是，如果我告诉你我们可以通过将生成器与递归结合起来，使它们变得更好呢？所以，让我们看看如何利用它们来实现*“懒惰递归”*，并提升我们在
    Python 中使用生成器的效果！
- en: Why Even Bother?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么还要费心？
- en: Before we get into the code, let’s first ask ourselves *“Why even bother? Do
    we really need recursive generators?”*. And the answer is… it depends. Naturally,
    a recursive generator will share both pros and cons of both generators as well
    as normal recursive functions.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入代码之前，先问自己*“为什么还要费心？我们真的需要递归生成器吗？”*答案是……这要视情况而定。自然，递归生成器将会兼具生成器和普通递归函数的优缺点。
- en: For the generators, the number one reason why one would use them is *“lazy”*
    evaluation — that is — computing elements one at the time rather than all at once.
    As for the recursion, it simply makes sense for certain algorithms or problems
    which it can solve elegantly and succinctly, such as tree traversal.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于生成器而言，使用它们的首要原因是*“懒惰”*评估——即一次计算一个元素，而不是一次计算全部。至于递归，它对某些算法或问题的解决方式是自然的，例如树的遍历。
- en: Therefore, a situations where recursive generators would make sense are naturally
    recursive algorithms that might process large amount of data or elements, and
    therefore consume a lot of memory if run *“eagerly”*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，递归生成器适合的情况自然是递归算法，这些算法可能处理大量数据或元素，因此如果*“急切”*地运行，会消耗大量内存。
- en: The Basic Example
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本示例
- en: 'Now that we know *why* we would use a recursive generator, let’s take a look
    at a *“simple”* example to understand *how* we can write one:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了*为什么*我们会使用递归生成器，让我们来看一个*“简单”*的例子，以理解*如何*编写一个递归生成器：
- en: This short function — as the name suggests — yields successive numbers in binary.
    When called, it first simply yields `"1"` and after which comes the recursive
    call. The recursive call also yields `"1"`, but that's given to the previous,
    non-recursive call as a `prefix`. With the prefix computed, the non-recursive
    call yields 2 values `"10"` and `"11"`. After that, the recursive call continues
    execution by making another recursive call, going a level deeper and so the loop
    continues - prefixes bubble upwards so the outer frame is always yielding some
    result ending first with `"0"` and then `"1"`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简短的函数——正如其名称所示——产生连续的二进制数字。当调用时，它首先简单地生成 `"1"`，然后进行递归调用。递归调用也生成 `"1"`，但这会作为
    `prefix` 传递给之前的非递归调用。在计算出前缀后，非递归调用生成两个值 `"10"` 和 `"11"`。之后，递归调用继续执行，进行另一个递归调用，深入一层，循环继续——前缀向上冒泡，因此外部帧总是先以
    `"0"` 结束，然后是 `"1"`。
- en: 'Now, if we were to run it, we would get:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们运行它，我们会得到：
- en: 'When it comes to recursion, explaining the code isn’t always sufficient for
    really understanding what’s happening. So, if you’re not sure how the `binary_counter`
    actually works, then let''s try working out individual steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及递归时，仅仅解释代码并不足以真正理解发生了什么。所以，如果你不确定 `binary_counter` 实际上是如何工作的，那么我们来逐步演练一下：
- en: 'The above, modified version adds a `depth` parameter and a couple of prints
    to help demonstrate what the code does. If we now call this code, we will get
    the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的修改版本添加了一个 `depth` 参数和几个打印语句，以帮助演示代码的作用。如果我们现在调用这段代码，我们会得到以下结果：
- en: I hope this makes it a bit clearer, if not, consider manually working out the
    steps, or maybe using debugger in your IDE of choice, so that you can see the
    stack frames and variables in realtime.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这能让事情变得更清晰一些，如果不行，可以考虑手动逐步演练，或者使用你选择的 IDE 中的调试器，以便实时查看堆栈帧和变量。
- en: You might be also asking, *“What’s the point of computing binary numbers this
    way?”* — and the answer is, well, there’s no good reason. There are definitely
    better and more readable ways to do that, but I think it demonstrates the concept
    fairly well. With that said, let’s now look at more useful examples of how we
    can use recursive generators…
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能也会问，*“以这种方式计算二进制数字有什么意义？”* —— 答案是，没有什么好的理由。确实有更好、更易读的方法来做这件事，但我认为它很好地演示了这个概念。话虽如此，让我们现在看看更多如何使用递归生成器的有用示例…
- en: Putting It To Good Use
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将其发挥到最佳使用
- en: 'When it comes to recursion, the obvious candidates for examples are various
    mathematical functions or — as shown here — combinatorics, more specifically [power-set](https://en.wikipedia.org/wiki/Power_set):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在递归的例子中，显而易见的候选者是各种数学函数，或者——如这里所示——组合数学，具体来说是 [幂集](https://en.wikipedia.org/wiki/Power_set)：
- en: 'The function here uses similar flow as the binary counter earlier. To better
    understand it, we can translate the recursive part as:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的函数使用了类似于之前二进制计数器的流程。为了更好地理解它，我们可以将递归部分翻译为：
- en: For every result in a smaller power-set (`sequence[1:]`) ...
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于更小的幂集 (`sequence[1:]`) 中的每个结果...
- en: … Return the not used value (`[sequence[0]]`) + the result (`item`)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: … 返回未使用的值 (`[sequence[0]]`) + 结果 (`item`)
- en: … Then return result alone (`item`)
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: … 然后仅返回结果 (`item`)
- en: 'While mathematical functions can be nicely implemented using recursion, they
    aren’t really something we use on daily basis, so let’s now take a look at something
    different:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然数学函数可以通过递归很好的实现，但它们并不是我们日常使用的内容，所以现在我们来看看其他不同的东西：
- en: 'The above `accumulate` function computes a running total (sum) of elements
    of its list parameter. While the above code works, I don''t recommend using it
    in practice, because you can and should use the following instead:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的 `accumulate` 函数计算其列表参数的累积总和（和）。虽然上面的代码可以工作，但我不建议在实际中使用它，因为你可以且应该使用以下代码：
- en: 'While on the topic of itertools, let’s also see how we can re-implement other
    common function:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论 `itertools` 的话题时，我们也来看看如何重新实现其他常见函数：
- en: The `flatten` function can be used to un-nest a nested list (or other iterable).
    I show this one here because it uses a bit of a different flow than the earlier
    ones - it leverages `try`/ `except` to separate the base/non-recursive part and
    the recursive code.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`flatten` 函数可以用来展开嵌套列表（或其他可迭代对象）。我在这里展示这个函数是因为它使用了与之前不同的流程——它利用 `try`/ `except`
    来分离基本/非递归部分和递归代码。'
- en: 'It can however, be rewritten without `try`/ `expect` if desired:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果需要，也可以在没有 `try`/ `except` 的情况下重写：
- en: 'When talking about recursion, we obviously have to show an examples of recursive
    data structures, in this case a binary tree:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 说到递归时，我们显然要展示递归数据结构的示例，在这个案例中是二叉树：
- en: The above code implements a binary tree, including the recursive generator in
    a form of the `__iter__` method. The same is also implemented in the `inorder`
    function, which makes the recursive calls a little clearer.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码实现了一个二叉树，包括`__iter__`方法中的递归生成器。`inorder`函数中也实现了相同的功能，使递归调用更加清晰。
- en: 'To demonstrate the usage of the above code, let’s create a simple tree:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示上述代码的使用方法，让我们创建一个简单的树结构：
- en: 'Similar to the traversal of (binary) trees, we can use recursive generators
    also for examples when traversing JSON:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 与（二叉）树的遍历类似，我们也可以在遍历JSON时使用递归生成器：
- en: Traversing JSON this way might be practical if you’re working with very large
    data that would consume a lot of memory if loaded all at once.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式遍历JSON可能是实用的，如果你处理的是非常大的数据，一次性加载会消耗大量内存。
- en: 'By now, you might be getting the hang of how these weird generators work, but
    let’s anyway look at what happens when we call the above code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你可能已经掌握了这些奇怪的生成器是如何工作的，但我们还是看看调用上述代码时会发生什么：
- en: 'And finally, another tree-like data structure which is commonly traversed recursively
    is a file-tree:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，另一个常常递归遍历的树状数据结构是文件树：
- en: Here we implement `get_paths` function that recursively yields all files in
    specified path. With that said, you're better off using the builtin `path.rglob("*")`
    for this task as it also returns generator.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们实现了`get_paths`函数，该函数递归地生成指定路径中的所有文件。话虽如此，对于这个任务，使用内置的`path.rglob("*")`会更好，因为它也返回生成器。
- en: 'Also, while not useful in this instance, it’s good to note that `send()` function
    can be also used with recursive generators. So, an alternative implementation
    of above function:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，虽然在这个实例中不太有用，但值得注意的是，`send()`函数也可以与递归生成器一起使用。因此，上述函数的另一种实现方式：
- en: This style of generator can be useful in case you need to control the recursion
    or if you need to communicate with the coroutine.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这种生成器的风格在你需要控制递归或与协程通信时会很有用。
- en: Conclusion
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: The examples in this article — in my opinion — show an elegant solutions to
    many problems that can be expressed recursively. However, elegant doesn’t always
    mean better. Oftentimes, using less *“elegant”* or succinct solution will produce
    much more readable and generally better code.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为本文中的示例展示了许多可以递归表达的优雅解决方案。然而，优雅并不总是意味着更好。通常，使用不那么*“优雅”*或简洁的解决方案会产生更具可读性和普遍更好的代码。
- en: So, let’s not try to *“shoehorn”* recursive generators into code wherever possible
    and only use it where appropriate — that is — when implementing a recursive function
    that would benefit from lazy evaluation.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们不要试图*“强行”*将递归生成器融入代码中，应该只在适当的情况下使用——也就是说——在实现从延迟评估中受益的递归函数时。
- en: '*This article was originally posted at* [*martinheinz.dev*](https://martinheinz.dev/blog/88)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*这篇文章最初发布于* [*martinheinz.dev*](https://martinheinz.dev/blog/88)'
- en: '[Become a member](https://medium.com/@martin.heinz/membership) and read every
    story on Medium. **Your membership fee directly supports me and other writers
    you read.** You’ll also get full access to every story on Medium.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[成为会员](https://medium.com/@martin.heinz/membership)并阅读Medium上的每一个故事。**你的会员费直接支持我和你阅读的其他作家。**
    你还将获得Medium上每个故事的完全访问权限。'
- en: '[](https://medium.com/@martin.heinz/membership?source=post_page-----9ee6af0dd803--------------------------------)
    [## Join Medium with my referral link - Martin Heinz'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@martin.heinz/membership?source=post_page-----9ee6af0dd803--------------------------------)
    [## 使用我的推荐链接加入Medium - Martin Heinz'
- en: Read every story from Martin Heinz (and thousands of other writers on Medium).
    Your membership fee directly supports…
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读Martin Heinz（以及Medium上的其他数千名作家）的每一个故事。你的会员费直接支持…
- en: medium.com](https://medium.com/@martin.heinz/membership?source=post_page-----9ee6af0dd803--------------------------------)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@martin.heinz/membership?source=post_page-----9ee6af0dd803--------------------------------)
- en: You may also like…
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还会喜欢…
- en: '[](/getting-started-with-google-apis-in-python-7f07b5d8b806?source=post_page-----9ee6af0dd803--------------------------------)
    [## Getting Started with Google APIs in Python'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/getting-started-with-google-apis-in-python-7f07b5d8b806?source=post_page-----9ee6af0dd803--------------------------------)
    [## 用Python入门Google API'
- en: A crash course in using Python and Google APIs to automate all the things you
    do with Gmail, Google Drive, Calendar, or…
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Python和Google API来自动化你在Gmail、Google Drive、日历等上的所有操作的速成课程：
- en: towardsdatascience.com](/getting-started-with-google-apis-in-python-7f07b5d8b806?source=post_page-----9ee6af0dd803--------------------------------)
    [](/python-magic-methods-you-havent-heard-about-53d11eba448f?source=post_page-----9ee6af0dd803--------------------------------)
    [## Python Magic Methods You Might Not Have Heard About
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/getting-started-with-google-apis-in-python-7f07b5d8b806?source=post_page-----9ee6af0dd803--------------------------------)
    [在这里](/python-magic-methods-you-havent-heard-about-53d11eba448f?source=post_page-----9ee6af0dd803--------------------------------)
    [## 你可能没听说过的 Python 魔法方法]'
- en: There are many Python magic methods you probably never knew existed — let’s
    find out what they do and how we can use…
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你可能不知道的许多 Python 魔法方法 — 让我们来了解它们的功能以及如何使用它们…
- en: towardsdatascience.com](/python-magic-methods-you-havent-heard-about-53d11eba448f?source=post_page-----9ee6af0dd803--------------------------------)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/python-magic-methods-you-havent-heard-about-53d11eba448f?source=post_page-----9ee6af0dd803--------------------------------)'
