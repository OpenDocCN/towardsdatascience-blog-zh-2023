- en: 4 Common Python Mistakes You Should Avoid as a Beginner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/4-common-python-mistakes-you-should-avoid-as-a-beginner-bd28feb6162b](https://towardsdatascience.com/4-common-python-mistakes-you-should-avoid-as-a-beginner-bd28feb6162b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And how to correct yourself before you unintentionally ruin a job interview.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://murtaza5152-ali.medium.com/?source=post_page-----bd28feb6162b--------------------------------)[![Murtaza
    Ali](../Images/2aecff50999761022af29f9b30e2f925.png)](https://murtaza5152-ali.medium.com/?source=post_page-----bd28feb6162b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----bd28feb6162b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----bd28feb6162b--------------------------------)
    [Murtaza Ali](https://murtaza5152-ali.medium.com/?source=post_page-----bd28feb6162b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----bd28feb6162b--------------------------------)
    ·7 min read·Jan 13, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6b371b75bddaaafc03c5b79151b4e80e.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [David Pupaza](https://unsplash.com/@dav420?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Python is an excellent language for beginners, but that doesn’t mean there are
    no mistakes to be made. Especially during the early stages of learning to program,
    it’s easy to write code that is technically correct, but stylistically poor.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re going to learn to code, it’s crucial that you learn to do it well.
    Be it in academia or industry, the quality of your code matters. It affects not
    only you, but each and every person who will go on to read and work with your
    code. Perhaps more selfishly, it also affects your hiring prospects.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I’ll discuss four common mistakes made by introductory Python
    programmers. Learning these traps in my early Python days was extremely helpful
    for me, and I hope it can be for you as well.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get into it.
  prefs: []
  type: TYPE_NORMAL
- en: The Good Old Boolean Conditional
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a common mistake made by introductory programmers. It’s also a mistake
    made by not-so-introductory programmers who nevertheless lack a formal background
    in programming because they simply use code as a tool. I’m looking at you, data
    scientists.
  prefs: []
  type: TYPE_NORMAL
- en: Conditional statements in Python are useful, but they aren’t always necessary.
    This is particularly true in cases when the condition you’re checking already
    contains a Boolean (True or False) value.
  prefs: []
  type: TYPE_NORMAL
- en: Let me illustrate with a simple example. Say we want to write code to determine
    if a data set has already been cleaned. Lucky for us, the code base contains a
    convenient variable called `is_data_clean` which keeps track of this. All we need
    to do is check it and return the correct value.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a first attempt, we might write something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This works well enough, but it’s needlessly complex. Do you see the problem?
    Look carefully.
  prefs: []
  type: TYPE_NORMAL
- en: The variable `is_data_clean` is already a Boolean; therefore, it already contains
    the very value you need to return! The code checks if it is `True`, only to then
    return `True`, and if it isn’t `True` (meaning it is `False`), the code returns
    `False`. It’s just a whole bunch of unnecessary checks.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can simplify the code in the function to one line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Much better.
  prefs: []
  type: TYPE_NORMAL
- en: The manual sum, mean, or other built-in operation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python has more built-in functionality than most people realize. The number
    of people still using a loop to manually calculate a sum is too damn high.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we have a list of numbers in Python, we absolutely should **not** be calculating
    the sum like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the built-in `sum` function instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Need a minimum or maximum? The universe forbid you write something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This isn’t an introductory computer science principles class; it’s the real
    world. Stop reinventing the wheel and use the built-in `min` and `max` functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: For a full list of built-in functions, see the [Python documentation](https://docs.python.org/3/library/functions.html)
    [1].
  prefs: []
  type: TYPE_NORMAL
- en: '**Bonus: Built-in functions that aren’t *technically* built in.**'
  prefs: []
  type: TYPE_NORMAL
- en: Some functions are harder to find, but that doesn’t mean you shouldn’t find
    them.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, if we need the mean of a list of numbers (you might sense a recurring
    theme here), we *could* use the first code snippet below, but we *should* use
    the second:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Oftentimes, Python offers useful functions that are within modules. It might
    be a bit of extra work to locate the module we need and import the function, but
    it’s well worth the resulting code.
  prefs: []
  type: TYPE_NORMAL
- en: Remember — Python is all about simplicity and readability. Built-in functions
    are your friends. And unlike your human friends, they’ll never disappoint.
  prefs: []
  type: TYPE_NORMAL
- en: Doing something to do nothing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In one of the introductory Python classes I teach, the students’ first project
    is to write a simple decision-making algorithm. It’s primarily an exercise in
    conditionals, requiring the students to define a question and associated scoring
    system to determine the likelihood that someone qualifies for the question.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, one might ask, “Should I become a data scientist?” Then, the algorithm
    could consist of the following questions, all of which either add or subtract
    from the eventual output score, depending on the answer:'
  prefs: []
  type: TYPE_NORMAL
- en: Am I interested in using data to gain insights about the world?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Am I willing to learn Python?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do I enjoy working with multidisciplinary teams?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And so on.
  prefs: []
  type: TYPE_NORMAL
- en: In the midst of writing their algorithm, many students realize that in certain
    cases, they simply want to do nothing to the overall score. For example, they
    might decide that if someone is willing to learn Python, that adds 10 points to
    their overall score, but if they are unwilling, it simply leaves the score unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most students implement this with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a classic case of *doing something to do nothing*. Let’s break down
    everything that Python has to do when it sees the line of code `score += 0`:'
  prefs: []
  type: TYPE_NORMAL
- en: It needs to look up the value of the variable `score`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It needs to add 0 to this value. This requires calling the addition function,
    passing in two arguments (the current value and 0), and computing the output.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reassigning the `score` variable to the new value (which, clearly, is the same).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of this work to do … nothing.
  prefs: []
  type: TYPE_NORMAL
- en: Sure, it’s not a *huge amount* of work for the computer, and it won’t make any
    meaningful difference to your code’s efficiency. That said, it is pointless and
    somewhat unclean, which is uncharacteristic of excellent Python code.
  prefs: []
  type: TYPE_NORMAL
- en: 'A better solution is to use Python’s `pass` keyword, which literally tells
    Python to do nothing and just move on. It fills in a line of code which doesn’t
    need to be there, but which would error if left completely empty. We can even
    add a little comment to provide further clarity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Cleaner, clearer, more Pythonic.
  prefs: []
  type: TYPE_NORMAL
- en: The single conditional gone wild
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The conditional statement is arguably one of the more powerful and consistent
    constructs in standard programming. When learning it for the first time, it is
    easy to overlook an important subtlety.
  prefs: []
  type: TYPE_NORMAL
- en: 'This subtlety arises when we want to check for two or more conditions. For
    example, say we are reviewing a survey for responses that take one of three forms:
    “Yes,” “No,” or “Maybe.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'Early Python programmers often code this in one of two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this context, both of these code snippets are effectively the same. They
    behave in the same way, they aren’t particularly confusing to understand, and
    they accomplish the desired goal. The issue arises when people mistakenly believe
    that the two structures above are *always* equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: This is false. The second code snippet above is a *single* conditional expression
    made of multiple parts, whereas the first code snippet consists of *three, separate*
    conditional expressions, despite the fact that they appear interconnected.
  prefs: []
  type: TYPE_NORMAL
- en: Why is this important? Because whenever Python sees a brand new `if` keyword
    (i.e., a new conditional expression starting), it will check the associated condition.
    On the other hand, Python will only ever enter an `elif` or `else` condition if
    no previous conditions in the current conditional expression have been satisfied.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at an example to see why this matters. Say we need to write code
    that assigns students a letter grade based on their numerical score on some assignment.
    We write the following code in our Python file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Running this code outputs the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Do you see the difference? In the second case, we get an unexpected output.
    Why? Because Python reads every `if` statement as a brand new conditional, and
    so if a score happens to be less than multiple number checks, the corresponding
    letter grade gets printed out for all of them.
  prefs: []
  type: TYPE_NORMAL
- en: Now, there are ways to make this work with multiple `if` statements; for instance,
    we could make it so the condition checks for a range rather than just an upper
    limit. The point of this example is not to argue for the merits of one example
    over the other (although I would personally lean toward making use of `elif` and
    `else` for clarity), but simply to illustrate that they are not the *same*.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure you understand that.
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts and Recap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here’s your Python beginner cheat sheet:'
  prefs: []
  type: TYPE_NORMAL
- en: Don’t make unnecessary conditionals for Booleans when you can simply return
    the Boolean value directly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Built-in functions are your best friends.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you need to tell Python to do nothing, use the `pass` keyword.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure you structure conditional expressions correctly, understanding the
    meaning of the `if` , `elif` , and `else` keywords.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It’s excellent that you’ve decided to learn Python — I assure you that the language
    shall treat you well.
  prefs: []
  type: TYPE_NORMAL
- en: Just be sure to return the favor.
  prefs: []
  type: TYPE_NORMAL
- en: '**Want to excel at Python?** [**Get exclusive, free access to my simple and
    easy-to-read guides here**](https://witty-speaker-6901.ck.page/0977670a91)**.
    Want to read unlimited stories on Medium? Sign up with my referral link below!**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://murtaza5152-ali.medium.com/?source=post_page-----bd28feb6162b--------------------------------)
    [## Murtaza Ali - Medium'
  prefs: []
  type: TYPE_NORMAL
- en: Read writing from Murtaza Ali on Medium. PhD student at the University of Washington.
    Interested in human-computer…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: murtaza5152-ali.medium.com](https://murtaza5152-ali.medium.com/?source=post_page-----bd28feb6162b--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] [https://docs.python.org/3/library/functions.html](https://docs.python.org/3/library/functions.html)'
  prefs: []
  type: TYPE_NORMAL
