["```py\nfrom sklearn.preprocessing import LabelEncoder\n\n# Initialize Label Encoder\nencoder = LabelEncoder()\n\n# Fit encoder on training data\ndata_train[\"type_encoded\"] = encoder.fit_transform(data_train[\"type\"])\n\n# Transform test data\ndata_test[\"type_encoded\"] = encoder.transform(data_test[\"type\"])\n\n# Retrieve the categories (returns list)\nlist(encoder.classes_)\n\n# Retrieve original values from encoded values\ndata_train[\"type2\"] = encoder.inverse_transform(data_train[\"type_encoded\"])\n```", "```py\nfrom sklearn.preprocessing import OrdinalEncoder\n\n# Initialize Ordinal Encoder\nencoder = OrdinalEncoder(\n    categories=[[\"small\", \"medium\", \"large\"]],\n    handle_unknown=\"use_encoded_value\",\n    unknown_value=-1,\n)\ndata_train[\"size_encoded\"] = encoder.fit_transform(data_train[[\"size\"]])\ndata_test[\"size_encoded\"] = encoder.transform(data_test[[\"size\"]])\n\n# Retrieve the categories (returns list of lists)\nencoder.categories\n\n# Retrieve original values from encoded values\ndata_train[\"size2\"] = encoder.inverse_transform(data_train[[\"size_encoded\"]])\n```", "```py\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Initialize One-Hot Encoder\nencoder = OneHotEncoder(handle_unknown=\"ignore\")\n\n# Fit encoder on training data (returns a separate DataFrame)\ndata_ohe = pd.DataFrame(encoder.fit_transform(data_train[[\"type\"]]).toarray())\ndata_ohe.columns = [col for cols in encoder.categories_ for col in cols]\n\n# Join encoded data with original training data\ndata_train = pd.concat([data_train, data_ohe], axis=1)\n\n# Transform test data\ndata_ohe = pd.DataFrame(encoder.transform(data_test[[\"type\"]]).toarray())\ndata_ohe.columns = [col for cols in encoder.categories_ for col in cols]\ndata_test = pd.concat([data_test, data_ohe], axis=1)\n```", "```py\ndata_ohe = pd.get_dummies(data_train[\"type\"])\ndata_train = pd.concat([data_train, data_ohe], axis=1)\n```", "```py\nimport category_encoders as ce\n\n# Target (Mean) Encoding - fit on training data, transform test data\nencoder = ce.TargetEncoder(cols=\"type\", smoothing=1.0)\ndata_train[\"type_encoded\"] = encoder.fit_transform(data_train[\"type\"], data_train[\"label\"])\ndata_test[\"type_encoded\"] = encoder.transform(data_test[\"type\"], data_test[\"label\"])\n\n# Leave One Out Encoding\nencoder = ce.LeaveOneOutEncoder(cols=\"type\")\ndata_train[\"type_encoded\"] = encoder.fit_transform(data_train[\"type\"], data_train[\"label\"])\ndata_test[\"type_encoded\"] = encoder.transform(data_test[\"type\"], data_test[\"label\"])\n```", "```py\nimport category_encoders as ce\n\n# Count Encoding - fit on training data, transform test data\nencoder = ce.CountEncoder(cols=\"type\")\ndata_train[\"type_count_encoded\"] = encoder.fit_transform(data_train[\"type\"])\ndata_test[\"type_count_encoded\"] = encoder.transform(data_test[\"type\"])\n\n# Frequency (normalized count) Encoding\nencoder = ce.CountEncoder(cols=\"type\", normalize=True)\ndata_train[\"type_frequency_encoded\"] = encoder.fit_transform(data_train[\"type\"])\ndata_test[\"type_frequency_encoded\"] = encoder.transform(data_test[\"type\"])\n```", "```py\nimport category_encoders as ce\n\n# Binary Encoding - fit on training data, transform test data\nencoder = ce.BinaryEncoder()\ndata_encoded = encoder.fit_transform(data_train[\"type\"])\ndata_train = pd.concat([data_train, data_encoded], axis=1)\n\ndata_encoded = encoder.transform(data_test[\"type\"])\ndata_test = pd.concat([data_test, data_encoded], axis=1)\n\n# BaseN Encoding - fit on training data, transform test data\nencoder = ce.BaseNEncoder(base=5)\ndata_encoded = encoder.fit_transform(data_train[\"type\"])\ndata_train = pd.concat([data_train, data_encoded], axis=1)\n\ndata_encoded = encoder.transform(data_test[\"type\"])\ndata_test = pd.concat([data_test, data_encoded], axis=1)\n```", "```py\nfrom sklearn.feature_extraction import FeatureHasher\n\n# Hash Encoding - fit on training data, transform test data\nencoder = FeatureHasher(n_features=2, input_type=\"string\")\ndata_encoded = pd.DataFrame(encoder.fit_transform(data_train[\"type\"]).toarray())\ndata_train = pd.concat([data_train, data_encoded], axis=1)\n\ndata_encoded = pd.DataFrame(encoder.transform(data_test).toarray())\ndata_test = pd.concat([data_test, data_encoded], axis=1)\n```", "```py\nimport category_encoders as ce\n\n# Hash Encoding - fit on training data, transform test data\nencoder = ce.HashingEncoder(n_components=2)\ndata_encoded = encoder.fit_transform(data_train[\"type\"])\ndata_train = pd.concat([data_train, data_encoded], axis=1)\n\ndata_encoded = encoder.transform(data_test[\"type\"])\ndata_test = pd.concat([data_test, data_encoded], axis=1)\n```"]