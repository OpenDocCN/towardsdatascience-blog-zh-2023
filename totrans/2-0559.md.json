["```py\nimport theano.tensor as tt\n\ndef carryover(x, strength, length):\n    w = tt.as_tensor_variable(\n        [tt.power(strength, i) for i in range(length)]\n    )\n\n    x_lags = tt.stack(\n        [tt.concatenate([\n            tt.zeros(i),\n            x[:x.shape[0]-i]\n        ]) for i in range(length)]\n    )\n\n    return tt.dot(w, x_lags)\n```", "```py\npip install pymc-marketing\n```", "```py\nimport pandas as pd\n\ndata = pd.read_csv(\n  'https://raw.githubusercontent.com/Garve/datasets/4576d323bf2b66c906d5130d686245ad205505cf/mmm.csv',\n  parse_dates=['Date']\n)\n```", "```py\nfrom pymc_marketing.mmm import DelayedSaturatedMMM\n\nmmm = DelayedSaturatedMMM(\n    data=data,\n    target_column=\"Sales\",\n    date_column=\"Date\",\n    channel_columns=[\"TV\", \"Radio\", \"Banners\"],\n)\n```", "```py\nimport pymc as pm\n\npm.model_to_graphviz(model=mmm.model)\n```", "```py\nmmm.fit()\n```", "```py\nimport arviz as az\n\naz.summary(\n    data=mmm.fit_result,\n    var_names=[\"intercept\", \"beta_channel\", \"alpha\",  \"lam\", \"sigma\"]\n)\n```", "```py\nmmm.plot_channel_parameter(param_name=\"alpha\", figsize=(9, 5))\n```", "```py\nmmm.plot_channel_contribution_share_hdi()\n```", "```py\nmmm.plot_posterior_predictive(original_scale=True)\n```", "```py\nmmm.plot_components_contributions()\n```"]