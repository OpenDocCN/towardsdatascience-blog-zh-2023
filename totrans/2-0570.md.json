["```py\nimport torch\nimport torch.nn as nn\nfrom torchvision import models\nfrom torch.nn.functional import relu\n```", "```py\nclass UNet(nn.Module):\n    def __init__(self, n_class):\n        super().__init__()\n\n        # Encoder\n        # In the encoder, convolutional layers with the Conv2d function are used to extract features from the input image. \n        # Each block in the encoder consists of two convolutional layers followed by a max-pooling layer, with the exception of the last block which does not include a max-pooling layer.\n        # -------\n        # input: 572x572x3\n        self.e11 = nn.Conv2d(3, 64, kernel_size=3, padding=1) # output: 570x570x64\n        self.e12 = nn.Conv2d(64, 64, kernel_size=3, padding=1) # output: 568x568x64\n        self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2) # output: 284x284x64\n\n        # input: 284x284x64\n        self.e21 = nn.Conv2d(64, 128, kernel_size=3, padding=1) # output: 282x282x128\n        self.e22 = nn.Conv2d(128, 128, kernel_size=3, padding=1) # output: 280x280x128\n        self.pool2 = nn.MaxPool2d(kernel_size=2, stride=2) # output: 140x140x128\n\n        # input: 140x140x128\n        self.e31 = nn.Conv2d(128, 256, kernel_size=3, padding=1) # output: 138x138x256\n        self.e32 = nn.Conv2d(256, 256, kernel_size=3, padding=1) # output: 136x136x256\n        self.pool3 = nn.MaxPool2d(kernel_size=2, stride=2) # output: 68x68x256\n\n        # input: 68x68x256\n        self.e41 = nn.Conv2d(256, 512, kernel_size=3, padding=1) # output: 66x66x512\n        self.e42 = nn.Conv2d(512, 512, kernel_size=3, padding=1) # output: 64x64x512\n        self.pool4 = nn.MaxPool2d(kernel_size=2, stride=2) # output: 32x32x512\n\n        # input: 32x32x512\n        self.e51 = nn.Conv2d(512, 1024, kernel_size=3, padding=1) # output: 30x30x1024\n        self.e52 = nn.Conv2d(1024, 1024, kernel_size=3, padding=1) # output: 28x28x1024\n\n        # Decoder\n        self.upconv1 = nn.ConvTranspose2d(1024, 512, kernel_size=2, stride=2)\n        self.d11 = nn.Conv2d(1024, 512, kernel_size=3, padding=1)\n        self.d12 = nn.Conv2d(512, 512, kernel_size=3, padding=1)\n\n        self.upconv2 = nn.ConvTranspose2d(512, 256, kernel_size=2, stride=2)\n        self.d21 = nn.Conv2d(512, 256, kernel_size=3, padding=1)\n        self.d22 = nn.Conv2d(256, 256, kernel_size=3, padding=1)\n\n        self.upconv3 = nn.ConvTranspose2d(256, 128, kernel_size=2, stride=2)\n        self.d31 = nn.Conv2d(256, 128, kernel_size=3, padding=1)\n        self.d32 = nn.Conv2d(128, 128, kernel_size=3, padding=1)\n\n        self.upconv4 = nn.ConvTranspose2d(128, 64, kernel_size=2, stride=2)\n        self.d41 = nn.Conv2d(128, 64, kernel_size=3, padding=1)\n        self.d42 = nn.Conv2d(64, 64, kernel_size=3, padding=1)\n\n        # Output layer\n        self.outconv = nn.Conv2d(64, n_class, kernel_size=1)\n```", "```py\n def forward(self, x):\n        # Encoder\n        xe11 = relu(self.e11(x))\n        xe12 = relu(self.e12(xe11))\n        xp1 = self.pool1(xe12)\n\n        xe21 = relu(self.e21(xp1))\n        xe22 = relu(self.e22(xe21))\n        xp2 = self.pool2(xe22)\n\n        xe31 = relu(self.e31(xp2))\n        xe32 = relu(self.e32(xe31))\n        xp3 = self.pool3(xe32)\n\n        xe41 = relu(self.e41(xp3))\n        xe42 = relu(self.e42(xe41))\n        xp4 = self.pool4(xe42)\n\n        xe51 = relu(self.e51(xp4))\n        xe52 = relu(self.e52(xe51))\n\n        # Decoder\n        xu1 = self.upconv1(xe52)\n        xu11 = torch.cat([xu1, xe42], dim=1)\n        xd11 = relu(self.d11(xu11))\n        xd12 = relu(self.d12(xd11))\n\n        xu2 = self.upconv2(xd12)\n        xu22 = torch.cat([xu2, xe32], dim=1)\n        xd21 = relu(self.d21(xu22))\n        xd22 = relu(self.d22(xd21))\n\n        xu3 = self.upconv3(xd22)\n        xu33 = torch.cat([xu3, xe22], dim=1)\n        xd31 = relu(self.d31(xu33))\n        xd32 = relu(self.d32(xd31))\n\n        xu4 = self.upconv4(xd32)\n        xu44 = torch.cat([xu4, xe12], dim=1)\n        xd41 = relu(self.d41(xu44))\n        xd42 = relu(self.d42(xd41))\n\n        # Output layer\n        out = self.outconv(xd42)\n\n        return out\n```", "```py\nimport test\ntest.run(UNet)\n```"]