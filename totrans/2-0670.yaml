- en: Databases and Data Modelling — A Quick Crash Course
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/databases-and-data-modelling-a-quick-crash-course-546891a49b67](https://towardsdatascience.com/databases-and-data-modelling-a-quick-crash-course-546891a49b67)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Warehousing 101: A Practical Guide for Beginners'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://col-jung.medium.com/?source=post_page-----546891a49b67--------------------------------)[![Col
    Jung](../Images/45ef9475b60f22a3c78c9c8e428812c3.png)](https://col-jung.medium.com/?source=post_page-----546891a49b67--------------------------------)[](https://towardsdatascience.com/?source=post_page-----546891a49b67--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----546891a49b67--------------------------------)
    [Col Jung](https://col-jung.medium.com/?source=post_page-----546891a49b67--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----546891a49b67--------------------------------)
    ·12 min read·May 12, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9cf91f1f43637c4805c94af41ab2eb8f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Over my [five years of working in enterprise analytics](/from-data-warehouses-and-lakes-to-data-mesh-a-guide-to-enterprise-data-architecture-e2d93b2466b1),
    I’ve observed an interesting number of data scientists entering the job with limited
    knowledge of data warehousing and data modelling.
  prefs: []
  type: TYPE_NORMAL
- en: This shouldn’t come as a surprise.
  prefs: []
  type: TYPE_NORMAL
- en: Data scientists hail from diverse backgrounds such as math, statistics, psychology,
    and programming. Many likely would not have delved into the intricacies of database
    systems during their university days.
  prefs: []
  type: TYPE_NORMAL
- en: That includes myself, a mathematician-turned-data-scientist.
  prefs: []
  type: TYPE_NORMAL
- en: I taught myself data science with online courses — a necessary prerequisite
    to get a *data science* job, I suppose — but only picked up database fundamentals
    on the job.
  prefs: []
  type: TYPE_NORMAL
- en: Plus, with data lakes being all the rage now, who even needs warehouses, right?
    (That’s a joke!)
  prefs: []
  type: TYPE_NORMAL
- en: I wrote this article as a quick and dirty crash course for anyone who’s jumping
    into an analytics job without much prior knowledge of data warehouses and data
    modelling.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll cover three topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What an **enterprise data warehouse workflow** looks like**;**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What database **normalisation** achieves;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A taste-test of **NoSQL** databases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Update**: I now post analytics tutorials on [YouTube](https://www.youtube.com/@col_builds).'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Data Warehouse workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Specific details may vary between solutions, but a common architecture for
    enterprise-scale analytics looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Data sits in a *data lake*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Data is loaded into a *data warehouse.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A *data model* is created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Analysts consume the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s see what that looks like in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f2f240e6c47c74c279ea585b68e6d2b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Analytical data processing. Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Analytical data processing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Data from operational or transactional data stores (often from [OLTP databases](/from-data-warehouses-and-lakes-to-data-mesh-a-guide-to-enterprise-data-architecture-e2d93b2466b1)),
    files, real-time streams, or other sources are loaded into a centralised *data
    lake*.
  prefs: []
  type: TYPE_NORMAL
- en: Data lakes are common in large-scale data analytical processing scenarios, where
    a large volume of file-based data must be collected and analysed.
  prefs: []
  type: TYPE_NORMAL
- en: This load operation from the **operational data plane** to the **analytical
    data plane** usually involves an *extract, transform, and load* (ETL), or *extract,
    load, and transform* (ELT) process in which the data is cleaned, filtered, and
    restructured for analysis. The resulting data structure is optimised for analytical
    queries.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6a293aa6f20ce6be6a2504c57e45cff6.png)'
  prefs: []
  type: TYPE_IMG
- en: '30,000 feet view of the [enterprise data landscape](/from-data-warehouses-and-lakes-to-data-mesh-a-guide-to-enterprise-data-architecture-e2d93b2466b1).
    Source: Z. Dehghani at [MartinFowler.com](https://martinfowler.com/articles/data-mesh-principles.html)
    with amendments by author'
  prefs: []
  type: TYPE_NORMAL
- en: As data lakes typically belong in the domain of *big data*, which entails distributed
    compute and storage by frameworks like *Apache Hadoop*, the ETL processing is
    undertaken by **data engineers** who set up *Hive* or *Spark* jobs that process
    high volumes of data in parallel using multi-node clusters. These pipelines include
    both batch processing of static data and real-time processing of streaming data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/45f5dc8bba5f37037f1411b669a48340.png)'
  prefs: []
  type: TYPE_IMG
- en: ETL pipelines connect operational and analytical data stores. Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Data in the data lake sits ready for further analytics use. This includes exploring,
    wrangling and modelling by **data scientists**, or processing by **data analysts**
    for the purposes of creating reports and visuals.
  prefs: []
  type: TYPE_NORMAL
- en: Check out my [explainer article](/from-data-warehouses-and-lakes-to-data-mesh-a-guide-to-enterprise-data-architecture-e2d93b2466b1)
    on the *entire* enterprise data landscape, from warehouses to data lakes to data
    mesh.
  prefs: []
  type: TYPE_NORMAL
- en: New to data analysis? See [here](/intro-to-data-analytics-the-google-method-92d431b65581),
    [here](https://col-jung.medium.com/intro-to-power-bi-from-data-modelling-to-stunning-reports-b34aac43d8a1)
    & [here](https://medium.com/swlh/power-of-storytelling-in-business-data-analytics-your-data-is-only-half-the-story-f50fadf9712b).
  prefs: []
  type: TYPE_NORMAL
- en: New to data science? See [here](/predict-house-prices-with-machine-learning-5b475db4e1e),
    [here](/will-your-employee-leave-a-machine-learning-model-8484c2a6663e), [here](/popular-machine-learning-performance-metrics-a2c33408f29)
    & [here](/jupyter-notebooks-versus-dataiku-dss-for-data-science-e02264a753ca).
  prefs: []
  type: TYPE_NORMAL
- en: Data Warehouses, Tables, Schemas & Normalisation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Alright, moving on. Time to enrich our data sitting in the lake.
  prefs: []
  type: TYPE_NORMAL
- en: First, the data is copied into a **data warehouse** that’s optimised for read
    activity.
  prefs: []
  type: TYPE_NORMAL
- en: A data warehouse is a **relational database** in which the data is stored in
    a **schema** that’s optimised for data analytics rather than transactional workloads.
    Warehouses are by design optimised for *read* operations — primarily queries to
    support *business intelligence (BI)*, which includes [creating reports, dashboards
    and visualisations](/intro-to-power-bi-from-data-modelling-to-stunning-reports-b34aac43d8a1),
    that, [under the wings of good data storytellers](https://medium.com/swlh/power-of-storytelling-in-business-data-analytics-your-data-is-only-half-the-story-f50fadf9712b)
    can communicate value and impact decision-making.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c1cfb56112c92dabff357d99f8642c9e.png)'
  prefs: []
  type: TYPE_IMG
- en: Relational databases. Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Relational databases are commonly used to store and query **structured** data.
    The data is stored in **tables** that represent **entities**, such as *customers*,
    *products*, or *sales orders*. Each instance of an entity is assigned a *primary
    key* that uniquely identifies it and these keys are used to reference the entity
    instance in other tables.
  prefs: []
  type: TYPE_NORMAL
- en: This is what enables the enrichment of data through *joining* tables together.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, a customer’s primary key can be referenced in a sales order record
    to indicate which customer placed that order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The use of keys to reference data entities enables a relational database to
    be **normalised** — which in part means the elimination of duplicate data values
    so that, for example, the details of an individual customer are stored only once,
    not for each sales order the customer places.
  prefs: []
  type: TYPE_NORMAL
- en: More on normalisation later.
  prefs: []
  type: TYPE_NORMAL
- en: Tables are managed and queried using **Structured Query Language (SQL)**, which
    is based on an ANSI standard, so it’s similar across multiple database systems.
    We saw a simple query joining two tables above.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s talk more about database schemas.
  prefs: []
  type: TYPE_NORMAL
- en: Whereas data lakes employ a *Schema-on-Read* approach that requires no upfront
    schema to be defined, warehouses employ a more computationally-expensive but more
    organised *Schema-on-Write* paradigm where table schemas *must* be defined upfront.
  prefs: []
  type: TYPE_NORMAL
- en: These schemas are designed by data modellers and solutions architects in consultation
    with the downstream analytics and business users.
  prefs: []
  type: TYPE_NORMAL
- en: In common practice, modellers transform data from a transactional store into
    a schema whereby numeric values are stored in central **fact tables**.
  prefs: []
  type: TYPE_NORMAL
- en: These are then *related* to one or more **dimension tables** that represent
    the entities by which you want to aggregate those numeric measures — for example
    *product* or *customer*.
  prefs: []
  type: TYPE_NORMAL
- en: Each entity is represented by a row with a unique **key value**.
  prefs: []
  type: TYPE_NORMAL
- en: The remaining columns represent **attributes** of an entity — for example, products
    have names and categories, and customers have addresses and cities. It’s common
    in most analytical models to include a *Time* dimension so that you can aggregate
    numeric measures associated with events over time.
  prefs: []
  type: TYPE_NORMAL
- en: 'So here’s what all of this looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3df59dff54760e295e9e53ba7fa7903d.png)'
  prefs: []
  type: TYPE_IMG
- en: A common star schema. Image by author
  prefs: []
  type: TYPE_NORMAL
- en: We can see that numeric measures (e.g. *Revenue*) aggregated by various dimensions
    in the model (*Customer*, *Product*, *Time*) sit in a central fact table, *Sales*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To be more specific:'
  prefs: []
  type: TYPE_NORMAL
- en: Each row in a fact table represents a **recorded event** with numeric measures
    attached. Here, the *Sales* table in our **star schema** represents sales transactions
    for individual items, and includes numeric values for quantity sold and revenue.
  prefs: []
  type: TYPE_NORMAL
- en: Sales can be aggregated by *customer*, *product*, *store*, and *time* dimensions,
    enabling you to easily find monthly total sales revenue by product for each store,
    for example.
  prefs: []
  type: TYPE_NORMAL
- en: This is where insights can then be unveiled.
  prefs: []
  type: TYPE_NORMAL
- en: 'In summary:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Joining tables through keys enrich the data, and aggregations then deliver
    the insights.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Star schemas are the most common type of schema, which can be extended into
    a *snowflake schema* by adding additional tables related to the existing dimension
    tables — often to represent dimensional **hierarchies.** For example, products
    have their own subcategories.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fe3d24b7daa474065e9b23b0a8a9f527.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A snowflake schema. Source: [Wikipedia](https://en.wikipedia.org/wiki/Snowflake_schema)'
  prefs: []
  type: TYPE_NORMAL
- en: Overall, a data warehouse is a great choice when you have transactional data
    that can be organised into a structured schema of tables, and you want to use
    SQL to query them in a performant environment.
  prefs: []
  type: TYPE_NORMAL
- en: See my [PowerBI tutorial](/intro-to-power-bi-from-data-modelling-to-stunning-reports-b34aac43d8a1)
    on a real-world example of data modelling.
  prefs: []
  type: TYPE_NORMAL
- en: Analytical Data Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While data analysts and data scientists can work with the data directly in the
    warehouse, it’s common to create one or more analytical data models that *pre-aggregate*
    the data to make it easier to produce reports, dashboards, and interactive visualisations.
  prefs: []
  type: TYPE_NORMAL
- en: These are called **Online Analytical Processing (OLAP)** models or **cubes**.
  prefs: []
  type: TYPE_NORMAL
- en: The data aggregations are across dimensions at different levels or **hierarchies**,
    enabling you to *drill up/down* to view aggregations at multiple hierarchical
    levels — for example to find total sales by region, by city, or for an individual
    address.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ea9a4c5c3917cc6d421aabfdf147ddea.png)'
  prefs: []
  type: TYPE_IMG
- en: Hierarchies enable drilling up and down. Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Because OLAP data is pre-aggregated, queries to return the summaries it contains
    can be run quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Aggregated numeric values (**measures**) from fact tables are calculated for
    *intersections* of dimensions from dimension tables. Conceptually, this means
    the model forms a multi-dimensional structure in which any point where the dimensions
    intersect represents an aggregated measure for those dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: For example, as suggested earlier, sales revenue might be totaled by date, customer,
    and product, giving rise to a query output that looks like a Cartesian coordinate
    within a cube.
  prefs: []
  type: TYPE_NORMAL
- en: Pretty cool right?!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7f990f25eb1e9acd41854dd0059c4b31.png)'
  prefs: []
  type: TYPE_IMG
- en: The “cube”. Measures (e.g. sales) are aggregated by dimensions time, customer
    & product. Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '*Important!* Although we commonly refer to an analytical model as a *cube*,
    there can be more (or fewer) than three dimensions — it’s just not easy for us
    to visualise more than three!'
  prefs: []
  type: TYPE_NORMAL
- en: Ready for consumption!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Data analysts** consume data from these analytical models (Step 3) — or directly
    from data warehouses (Step 2) — or even from the ‘raw’ datasets sitting in the
    data lake (Step 1) to explore data and create dashboards, reports & visualisations
    to generate insights.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/072e21afc65fa64b56239b2898c01ae2.png)'
  prefs: []
  type: TYPE_IMG
- en: A PowerBI dashboard. See [my tutorial](https://col-jung.medium.com/intro-to-power-bi-from-data-modelling-to-stunning-reports-b34aac43d8a1)
    for a how-to guide!
  prefs: []
  type: TYPE_NORMAL
- en: '**Non-technology professionals** in the organisation can perform self-service
    data analysis and reporting on the data, particularly if it has already been visualised
    in a BI tool such as [PowerBI or Tableau](/intro-to-power-bi-from-data-modelling-to-stunning-reports-b34aac43d8a1).'
  prefs: []
  type: TYPE_NORMAL
- en: These visualisations built on good analytical data models show comparisons,
    trends, and key performance indicators (KPIs), and can take the form of charts,
    graphs, reports, which are often disseminated in documents and [*PowerPoint* presentations](https://medium.com/swlh/power-of-storytelling-in-business-data-analytics-your-data-is-only-half-the-story-f50fadf9712b),
    web-based dashboards, and interactive environments (e.g. PowerBI and Tableau)
    where further downstream users — even the C-Suite — can easily explore the data
    visually and make data-informed decisions.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Database Normalisation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s now dive into some details of database normalisation.
  prefs: []
  type: TYPE_NORMAL
- en: This is the process of organising the data in our relational database to reduce
    redundancy and improve data integrity. It involves breaking down **each table**
    into smaller tables and defining relationships between them to eliminate duplicate
    data and inconsistencies.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of normalisation is to create a database schema that is more efficient,
    flexible, and less prone to data anomalies. We start with a set of tables and
    often end up with a larger set of ‘cleaner’ tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several levels of normalisation, each with a set of rules to follow.
    The most common are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**First normal form (1NF)**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each column of a table must contain atomic (indivisible) values. That is, no
    column should contain a list or a set of values.
  prefs: []
  type: TYPE_NORMAL
- en: For example, imagine you have a table of customer orders. In each row, there’s
    a column for the customer’s name and a column for a list of items they ordered.
    In 1NF, you would break that list of items into individual rows, so each row only
    contains information about one item. This helps to prevent duplication of information.
  prefs: []
  type: TYPE_NORMAL
- en: '**Second normal form (2NF)**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A table is in 2NF if it is in 1NF and all non-key columns are fully dependent
    on the primary key. In other words, there should be no partial dependencies where
    a non-key column is dependent on only part of the primary key.
  prefs: []
  type: TYPE_NORMAL
- en: Continuing with the customer order example, let’s say you have a new column
    for the date the order was placed. If that date is only dependent on the customer’s
    name, then you could end up with duplicates in the table. In 2NF, you would break
    the table into two — one table for customer information and one for order information.
    This ensures that each piece of information is only stored once and prevents partial
    dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '**Third normal form (3NF)**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A table is in 3NF if it is in 2NF and all non-key columns are independent of
    each other. In other words, there should be no transitive dependencies where a
    non-key column is dependent on another non-key column.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s say you have a new column for the price of each item ordered. If that
    price is dependent on the item itself, rather than on any other column in the
    table, then you’re already in 3NF. But if the price is dependent on some other
    column, like the manufacturer of the item, then you would need to break the table
    into multiple tables to eliminate those transitive dependencies. The goal is to
    ensure that each column only depends on the primary key of the table and not on
    any other non-key column.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/60d1a0b5db2ab86cf7c92764e80bd1b4.png)'
  prefs: []
  type: TYPE_IMG
- en: Glorious [details](https://en.wikipedia.org/wiki/Database_normalization) on
    normalisation on Wikipedia.
  prefs: []
  type: TYPE_NORMAL
- en: There are additional levels of normalisation beyond 3NF, but they are less commonly
    used in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Enjoying this story? Get an [email](https://col-jung.medium.com/subscribe) when
    I post similar articles.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Non-Relational Databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As an aside, let’s quickly cover ***non***-relational databases.
  prefs: []
  type: TYPE_NORMAL
- en: These are data management systems that don’t apply a relational schema to the
    data. Non-relational databases are often referred to as **NoSQL** databases, even
    though some support a variant of the SQL language.
  prefs: []
  type: TYPE_NORMAL
- en: There are four common types of non-relational databases commonly in use.
  prefs: []
  type: TYPE_NORMAL
- en: '**Key-value databases** in which each record consists of a unique key and an
    associated value, which can be in any format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Document databases**, which are a specific form of key-value database in
    which the value is a JSON document, which the system is optimised to parse and
    query.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Column family databases**, which store tabular data comprising rows and columns,
    but you can divide the columns into groups known as column-families. Each column
    family holds a set of columns that are logically related together.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Graph databases**, which store entities as nodes with links to define relationships
    between them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/a57ce00a6482d4106296850504f8b53b.png)'
  prefs: []
  type: TYPE_IMG
- en: NoSQL databases. Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Analytical models enable you to structure data to support analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Data for analytics is migrated from operational systems to *data lakes* and
    then to *data warehouses*. Here, the resulting *relational database* is **modelled**,
    which includes *normalising* it for efficiency and baking in a *schema* suitable
    for your business use case.
  prefs: []
  type: TYPE_NORMAL
- en: These models are based on having *related* tables of data, and define the numeric
    values that you want to analyse or report (*measures*) and the entities by which
    you want to aggregate them (*dimensions*).
  prefs: []
  type: TYPE_NORMAL
- en: There are three common levels of normalisation, which breaks each table down
    into smaller, more specific tables that are connected to each other in a more
    logical and efficient way.
  prefs: []
  type: TYPE_NORMAL
- en: To further improve efficiency, the data may be pre-aggregated into an **OLAP
    model** or **cube.** Intuitively, these models form multiple dimensional structures
    that resemble a cube in the case that you’re aggregating over precisely 3 dimensions,
    for instance *sales revenue* across *customer*, *product* and *time*.
  prefs: []
  type: TYPE_NORMAL
- en: Insights are then derived by data analysts and downstream users by **enriching**
    the data of their choice (by *joining* tables) and performing **aggregations**
    of interest.
  prefs: []
  type: TYPE_NORMAL
- en: Through [persuasive data-storytelling](https://medium.com/swlh/power-of-storytelling-in-business-data-analytics-your-data-is-only-half-the-story-f50fadf9712b),
    analysts and business professionals then present their findings to decision-makers
    who can act on the data.
  prefs: []
  type: TYPE_NORMAL
- en: Let me know if you found this article useful!
  prefs: []
  type: TYPE_NORMAL
- en: Find me on [Twitter](https://twitter.com/col_jung) & YouTube [here](https://youtube.com/@col_builds),
    [here](https://youtube.com/@col_invests) & [here](https://youtube.com/@col_shoots).
  prefs: []
  type: TYPE_NORMAL
- en: My Popular AI, ML & Data Science articles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AI & Machine Learning: A Fast-Paced Introduction — [here](https://col-jung.medium.com/ai-revolution-your-fast-paced-introduction-to-machine-learning-914ce9b6ddf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Machine Learning versus Mechanistic Modelling — [here](https://medium.com/swlh/differential-equations-versus-machine-learning-78c3c0615055)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data Science: New Age Skills for the Modern Data Scientist — [here](/evolution-of-data-science-new-age-skills-for-the-modern-end-to-end-data-scientist-1ab87a8839ab)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Generative AI: How Big Companies are Scrambling for Adoption — [here](https://generativeai.pub/how-big-companies-are-scrambling-to-adopt-generative-ai-d52456fb4c69)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ChatGPT & GPT-4: How OpenAI Won the NLU War — [here](https://col-jung.medium.com/the-road-to-chatgpt-gpt-4-how-deep-learning-revolutionised-natural-language-processing-835d89560577)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GenAI Art: DALL-E, Midjourney & Stable Diffusion Explained — [here](https://col-jung.medium.com/generative-ai-art-the-road-to-dall-e-midjourney-stable-diffusion-3b3219d97f02)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Beyond ChatGPT: Search for a Truly Intelligence Machine — [here](https://col-jung.medium.com/from-chatgpt-to-singularity-the-search-for-a-truly-intelligent-machine-856c8f4c5e63)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modern Enterprise Data Strategy Explained — [here](https://generativeai.pub/modern-enterprise-data-strategy-a-guide-for-analysts-data-scientists-engineers-2d4b45a31427)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From Data Warehouses & Data Lakes to Data Mesh — [here](/from-data-warehouses-and-lakes-to-data-mesh-a-guide-to-enterprise-data-architecture-e2d93b2466b1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'From Data Lakes to Data Mesh: A Guide to Latest Architecture — [here](/from-data-lakes-to-data-mesh-a-guide-to-the-latest-enterprise-data-architecture-d7a266a3bc33)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure Synapse Analytics in Action: 7 Use Cases Explained — [here](https://generativeai.pub/azure-synapse-analytics-in-action-7-real-world-use-cases-explored-c73ef231b408)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cloud Computing 101: Harness Cloud for Your Business — [here](https://generativeai.pub/cloud-computing-unleashed-how-to-harness-the-power-of-cloud-for-your-business-f72e8e23be9)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data Warehouses & Data Modelling — a Quick Crash Course — [here](/databases-and-data-modelling-a-quick-crash-course-546891a49b67)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data Products: Building a Strong Foundation for Analytics — [here](https://generativeai.pub/data-products-why-your-organisation-needs-them-4ac7bf2e5953)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data Democratisation: 5 ‘Data For All’ Strategies — [here](/data-democratisation-5-data-for-all-strategies-embraced-by-large-companies-e62fad52c250)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data Governance: 5 Common Pain Points for Analysts — [here](/5-common-data-governance-pain-points-for-analysts-data-scientists-8efe8a007ac2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Power of Data Storytelling — Sell Stories, Not Data — [here](https://medium.com/swlh/power-of-storytelling-in-business-data-analytics-your-data-is-only-half-the-story-f50fadf9712b)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Intro to Data Analysis: The Google Method — [here](/intro-to-data-analytics-the-google-method-92d431b65581)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Power BI — From Data Modelling to Stunning Reports — [here](/intro-to-power-bi-from-data-modelling-to-stunning-reports-b34aac43d8a1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Regression: Predict House Prices using Python — [here](/predict-house-prices-with-machine-learning-5b475db4e1e)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Classification: Predict Employee Churn using Python — [here](/will-your-employee-leave-a-machine-learning-model-8484c2a6663ea)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python Jupyter Notebooks versus Dataiku DSS — [here](/jupyter-notebooks-versus-dataiku-dss-for-data-science-e02264a753ca)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Popular Machine Learning Performance Metrics Explained — [here](/popular-machine-learning-performance-metrics-a2c33408f29)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building GenAI on AWS — My First Experience — [here](https://generativeai.pub/how-big-companies-are-scrambling-to-adopt-generative-ai-d52456fb4c69)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Math Modelling & Machine Learning for COVID-19 — [here](https://medium.com/swlh/math-modelling-and-machine-learning-for-covid-19-646efcbe024e)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Future of Work: Is Your Career Safe in Age of AI — [here](https://col-jung.medium.com/future-of-work-is-your-career-safe-in-the-age-of-chatgpt-gpt-4-122d5996bd57)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
