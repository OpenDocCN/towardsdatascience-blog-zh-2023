["```py\ndef total_waste(stock_size, solution):\n\n    '''\n        Calculates cutoff waste give a specific solution\n\n        inputs\n        stock_size (float) : the dimension of the stock \n                             available for purchase\n        solution (list)    : list of floats depicting the \n                             order to make the cuts\n\n        output\n        cut_off_waste (float) : the total cutoff waste of \n                                the given solution\n\n    '''\n\n    # set up variable to keep track of the total lengths of \n    # cuts on current piece of stock\n    temp_cut_length = 0\n\n    # start with no waste\n    cut_off_waste = 0\n\n    for cut in solution:\n\n        # if next cut doesn't fit on current stock,\n        # calculate new waste and reset for another piece of stock\n        if temp_cut_length + cut > stock_size:\n\n            # calculate cutoff waste\n            cut_off_waste += stock_size - temp_cut_length\n\n            # reset cut length\n            temp_cut_length = cut\n\n        else:\n            # add to cumulative length of cuts on stock\n            temp_cut_length += cut\n\n    # add in last cut waste -- it is not captured in the loop\n    cut_off_waste += stock_size - temp_cut_length\n\n    return cut_off_waste\n```", "```py\ndef greedy_search(cuts, stock_size):\n\n    '''\n        Calculates a greedy optimal solution\n\n        inputs:\n        cuts (list)        : cuts that need to be made\n        stock_size (float) : size of stock available for purchase\n\n        outputs:\n        cut_plan (list) : sequence of cuts to obtain greedy \n                          optimal results\n        waste (float)   : amount of material wasted by solution\n\n    '''\n\n    # empty cut off plan, to be populated\n    cut_plan = []\n    # start with cutoff size equal to stock size\n    cut_off = stock_size\n    # copy cuts list to avoid modifying original list\n    cuts_copy = copy(cuts)\n\n    # sort cuts in desc order\n    cuts = list(np.sort(cuts)[::-1])\n\n    # continue ordering cuts until\n    # all cuts have been ordered\n    while len(cuts_copy) > 0:\n\n        for cut_size in cuts_copy:\n\n            # if cut size is smaller than remaining stock,\n            # assign the cut now\n            if cut_size < cut_off:\n\n                # add cut to plan\n                cut_plan.append(cut_size)\n\n                # update the leftover amount\n                cut_off -= cut_size\n\n                # remove cut from list of cuts still needing \n                # to be ordered\n                cuts_copy.remove(cut_size)\n\n        # reset cut_off to be the full stock size\n        cut_off = stock_size\n\n    # calculate waste using total_waste function\n    waste = total_waste(stock_size, cut_plan)\n\n    return cut_plan, waste\n```"]