- en: Transitioning from ETL to ELT
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/from-etl-to-elt-908ce414e39e](https://towardsdatascience.com/from-etl-to-elt-908ce414e39e)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How cloud computing and analytics engineering forced the transition from ETL
    to ELT
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://gmyrianthous.medium.com/?source=post_page-----908ce414e39e--------------------------------)[![Giorgos
    Myrianthous](../Images/ff4b116e4fb9a095ce45eb064fde5af3.png)](https://gmyrianthous.medium.com/?source=post_page-----908ce414e39e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----908ce414e39e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----908ce414e39e--------------------------------)
    [Giorgos Myrianthous](https://gmyrianthous.medium.com/?source=post_page-----908ce414e39e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----908ce414e39e--------------------------------)
    ·7 min read·Dec 6, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0ac0bf0fce07c34df7fbef6780fafd48.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
- en: Image generated via [DALL-E](https://labs.openai.com/s/R6GmBJ0EmCXudKsPuIGJBBjC)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: ETL (Extract-Transform-Load) and ELT (Extract-Load-Transform) are two terms
    commonly used in the realm of Data Engineering and more specifically in the context
    of data ingestion and transformation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: While these terms are often used interchangeably, they refer to slightly different
    concepts and have different implications for the design of a data pipeline.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: In this post, we will clarify the definitions of ETL and ELT processes, outline
    the differences between the two, and discuss the advantages and disadvantages
    both have to offer to engineers and data teams in general.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: And most importantly, I am going to describe how the recent changes in modern
    data teams’ formation has impacted the landscape around ETL vs ELT battle.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Extract, Load and Transform independently
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main stake when it comes to comparing ETL and ELT is obviously the sequence
    the Extract, Load and Transform steps are executed within a data pipeline.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: For now, let’s ignore this execution sequence and let’s focus on the actual
    terminology and discuss about what each individual step is supposed to do.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '**Extract**: This step refers to the process of pulling data from a persistent
    source. This data source could be a database, an API endpoint, a file or really
    anything that contains any form of data, including both structured or unstructured.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0597c90624f0c4ce980c643cd446760e.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
- en: 'Extract step pulls data from various sources — Source: Author'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '**Transform**: In this step, the pipeline is expected to perform some changes
    in the structure or format of the data in order to achieve a certain goal. A transformation
    could be an attribute selection, a modification of records (e.g. transform `''United
    Kingdom''` into `''UK''`), a data validation, a join to another source or really
    anything that changes the format of the input raw data.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**转换**：在这一步骤中，管道需要对数据的结构或格式进行一些更改，以实现特定目标。转换可以是属性选择、记录修改（例如，将 `''United Kingdom''`
    转换为 `''UK''`）、数据验证、连接到另一个来源或任何更改输入原始数据格式的操作。'
- en: '![](../Images/372d7612ff232255970411d5221e2bb2.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/372d7612ff232255970411d5221e2bb2.png)'
- en: 'The transformation steps performs a number of transformation into the input
    raw data — Source: Author'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 转换步骤对输入的原始数据执行多项转换 — 来源：作者
- en: '**Load**: The load step refers to the process of copying the data (either the
    raw or the transformed version) into the target system. Usually, the target system
    is a Data Warehouse (i.e. an OLAP system used for analytics purposes) or an application
    database (i.e. an OLTP system).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**加载**：加载步骤指的是将数据（无论是原始版本还是转换版本）复制到目标系统的过程。通常，目标系统是数据仓库（即用于分析目的的 OLAP 系统）或应用程序数据库（即
    OLTP 系统）。'
- en: '![](../Images/49ac9c6dacc34330fd0d1c0eeccb603c.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/49ac9c6dacc34330fd0d1c0eeccb603c.png)'
- en: 'Loading data into the destination system — Source: Author'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据加载到目标系统中 — 来源：作者
- en: Unavoidably, the sequence we execute these three steps matters. And with the
    increasing volumes of data that need to be handled, the order of execution **matters
    a lot**. Let’s discuss why!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 不可避免地，我们执行这三个步骤的顺序很重要。随着需要处理的数据量的增加，执行顺序**非常重要**。让我们讨论一下原因！
- en: Extract Transform Load (ETL)
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取 转换 加载 (ETL)
- en: ETL stands for Extract-Transform-Load and the term itself refers to a process
    where the data extraction step is followed by the transformation step and ends
    with the load step.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: ETL 代表提取-转换-加载，该术语本身指的是一个过程，其中数据提取步骤之后是转换步骤，最后是加载步骤。
- en: '![](../Images/f5e35d6364d32efa0dff5a7e34001419.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f5e35d6364d32efa0dff5a7e34001419.png)'
- en: 'Extract > Transform > Load — Source: Author'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 提取 > 转换 > 加载 — 来源：作者
- en: The **data transformation step in ETL processes occurs in a staging environment
    outside of the target system**, where the data is transformed just before it gets
    loaded to the destination.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**ETL 过程中的数据转换步骤发生在目标系统之外的阶段环境中**，数据在加载到目标系统之前进行转换。'
- en: '![](../Images/59d25d822800782094142b9f125ba6d4.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/59d25d822800782094142b9f125ba6d4.png)'
- en: 'In ETL, the transformation step happens in a staging environment/server and
    the transformed data is then loaded into the destination system — Source: Author'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ETL 中，转换步骤发生在阶段环境/服务器中，转换后的数据然后被加载到目标系统中 — 来源：作者
- en: Extract Load Transform (ELT)
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取 加载 转换 (ELT)
- en: On the other hand, ELT, that stands for Extract-Load-Transform, refers to a
    process where the extraction step is followed by the load step and the final data
    transformation step happens at the very end.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，ELT，代表提取-加载-转换，指的是一个过程，其中提取步骤之后是加载步骤，最终的数据转换步骤发生在最后。
- en: '![](../Images/012425c87835bf10111dfb931e89b6c8.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/012425c87835bf10111dfb931e89b6c8.png)'
- en: 'Extract > Load > Transform — Source: Author'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 提取 > 加载 > 转换 — 来源：作者
- en: In contrast to ETL, in ELT no staging environment/server is required since data
    transformation is performed within the destination system, which is usually a
    Data Warehouse or Data Lake hosted on the Cloud.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 相比于 ETL，在 ELT 中不需要阶段环境/服务器，因为数据转换是在目标系统内进行的，该系统通常是托管在云端的数据仓库或数据湖。
- en: '![](../Images/08acc1825c942f4402581f1d379bc0a0.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/08acc1825c942f4402581f1d379bc0a0.png)'
- en: 'In ELT, the transformation step occurs within the destination system — Source:
    Author'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ELT 中，转换步骤发生在目标系统内 — 来源：作者
- en: How to choose between ETL and ELT
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在 ETL 和 ELT 之间做选择
- en: ETL and ELT come with their pros and cons, and the chances are you will come
    across both in your day-to-day work given that they are typically used for different
    use-cases.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: ETL 和 ELT 各有利弊，鉴于它们通常用于不同的用例，您很可能会在日常工作中遇到这两者。
- en: '**ETL** is best suited in use cases where data resides on-premises and needs
    to be structured before loading them into the target database or warehouse. Therefore,
    the ETL process is usually preferred when smaller amounts of data are involved
    in the process and/or when complex transformations are about to be performed.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**ETL** 最适合用于数据存储在本地并需要在加载到目标数据库或数据仓库之前进行结构化的用例。因此，当涉及较小的数据量和/或需要执行复杂转换时，通常更倾向于使用
    ETL 过程。'
- en: Furthermore, since ETL transforms the data before the load step, sensitive data
    can be masked, encrypted or completely removed before it’s loaded. This aspect
    of ETL can help companies and teams enforce and implement compliance to various
    regulations (e.g. GDPR) more easily.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于 ETL 在加载步骤之前转换数据，因此敏感数据可以在加载之前被掩码、加密或完全删除。ETL 的这一方面可以帮助公司和团队更容易地强制执行和实施各种法规（如
    GDPR）。
- en: Since the transformation happens in an intermediate (staging) server, there’s
    an overhead for moving the transformed data into the target system. In addition,
    the target system won’t contain the raw data (i.e. the data in the form prior
    to the transformation). This means that whenever additional transformations are
    required, we would have to pull the raw data once again.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于转换发生在中间（暂存）服务器上，因此需要额外的开销将转换后的数据移动到目标系统。此外，目标系统不会包含原始数据（即转换前的数据形式）。这意味着每当需要额外的转换时，我们必须再次提取原始数据。
- en: On the other hand, **ELT** provides more flexibility over ETL given that the
    latter was historically intended for structured (relational) data. Modern cloud
    architectures and warehouses enabled ELT for both structured and unstructured
    data.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，**ELT** 提供了比 ETL 更多的灵活性，因为后者历史上是为了结构化（关系型）数据而设计的。现代云架构和数据仓库使得 ELT 能够处理结构化和非结构化数据。
- en: As mentioned earlier, ETL should be used for small volumes of data. ELT offers
    faster transformation since it is not dependent on the data size and is usually
    performed on an as-needed basis.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，ETL 应用于小规模的数据。ELT 提供了更快的转换速度，因为它不依赖于数据大小，通常根据需要进行。
- en: In addition, when the data is loaded before the transformation as part of an
    ELT process, it means that users and systems still have access to the raw data.
    This means that if more transformations are required at a later stage, we already
    have the raw data within the Data Warehouse that can be accessed any time. The
    only downside would be the additional storage required to store this raw data,
    but given the constantly decreasing storage cost I don’t think this is a major
    issue, anyway.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，当数据在 ELT 过程中的转换之前被加载时，这意味着用户和系统仍然可以访问原始数据。这意味着如果在后续阶段需要更多的转换，我们已经在数据仓库中拥有可以随时访问的原始数据。唯一的缺点是需要额外的存储来存储这些原始数据，但考虑到存储成本不断下降，我认为这不是一个主要问题。
- en: Now that we all have a good understanding regarding the technical implications
    of both ETL and ELT processes, let me question something. When it comes to choosing
    one over the other, is it just a matter of technical implementation?
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对 ETL 和 ELT 过程的技术影响有了充分的了解，让我提一个问题。当选择一个而不是另一个时，仅仅是技术实施的问题吗？
- en: It’s not just about when to perform a Transformation
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这不仅仅是关于何时进行转换
- en: In addition, the data realm has been constantly evolving and moving forward
    and the data roles are no exception to this fast-paced environment. **ETL vs ELT
    is not just about where the transformation step occurs — it’s (also) about who
    is supposed to perform them**.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，数据领域一直在不断发展，数据角色也不例外。**ETL 与 ELT 不仅仅关乎转换步骤发生的地点——它（还）关乎谁应该执行这些步骤**。
- en: A transformation step, usually involves some sort of **business logic**. Traditional
    ETL processes were used to be executed by Data Warehouse Engineers (not sure if
    this is still a thing to be honest) which means these people were in charge of
    crafting business logic, too.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 转换步骤通常涉及某种**业务逻辑**。传统的 ETL 过程通常由数据仓库工程师执行（不确定现在是否仍然如此），这意味着这些人也负责制定业务逻辑。
- en: On the other hand, ELT processes evolved due to the nature and landscape of
    modern data teams and their formation. The EL (Extract-Load) steps are usually
    performed by Data Engineers whereas the Transformation step is executed by the
    — so called — Analytics Engineers.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，ELT 过程的演变是由于现代数据团队的性质和形成。EL（Extract-Load）步骤通常由数据工程师执行，而转换步骤则由所谓的分析工程师执行。
- en: And it makes so much sense to me. A Data Engineer is a purely technical guy
    who is concerned about efficiency, scalability, readiness and availability (among
    another million of things). On the other hand, an Analytics Engineer is still
    a technical person with much better business understanding. And therefore it makes
    more sense for the Analytics Engineer to be responsible for transforming the data,
    given that (usually) transformation corresponds to business value.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Modern cloud architectures, data stacks (including cloud-based OLAP systems)
    and team formations have made ELT processes more relevant and effective. From
    my personal experience, I would say there’s an undergoing shift from ETL to ELT
    despite the fact that ETL is still relevant and useful.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Modern data stacks and teams favour ELT processes
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While ETL is not dead, in my opinion, modern data stacks and technologies favour
    ELT processes. As an example, let’s consider dbt (data build tool), which is one
    of the hottest additions in the data realm and it has become the de-facto transformational
    tool for analysts and engineers.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Usually, we would want to bring into the Data Warehouse the raw data (i.e. without
    applying any sort of transformation) from external or internal data sources. Then
    on top of these data models (in dbt we usually call them staging models) we build
    additional models (intermediate and mart) which are the result of some transformational
    processes that occur within the Data Warehouse.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: In such workflows, it therefore makes more sense to load the data into the Warehouse
    before transforming it. This also enables the access to the raw data at any given
    time so that future use-cases can be supported.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested in gaining a deeper understanding around how dbt works
    and how the different components come together in order to transform raw data
    and build meaningful data models to support decision-making, I would recommend
    the following article.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Designing data pipelines is a challenging task and when doing so, many factors
    need to be carefully taken into account. When it comes ingesting data from data
    sources into a Data Warehouse, there are typically two approaches you can take.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: In this article we discussed how ETL and ELT perform a sequence of steps in
    order to transform and load (or load and transform) data into a destination system.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the landscape of the organisation and the specific use-case you
    may want to choose one over the other. I hope this tutorial has provided all the
    details you need in order to choose the best and most effective approach when
    it comes to ingesting and transforming data
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
