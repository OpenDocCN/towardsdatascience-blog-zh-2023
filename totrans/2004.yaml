- en: The Complete Introduction to Survival Analysis in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/the-complete-introduction-to-survival-analysis-in-python-7523e17737e6](https://towardsdatascience.com/the-complete-introduction-to-survival-analysis-in-python-7523e17737e6)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Understand survival analysis, its use in the industry, and how to apply it in
    Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@marcopeixeiro?source=post_page-----7523e17737e6--------------------------------)[![Marco
    Peixeiro](../Images/7cf0a81d87281d35ff47f51e3026a3e9.png)](https://medium.com/@marcopeixeiro?source=post_page-----7523e17737e6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----7523e17737e6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----7523e17737e6--------------------------------)
    [Marco Peixeiro](https://medium.com/@marcopeixeiro?source=post_page-----7523e17737e6--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----7523e17737e6--------------------------------)
    ·13 min read·May 9, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2159a9f569567d8f42ea9e0b7a718133.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Ricky Kharawala](https://unsplash.com/@sweetmangostudios?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Survival analysis is a fascinating field, but rarely used or mentioned at all
    by data science practitioners, at least in my experience. While it is mostly used
    in the healthcare industry, survival analysis can also be used in a wide variety
    of domains.
  prefs: []
  type: TYPE_NORMAL
- en: The objective of this article is to make you discover survival analysis and
    its possible application in your industry.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we first define survival analysis and motivate its use in different
    industries. Then, we see how we can implement different algorithms for survival
    analysis and learn how to evaluate them.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: What is survival analysis?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Survival analysis is a branch of statistics that measures the expected duration
    of time until an event occurs. The name comes from clinical research where we
    are literally interested in a patient’s survival, or in other words, extending
    the duration of time until death.
  prefs: []
  type: TYPE_NORMAL
- en: Survival analysis can take many different names depending on the field in which
    it’s applied. In engineering, we talk about *reliability analysis*, and *duration
    analysis* in economics. Time-to-event analysis is also another common name.
  prefs: []
  type: TYPE_NORMAL
- en: Regression or classification?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Considering that survival analysis measures the length of time to an event happening
    means that it is a type of regression.
  prefs: []
  type: TYPE_NORMAL
- en: However, the output of survival analysis is not a continuous number.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, we aim to generate either a **survival function** or a **hazard function**.
  prefs: []
  type: TYPE_NORMAL
- en: A survival function expresses the probability of the event not occurring in
    function of time.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, the hazard function denotes the probability of the event occurring
    at a point in time.
  prefs: []
  type: TYPE_NORMAL
- en: We will take a look at those functions in more details when we implement different
    models for survival analysis.
  prefs: []
  type: TYPE_NORMAL
- en: When to use survival analysis?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we understand that survival analysis measures the time to an event,
    we can see how it is not exclusive to the healthcare domain.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, survival analysis can be used anytime we need to act *before* the event
    occurs.
  prefs: []
  type: TYPE_NORMAL
- en: Take the employee churn problem for example. Suppose that we have the following
    dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Intuitively, we frame this as a binary classification problem, where the employee
    either stays at the company or leaves.
  prefs: []
  type: TYPE_NORMAL
- en: If our model predicts the employee stays, how long will they stay? And if the
    model predicts the employee leaves, how long before they leave? As a classification
    problem, either we do not know the answers to those questions, or we need a fixed
    time period. For example, our data is labelled such that as the employee left
    within 6 months.
  prefs: []
  type: TYPE_NORMAL
- en: Treating the employee churn as a survival analysis problem, we can instead have
    the probability of an employee staying at the company as a function of time. That
    way, we can take action before the employee actually leaves. Plus, we can analyze
    our features and determine how each impacts the length of time an employee stays.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, this was just an example, but survival analysis can be applied in many
    more situations like:'
  prefs: []
  type: TYPE_NORMAL
- en: How long before a piece of equipment needs maintenance?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How long before a client pays back their debt?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How long before a software bug is resolved?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How long before a client makes another purchase?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The take-home message is that we should use survival analysis is when we are
    not only interested in an event occurring, but also interested in the duration
    of time before that event occurs.
  prefs: []
  type: TYPE_NORMAL
- en: The data in survival analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since survival analysis is concerned with the occurrence of an event and the
    duration of time until it occurs, our data has to contain that information.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s bring back our sample dataset on employee churn.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we can see that we have the necessary information for survival analysis:
    we have the years of employment and if the employee left.'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, we also have data on employees that have not left the company yet.
  prefs: []
  type: TYPE_NORMAL
- en: This is what we call **censored data**. For two employees, we do not know when
    they will leave the company, or if they will leave at all.
  prefs: []
  type: TYPE_NORMAL
- en: Still, we will not wait for all employees to leave before taking action, and
    so survival analysis is especially designed to work with censored data.
  prefs: []
  type: TYPE_NORMAL
- en: Types of censored data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three types of censored data:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-censored
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Left-censored
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Interval-censored
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s take a look at each type.
  prefs: []
  type: TYPE_NORMAL
- en: '**Right-censored data**'
  prefs: []
  type: TYPE_NORMAL
- en: For right-censored data, we know the starting point for every subject, but we
    do not observe the event for everyone, as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b4c8c82e2036da982905c23f7c9a4b59.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Right-censored data: we know the starting point, but do not know if the event
    occurs for every subject. Image by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: In the figure above, subject A quit the company. For subject B, during the time
    of the experiment, they remained in the company. But we cannot know if they left
    after. So, it is right-censored.
  prefs: []
  type: TYPE_NORMAL
- en: Subject C is another example of right-censored data, where someone simply leaves
    the experiment. This can happen in a clinical trial scenario, when someone is
    still alive, but leaves the trial, so we lose track of them.
  prefs: []
  type: TYPE_NORMAL
- en: '**Left-censored data**'
  prefs: []
  type: TYPE_NORMAL
- en: To understand left-censored data, let’s consider the example of being infected
    by a virus.
  prefs: []
  type: TYPE_NORMAL
- en: Here, left-censored data would mean that we do not know when the person was
    infected, but we know that they have the virus.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e37ca6c4f1910ea99adf2a53d828de91.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Left-censored data: we don’t know when the event occurred, but we observe it
    later on. Image by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: In the figure above, the event happened before we observed it, but we cannot
    know the exact time. Still, this type of data can be used for survival analysis.
  prefs: []
  type: TYPE_NORMAL
- en: '**Interval-censored data**'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, interval-censored data is when the event occurs between two moments
    of observation, but we do not know exactly when.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7899e4d4a86749a296f904912942b393.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Interval-censored data: the event occurred between two points of observation.
    Image by the author.'
  prefs: []
  type: TYPE_NORMAL
- en: To understand this, suppose that you go to the doctor and test for the virus.
    On your first visit, the result is negative and your are not infected.
  prefs: []
  type: TYPE_NORMAL
- en: Then, the following week, you go back to the doctor and test for the virus.
    Now, the test is positive, meaning that you were infected sometime between the
    two visits, but we do not know when exactly.
  prefs: []
  type: TYPE_NORMAL
- en: Apply survival analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have an overall understanding or survival analysis, its applications
    and what type of data it can work with, let’s actually apply survival analysis
    with an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we work with the Veterans Administration Lung Cancer Trial dataset in
    1980 (Kalbfleisch, J.D., Prentice, R.L.: “The Statistical Analysis of Failure
    Time Data.” John Wiley & Sons, Inc. (2002)). The dataset is publicly available
    for download.'
  prefs: []
  type: TYPE_NORMAL
- en: This dataset contains data on 137 patients, has variables and is right-censored.
    That means that during the study, not all patients deceased.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, there are two main objectives to this experiment:'
  prefs: []
  type: TYPE_NORMAL
- en: Can a different treatment improve survival time?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can we predict the survival time of a patient?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To answer the first question, let’s implement our first survival analysis method:
    the Kaplan-Meier estimator.'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the Kaplan-Meier estimator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Kaplan-Meier estimator is a non-parametric statistic to estimate the survival
    function that works well with right-censored data.
  prefs: []
  type: TYPE_NORMAL
- en: As we will see soon, the Kaplan-Meier estimator will generate a survival function
    represented by a series of declining horizontal steps, like a staircase. Given
    enough samples, that function will approach the true survival function.
  prefs: []
  type: TYPE_NORMAL
- en: The main assumption of the Kaplan-Meier estimator is that censored data has
    the same probability of survival as uncensored data. Therefore, if someone leaves
    the experiment, we will assume the same probability of survival as someone who
    stayed in the experiment and that we observe.
  prefs: []
  type: TYPE_NORMAL
- en: To implement it, we will use the *scikit-survival* Python package. This is a
    library that comes with datasets and common survival analysis models.
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s read the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! Now, we can import the Kaplan-Meier estimator and generate the survival
    curve. For that, we need to pass in two parameters: the status of the patient
    (deceased or not) and the time to the event (how many days elapsed from the beginning
    of the study to the observation).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Then, we can plot the survival function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3194350e77bf8c303e823a851228f3aa.png)'
  prefs: []
  type: TYPE_IMG
- en: The survival function from the Kaplan-Meier estimator on the Veterans Administration
    Lung Cancer Trial dataset. Notice how the curve is a series of declining horizontal
    steps as expected. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: From the figure above, we can see that the survival function is indeed a series
    of declining horizontal steps as expected. When the study started, most patients
    were alive, and so the probability of survival is high. Then, the curve decreases
    quickly, meaning that most patients deceased in the first 400 days of the study.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it is possible to generate a survival function for different groups of
    patient. For example, in the dataset, two different treatments were administered.
    It would be interesting to see if one treatment increased the chances of survival.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see this for ourselves! We separate the data into two groups depending
    on the treatment type and generate the survival function. Then, we plot it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/12b006a93f6f48e61df872c8eb1e5a97.png)'
  prefs: []
  type: TYPE_IMG
- en: Survival functions for two different treatment types. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: From the figure above, it seems that the experimental treatment generates a
    longer-lasting survival curve than the standard treatment.
  prefs: []
  type: TYPE_NORMAL
- en: But is that difference significant?
  prefs: []
  type: TYPE_NORMAL
- en: To answer that question, we use the **logrank test**. This is a statistical
    test to determine if two survival curves are significantly different. Here, the
    null hypothesis states that two curves are not significantly different.
  prefs: []
  type: TYPE_NORMAL
- en: Using *scikit-survival*, we can run the test and output the p-value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This outputs a p-value of 0.93\. Since it is not less than 0.05, we fail to
    reject the null hypothesis and conclude that the survival curves are not significantly
    different. Therefore, the treatment type did not help patients live longer.
  prefs: []
  type: TYPE_NORMAL
- en: Survival analysis with covariates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Kaplan-Meier estimator is a great starting point, but because it a non-parametric
    model, it cannot take into account any of the features of our dataset. Therefore,
    we turn our attention to models that can take in features to estimate the survival
    function.
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s one-hot encode our data so that the features can be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/990294b73336013e725f7a63a19e045d.png)'
  prefs: []
  type: TYPE_IMG
- en: The encoded features. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Great! Now, we can apply a model that takes into account covariates to assess
    survival. Here, we use the Cox Proportional Hazard model.
  prefs: []
  type: TYPE_NORMAL
- en: Cox Proportional Hazard model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Cox Porportional Hazard model is one of the models that can evaluate the
    effect of different factors on survival. That way, we can determine what factors
    can improve survival, and what factors reduce the chance of survival.
  prefs: []
  type: TYPE_NORMAL
- en: Here, the model actually estimates the hazard function. In other words, it calculates
    the probability of the event occurring at a point in time. This is the opposite
    of the survival function, which estimates the probability of the event not occurring
    at a point in time.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0248bff835117db41bbeef48766f0b24.png)'
  prefs: []
  type: TYPE_IMG
- en: Visualizing the hazard and survival functions. The hazard function increases
    in time, while the survival function decreases over time. Image by Marta Sestelo
    from [A Short Course on Survival Analysis](https://bookdown.org/sestelo/sa_financial/intro-functions.html).
  prefs: []
  type: TYPE_NORMAL
- en: From the figure above, we can see that the survival function decreases over
    time, while the hazard function increases over time. Of course, once we have one
    function, we can easily calculate the other one.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Cox model is therefore a hazard function expressed as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2413dd9bc6eb05fe0192433136aff829.png)'
  prefs: []
  type: TYPE_IMG
- en: Cox Proportional Hazard equation. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, *h* represents the hazard (the probability of the event happening) and
    the covariates are represented by *x*. Then, the coefficient *b* can be used to
    interpret the impact of each covariate:'
  prefs: []
  type: TYPE_NORMAL
- en: if b = 0, then the feature has no impact
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if b > 0, then the features increases the hazard (so survival decreases)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if b < 0, then the feature decreases the hazard (so survival increases)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An important assumption of this model is that hazard is proportional, and that
    proportion is independent of time. Therefore, if the risk of death for subject
    A is twice as much as the risk of death for subject B at an initial point in time,
    that proportion remains the same, no matter where we are in time.
  prefs: []
  type: TYPE_NORMAL
- en: Apply the Cox Proportional Hazard model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we understand the Cox model, let’s apply it on our dataset.
  prefs: []
  type: TYPE_NORMAL
- en: We simply have to initialize the model and fit it on our data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Then, we given data on unseen patients, the model can generate the survival
    function for each one of them. Note the use of the method *predict_survival_function*
    to get the survival function and the not the hazard function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6294de202a6e46957bccdda1e4c54449.png)'
  prefs: []
  type: TYPE_IMG
- en: Survival function for each new patient from the Cox Porportional Hazard model.
    Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: From the figure above, we can see that the model generates a unique survival
    function for each patient. We can see that for sample 4, the survival decreases
    the fastest, while sample 2 decreases the slowest.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluate survival analysis models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, we got predictions from our Cox Proportional Hazard model and got survival
    curves. But how do we know if those predictions are any good?
  prefs: []
  type: TYPE_NORMAL
- en: Common evaluation metrics in survival analysis are the **concordance index**
    or **c-index**, and the time-dependent ROC AUC. Let’s explore both in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Concordance index (c-index)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A survival model will predict a hazard probability. Therefore, a sample with
    a higher hazard probability should have a shorter survival time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, to calculate the c-index, we take a pair of samples and look for the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: If the two samples in the pair are censored, the pair is ignored (no impact
    on the c-index)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the sample with a higher predicted hazard has a lower survival time than
    the other sample in the pair, then it is a concordant pair (c-index increases)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the sample with a higher predicted hazard has a longer survival time than
    the other sample in the pair, the pair is discordant (c-index decreases).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, to interpret the c-index, we use the same logic as with the ROC AUC in
    classification:'
  prefs: []
  type: TYPE_NORMAL
- en: 0.5 is a random model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1.0 is a perfect model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 is a model that misses every time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thus, you want your c-index to be at least greater than 0.5, and the closer
    to 1 the better.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluate our Cox model with the c-index
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let’s calculate the c-index of our Cox model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This returns a c-index or 0.74, meaning that our model does better than random,
    which is a good sign.
  prefs: []
  type: TYPE_NORMAL
- en: Time-dependent ROC AUC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have worked with classification problems, you have probably encountered
    the ROC AUC as an evaluation metric. You basically measure the area under the
    ROC curve to assess the performance of your model. Again, you want the area to
    be greater than 0.5 and as close as possible to 1.
  prefs: []
  type: TYPE_NORMAL
- en: Now, in survival analysis, we have a continuous outcome, meaning that the ROC
    changes over time, unlike in binary classification. For example, a client can
    be paying their credit card on time, but then starts defaulting at a future point
    in time.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, using the time-depedent ROC AUC is useful to assess you model’s capability
    in predicting an event occurring by time *t*.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluate our Cox model with the dynamic ROC AUC.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using scikit-survival, let’s evaluate our Cox model using the time-dependent
    ROC AUC.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5a017457ecfda0cee6920e9597c72cb0.png)'
  prefs: []
  type: TYPE_IMG
- en: Time-dependent ROC AUC for our Cox model. The average AUC is 0.85\. Image by
    the author.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the figure above, the performance our model varies over time.
    We see that its highest performance is between 75 and 125 days. Therefore, our
    model predicts best in the medium-term.
  prefs: []
  type: TYPE_NORMAL
- en: From here, we could develop other survival models to see if they are better
    in predicting the events in the short-term or in the long-term to complement the
    Cox model.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations on making it to the end! There was a lot of information, especially
    if you are completely new to survival analysis.
  prefs: []
  type: TYPE_NORMAL
- en: I hope that you learned something new and that I inspired you to discover the
    field of survival analysis and apply it in your projects!
  prefs: []
  type: TYPE_NORMAL
- en: Let’s keep in touch on [LinkedIn](https://www.linkedin.com/in/marco-peixeiro/)!
  prefs: []
  type: TYPE_NORMAL
- en: Cheers 🍻
  prefs: []
  type: TYPE_NORMAL
- en: Support me
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enjoying my work? Show your support with [Buy me a coffee](http://buymeacoffee.com/dswm),
    a simple way for you to encourage me, and I get to enjoy a cup of coffee! If you
    feel like it, just click the button below 👇
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/7ad9438bd50b1698fdd722fa6661b16c.png)](http://buymeacoffee.com/dswm)'
  prefs: []
  type: TYPE_NORMAL
