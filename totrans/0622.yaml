- en: Customize Colormaps with Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/customize-colormaps-with-matplotlib-df5b37d14662](https://towardsdatascience.com/customize-colormaps-with-matplotlib-df5b37d14662)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Quick Success Data Science
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Match your colors to your theme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@lee_vaughan?source=post_page-----df5b37d14662--------------------------------)[![Lee
    Vaughan](../Images/9f6b90bb76102f438ab0b9a4a62ffa3f.png)](https://medium.com/@lee_vaughan?source=post_page-----df5b37d14662--------------------------------)[](https://towardsdatascience.com/?source=post_page-----df5b37d14662--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----df5b37d14662--------------------------------)
    [Lee Vaughan](https://medium.com/@lee_vaughan?source=post_page-----df5b37d14662--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----df5b37d14662--------------------------------)
    ·10 min read·Dec 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/74c32dc71cabd57b93114762a62e2740.png)'
  prefs: []
  type: TYPE_IMG
- en: An acorn and its colormap (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: One thing that characterizes professional graphics is an overarching *theme*
    that ties everything together. This includes fonts, symbology, and most of all,
    the color palette.
  prefs: []
  type: TYPE_NORMAL
- en: Below is an example by the [US National Park Service](https://www.nps.gov/orgs/1207/06-11-20-nps-visitor-spending-generates-economic-impact-of-more-than-41-billion.htm).
    Notice how the harmonious earth tones collaborate to evoke a sense of the great
    outdoors. This graphic doesn’t just *convey* information, it *conveys it with
    style!*
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bc643e6fe81a32514256738ab349b569.png)'
  prefs: []
  type: TYPE_IMG
- en: US National Park Service Infographic (Courtesy [nps.gov](https://www.nps.gov/aboutus/publications.htm#:~:text=Government%20information%20on%20NPS%20websites%20is%20generally%20in,National%20Park%20Service%20information%20be%20given%20appropriate%20acknowledgement.))
  prefs: []
  type: TYPE_NORMAL
- en: Python’s Matplotlib plotting library uses *colormaps* to define the *color scheme*
    for a visualization. Colormaps are arrays of colors used to map pixel data to
    actual color values.
  prefs: []
  type: TYPE_NORMAL
- en: While Matplotlib comes with many built-in [colors](https://matplotlib.org/stable/gallery/color/named_colors.html)
    and [color schemes](https://matplotlib.org/stable/gallery/color/colormap_reference.html),
    they won’t cover every possible scenario. There will be times when you’ll want
    to personally tailor your colors to a particular theme or concept.
  prefs: []
  type: TYPE_NORMAL
- en: In this *Quick Success Data Science* project, we’ll look at how to select custom
    colors and turn them into colormaps that you can use with Matplotlib, seaborn,
    pandas, geopandas, and other Python-compatible plotting libraries. We’ll then
    use these colormaps to plot the location of oak trees in New York City.
  prefs: []
  type: TYPE_NORMAL
- en: Acorns, Acorns, Acorns!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Despite an exceptional drought in Texas this year, we’re up to our armpits in
    acorns. Besides being plentiful, they’re also especially colorful, with those
    latte tans and purply browns only nature knows how to make. While admiring one
    this week, I couldn’t help but wonder what an excellent colormap it would make.
    Being a Pythonista, I immediately put that thought into action.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5a82aca386b7c2f6a5b68e812cca5d73.png)'
  prefs: []
  type: TYPE_IMG
- en: Acorns (Photo by [Ksenia Makagonova](https://unsplash.com/@dearseymour?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    on [Unsplash](https://unsplash.com/photos/person-holding-wallnuts-_d3GuRIHMaE?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash))
  prefs: []
  type: TYPE_NORMAL
- en: If you’re from a part of the world that doesn’t have acorns, they’re the nuts
    produced by oak trees.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Capturing an Acorn’s Colors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To capture an object’s colors, all you need is a digital photograph. While there’s
    a whole science around photographically capturing true colors (you can find a
    few tips [here](https://snapshot.canon-asia.com/article/eng/4-ways-to-capture-colours-more-accurately-in-photography)),
    I just took a phone picture of an acorn on a cloudy day.
  prefs: []
  type: TYPE_NORMAL
- en: I then used [*Image Color Picker*](https://www.imgcolorpicker.com/)to extract
    colors from the picture. This free application lets you upload an image file and
    use your cursor to select and sample pixel colors. For this project, we’ll use
    RGB (Red-Green-Blue) values, which range from 0 to 255.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/296a870a5c52db8d3bc5ecca656a42fb.png)'
  prefs: []
  type: TYPE_IMG
- en: The **Image Color Picker** screen (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: To construct a colormap of the acorn, I took two sets of measurements. The first
    set was comprised of four measurements equally spaced from the dark brown tip
    to the egg-white base. The second set was five measurements taken the same way.
    The values for each measurement were copied straight out of the app using the
    “copy” icon in the RGB output box.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c122db4a9e5e19fbc70778dbea3cd774.png)'
  prefs: []
  type: TYPE_IMG
- en: The color sample locations (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: I took *two* sets of measurements to see if it made any difference. As sampled,
    it didn’t.
  prefs: []
  type: TYPE_NORMAL
- en: The Colormap Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following code, written in JupyterLab, uses Matplotlib to create both *discrete*
    (categorical) and *continuous* colormaps. It then tests the colormaps using a
    heat map display.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Colormaps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Based on the *interpolation method*, there are two types of colormaps in Matplotlib:'
  prefs: []
  type: TYPE_NORMAL
- en: A ***listed colormap*** is a listof colors. It’s a *discrete* colormap with
    a predefined set of colors, and it doesn’t interpolate between colors.
  prefs: []
  type: TYPE_NORMAL
- en: A ***linear segmented colormap*** uses *interpolation* between color *anchor
    points* stored in a dictionary. This creates a *continuous* colormap*.*
  prefs: []
  type: TYPE_NORMAL
- en: Discrete colormaps are suitable for *categorical* data represented by a name
    or symbol. Continuous colormaps smoothly transition from one color to another.
    They’re typically used to represent a *range* of values, such as when plotting
    temperature or precipitation data.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Listed Colormaps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll use the set of *four* acorn measurements to produce a listed colormap.
    Here’s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We need only the Matplotlib library for this purpose, but we added NumPy to
    generate some dummy test data for later.
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib’s `[ListedColormap()](https://matplotlib.org/stable/users/explain/colors/colormap-manipulation.html#listedcolormap)`
    class maps values between 0 and 1 to colors. These colors are stored in the `.colors`
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Because the `ListedColormap()` class uses values from 0 to 1, we must divide
    the RGB values from our acorn by 255 to normalize the output (Python starts counting
    at 0, so the maximum value for 256 colors is 255). After that, we just pass this
    class our `colors` list to create the custom colormap.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view the colormap as a color *bar*, we can plot it as an image using `plt.imshow()`.
    Here’s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b92f4fe39d848dd202cc0d8083d9d4d2.png)'
  prefs: []
  type: TYPE_IMG
- en: The discrete colormap (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that you can also create a colormap by providing a list of official Matplotlib
    [color names](https://matplotlib.org/stable/gallery/color/named_colors.html).
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: For more on this, see the official [docs](https://matplotlib.org/stable/users/explain/colors/colors.html#colors-def).
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Listed Colormap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To test the listed colormap in a Matplotlib figure, we’ll use a heat map built
    from a randomized dataset. Here’s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'And here’s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/47929539c21c24b47b6b76b1b029795c.png)'
  prefs: []
  type: TYPE_IMG
- en: Heat map built with discrete colormap (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: I was right; acorns do make great colormaps! This plot looks like a beautiful
    “butcher’s block” cutting board.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Linear Segmented Colormap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll now use the set of *five* acorn measurements to produce the linear segmented
    colormap. Here’s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we imported Matplotlib’s `[LinearSegmentedColormap()](https://matplotlib.org/stable/api/_as_gen/matplotlib.colors.LinearSegmentedColormap.html#matplotlib.colors.LinearSegmentedColormap)`
    class rather than the `[ListedColormap()](https://matplotlib.org/stable/users/explain/colors/colormap-manipulation.html#listedcolormap)`
    class. This class specifies colormaps using *anchor points* between which RGB(A)
    values are *interpolated*. That is, it generates colormap *objects* based on lookup
    tables using *linear* segments. It creates the lookup table using linear interpolation
    for each primary color, with the 0–1 domain divided into any number of segments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3f410a213c4a0f0e64c7810ebe267b60.png)'
  prefs: []
  type: TYPE_IMG
- en: The continuous colormap (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: A key part of this code is the `positions` variable. Note that I used *evenly
    spaced* segments (such as 0.25 to 0.75 to 1.0) but there’s no reason you couldn’t
    “stretch” or “compress” an interval. For example, to make the colormap in the
    title image for this article, I used asymmetrical segments defined by `[0.0, 0.25,
    0.65, 0.75, 1.0]`.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Linear Segmented Colormap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To test the linear segmented colormap in a Matplotlib figure, we’ll again use
    a heat map built from a randomized dataset. Here’s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And here’s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2b7e4c04f5a97864636ce2274165aeca.png)'
  prefs: []
  type: TYPE_IMG
- en: Heat map built with continuous colormap (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: If you compare this heat map to the one generated with the *listed* colormap,
    you’ll see that there is more color variability, as the linear segmented colormap
    is *continuous* and permits the use of more than four colors.
  prefs: []
  type: TYPE_NORMAL
- en: Well, that’s most of what you need to know to build custom colormaps with Matplotlib.
    For a few more details, check out the [docs](https://matplotlib.org/stable/users/explain/colors/colormap-manipulation.html).
  prefs: []
  type: TYPE_NORMAL
- en: Plotting the Oak Trees of New York City
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let’s use the continuous colormap with an actual *map*. To honor the acorn
    theme, we’ll plot the location of oak trees in New York City.
  prefs: []
  type: TYPE_NORMAL
- en: 'While there are at least thirteen species of oak identified in the city, we’re
    going to use a subset of four types: *English*, *Shumard’s*, *pin*, and *white*.
    We need to limit the types because our colormap, though attractive, isn’t very
    practical for resolving a large number of categories.'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Dataset**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The tree locations are from the [*NYC OpenData*](https://data.cityofnewyork.us/Environment/2015-Street-Tree-Census-Tree-Data/uvpi-gqnh)
    portal. This portal provides [free public data](https://opendata.cityofnewyork.us/)
    published by New York City agencies and other partners. I’ve filtered the data
    to the names and latitude-longitude locations for the four oak types and stored
    it as a CSV file in this [Gist](https://gist.github.com/rlvaugh/02d4c318af2744dc9c3489ba9dc8eae2).
  prefs: []
  type: TYPE_NORMAL
- en: We’ll load this file with pandas and then use geopandas to project the locations
    on a map. *Geopandas* produces a *GeoDataFrame*, which is like a pandas’ DataFrame
    with a special “geometry” column that bundles the geometry *type* (such as “POINT”)
    with plottable coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b3bbb6490f84ebf3c4077fd55268a645.png)'
  prefs: []
  type: TYPE_IMG
- en: The first three lines of the GeoDataFrame (by the author)
  prefs: []
  type: TYPE_NORMAL
- en: '**Plotting the Location Map**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we’ll plot the points using geopandas’ built-in plotting functionality,
    which is based on Matplotlib. Geopandas also comes with handy built-in datasets,
    such as “nybb” for “New York borough boundaries.” We’ll plot these municipal boundaries
    in `olivedrab`, to match the overall color theme.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll also set the geographical *coordinate reference system* (*crs*) for the
    tree locations GeoDataFrame (`gdf`) to that used for the borough boundaries GeoDataFrame
    (`gdf_nyc`). This ensures that the two datasets are projected consistently.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/69d53a8454d1e4555bb175751a941ba8.png)'
  prefs: []
  type: TYPE_IMG
- en: The map of oak tree locations in NYC (by the author and [NYC OpenData](https://opendata.cityofnewyork.us/))
  prefs: []
  type: TYPE_NORMAL
- en: One thing to note here is that, even though we plotted *discrete* data (the
    *name* of the trees), we were able to use a *continuous* colormap. If you use
    the *discrete* colormap, you’ll get slightly different results, as the anchor
    points for the two colormaps aren’t the same.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of which colormap you use, you’ll see that pin oaks are the dominant
    oak type in New York City, at least among the species mapped.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting a KDE Map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you may have noticed in the previous diagram, the narrow range of our colormap
    makes it difficult to visually parse more than a few discrete categories. It’s
    better suited for a *continuous* distribution, such as produced by a KDE map.
  prefs: []
  type: TYPE_NORMAL
- en: A *KDE* (*Kernel Density Estimate*) *map* is a way to visualize the distribution
    of points, like oak trees, across a geographical area. It’s based on a statistical
    technique for estimating the underlying continuous probability distribution of
    a set of samples.
  prefs: []
  type: TYPE_NORMAL
- en: Because a KDE map provides a *smoothed* representation of the *density of occurrences*,
    it’s perfect for highlighting regions of higher or lower concentration. Typically,
    *higher* concentrations are represented by *darker* or *warmer* colors.
  prefs: []
  type: TYPE_NORMAL
- en: To make a KDE map, we’ll need to reverse our colormap, so that darker colors
    represent larger values, and use *Geoplot* to make the map*.* Geoplot is a high-level,
    open-source geospatial plotting library that claims to be the “seaborn of geospatial.”
    This means that it builds on underlying libraries, like GeoPandas, to make mapping
    easy.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install Geoplot with these commands for conda or pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conda install -c conda-forge geoplot`'
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install geoplot`'
  prefs: []
  type: TYPE_NORMAL
- en: Here’s the code. Note that we’re building off previous work and *not* reloading
    the database.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4cfec8839b7b23fdf7f7c08a4fe43673.png)'
  prefs: []
  type: TYPE_IMG
- en: A KDE plot for the 4 oak types (by the author and [NYC OpenData](https://opendata.cityofnewyork.us/))
  prefs: []
  type: TYPE_NORMAL
- en: Now there’s a map that will make you want a cup of coffee!
  prefs: []
  type: TYPE_NORMAL
- en: Custom Colormaps for the Color Blind
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Be mindful that custom colormaps may not be appropriate for the 5 to 10 percent
    of the population who suffer from color blindness. Unfortunately, our acorn colormap
    would fall into the inappropriate category, especially when mapping oak tree locations
    as individual points.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some strategies for accommodating color blindness include:'
  prefs: []
  type: TYPE_NORMAL
- en: the use of highly contrasting colors,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the inclusion of patterns, textures, or symbols,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the use of monochromatic gradients (like our KDE map),
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the use of color-selection tools like [Vischeck](http://www.vischeck.com/) and
    C[olorbrewer](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To view an example of “colorblind-safe” colors in a variety of plot types, check
    out the *seaborn-colorblind style sheet* in the [Matplotlib gallery](https://matplotlib.org/stable/gallery/style_sheets/style_sheets_reference.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matching your visualization’s *colormap* to the *theme* of your data can make
    it more engaging for your readers. If the colormaps provided with Matplotlib aren’t
    sufficient, you can always generate your own.
  prefs: []
  type: TYPE_NORMAL
- en: Applications like *Image Color Picker* help you extract color codes from images.
    Matplotlib provides two classes, `ListedColormap()` and `LinearSegmentColormap()`,
    that let you easily turn these *color codes* into *colormaps* usable in both statistical
    and geospatial plots.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for reading and please follow me for more *Quick Success Data Science*
    projects in the future.
  prefs: []
  type: TYPE_NORMAL
