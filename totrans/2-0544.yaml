- en: Concurrency in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/concurrency-in-python-fe8b39edfba5](https://towardsdatascience.com/concurrency-in-python-fe8b39edfba5)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PYTHON | PROGRAMMING | CONCURRENCY
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A beginners guide to exploiting the power of concurrent execution and improving
    the performance of your Python programs.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://david-farrugia.medium.com/?source=post_page-----fe8b39edfba5--------------------------------)[![David
    Farrugia](../Images/082ed61e24c7c26a4ae1c77343a87824.png)](https://david-farrugia.medium.com/?source=post_page-----fe8b39edfba5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fe8b39edfba5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fe8b39edfba5--------------------------------)
    [David Farrugia](https://david-farrugia.medium.com/?source=post_page-----fe8b39edfba5--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fe8b39edfba5--------------------------------)
    ·9 min read·May 24, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/57451a5ca6eab778ff5fdac8cb157ce8.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [fabio](https://unsplash.com/@fabioha?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Gordon Moore, in 1965, made a prediction that has since become known as Moore’s
    Law. He stated that the number of transistors on microchips would double every
    two years. Additionally, Moore’s Law stipulates that the cost of computing hardware
    will also halve during the same period.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/92294572c71c119617ed7d82e13185d4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: [https://commons.wikimedia.org/wiki/File:Moore%27s_Law_Transistor_Count_1970-2020.png](https://commons.wikimedia.org/wiki/File:Moore%27s_Law_Transistor_Count_1970-2020.png)'
  prefs: []
  type: TYPE_NORMAL
- en: In today’s technological landscape, it is common for computer devices to come
    equipped with multi-core CPUs or multiple processors. As developers, it is important
    for us to write code that takes advantage of this hardware capability in order
    to deliver the most optimised and efficient solution for our users.
  prefs: []
  type: TYPE_NORMAL
- en: What is Concurrency?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '***Concurrency is the execution of multiple instruction sequences simultaneously.***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Suppose that our system has a 2 core CPU. Running non-concurrent code would
    result in our script utilising only one core for task execution, leaving the other
    core idle.
  prefs: []
  type: TYPE_NORMAL
- en: By utilising concurrency, we can execute our tasks simultaneously across both
    cores, resulting in improved performance and decreased waiting times.
  prefs: []
  type: TYPE_NORMAL
- en: However, one of the drawbacks of concurrency is that we cannot guarantee the
    order of task execution.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, it is important that the order of execution of the various tasks
    should not impact the outcome, and that tasks should share as few resources as
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: To mitigate this, coordination of shared resources is necessary, which increases
    complexity.
  prefs: []
  type: TYPE_NORMAL
- en: '***The more shared resources, the higher the complexity.***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Types of Concurrency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Parallel Programming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parallel programming is the practice of breaking down a main task into smaller
    sub-tasks.
  prefs: []
  type: TYPE_NORMAL
- en: These sub-tasks are then assigned to different threads or processes, which are
    executed simultaneously across multiple cores.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, with single-core programming, only one core is used to execute
    the task, leaving the other cores idle or available for use by other programs
    or tasks.
  prefs: []
  type: TYPE_NORMAL
- en: This may result in less efficient use of the available resources.
  prefs: []
  type: TYPE_NORMAL
- en: By utilising parallel programming, all cores can be utilised to increase overall
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8d48557529490628c97f63a30e064510.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Illustration of Parallel Programming. Source: Author'
  prefs: []
  type: TYPE_NORMAL
- en: As parallel programming takes advantage of multiple cores, it is particularly
    well-suited for CPU-bound tasks, also known as CPU-intensive tasks. These are
    tasks that can only be accelerated by adding more processors. Examples of such
    tasks include search algorithms and mathematical operations.
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous Programming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In asynchronous programming, also known as multi-threading, the main thread
    sends a sub-task to an actor, which can be another thread or device.
  prefs: []
  type: TYPE_NORMAL
- en: The main thread then proceeds to perform other work, rather than waiting for
    a response. When the sub-task is completed, the actor notifies the main thread
    and triggers a callback function to handle the results.
  prefs: []
  type: TYPE_NORMAL
- en: In Python, instead of a callback function, we use an object called a “future”
    which represents the result of a not yet completed operation.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/64d00e5d7420baf1fa5b04ea202875b6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Illustration of Asynchronous Programming. Source: Author'
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the structure of the program, the main thread will either wait
    for the sub-task(s) to complete or check back at a later time.
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous programming is particularly beneficial for I/O bound tasks. I/O
    bound tasks are operations that the CPU cannot perform alone, and instead relies
    on external factors such as disk access or networks. Examples of I/O-bound tasks
    include reading/writing from/to storage and making API requests.
  prefs: []
  type: TYPE_NORMAL
- en: Parallel vs Asynchronous Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At any given point in time:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Parallel Programming — Do things faster*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Asynchronous Programming — Do more things*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Multi-Threading in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common example used to illustrate the benefits of multi-threading is the concurrent
    downloading of multiple images over a network. We can use this example to gain
    an understanding of how effective multi-threading can be, and how it can be implemented
    in Python.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the single-threaded script above, we set up a function (download_images)
    that retrieves some images publicly hosted on Dropbox.
  prefs: []
  type: TYPE_NORMAL
- en: This script took 22.06 seconds to download the 26 images.
  prefs: []
  type: TYPE_NORMAL
- en: To improve this, we can shift our programming mindset and use a different approach
    when building a script to use concurrency.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of writing a function that loops through every single URL and retrieves
    its contents, we can split the logic into two main functions: the target and the
    runner functions.'
  prefs: []
  type: TYPE_NORMAL
- en: The role of the target function is to encapsulate the logic needed to process
    a single URL.
  prefs: []
  type: TYPE_NORMAL
- en: As we want to have a thread for every URL, we need to provide the individual
    threads with the knowledge of how to process the URL.
  prefs: []
  type: TYPE_NORMAL
- en: The runner function is then used to trigger a new thread for every URL and store
    their results.
  prefs: []
  type: TYPE_NORMAL
- en: In the runner function, we need to instruct the main thread to create and start
    a child thread for every URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can do this by looping through the passed URLs and creating and starting
    a new thread in Python as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In our example, we want to wait for all images to download before continuing
    with the program. To do this, we can instruct the main thread to wait for all
    child threads to complete before proceeding with the program execution by calling
    the join() function. This function joins the child thread with the main thread
    and the main thread will not proceed until the execution of all joined threads
    completes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: By using join() function we can ensure that our program waits for all the child
    threads to complete before continuing with the next steps of the script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adapting the original script to use multi-threading would look something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This script retrieves the same 26 images in only 2.92 seconds! That is only
    13.24% of the time taken using single-threaded code.
  prefs: []
  type: TYPE_NORMAL
- en: '**Impressive isn’t it?**'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Execution Flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we dive into the execution flow, we have to first understand the different
    thread states.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3b3fd920336867fadd823113909479a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The different thread states. Source: Author'
  prefs: []
  type: TYPE_NORMAL
- en: '**New** — A newly created Thread'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ready** — Thread is ready to execute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Running** — Thread is executing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blocked** — Thread is blocked from execution (waiting for resources to become
    available)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Finished** — Thread completed execution'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When we start the execution, there is only one thread available: the main thread.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The main thread starts executing the code until it reaches the instruction
    to spawn a new thread. At this point, we now have two threads: the main thread
    and a child thread.'
  prefs: []
  type: TYPE_NORMAL
- en: The child thread moves from the “*New*” to the “*Ready*” state. When the main
    thread executes the start() function, the child thread moves to the “Running”
    state and starts execution.
  prefs: []
  type: TYPE_NORMAL
- en: The main thread becomes “*Blocked*” until the child thread is in the “*Finished*”
    state (due to the *join*() function).
  prefs: []
  type: TYPE_NORMAL
- en: In more complex tasks, especially when threads have access to shared resources,
    it is important to control which thread can access which resource at any given
    time.
  prefs: []
  type: TYPE_NORMAL
- en: This process is achieved using semaphores, locks, and other variables. But we
    can explore this topic further in another time.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-Processing in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating new processes in Python is straightforward and similar to using threads.
  prefs: []
  type: TYPE_NORMAL
- en: We create a new process using the Process function from the multiprocessing
    package.
  prefs: []
  type: TYPE_NORMAL
- en: We assign a target function and pass the respective arguments to the Process
    object.
  prefs: []
  type: TYPE_NORMAL
- en: The start function starts running the process, and we can use the join function
    to instruct the main process to wait for all child processes to complete before
    proceeding to the next code block.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike threads, processes can be terminated by calling the terminate() function
    of that process.
  prefs: []
  type: TYPE_NORMAL
- en: The is_alive() function will return True if the process is currently running
    and False if it is not.
  prefs: []
  type: TYPE_NORMAL
- en: However, terminating a process may cause any shared resources to become stuck
    in an inconsistent state, making them unavailable to other processes. Therefore,
    it is important to be cautious when terminating processes.
  prefs: []
  type: TYPE_NORMAL
- en: The main advantage of parallelising our program is the ability to utilise all
    available CPUs to execute our tasks.
  prefs: []
  type: TYPE_NORMAL
- en: A process pool allows us to distribute our tasks in several ways to a set of
    processes, referred to as workers.
  prefs: []
  type: TYPE_NORMAL
- en: When initialising a process pool, we need to specify the pool size (i.e. number
    of workers) and also optionally, an initialiser function.
  prefs: []
  type: TYPE_NORMAL
- en: The initialiser function will execute for every new process created.
  prefs: []
  type: TYPE_NORMAL
- en: A good starting point to select the number of workers is to default to the number
    of cores your system has available.
  prefs: []
  type: TYPE_NORMAL
- en: We use the map function to execute our target function on an iterable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the task is so simple that multiprocessing would result in slower
    execution speeds when compared to single-processor flows.
  prefs: []
  type: TYPE_NORMAL
- en: The slowness is mainly due to the overhead associated with inter-process communication
    (IPC), including the time spent creating and starting the individual processes.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, some indications of when to use the Pool functionality include high
    CPU requirements and a long iterable to go over.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Concurrency is a programming paradigm that allows our program to do more at
    the same time.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we have discussed the different types of concurrency and provided
    examples to help you get started with concurrency in Python.
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended to try out these examples in your daily scripts to practice
    and appreciate how more efficient your programs can become.
  prefs: []
  type: TYPE_NORMAL
- en: There are many other advanced concepts to explore when it comes to concurrency,
    but that’s a topic for another day!
  prefs: []
  type: TYPE_NORMAL
- en: '**Did you enjoy this post? For $5/month, you can become a member to unlock
    unlimited access to Medium. You will be directly supporting me and all your other
    favourite writers on Medium. So huge thanks for that!**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://david-farrugia.medium.com/membership?source=post_page-----fe8b39edfba5--------------------------------)
    [## Join Medium with my referral link - David Farrugia'
  prefs: []
  type: TYPE_NORMAL
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: david-farrugia.medium.com](https://david-farrugia.medium.com/membership?source=post_page-----fe8b39edfba5--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Want to Get in Touch?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I would love to hear your thoughts on the topic, or anything AI and Data.
  prefs: []
  type: TYPE_NORMAL
- en: Drop me an email at ***davidfarrugia53@gmail.com*** should you wish to get in
    touch.
  prefs: []
  type: TYPE_NORMAL
- en: '[Linkedin](https://www.linkedin.com/in/david-farrugia/)'
  prefs: []
  type: TYPE_NORMAL
