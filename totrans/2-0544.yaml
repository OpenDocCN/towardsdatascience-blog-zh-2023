- en: Concurrency in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 中的并发
- en: 原文：[https://towardsdatascience.com/concurrency-in-python-fe8b39edfba5](https://towardsdatascience.com/concurrency-in-python-fe8b39edfba5)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/concurrency-in-python-fe8b39edfba5](https://towardsdatascience.com/concurrency-in-python-fe8b39edfba5)
- en: PYTHON | PROGRAMMING | CONCURRENCY
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON | PROGRAMMING | CONCURRENCY
- en: A beginners guide to exploiting the power of concurrent execution and improving
    the performance of your Python programs.
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这是一本关于利用并发执行的力量以及提高 Python 程序性能的初学者指南。
- en: '[](https://david-farrugia.medium.com/?source=post_page-----fe8b39edfba5--------------------------------)[![David
    Farrugia](../Images/082ed61e24c7c26a4ae1c77343a87824.png)](https://david-farrugia.medium.com/?source=post_page-----fe8b39edfba5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fe8b39edfba5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fe8b39edfba5--------------------------------)
    [David Farrugia](https://david-farrugia.medium.com/?source=post_page-----fe8b39edfba5--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://david-farrugia.medium.com/?source=post_page-----fe8b39edfba5--------------------------------)[![David
    Farrugia](../Images/082ed61e24c7c26a4ae1c77343a87824.png)](https://david-farrugia.medium.com/?source=post_page-----fe8b39edfba5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fe8b39edfba5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fe8b39edfba5--------------------------------)
    [David Farrugia](https://david-farrugia.medium.com/?source=post_page-----fe8b39edfba5--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fe8b39edfba5--------------------------------)
    ·9 min read·May 24, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fe8b39edfba5--------------------------------)
    ·9 分钟阅读·2023 年 5 月 24 日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/57451a5ca6eab778ff5fdac8cb157ce8.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/57451a5ca6eab778ff5fdac8cb157ce8.png)'
- en: Photo by [fabio](https://unsplash.com/@fabioha?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [fabio](https://unsplash.com/@fabioha?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Gordon Moore, in 1965, made a prediction that has since become known as Moore’s
    Law. He stated that the number of transistors on microchips would double every
    two years. Additionally, Moore’s Law stipulates that the cost of computing hardware
    will also halve during the same period.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 戈登·摩尔在 1965 年做出了一个后来被称为摩尔定律的预测。他指出，微芯片上的晶体管数量每两年将翻一番。此外，摩尔定律还规定，在同一时期内，计算硬件的成本也将减半。
- en: '![](../Images/92294572c71c119617ed7d82e13185d4.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/92294572c71c119617ed7d82e13185d4.png)'
- en: 'Source: [https://commons.wikimedia.org/wiki/File:Moore%27s_Law_Transistor_Count_1970-2020.png](https://commons.wikimedia.org/wiki/File:Moore%27s_Law_Transistor_Count_1970-2020.png)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：[https://commons.wikimedia.org/wiki/File:Moore%27s_Law_Transistor_Count_1970-2020.png](https://commons.wikimedia.org/wiki/File:Moore%27s_Law_Transistor_Count_1970-2020.png)
- en: In today’s technological landscape, it is common for computer devices to come
    equipped with multi-core CPUs or multiple processors. As developers, it is important
    for us to write code that takes advantage of this hardware capability in order
    to deliver the most optimised and efficient solution for our users.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天的技术环境中，计算机设备配备多核 CPU 或多个处理器已很常见。作为开发人员，我们需要编写能够利用这些硬件能力的代码，以提供对用户最优化和高效的解决方案。
- en: What is Concurrency?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是并发？
- en: '***Concurrency is the execution of multiple instruction sequences simultaneously.***'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***并发是同时执行多个指令序列。***'
- en: Suppose that our system has a 2 core CPU. Running non-concurrent code would
    result in our script utilising only one core for task execution, leaving the other
    core idle.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的系统有一个 2 核心的 CPU。运行非并发代码将导致我们的脚本仅利用一个核心来执行任务，而另一个核心则处于空闲状态。
- en: By utilising concurrency, we can execute our tasks simultaneously across both
    cores, resulting in improved performance and decreased waiting times.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用并发，我们可以在两个核心上同时执行任务，从而提高性能并减少等待时间。
- en: However, one of the drawbacks of concurrency is that we cannot guarantee the
    order of task execution.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，并发的一个缺点是我们无法保证任务执行的顺序。
- en: Therefore, it is important that the order of execution of the various tasks
    should not impact the outcome, and that tasks should share as few resources as
    possible.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，重要的是各种任务的执行顺序不应影响结果，并且任务应尽可能共享较少的资源。
- en: To mitigate this, coordination of shared resources is necessary, which increases
    complexity.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了缓解这一点，需要协调共享资源，这会增加复杂性。
- en: '***The more shared resources, the higher the complexity.***'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***共享资源越多，复杂性越高。***'
- en: Types of Concurrency
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并发的类型
- en: Parallel Programming
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并行编程
- en: Parallel programming is the practice of breaking down a main task into smaller
    sub-tasks.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 并行编程是将主要任务分解为较小的子任务的实践。
- en: These sub-tasks are then assigned to different threads or processes, which are
    executed simultaneously across multiple cores.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些子任务然后被分配到不同的线程或进程中，并在多个核心上同时执行。
- en: In contrast, with single-core programming, only one core is used to execute
    the task, leaving the other cores idle or available for use by other programs
    or tasks.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，在单核编程中，只使用一个核心来执行任务，其他核心则处于空闲状态或可供其他程序或任务使用。
- en: This may result in less efficient use of the available resources.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能导致资源利用效率降低。
- en: By utilising parallel programming, all cores can be utilised to increase overall
    performance.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用并行编程，可以使用所有核心来提高整体性能。
- en: '![](../Images/8d48557529490628c97f63a30e064510.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8d48557529490628c97f63a30e064510.png)'
- en: 'Illustration of Parallel Programming. Source: Author'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 并行编程的示例。来源：作者
- en: As parallel programming takes advantage of multiple cores, it is particularly
    well-suited for CPU-bound tasks, also known as CPU-intensive tasks. These are
    tasks that can only be accelerated by adding more processors. Examples of such
    tasks include search algorithms and mathematical operations.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于并行编程利用了多个核心，因此它特别适用于CPU绑定的任务，也称为CPU密集型任务。这些任务只能通过增加更多的处理器来加速。此类任务的例子包括搜索算法和数学运算。
- en: Asynchronous Programming
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步编程
- en: In asynchronous programming, also known as multi-threading, the main thread
    sends a sub-task to an actor, which can be another thread or device.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在异步编程中，也称为多线程，主线程将子任务发送给一个演员，这可以是另一个线程或设备。
- en: The main thread then proceeds to perform other work, rather than waiting for
    a response. When the sub-task is completed, the actor notifies the main thread
    and triggers a callback function to handle the results.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 主线程随后继续执行其他工作，而不是等待响应。当子任务完成时，演员通知主线程并触发回调函数来处理结果。
- en: In Python, instead of a callback function, we use an object called a “future”
    which represents the result of a not yet completed operation.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，我们使用一个称为“future”的对象来代替回调函数，该对象表示尚未完成操作的结果。
- en: '![](../Images/64d00e5d7420baf1fa5b04ea202875b6.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/64d00e5d7420baf1fa5b04ea202875b6.png)'
- en: 'Illustration of Asynchronous Programming. Source: Author'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 异步编程的示例。来源：作者
- en: Depending on the structure of the program, the main thread will either wait
    for the sub-task(s) to complete or check back at a later time.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 根据程序的结构，主线程将等待子任务完成或在稍后时间检查。
- en: Asynchronous programming is particularly beneficial for I/O bound tasks. I/O
    bound tasks are operations that the CPU cannot perform alone, and instead relies
    on external factors such as disk access or networks. Examples of I/O-bound tasks
    include reading/writing from/to storage and making API requests.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 异步编程特别适用于I/O绑定任务。I/O绑定任务是CPU无法单独执行的操作，而是依赖于磁盘访问或网络等外部因素。I/O绑定任务的例子包括从/向存储读/写和发出API请求。
- en: Parallel vs Asynchronous Programming
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并行与异步编程
- en: 'At any given point in time:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何给定的时间点：
- en: '*Parallel Programming — Do things faster*'
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*并行编程 — 更快地完成任务*'
- en: ''
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Asynchronous Programming — Do more things*'
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*异步编程 — 做更多的事情*'
- en: Multi-Threading in Python
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的多线程
- en: A common example used to illustrate the benefits of multi-threading is the concurrent
    downloading of multiple images over a network. We can use this example to gain
    an understanding of how effective multi-threading can be, and how it can be implemented
    in Python.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常用的例子来说明多线程的好处是同时下载多个网络上的图像。我们可以利用这个例子来理解多线程的有效性以及如何在Python中实现它。
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the single-threaded script above, we set up a function (download_images)
    that retrieves some images publicly hosted on Dropbox.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述单线程脚本中，我们设置了一个函数（download_images），用于检索公开托管在Dropbox上的一些图像。
- en: This script took 22.06 seconds to download the 26 images.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本下载26张图像花费了22.06秒。
- en: To improve this, we can shift our programming mindset and use a different approach
    when building a script to use concurrency.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了改善这一点，我们可以转变编程思路，使用不同的方法来构建一个利用并发的脚本。
- en: 'Instead of writing a function that loops through every single URL and retrieves
    its contents, we can split the logic into two main functions: the target and the
    runner functions.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将逻辑分成两个主要函数：目标函数和运行函数，而不是编写一个循环遍历每个URL并检索其内容的函数。
- en: The role of the target function is to encapsulate the logic needed to process
    a single URL.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 目标函数的作用是封装处理单个URL所需的逻辑。
- en: As we want to have a thread for every URL, we need to provide the individual
    threads with the knowledge of how to process the URL.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们希望为每个URL拥有一个线程，因此我们需要为每个线程提供处理URL的知识。
- en: The runner function is then used to trigger a new thread for every URL and store
    their results.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行函数用于触发每个URL的新线程并存储它们的结果。
- en: In the runner function, we need to instruct the main thread to create and start
    a child thread for every URL.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行函数中，我们需要指示主线程为每个URL创建并启动一个子线程。
- en: 'We can do this by looping through the passed URLs and creating and starting
    a new thread in Python as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过遍历传递的URL并在Python中创建和启动一个新线程来做到这一点，如下所示：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In our example, we want to wait for all images to download before continuing
    with the program. To do this, we can instruct the main thread to wait for all
    child threads to complete before proceeding with the program execution by calling
    the join() function. This function joins the child thread with the main thread
    and the main thread will not proceed until the execution of all joined threads
    completes.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们希望等待所有图像下载完成后再继续程序。为此，我们可以指示主线程等待所有子线程完成，然后再继续程序执行，通过调用join()函数。此函数将子线程与主线程连接在一起，主线程在所有连接的线程执行完成之前不会继续。
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: By using join() function we can ensure that our program waits for all the child
    threads to complete before continuing with the next steps of the script.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用join()函数，我们可以确保程序在继续执行脚本的下一步之前等待所有子线程完成。
- en: 'Adapting the original script to use multi-threading would look something like
    this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 将原始脚本调整为使用多线程大致如下：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This script retrieves the same 26 images in only 2.92 seconds! That is only
    13.24% of the time taken using single-threaded code.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本仅需2.92秒即可检索相同的26张图像！这只是使用单线程代码所需时间的13.24%。
- en: '**Impressive isn’t it?**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**令人印象深刻，不是吗？**'
- en: Understanding the Execution Flow
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解执行流程
- en: Before we dive into the execution flow, we have to first understand the different
    thread states.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解执行流程之前，我们必须首先了解不同的线程状态。
- en: '![](../Images/3b3fd920336867fadd823113909479a9.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3b3fd920336867fadd823113909479a9.png)'
- en: 'The different thread states. Source: Author'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的线程状态。来源：作者
- en: '**New** — A newly created Thread'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新建** — 一个新创建的线程'
- en: '**Ready** — Thread is ready to execute'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**就绪** — 线程准备好执行'
- en: '**Running** — Thread is executing'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行中** — 线程正在执行'
- en: '**Blocked** — Thread is blocked from execution (waiting for resources to become
    available)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阻塞** — 线程被阻塞执行（等待资源变得可用）'
- en: '**Finished** — Thread completed execution'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完成** — 线程执行完毕'
- en: 'When we start the execution, there is only one thread available: the main thread.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始执行时，只有一个线程可用：主线程。
- en: 'The main thread starts executing the code until it reaches the instruction
    to spawn a new thread. At this point, we now have two threads: the main thread
    and a child thread.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 主线程开始执行代码，直到它遇到生成新线程的指令。这时，我们现在有两个线程：主线程和一个子线程。
- en: The child thread moves from the “*New*” to the “*Ready*” state. When the main
    thread executes the start() function, the child thread moves to the “Running”
    state and starts execution.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 子线程从“*新建*”状态移动到“*就绪*”状态。当主线程执行start()函数时，子线程移动到“运行中”状态并开始执行。
- en: The main thread becomes “*Blocked*” until the child thread is in the “*Finished*”
    state (due to the *join*() function).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 主线程变为“*阻塞*”状态，直到子线程处于“*完成*”状态（由于*join*()函数）。
- en: In more complex tasks, especially when threads have access to shared resources,
    it is important to control which thread can access which resource at any given
    time.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在更复杂的任务中，尤其是当线程访问共享资源时，控制哪个线程在任何给定时间可以访问哪个资源是很重要的。
- en: This process is achieved using semaphores, locks, and other variables. But we
    can explore this topic further in another time.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程通过使用信号量、锁和其他变量来实现。但我们可以在其他时间深入探讨这个话题。
- en: Multi-Processing in Python
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的多处理
- en: Creating new processes in Python is straightforward and similar to using threads.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中创建新进程很简单，类似于使用线程。
- en: We create a new process using the Process function from the multiprocessing
    package.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用multiprocessing包中的Process函数创建一个新进程。
- en: We assign a target function and pass the respective arguments to the Process
    object.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为Process对象指定目标函数并传递相应的参数。
- en: The start function starts running the process, and we can use the join function
    to instruct the main process to wait for all child processes to complete before
    proceeding to the next code block.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: start函数开始运行进程，我们可以使用join函数来指示主进程在继续到下一个代码块之前等待所有子进程完成。
- en: Unlike threads, processes can be terminated by calling the terminate() function
    of that process.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 与线程不同，进程可以通过调用该进程的terminate()函数来终止。
- en: The is_alive() function will return True if the process is currently running
    and False if it is not.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果进程正在运行，is_alive()函数将返回True，如果不在运行则返回False。
- en: However, terminating a process may cause any shared resources to become stuck
    in an inconsistent state, making them unavailable to other processes. Therefore,
    it is important to be cautious when terminating processes.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，终止进程可能会导致任何共享资源处于不一致状态，使其对其他进程不可用。因此，在终止进程时要小心。
- en: The main advantage of parallelising our program is the ability to utilise all
    available CPUs to execute our tasks.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 并行化程序的主要优势是能够利用所有可用的CPU来执行我们的任务。
- en: A process pool allows us to distribute our tasks in several ways to a set of
    processes, referred to as workers.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 进程池允许我们以几种方式将任务分配给一组称为工作者的进程。
- en: When initialising a process pool, we need to specify the pool size (i.e. number
    of workers) and also optionally, an initialiser function.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化进程池时，我们需要指定池的大小（即工作线程的数量），并且可以选择指定一个初始化函数。
- en: The initialiser function will execute for every new process created.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化函数将在每个新创建的进程中执行。
- en: A good starting point to select the number of workers is to default to the number
    of cores your system has available.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 选择工作线程数量的一个好起点是默认使用系统可用的核心数量。
- en: We use the map function to execute our target function on an iterable.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用map函数在一个可迭代对象上执行目标函数。
- en: '[PRE4]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this case, the task is so simple that multiprocessing would result in slower
    execution speeds when compared to single-processor flows.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，任务如此简单，以至于多进程会导致比单处理器流程更慢的执行速度。
- en: The slowness is mainly due to the overhead associated with inter-process communication
    (IPC), including the time spent creating and starting the individual processes.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 慢速主要是由于与进程间通信（IPC）相关的开销，包括创建和启动各个进程所花费的时间。
- en: Therefore, some indications of when to use the Pool functionality include high
    CPU requirements and a long iterable to go over.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用Pool功能的一些指示包括高CPU要求和需要遍历的长可迭代对象。
- en: Conclusion
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Concurrency is a programming paradigm that allows our program to do more at
    the same time.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 并发是一种编程范式，它允许我们的程序同时做更多的事情。
- en: In this article, we have discussed the different types of concurrency and provided
    examples to help you get started with concurrency in Python.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们讨论了不同类型的并发，并提供了示例来帮助你开始使用Python进行并发。
- en: It is recommended to try out these examples in your daily scripts to practice
    and appreciate how more efficient your programs can become.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 建议在日常脚本中尝试这些示例，以实践并欣赏你的程序变得更加高效的方式。
- en: There are many other advanced concepts to explore when it comes to concurrency,
    but that’s a topic for another day!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到并发时，还有许多其他高级概念可以探索，但那是另一个话题！
- en: '**Did you enjoy this post? For $5/month, you can become a member to unlock
    unlimited access to Medium. You will be directly supporting me and all your other
    favourite writers on Medium. So huge thanks for that!**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**你喜欢这篇文章吗？只需$5/月，你就可以成为会员，解锁对Medium的无限访问。你将直接支持我和你所有其他喜欢的Medium作者。非常感谢！**'
- en: '[](https://david-farrugia.medium.com/membership?source=post_page-----fe8b39edfba5--------------------------------)
    [## Join Medium with my referral link - David Farrugia'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 加入Medium，使用我的推荐链接 - David Farrugia](https://david-farrugia.medium.com/membership?source=post_page-----fe8b39edfba5--------------------------------)'
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取对我所有⚡高级⚡内容的独占访问权限，并在Medium上无限制地访问所有内容。通过购买我…
- en: david-farrugia.medium.com](https://david-farrugia.medium.com/membership?source=post_page-----fe8b39edfba5--------------------------------)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://david-farrugia.medium.com/membership?source=post_page-----fe8b39edfba5--------------------------------](https://david-farrugia.medium.com/membership?source=post_page-----fe8b39edfba5--------------------------------)'
- en: Want to Get in Touch?
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 想要联系我？
- en: I would love to hear your thoughts on the topic, or anything AI and Data.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我很想听听你对这个话题的看法，或者任何关于AI和数据的想法。
- en: Drop me an email at ***davidfarrugia53@gmail.com*** should you wish to get in
    touch.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望联系我，可以发邮件至***davidfarrugia53@gmail.com***。
- en: '[Linkedin](https://www.linkedin.com/in/david-farrugia/)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[LinkedIn](https://www.linkedin.com/in/david-farrugia/)'
