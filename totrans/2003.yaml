- en: The Most Complete Guide for Creating a Good PyPI Package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/the-complete-guide-for-creating-a-good-pypi-package-acb5420a03f8](https://towardsdatascience.com/the-complete-guide-for-creating-a-good-pypi-package-acb5420a03f8)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Everything you need to know — for new and experienced users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://eliselandman.medium.com/?source=post_page-----acb5420a03f8--------------------------------)[![Elise
    Landman](../Images/1cd86aa9df340e430820a48f4d26de5a.png)](https://eliselandman.medium.com/?source=post_page-----acb5420a03f8--------------------------------)[](https://towardsdatascience.com/?source=post_page-----acb5420a03f8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----acb5420a03f8--------------------------------)
    [Elise Landman](https://eliselandman.medium.com/?source=post_page-----acb5420a03f8--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----acb5420a03f8--------------------------------)
    ·11 min read·Mar 27, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/726e161623b0a5e82e1c2c669eee378e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from [Unsplash](https://unsplash.com/photos/DYHx6h3lMdY).
  prefs: []
  type: TYPE_NORMAL
- en: '**Python Package Index** (or [PyP](https://pypi.org/)I) is the official **software
    repository** for third-party **Python packages**. It is a one-stop-shop for Python
    programmers for any pre-built and reusable software components — making our coding
    lives easier and more efficient. A simple `pip install`and any PyPI package can
    easily be downloaded and installed on our machines.'
  prefs: []
  type: TYPE_NORMAL
- en: After 2 years of ongoing development and updates to [my own PyPI package](https://github.com/elisemercury/Duplicate-Image-Finder),
    I learned many things that I wish I knew from day one. In this guide, I will **share
    all my learnings and tips** that can **make your PyPI package upload** and **maintenance**
    **more successful**.
  prefs: []
  type: TYPE_NORMAL
- en: 'This guide is divided into 2 parts:'
  prefs: []
  type: TYPE_NORMAL
- en: 👉 If you are *new to PyPI* and this will be your first package, start at:[**1
    | Preparing your Package for PyPI**](/the-complete-guide-for-creating-a-good-pypi-package-acb5420a03f8#:~:text=your%20PyPI%20Package-,1%20%7C%20Preparing%20your%20Package%20for%20PyPI,-When%20uploading%20your)
  prefs: []
  type: TYPE_NORMAL
- en: 👉 If you are *already a PyPI user* and have uploaded your package, start at:[**2
    | Uploading and Maintaining your PyPI Package**](/the-complete-guide-for-creating-a-good-pypi-package-acb5420a03f8#:~:text=to%20PyPI!%20%F0%9F%9A%80-,2%20%7C%20Uploading%20and%20Maintaining%20your%20PyPI%20Package,-If%20your%20package)
  prefs: []
  type: TYPE_NORMAL
- en: 1 | Preparing your Package for PyPI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When uploading your package to [PyPI](https://pypi.org/), you are making it
    available for anyone to install via the `pip`installer. Anyone could then run
    the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'and it will be installed on their machines. To make your **code ready for PyPI**,
    there are a few steps you need to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, you will need to [**create a PyPI account**](https://pypi.org/account/register/).
    I highly recommend activating two-factor authentication for enhanced account security.
  prefs: []
  type: TYPE_NORMAL
- en: 'Secondly, you need to **prepare the folder structure** of your package and
    add a few required files. These include:'
  prefs: []
  type: TYPE_NORMAL
- en: The `__init__.py` file that will initialize your package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `version.py` file that will contain the version of your package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The files to actually build your Python package: `setup.py`, `pyproject.toml`,
    `setup.cfg` and `MANIFEST.in`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `LICENSE.txt` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: And the `README.md` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After all these have been added, the **final file structure** of your package
    will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And with a bit of imagination, your package could soon look similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/201500802c8dd528773e9e40676f2052.png)'
  prefs: []
  type: TYPE_IMG
- en: Sample PyPI Package. Image from [PyPI.org](https://pypi.org/) by author.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s **go through each** of the required files together and see why we need
    them, as well as what they can look like.
  prefs: []
  type: TYPE_NORMAL
- en: 1.1 | __init__.py
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This file will **mark your folder as a Python package** and make sure that
    your package is properly imported when launched. A sample for the `__init__.py`
    file could be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`your_package.py` is the main script of your package that will be imported
    through the `__init__.py` file. You can of course import more than one main script,
    if desired.'
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 | your_package.py
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned in section *1.1*, `your_package.py` is the main **script of your
    package** that you should already have created. You can include **more than one
    script** in your package, if desired.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3 | version.py
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Often, popular Python packages let you **look up their version** by calling
    the `.__version__` function. As an example, you can look up the [Pandas](https://pandas.pydata.org/)
    version installed on your machine by executing the following code line below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To ensure the same can be done with your package, you will want to include
    a `version.py` file in your package folder. This file can look as simple as below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 1.4 | setup.py and pyproject.toml
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `setup.py` file, as well as the `pyproject.toml` file are configuration
    files used to **build your package**. `pyproject.toml` is a new type of configuration
    file introduced with the [PEP 517](https://peps.python.org/pep-0517/) and [PEP
    518](https://peps.python.org/pep-0518/) standards.
  prefs: []
  type: TYPE_NORMAL
- en: '*But, when to use which?*'
  prefs: []
  type: TYPE_NORMAL
- en: When you want to create a Python package, it first has to be built. There are
    various popular Python build systems, f. e. `setuptools` is one of them. But,
    in some cases you might choose to use others, such as `[Poetry](https://python-poetry.org/)`,
    `[Flit](https://flit.pypa.io/en/stable/)` [](https://flit.pypa.io/en/stable/)
    or `[Bento](https://cournape.github.io/Bento/)`. `pyproject.toml` replaces the
    `setup.py` file when using packaging tools **other than** `setuptools`.
  prefs: []
  type: TYPE_NORMAL
- en: When using `setuptools` as build system, it is recommended to include both the
    `setup.py` file and the `pyproject.toml` file. If you use any other build system,
    you will usually only need the `pyproject.toml` file. For this guide, we will
    be using `setuptools` and therefore, I highly recommend to **include both files**
    in your package. For more details, I suggest checking out [this post](https://stackoverflow.com/questions/62983756/what-is-pyproject-toml-file-for).
  prefs: []
  type: TYPE_NORMAL
- en: 'Below is a template for `setup.py` that you can edit and reuse:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Secondly, below is a template for `pyproject.toml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 1.5 | setup.cfg
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This file is needed so that **metadata is included** when building your package.
    For example: the package name, the name of the author, a homepage URL, supported
    Python versions, etc. It also makes sure PyPI uses your `README.md` as package
    description and references the `LICENSE.txt` file.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 1.6 | MANIFEST.in
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You might have created a package that is made up of **multiple different scripts**,
    or includes **additional files** used by the main script. For example, your package
    could look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, when uploading to PyPI, only the scripts referenced in the `__init__.py`
    file will be included in the uploaded package. If we want any other scripts or
    files to be included, we need to reference them here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 1.7 | LICENSE.txt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This file will include the **license** that you are **distributing your package**
    under. It’s up to you to decide which license to use, nevertheless, make sure
    that you respect the licenses of the packages that yours depends on. You might
    not be allowed to copyright your package if it uses packages that are already
    under copyright.
  prefs: []
  type: TYPE_NORMAL
- en: A commonly used license for **open source software** is MIT. You can find a
    sample of the MIT license content [here](https://opensource.org/license/mit/).
  prefs: []
  type: TYPE_NORMAL
- en: 1.8 | README.md
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `README.md` file can be used as a source for the **description of your package**
    (i. e. the content of the PyPI page). In this guide, we are using a markdown based
    `README`, but you can choose any of the [supported markup languages](https://packaging.python.org/en/latest/guides/making-a-pypi-friendly-readme/#creating-a-readme-file).
    If you decide to change the markup type, make sure to also adjust the `long_description_content_type`
    variable in your `setup.cfg` file.
  prefs: []
  type: TYPE_NORMAL
- en: You could use the same `README` as f. e. in your GitHub repository, but be aware
    that PyPI markdown is not identical to GitHub’s markdown and that you might experience
    issues with formatting f. e. when using [emojis](https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md)
    or [badges](https://github.com/Ileriayo/markdown-badges).
  prefs: []
  type: TYPE_NORMAL
- en: After having added all the required files, your package is **ready to be uploaded
    to PyPI**! 🚀
  prefs: []
  type: TYPE_NORMAL
- en: '**2 | Uploading and Maintaining your PyPI Package**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your package is fully updated and ready to be published to PyPI, the next
    following sections are right for you. Below you will find some tips and recommendations
    on how to avoid common mistakes and pitfalls. Applying these will make the upload-
    and update-cycle of your PyPI packages smoother, and ultimately better.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 | Upload your Package first to TestPyPI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To submit your package to PyPI, you need to first **build it** and then use
    the [Twine](https://pypi.org/project/twine/) package to **upload it**. Twine can
    be easily installed via the `pip` installer, as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'But, before uploading anything to PyPI, I highly recommend to **first upload
    your package to** [**TestPyPI**](https://test.pypi.org/). Why? Because, once uploaded
    to PyPI:'
  prefs: []
  type: TYPE_NORMAL
- en: You **cannot edit the uploaded content** of your package. This means you cannot
    fix issues in your package metadata, your code, your package description (i. e.
    the README), etc. Bugs and typos will stay there, until you fix them in the next
    upload.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And, even worse: package **versions cannot be re-uploaded**. As soon as you
    uploaded f. e. version 1.0.0 of your package, even if you delete this version
    from PyPI, you cannot re-upload version 1.0.0 anymore — ever.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TestPyPI allows you to **upload your package and test it**, before actually
    uploading it to PyPI. It is a complete separate instance of PyPI, meaning you
    will need to [create a TestPyPI account](https://test.pypi.org/account/register/).
  prefs: []
  type: TYPE_NORMAL
- en: 'To **upload a package to TestPyPI**, execute the following commands in your
    package folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '*This will upload a source and a built distribution of your package (see section
    2.2 for more details).*'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have done your tests and checks, **upload your package to PyPI**
    by executing to following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: It took me quite some time to discover TestPyPI and since then, I cannot do
    without — and I am sure you will neither.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 | Upload Wheels with your Package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I noticed that online guides on “how to upload a package to PyPI” often display
    the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This will upload **a source distribution** of your package to PyPI from which
    it can be downloaded and installed via the `pip` installer.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to uploading the source distribution,I can highly recommend to also
    **upload a built distribution** (i. e.a Python wheel) of your package. Wheels
    have various advantages for your users, including **faster installation times**,
    since they are usually **smaller in size** and because they don’t have to first
    be built from the source distribution when installed.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/695cf961f1b0c2fbb730b6ede8c2065b.png)'
  prefs: []
  type: TYPE_IMG
- en: PyPI Package Files. Image from [PyPI.org](https://pypi.org/) by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tocreate a built distributionof your package, you will first need to install
    the [Wheel](https://pypi.org/project/wheel/) package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then execute the following commands to **create the source and built
    distribution**, and upload them to PyPI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Wheels can be built specifically for certain Python versions and OS types.
    The above command will **create a Python 3 OS-independent wheel**. Nevertheless,
    for your use case you might want to add multiple wheel types: for example, if
    your package should support Python 2, you can include a Python 2 wheel. For more
    information on wheels, I can recommend checking out [the following article](https://realpython.com/python-wheels/).'
  prefs: []
  type: TYPE_NORMAL
- en: 2.3 | Properly Version your Package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whenever you make changes to your package, make sure to **upload them to a new
    version release**. Versioning your package is very important, since your users
    will be able to follow the changes you made and update their package installation
    if necessary. Do not make updates to an existing version in your repository, as
    this is not best practice.
  prefs: []
  type: TYPE_NORMAL
- en: Below you will find a **few steps you can follow to implement proper versioning
    for your package:**
  prefs: []
  type: TYPE_NORMAL
- en: '**Define a versioning syntax** and be consistent with it. For example: start
    with 1.0.0\. If you make a minor change to your package, release 1.0.1\. If you
    make a major change, release 1.1.0, etc.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Update the version** in your `version.py` file (as described in section *1.3*)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Create a new version release** on GitHub (or any other source repository
    you are using for your package) and add release notes to it (what features were
    added/deleted? did you fix any bugs?).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Update the** `download_url` **variable** in the `setup.cfg` file (as described
    in section *1.5*) to point to the URL of the `tar.gz` package in the new release
    on GitHub (or any other source repository you are using for your package).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally: **upload your new version** to PyPI (but first: **TestPyPI**!)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These stepscould of course **be different for you**, but if you have been consistently
    **following this guide from *Part 1***, then they will contain all the necessary
    actions to implement proper versioning of your package.
  prefs: []
  type: TYPE_NORMAL
- en: 2.4 | Documenting your Package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When creating a package for the public to use, it is important to create a **clearly
    structured documentation** and always **update it if you make any changes to your
    code**.
  prefs: []
  type: TYPE_NORMAL
- en: '*A package is only as good as its documentation is.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'How much documentation is needed depends on the complexity of your package:
    a simple package might only need a few lines of instructions that can be included
    directly in the repository `README`. If your package is more complex, the `README`
    will likely be too limited.'
  prefs: []
  type: TYPE_NORMAL
- en: If I could start over, I would **use** [**readthedocs.org**](https://readthedocs.org/)
    **from day one**. Readthedocs is a popular **platform for software documentation
    hosting**. You will find that a lot of popular Python packages host their documentation
    there (see [Pandas](https://pandasguide.readthedocs.io/en/latest/) or [Pillow](https://pillow.readthedocs.io/en/stable/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Hosting on readthedocs has various benefits, including:'
  prefs: []
  type: TYPE_NORMAL
- en: automatic **creation of downloadable formats** of your documentation such as
    PDF, or HTML formats,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: support for **versioning of your documentation**,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: following a **standard page structure** that your users will often already be
    familiar with.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can connect readthedocs to your GitHub repository, which will allow you
    to edit your documentation directly on your local machine. Then, whenever you
    commit changes to your GitHub repo, it will **instantly trigger a new build of
    your documentation**.
  prefs: []
  type: TYPE_NORMAL
- en: I can recommend to follow [this official tutorial](https://docs.readthedocs.io/en/stable/tutorial/index.html)
    on how to set up readthedocs. As a reference example, this is the [readthedocs
    documentation of my package difPy](https://difpy.readthedocs.io/en/latest/index.html)
    on [GitHub](https://github.com/elisemercury/Duplicate-Image-Finder/tree/main/docs).
  prefs: []
  type: TYPE_NORMAL
- en: 2.5 | Maintain Code Hygiene
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lastly, it is also important to maintain certain **code hygiene standards**
    when making your package available on PyPI. The higher the quality of your source
    code, the more credible your package will be.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some best practices on code hygiene include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Consistent use of variable and function names**: use either capitalized variable
    name, like f. e. `variableName`, or use underscore-separated variables like `variable_name`.
    Do not mix both within one single script.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consistent use of quotation marks**: Python supports both single `''` and
    double `"` quotation marks. Choose which one to use in your script and do not
    mix them (except if absolutely necessary, when f. e. formatting strings).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Comment your code**! This might seem obvious to you, but it is a must to
    include as a best practice.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are of course more best practices to follow than those I have listed here,
    so I would recommend checking out [this article](https://www.codingdojo.com/blog/python-best-practices)
    for more.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Uploading and maintaining a PyPI package can be a lot of fun and a very rewarding
    experience. Sharing your work with the world by making it available for others
    can **help you learn** and **gain more coding experience** by receiving **feedback**
    and **improvement suggestions** from the Python community.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this guide gave you some **valuable insights** in how to get started
    with PyPI — or if you were already using PyPI, gave you some new hints on how
    to improve your current usage. ✨
  prefs: []
  type: TYPE_NORMAL
- en: Let me know if you have any feedback, and feel free to **share your own PyPI
    usage tips** by leaving a comment! 🍀
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] PyPA, [Packaging Python Projects](https://packaging.python.org/en/latest/tutorials/packaging-projects/)
    (2023)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] Setuptools, [Configuring setuptools using pyproject.toml files](https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html)
    (2023)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] Readthedocs, [Read the Docs: documentation simplified](https://docs.readthedocs.io/en/stable/index.html)
    (2023)'
  prefs: []
  type: TYPE_NORMAL
