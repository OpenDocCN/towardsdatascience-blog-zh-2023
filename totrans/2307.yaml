- en: Visualizing the Effect of Multicollinearity on Multiple Regression Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/visualizing-the-effect-of-multicollinearity-on-multiple-regression-model-8f323ef542a9](https://towardsdatascience.com/visualizing-the-effect-of-multicollinearity-on-multiple-regression-model-8f323ef542a9)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Using data visualization with Python to explain the effect of multicollinearity
    on multiple regression
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@borih.k?source=post_page-----8f323ef542a9--------------------------------)[![Boriharn
    K](../Images/1b23a79640f5272c1382918bfdba03b0.png)](https://medium.com/@borih.k?source=post_page-----8f323ef542a9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8f323ef542a9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8f323ef542a9--------------------------------)
    [Boriharn K](https://medium.com/@borih.k?source=post_page-----8f323ef542a9--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----8f323ef542a9--------------------------------)
    ·11 min read·Jun 12, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/078e3866353a1df09115ce1da99845c9.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Alex](https://unsplash.com/@brizmaker?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '**What is multicollinearity?**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In multiple regression, multicollinearity occurs when a predictor (independent
    variable) highly correlates with one or more of the other predictors in the model.
  prefs: []
  type: TYPE_NORMAL
- en: '**Why it matters?**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Theoretically, as we can see in the equation, multiple regression uses more
    than one predictor to predict the value of the dependent variable.
  prefs: []
  type: TYPE_NORMAL
- en: By the way, multiple regression works by determining the effect of the mean
    changing of a unit in a predictor on the dependent variable while keeping other
    predictors constant.
  prefs: []
  type: TYPE_NORMAL
- en: If a predictor highly correlates with the others, it will be tough to change
    that one without changing the others.
  prefs: []
  type: TYPE_NORMAL
- en: '**The effect of multicollinearity**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Simply put, multicollinearity affects the model coefficients. With small changes
    in data, it can affect coefficient estimates. Thus, it becomes difficult to interpret
    the role of each independent variable.
  prefs: []
  type: TYPE_NORMAL
- en: This article will explain and show the phenomenon by applying data visualization.
    Before starting, let's discuss how to determine whether the model has multicollinearity.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e89397f9508dcc67c8f0655a5e6dbcb4.png)'
  prefs: []
  type: TYPE_IMG
- en: An example of a result in this article. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '**How to detect multicollinearity?**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We can use VIF (Variance Inflation Factor) to estimate how much the variance
    of a regression coefficient is inflated due to multicollinearity.
  prefs: []
  type: TYPE_NORMAL
- en: The calculation is done by regressing a predictor against other predictors to
    obtain the R-squared values. Then, the obtained R-squared will be used to calculate
    the VIF values. The 'i' in the equation represents the predictor.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following criteria can be used to interpret the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have done with the explanation part. Let's continue to the creating
    model part.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple regression models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Start with preparing multiple regression models for plotting. Firstly, we will
    create two models from a dataset; one with moderately correlated variables and
    another with highly correlated variables.
  prefs: []
  type: TYPE_NORMAL
- en: Then we will slightly modify the data to see which model will be affected more
    by the small modification. Start with importing libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Getting data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For example, this article will work with the [*Cars Data*](https://data.world/dataman-udit/cars-data)
    dataset, which has a [public domain](https://en.wikipedia.org/wiki/Public_domain)
    license. It can be freely and directly downloaded from the [Seaborn](https://seaborn.pydata.org/generated/seaborn.load_dataset.html)
    library with `seaborn.load_dataset()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The dataset contains 392 cars'' prices and features between 1970–1982 in USA,
    Europe, and Japan. More information about the dataset can be found here: [link](https://data.world/dataman-udit/cars-data).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6e26c41867cc75063f282a26dbd7b519.png)'
  prefs: []
  type: TYPE_IMG
- en: Doing exploratory data analysis to understand the dataset is always a good idea.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f18f9ab08be1805c2bed5c4a321abc9a.png)'
  prefs: []
  type: TYPE_IMG
- en: The ranges (max value - min value) in the columns are quite different. Thus,
    performing the [standardization](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html)
    can help interpret the coefficients later.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2f39880037a841bd705f3707fc900a83.png)'
  prefs: []
  type: TYPE_IMG
- en: Continue with plotting a [heat map](https://seaborn.pydata.org/generated/seaborn.heatmap.html)
    to show the correlation among the variables.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/42b605dc859ffd104c56db58e56a7279.png)'
  prefs: []
  type: TYPE_IMG
- en: The result shows that there are some variables highly correlated with other
    variables. If every predictor is put in a multiple regression model to predict
    the 'mpg' value, multicollinearity will affect the model.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating the VIF values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This can be quickly proved by calculating the VIF values with the [Statsmodels](https://www.statsmodels.org/dev/generated/statsmodels.stats.outliers_influence.variance_inflation_factor.html)
    library.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/073ef49157ab128c367541795120c0ad.png)'
  prefs: []
  type: TYPE_IMG
- en: Some VIF values are pretty high (> 5), which can be interpreted as highly correlated.
    If we directly put every predictor in a multiple regression model, the model can
    suffer from the multicollinearity problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, only some predictors will be selected. This article will work with two
    models: one with moderately correlated and another with highly correlated predictors.'
  prefs: []
  type: TYPE_NORMAL
- en: The first multiple regression model uses 'cylinders' and 'acceleration' to predict
    the 'mpg,' while the second uses' cylinders' and 'displacement.' Let's calculate
    the VIF values again.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1625be0c9e8bdc0ba79606a449ae90af.png)'
  prefs: []
  type: TYPE_IMG
- en: VIF values of both models. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between these two models is changing from the variable 'acceleration'
    to 'displacement.' However, it can be noticed that none of the VIF values in the
    first model are higher than 5, while the second model has relatively high VIF
    values, more than 10.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a multiple regression model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the [OLS](http://statsmodels.regression.linear_model.OLS) function
    from the statsmodels library to create a multiple regression model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/63e1b40b6c4bf92b15a8fa980cb1cdbe.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary table of the multiple regression model with moderately correlated variables.
    Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting the model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the obtained model, we will define a function to run the model on a mesh
    grid for use in the next step.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here comes the fun part. Let's plot the model with the [Plotly](https://plotly.com/python/ml-regression/)
    library, which helps create an interactive plot easily. Thus, we can interact
    with the visualization, such as zooming or rotating.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f78e4289c6b40a3b19b2927c0f059af5.png)'
  prefs: []
  type: TYPE_IMG
- en: Multiple regression model with moderately correlated variables. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: We can perform the same process with the second model, which has the multicollinearity
    problem.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/18d7f7a2634da7ee277e77705e1a3d01.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary table of the multiple regression model with multicollinearity. Image
    by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c1363eb51cddca03816b77b2f34aef75.png)'
  prefs: []
  type: TYPE_IMG
- en: Multiple regression model with highly correlated variables. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As previously mentioned, small modifications in data can affect coefficient
    estimates. To prove that, we will randomly select a row and change the values.
    For example, they will be multiplied by 1.25.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we can conduct the same process and plot the new and the original
    multiple regression models in the same plot to see the result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0b2eea93416a4e40d069b7ce411dd9d5.png)'
  prefs: []
  type: TYPE_IMG
- en: Calculating the VIF values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the modified dataset, calculate the VIF values to compare the differences.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1c07694c36382d2c3f48f3e858ce97da.png)![](../Images/06602ffd342982ceb014f6d77ee77a76.png)'
  prefs: []
  type: TYPE_IMG
- en: VIF values calculated from the original and modified model. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 'The new VIF values calculated from the modified datasets are slightly changed.
    Both models remain with the same conditions: the first and second models'' predictors
    are moderately and highly correlated, respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating multiple regression models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To compare the change in the model coefficients, let's build the models from
    the new datasets for plotting them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e671cb2b0dbd283e369d4f9928a0f452.png)![](../Images/0bcf81630056f520b788128db0dfb41c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Summary of the models with moderately correlated variables: the original and
    the modified models, respectively. Image by Author.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, do the same process with the second model that has highly correlated predictors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3b2b2fbaaae5aadbd93ac1ba9a500cda.png)![](../Images/c1c6198466a36cc706103f6b4397e530.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Summary of the models with highly correlated variables: the original and the
    modified models, respectively. Image by Author.'
  prefs: []
  type: TYPE_NORMAL
- en: From the tables above, they may seem to have little changes in the coefficients.
    By the way, this happens because we randomly modified just one row of the dataset.
    This is not enough, and too soon to assume that multicollinearity affects the
    model coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: With the concept and the code we have done so far, the *for loop* function in
    Python will be applied to modify the values in each row, one at a time. Then,
    compare the absolute change in the coefficients with the original model.
  prefs: []
  type: TYPE_NORMAL
- en: Start with defining a function to compare the coefficient values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Use the *for loop* function to modify the rows, one row at a time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4eaa89d87ddcb929dc57903bc1bce0f3.png)'
  prefs: []
  type: TYPE_IMG
- en: Visualize the obtained DataFrame with a heat map.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c2d6e38028934d9a64594fed8c472e4f.png)'
  prefs: []
  type: TYPE_IMG
- en: Heat map shows the absolute difference of the model coefficients. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: From the heat map plot, the first two rows exhibit the absolute change in the
    coefficients between the models with moderately correlated variables before and
    after a small change in data.
  prefs: []
  type: TYPE_NORMAL
- en: The last two rows compare the same thing between the models with highly correlated
    variables before and after a slight modification in data.
  prefs: []
  type: TYPE_NORMAL
- en: It can be interpreted that the model with highly correlated predictors tends
    to have more unstable coefficients when the change in the data occurs, while the
    one with moderately correlated predictors suffers less.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting the multiple regression models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To visualize the change in coefficients, as an example, I will modify a row
    in the dataset, create a new model and plot it with the original one. The new
    models will be shown with the 'viridis' color palette (yellow-green), while the
    original models are plotted in the default color (orange-blue).
  prefs: []
  type: TYPE_NORMAL
- en: If you want to select and modify other rows manually, please change the code
    below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Run and plot the multiple regression models with moderately correlated predictors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/fd905ef8dc4a54cb035f2b5406df543d.png)![](../Images/e39f1206efd825512291e751204eb37d.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting the models with moderately correlated predictors. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: It can be seen that both models are overlapping since the colors of the two
    planes are mixed in the result. Lastly, do the same process with the models with
    moderately correlated predictors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2d051e035342f8eb9f0f22904f0e2b3b.png)![](../Images/abfc391fbb9ae665a7759fd0bef52311.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting the models with multicollinearity. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: The result shows that both models are not perfectly overlapped. They cut each
    other and produced a little gap between the models.
  prefs: []
  type: TYPE_NORMAL
- en: Please consider that these plots are selected by randomly modifying a row in
    the dataset. The first model is not multicollinearity free. It still has moderately
    correlated predictors. From the heat map, It is also affected by the change in
    some cases. However, the change produces fewer consequences when compared with
    the second model.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This article applies data visualization to express the effect of multicollinearity
    on multiple regression models by comparing two models, one with moderately correlated
    predictors and another with highly correlated predictors. Modifying the original
    data is also conducted to see which models will suffer more from small changes
    in data.
  prefs: []
  type: TYPE_NORMAL
- en: The result shows that the more a model has highly correlated predictors, the
    more model coefficients suffer from the unstable changing data. Thus, explaining
    each predictor in the model with the multicollinearity problem can be difficult.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are my data visualization articles that you may find interesting:'
  prefs: []
  type: TYPE_NORMAL
- en: 8 Visualizations with Python to Handle Multiple Time-Series Data ([link](/8-visualizations-with-python-to-handle-multiple-time-series-data-19b5b2e66dd0))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9 Visualizations with Python that Catch More Attention than a Bar Chart ([link](/9-visualizations-that-catch-more-attention-than-a-bar-chart-72d3aeb2e091))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7 Visualizations with Python to Express changes in Rank over time ([link](/7-visualizations-with-python-to-express-changes-in-rank-over-time-71c1f11d7e4b))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Battle Royale — Comparison of 7 Python Libraries for Interactive Financial Charts
    ([link](https://medium.com/@borih.k/battle-royale-comparison-of-7-python-libraries-for-interactive-financial-charts-bbdcc28989bc))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Wikimedia Foundation. (2023, February 22). *Multicollinearity*. Wikipedia. [https://en.wikipedia.org/wiki/Multicollinearity](https://en.wikipedia.org/wiki/Multicollinearity)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choueiry, G. (2020, June 1). *Quantifying health*. QUANTIFYING HEALTH. [https://quantifyinghealth.com/vif-threshold/](https://quantifyinghealth.com/vif-threshold/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Frost, J. (2023, January 29). *Multicollinearity in regression analysis: Problems,
    detection, and solutions*. Statistics By Jim. [https://statisticsbyjim.com/regression/multicollinearity-in-regression-analysis/](https://statisticsbyjim.com/regression/multicollinearity-in-regression-analysis/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rob Taylor, P. (2022, December 1). *Multicollinearity: Problem, or not?* Medium.
    [https://towardsdatascience.com/multicollinearity-problem-or-not-d4bd7a9cfb91](/multicollinearity-problem-or-not-d4bd7a9cfb91)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stephanie. (2020, December 16). *Variance inflation factor*. Statistics How
    To. [https://www.statisticshowto.com/variance-inflation-factor/](https://www.statisticshowto.com/variance-inflation-factor/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Cars data — dataset by dataman-udit*. data.world. (2020, May 24). [https://data.world/dataman-udit/cars-data](https://data.world/dataman-udit/cars-data)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
