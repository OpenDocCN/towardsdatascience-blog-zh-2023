["```py\nWITH foods AS (\n  SELECT 'Pasta al Pomodoro' as name, ['pasta', 'tomatoes', 'olive oil', 'garlic', 'basil', 'salt'] as ingredients\n  UNION ALL\n  SELECT 'Kimchi' as name, ['Napa cabbage', 'Korean pepper flakes', 'daikon radish', 'garlic', 'ginger', 'salt'] as ingredients\n)\n\nSELECT \n  * \nFROM \n  foods\n```", "```py\nSELECT \n  *, \n  ( --3\\. aggregate with count and feed to parent row using 'select'\n    select count(1) \n    --1\\. turn array into table format using unnest()\n    from unnest(ingredients) as ingr \n    --2\\. filter for right conditions\n    where ingr like '%daikon%' \n\n  ) AS qty_daikon_ingredients\nFROM \n  foods\n```", "```py\nSELECT \n  SUM( --4\\. aggregate sub-query results over the whole table\n    ( select count(1) --3\\. aggregate with count and feed to parent row \n      from unnest(ingredients) as ingr --1\\. turn array into table format using unnest\n      where ingr like '%daikon%' --2\\. filter for right conditions\n    ) \n  ) AS qty_daikon_ingredients\nFROM \n  foods\n```", "```py\nSELECT \n  *\nFROM \n  foods cross join unnest(ingredients) as ingr\n  -- or if you want the same FROM even shorter:\n  -- FROM foods, foods.ingredients as ingr\n  -- comma = cross join; <table>.<array> = contextually implied unnest operation\n```", "```py\nSELECT \n  name, ingr -- 3\\. smooth output\nFROM \n  foods cross join unnest(ingredients) as ingr -- 1\\. nasty, nasty\nWHERE\n  ingr like '%a%' and ingr like '%i%' -- 2\\. filter, filter!\n```", "```py\nSELECT \n  name, \n  (select count(1) \n   from unnest(ingredients) as ingr \n   where ingr like '%a%' \n    and ingr like '%i%'\n  ) as qty_ingredients_a_i\nFROM \n  foods\n```", "```py\nSELECT \n  event_name,\n  -- classic example to get one variable from a set of custom variables\n  ( select value.string_value \n    from unnest(event_params) \n    where key='page_title'\n  ) as page_title,\n  items -- just show the whole plain array\nFROM `bigquery-public-data.ga4_obfuscated_sample_ecommerce.events_20210131` \nWHERE\n  ARRAY_LENGTH(items)>0 -- simple but effective aggregation\nLIMIT 1000\n```", "```py\nSELECT \n  -- find parameter with name page_title and return its string value\n  (select value.string_value from unnest(event_params) where key='page_title') as page_title,\n\n  -- find count of products with 'Charcoal' in their name\n  (select count(1) from unnest(items) where item_name like '%Charcoal%') as charcoal_items,\n\n  items -- just to check if we're doing it right\n\nFROM `bigquery-public-data.ga4_obfuscated_sample_ecommerce.events_20210131` \nWHERE\n  ARRAY_LENGTH(items)>0\n  AND event_name='view_item' -- put the event name as a condition\nLIMIT 1000\n```", "```py\n-- data preparation CTE\nWITH prep AS (\n  SELECT \n    -- find parameter with name page_title and return its string value\n    (select value.string_value from unnest(event_params) where key='page_title') as page_title,\n\n    -- find count of products with 'Charcoal' in their name\n    (select count(1) from unnest(items) where item_name like '%Charcoal%') as charcoal_items,\n\n    -- to build a share we need a count of all items\n    ARRAY_LENGTH(items) as all_items\n\n  FROM `bigquery-public-data.ga4_obfuscated_sample_ecommerce.events_20210131` \n  WHERE\n    ARRAY_LENGTH(items)>0\n    AND event_name='view_item'\n)\n\nSELECT\n  page_title,\n  -- build the share\n  ROUND( \n    SUM(charcoal_items) / SUM(all_items) *100\n  , 2)as share_viewed_charcoal_items\nFROM prep\nGROUP BY 1\nORDER BY 2 DESC\n```"]