- en: Error Handling in R and Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/error-handling-in-r-and-python-5a4d60f3fba6](https://towardsdatascience.com/error-handling-in-r-and-python-5a4d60f3fba6)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If an error comes up in the middle of a function, that can be handled
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://gustavorsantos.medium.com/?source=post_page-----5a4d60f3fba6--------------------------------)[![Gustavo
    Santos](../Images/a19a9f4525cdeb6e7a76cd05246aa622.png)](https://gustavorsantos.medium.com/?source=post_page-----5a4d60f3fba6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5a4d60f3fba6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5a4d60f3fba6--------------------------------)
    [Gustavo Santos](https://gustavorsantos.medium.com/?source=post_page-----5a4d60f3fba6--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5a4d60f3fba6--------------------------------)
    ·5 min read·Apr 27, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aa8bcccb535506d244fe491e4c34f330.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Joshua Hoehne](https://unsplash.com/@mrthetrain?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/WPrTKRw8KRQ?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One thing is true: *if you ever coded, you faced an error. Period.*'
  prefs: []
  type: TYPE_NORMAL
- en: Errors are not always a bad thing. I agree that they can drive us mad sometimes,
    especially if we have looked the code over and over again without finding the
    bug. However, error messages must be understood as something that is not working
    as expected in your code.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s face it, we can create N test scenarios, but the end user will find the
    bug N+1\. And that’s ok, as long as we can plan for the most common ones.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will go over known error handling functions that can keep
    our code running, even if an error occurs. And we’ll see code snippets for R and
    Python.
  prefs: []
  type: TYPE_NORMAL
- en: Read on.
  prefs: []
  type: TYPE_NORMAL
- en: Error Handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Error handling is a programming resource to make your code keep working after
    finding an error, without breaking.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Imagine that you are writing a function that takes two numbers, calculates
    the difference between them and return the percent value of the difference compared
    to the first number. That is a pretty straightforward function, but if you enter
    a number as string, the code will break and throw an error to the screen: *I can’t
    make math operations with text, buddy.*'
  prefs: []
  type: TYPE_NORMAL
- en: That is when the error handling can be useful. If we know that this is a common
    error from the end user side, I can plan to make my code work around that error
    and return the result even if the numbers were entered as strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'The programmer can say:'
  prefs: []
  type: TYPE_NORMAL
- en: Try running this piece of code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If this does not work and you face an error, run this piece of code instead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s move on and see how to code that.
  prefs: []
  type: TYPE_NORMAL
- en: Coding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: R
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In R, the function to be used for error handling is `tryCatch`. Like explained
    before, it will try to run the main code, but if it “catches” an error, the secondary
    code (the workaround) can run.
  prefs: []
  type: TYPE_NORMAL
- en: Going back to that example in the previous section, a function to calculate
    percent difference without error handling would be like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Notice, in Test2, that if we enter a string, the code won’t move forward. It
    breaks.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can use `tryCatch` and make the function returns the value even if we
    enter the numbers as string.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Perfect! It worked just fine. Let’s find out how we can do the same code in
    Python now.
  prefs: []
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Writing the same function in Python is also very simple. We should use the `try
    ... except` format, in this case. As you may have already concluded, `try` the
    main code snippet, but if an exception (error) occurs, run the secondary code
    snippet, the workaround.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Very good. Code working properly.
  prefs: []
  type: TYPE_NORMAL
- en: Finally
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We could add a `finally` clause to any of the functions from both languages.
    This argument will always run, regardless if the try block raises an error or
    not. So it could be a completion message or a summary, for example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: I know these functions are simple and that there would be a much better solution
    to create them without using error handling. However, I think this was the most
    gentle way to teach how to write a function with exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it’s your turn to apply that to your job, in many different use cases and
    forms to help you solving business problems.
  prefs: []
  type: TYPE_NORMAL
- en: Before You Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this quick tutorial, we learned how to handle errors using R or Python.
  prefs: []
  type: TYPE_NORMAL
- en: Error handling is a programming resource to make your code keep running, even
    if it finds an expected kind of error. In our example, it was a string input instead
    of number.
  prefs: []
  type: TYPE_NORMAL
- en: 'R Error Handling:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the function `tryCatch(expression, error, finally)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In Python:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the function `try: expression except: expression finally: expression`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you liked this content, follow my blog for more.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://gustavorsantos.medium.com/?source=post_page-----5a4d60f3fba6--------------------------------)
    [## Gustavo Santos - Medium'
  prefs: []
  type: TYPE_NORMAL
- en: Read writing from Gustavo Santos on Medium. Data Scientist. I extract insights
    from data to help people and companies…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: gustavorsantos.medium.com](https://gustavorsantos.medium.com/?source=post_page-----5a4d60f3fba6--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Find me on [LinkedIn](https://www.linkedin.com/in/gurezende/) too.
  prefs: []
  type: TYPE_NORMAL
- en: Now, I have a [Topmate page](https://topmate.io/gustavo_santos) as well, where
    you can book some time with me if you’d like to talk about Data Science.
  prefs: []
  type: TYPE_NORMAL
- en: Reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[](https://www.w3schools.com/python/python_try_except.asp?source=post_page-----5a4d60f3fba6--------------------------------)
    [## Python Try Except'
  prefs: []
  type: TYPE_NORMAL
- en: The try block lets you test a block of code for errors. The except block lets
    you handle the error. The else block lets…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.w3schools.com](https://www.w3schools.com/python/python_try_except.asp?source=post_page-----5a4d60f3fba6--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Exception_handling](https://en.wikipedia.org/wiki/Exception_handling)'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://www.statology.org/r-trycatch/?source=post_page-----5a4d60f3fba6--------------------------------)
    [## How to Write Your First tryCatch() Function in R - Statology'
  prefs: []
  type: TYPE_NORMAL
- en: You can use a tryCatch() function in R to return the value of some expression
    or produce a custom message if a warning…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.statology.org](https://www.statology.org/r-trycatch/?source=post_page-----5a4d60f3fba6--------------------------------)
  prefs: []
  type: TYPE_NORMAL
