- en: 6 Common Index-Related Operations You Should Know about Pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/6-common-index-related-operations-you-should-know-about-pandas-783fdba59768](https://towardsdatascience.com/6-common-index-related-operations-you-should-know-about-pandas-783fdba59768)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Handle index effectively in your data frames
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://yongcui01.medium.com/?source=post_page-----783fdba59768--------------------------------)[![Yong
    Cui](../Images/475918ba9ca0ecd923abe2e7843582a9.png)](https://yongcui01.medium.com/?source=post_page-----783fdba59768--------------------------------)[](https://towardsdatascience.com/?source=post_page-----783fdba59768--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----783fdba59768--------------------------------)
    [Yong Cui](https://yongcui01.medium.com/?source=post_page-----783fdba59768--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----783fdba59768--------------------------------)
    ·9 min read·Oct 17, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6020659939470dfe03adf748de117f0e.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Alejandro Luengo](https://unsplash.com/@aluengo91?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that you have a library filled with thousands of books, each holding
    a treasure trove of information. To find the exact book you need, you’d turn to
    the library’s index (if you have one), right? When you deal with real-world data,
    having a library-like index is essential for you to sift through vast amounts
    of data, pinpointing exactly what you want without rummaging through every bit.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I’m going to share some common yet important index-related
    operations, breaking them down using simple applicable scenarios. Whether you’re
    a data newbie or a seasoned pro, you’ll soon see how these operations can be your
    data’s best friend.
  prefs: []
  type: TYPE_NORMAL
- en: Without further ado, let’s get it started.
  prefs: []
  type: TYPE_NORMAL
- en: As a quick note, in a data frame, both rows and columns are considered indexes,
    but in most data manipulations, we simply consider rows as the index of interest,
    as many datasets are presented in the wide format — each row represents one data
    record and columns represent varied aspects of the data record.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this article, we will be focused on manipulating the index along the rows.
    That is, each item of the index responds to a row.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 1\. Setting index
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A common data manipulation starts with importing data from a tabulated data
    source, such as CSV files. The following screenshot shows you an online data source
    from GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/73329ce32683c32ab7cf035499162acc.png)'
  prefs: []
  type: TYPE_IMG
- en: The source data used in this blog article (screenshot by author)
  prefs: []
  type: TYPE_NORMAL
- en: When you import this file, you’ll see that an “extra” column without a name
    appears before the three columns that we’ve seen in the source file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9f022c6ce62e91264a1b7f7d3cd0a4f6.png)'
  prefs: []
  type: TYPE_IMG
- en: The data frame read from the source showing the index
  prefs: []
  type: TYPE_NORMAL
- en: 'The automatically generated index starts with 0 and increments by 1 for each
    additional row. You can access the index by calling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you know the data structure before time, in this case, the dataset has a
    combination of year and month as unique identifiers for the data. You can set
    these two columns as the index when you read the data, as below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that as we set two columns as the index, we’re creating a data frame using
    multi-index:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Because multi-index isn’t the focus of the present article, I won’t cover too
    much here. However, if you’re interested in multi-index, please refer to [my previous
    article](https://medium.com/p/e6aec29ee6d8) on this topic.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Resetting index
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s continue with the data frame having the multi-index. Because many of
    us are not so used to multi-index, we want still the single scalar index. To do
    that, we can reset the index, as below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: From the output, you can tell that we’re now using the 0-based index. For the
    `reset_index` function, it has an argument `drop`, which by default is set as
    `False` to keep the original index by converting it to a column. However, there
    are cases where you may want to drop the original index, and one such case is
    when you merge/combine data frames.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As a simple example shown above, the combined data frame has an index that consists
    of indices from two data frames (as a side note, Pandas allows duplicate values
    in the index). In most cases, we don’t want duplicates in the index, so we want
    to reset the index, as below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the code snippet above, I’m showing you a contrast when `drop` is set to
    `False` (the default one) and `True`. As you can tell, in this case, the ideal
    operation is the latter — drop the original index.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Selecting data using the index
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have learned how to set and reset the index, but what can we use with the
    index? As you may have noticed, the index marks the positions of the data, serving
    as an identifier for each row, so the first usage is using the index for data
    selection.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to data selection using the index, the most common way is to use
    the `iloc` method. The following code shows you how to select a single row of
    data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'As shown above, you can either use a single number — in this case, 0 selects
    the first row, or you can use a number and : (to select all columns). If you want
    to select a single or a subset of columns. You specify the index of the columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In the examples above, `iloc[2, 0]` selects the data in the 3rd row and 1st
    column. Please note that both rows and columns use a 0-based index. The code `iloc[2,
    :2]` selects the 3rd row and the first 2 columns (columns 0 and 1) — just as in
    other Python slice operations, the end index (2 in this case) is not included.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another thing to know is that when you have many columns, it can be tedious
    to find out the index of the columns of interest by counting. Fortunately, we
    can have the following solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 4\. Merging data using the index
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you work with multiple data frames, you often need to merge the data for
    subsequent processing. Although you can use various methods for merging operations,
    such as `merge`, `join`, `combine`, and `concat`, the most versatile one is `merge`.
  prefs: []
  type: TYPE_NORMAL
- en: In my daily data processing jobs, I mostly use named columns when I use `merge`.
    A code example is shown below. We just created some mock data by adding 11 to
    the existing years, and I used `“year”` and `“month”` for merging.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: However, the `merge` method also supports merging on the index. Here’s an example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As shown above, we specified to use the index for both data frames by setting
    `True` to `left_index` and `right_index`. This way, we’re getting a merged data
    frame that has the same index as individual data frames.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Including/Excluding index when exporting data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we’re working with our collaborators, we need to share the data sets.
    One common format of the data is in the CSV format. So, we need to export our
    data frames into CSV files, as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'As shown in the code snippet above, we use the `to_csv` method to create a
    CSV file. You may notice that when we read the CSV file, we find that the CSV
    file has an extra column other than the 3 columns that we start with. It’s easy
    for you to figure out that the extra column is the index. That is, when you export
    a data frame to a CSV file, the index is exported by default. However, it can
    be confusing to others if you do include this index column, and thus, you can
    override the default behavior by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: From the printout, you can tell that the index has been removed from the exported
    CSV file. The change is due to that we set the index argument as False in the
    `to_csv` method call. This setting dictates that please don’t include the index
    in the exported file.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Converting index to columns in a Groupby operation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you aggregate data, one of the most common approaches involves using the
    `groupby` method. For example, with the data frame, we want to find out the total
    number of passengers for each year, as below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As shown above, we find out the sum of passengers by grouping the data by year.
    One thing you may not notice is that the output `total_passengers` is in the `Series`
    format.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'As you may know, `Series` isn’t the best to work with other data frames. Thus,
    it’s usually preferable if we can obtain a data frame as the output in a Groupby
    operation. The following shows you how:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the `groupby` method call, we simply specify that `as_index` as `False`,
    which means that we don’t want to use the grouping by variable(s) as the resulting
    data frame. With this data frame output, it’s easier to work on it.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this article, we reviewed the most common 6 operations that are relevant
    to the index in a data frame. I hope you find this article useful.
  prefs: []
  type: TYPE_NORMAL
- en: Want to learn more about Python and Pandas? Please consider signing up for my
    newsletter email. If you want to level up your Python skills in a systematic way,
    please check out my new book [Python How-To](https://www.manning.com/books/python-how-to)
    by Manning.
  prefs: []
  type: TYPE_NORMAL
