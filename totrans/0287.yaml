- en: An Alternative Approach to Visualizing Feature Relationships in Large Datasets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/an-alternative-approach-to-visualizing-feature-relationships-in-large-datasets-925ab257d772](https://towardsdatascience.com/an-alternative-approach-to-visualizing-feature-relationships-in-large-datasets-925ab257d772)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to make those crowded scatterplots more informative
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@zvonimir.boban.mef?source=post_page-----925ab257d772--------------------------------)[![Zvonimir
    Boban](../Images/cbad06b7e1f5d021ce9b2dc31b8a6a65.png)](https://medium.com/@zvonimir.boban.mef?source=post_page-----925ab257d772--------------------------------)[](https://towardsdatascience.com/?source=post_page-----925ab257d772--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----925ab257d772--------------------------------)
    [Zvonimir Boban](https://medium.com/@zvonimir.boban.mef?source=post_page-----925ab257d772--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----925ab257d772--------------------------------)
    ¬∑5 min read¬∑Sep 28, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fdaba01469448b7502bd62cc1324c477.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to understand relationships between data features is by visualizing
    them. In the case of numeric features, this usually means producing a scatterplot.
  prefs: []
  type: TYPE_NORMAL
- en: This is fine if the number of points is small, but for large datasets, the problem
    of overlapping observations appears. This can be partially mitigated for medium-sized
    datasets by making the points semi-transparent, but for very large datasets, even
    this doesn‚Äôt help.
  prefs: []
  type: TYPE_NORMAL
- en: What to do then? I will show you an alternative approach using the publicly
    available [Spotify dataset from Kaggle](https://www.kaggle.com/datasets/maharshipandya/-spotify-tracks-dataset).
  prefs: []
  type: TYPE_NORMAL
- en: The dataset contains audio features of 114000 Spotify tracks, such as danceability,
    tempo, duration, speechiness, ‚Ä¶ As an example for this post, I will examine the
    relationship between danceability and all other features.
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs first import the dataset and tidy it up a bit.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: ‚ùîThe issue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As I mentioned previously, the simplest way to visualize two-variable relationships
    is by drawing scatterplots with each point representing a single song. The first
    four columns contain track id information, so I left them out. I also renamed
    the features so that the first letter is uppercase and then reshape the data to
    prepare it for plotting.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8c2ef12e0b0f01232587480082a1c4a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Even though a decreased point opacity was used (alpha = 0.5 as opposed to the
    default value of 1), the overlap is still too high. Although we can detect some
    general trends, the charts aren‚Äôt that informative since there are too many overlapping
    points.
  prefs: []
  type: TYPE_NORMAL
- en: We can try pushing this further by reducing the opacity to alpha = 0.05.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f3dea58860149f045e46df3a685b0142.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: This improved things, and some might advocate that the chart is informative
    enough now. However, I disagree as I still have to focus too much to extract the
    trend and value distribution information.
  prefs: []
  type: TYPE_NORMAL
- en: üí° The alternative
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can see from the above scatterplots that the dataset contains both ordinal
    (Explicit, Mode, Key, Time Signature) and numeric features. In the case of categorical
    features, the simplifying solution is obvious ‚Äî we can just use a summary plot
    such as a boxplot.
  prefs: []
  type: TYPE_NORMAL
- en: But what about the numeric ones? Well, the idea is to group the points into
    multiple equally wide bins, effectively turning them into ordinal features, and
    enabling the use of the approach described above.
  prefs: []
  type: TYPE_NORMAL
- en: Although boxplots are the most commonly used summary plots, I will also add
    violin plots in the background. This way, aside from summary stats of the binned
    points provided by the boxplot (median, interquartile range), we can also easily
    see the distribution of values within a specific binned range.
  prefs: []
  type: TYPE_NORMAL
- en: This powerful combo reduces chart clutter and enables much easier identification
    of trends.
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs try this out for the Acousticness-Danceability plot and then visualize
    all the features at once afterwards.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/fdaba01469448b7502bd62cc1324c477.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image by Author*'
  prefs: []
  type: TYPE_NORMAL
- en: Much better! The decreasing trend in song danceability with an increase in acousticeness
    is now much more easily visible. We can also see that danceability is pretty normally
    distributed due to the addition of violin plots in the background, and the zero
    danceability outliers are identified by the boxplot function and thus plotted
    as separate points .
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs extrapolate our solution to all other features and create a complete feature
    relationship panel.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9507e08fd8c8ce69e4b1270c414a2d21.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Although we lost some detail compared to the original scatterplot panel, it
    is much easier to detect the underlying trends. Notice that, unlike with the single
    chart above, I removed the bin ranges on the x-axis in order to reduce clutter
    when visualizing all the features at once.
  prefs: []
  type: TYPE_NORMAL
- en: Considering these visualizations, the most impactful features should be Duration,
    Energy, Loudness, Tempo, Time Signature and Valence. Acousticness, Explicitness,
    Liveness, Popularity and Speechines show some effect, but not as much as the formerly
    mentioned ones. There seems to be no strong effect of Key, Instrumentalness and
    Mode features on the danceability rating.
  prefs: []
  type: TYPE_NORMAL
- en: üóíÔ∏èConclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That‚Äôs all for this post. I‚Äôve shown how to bypass the clutter of overlapping
    points when analyzing large datasets. I hope you will find the proposed solution
    useful whenever you encounter large datasets and wish to easily identify the trends
    in the feature relationships. If you have any comments, questions, suggestions,
    or requests for other custom plots, please let me know in the comments.
  prefs: []
  type: TYPE_NORMAL
- en: And, of course if you liked the post, follow me for more similar contentüòâ.
  prefs: []
  type: TYPE_NORMAL
