["```py\n#Binary target varibale\ny_bin = [1 if y_>10 else 0 for y_ in y]\n```", "```py\n#Train model \nmodel_bin = xgb.XGBClassifier(objective=\"binary:logistic\")\nmodel_bin.fit(X, y_bin)\n```", "```py\n#Get shap values\nexplainer = shap.Explainer(model_bin)\nshap_values_bin = explainer(X)\n\nprint(shap_values_bin.shape) #output: (4177, 8)\n```", "```py\n# waterfall plot for first instance\nshap.plots.waterfall(shap_values_bin[0])\n```", "```py\n#Categorical target varibale\ny_cat = [2 if y_>12 else 1 if y_>8 else 0 for y_ in y]\n\n#Train model \nmodel_cat = xgb.XGBClassifier(objective=\"binary:logistic\")\nmodel_cat.fit(X, y_cat)\n```", "```py\n# get probability predictions\nmodel_cat.predict_proba(X)[0]\n```", "```py\n#Get shap values\nexplainer = shap.Explainer(model_cat)\nshap_values_cat= explainer(X)\n\nprint(np.shape(shap_values_cat))\n```", "```py\n# waterfall plot for class 0\nshap.plots.waterfall(shap_values_cat[0,:,0])\n\n# waterfall plot for class 1\nshap.plots.waterfall(shap_values_cat[0,:,1])\n\n# waterfall plot for class 2\nshap.plots.waterfall(shap_values_cat[0,:,2])\n```", "```py\ndef softmax(x):\n    \"\"\"Compute softmax values for each sets of scores in x\"\"\"\n    e_x = np.exp(x - np.max(x))\n    return e_x / e_x.sum(axis=0)\n\n# convert softmax to probability\nfx = [0.383,-0.106,1.211]\nsoftmax(fx)\n```", "```py\n# calculate mean SHAP values for each class\nmean_0 = np.mean(np.abs(shap_values_cat.values[:,:,0]),axis=0)\nmean_1 = np.mean(np.abs(shap_values_cat.values[:,:,1]),axis=0)\nmean_2 = np.mean(np.abs(shap_values_cat.values[:,:,2]),axis=0)\n\ndf = pd.DataFrame({'small':mean_0,'medium':mean_1,'large':mean_2})\n\n# plot mean SHAP values\nfig,ax = plt.subplots(1,1,figsize=(20,10))\ndf.plot.bar(ax=ax)\n\nax.set_ylabel('Mean SHAP',size = 30)\nax.set_xticklabels(X.columns,rotation=45,size=20)\nax.legend(fontsize=30)\n```", "```py\n# get model predictions\npreds = model_cat.predict(X)\n\nnew_shap_values = []\nfor i, pred in enumerate(preds):\n    # get shap values for predicted class\n    new_shap_values.append(shap_values_cat.values[i][:,pred])\n```", "```py\n# replace shap values\nshap_values_cat.values = np.array(new_shap_values)\nprint(shap_values_cat.shape)\n```", "```py\nshap.plots.bar(shap_values_cat)\n```", "```py\nshap.plots.beeswarm(shap_values_cat)\n```"]