["```py\nconda create -n pydantic2 python=3.11\nconda activate pydantic2\n\npip install -U pydantic\n```", "```py\nfrom pydantic import BaseModel\n\nclass ComputerModel(BaseModel):\n    brand: str\n    cpu: str\n    storage: int\n    ssd: bool = True\n```", "```py\ninput_dict = {\"brand\": \"HP\", \"cpu\": \"Intel i7 1265U\", \"storage\": \"256\"}\n\ncomputer = ComputerModel(**input_dict)\n\nprint(computer)\n# brand='HP' cpu='Intel i7 1265U' storage=256 ssd=True\n```", "```py\n# Basic model used in this post\nfrom pydantic import BaseModel\n\nclass ComputerModel(BaseModel):\n    brand: str\n    storage: int\n```", "```py\nComputerModel.model_validate({\"brand\": \"HP\", \"storage\": \"256\"})\n# ComputerModel(brand='HP', storage=256)\n\nimport json\ninput_json = json.dumps({\"brand\": \"HP\", \"storage\": \"256\"})\n\nComputerModel.model_validate_json(input_json)\n# ComputerModel(brand='HP', storage=256)\n```", "```py\nComputerModel.model_validate({\"brand\": \"HP\", \"storage\": \"256\"}, strict=True)\n\n# ValidationError: 1 validation error for ComputerModel\n# storage\n#  Input should be a valid integer [type=int_type, input_value='256', input_type=str]\n```", "```py\nfrom pydantic import Field\n\nclass ComputerModelStrict(BaseModel):\n    brand: str\n    storage: int = Field(strict=True)\n\nComputerModelStrict.model_validate({\"brand\": \"HP\", \"storage\": \"256\"})\n\n# ValidationError: 1 validation error for ComputerModel\n# storage\n#  Input should be a valid integer [type=int_type, input_value='256', input_type=str]\n```", "```py\nfrom pydantic import BaseModel, ConfigDict\n\nclass ComputerModelStrict(BaseModel):\n    model_config = ConfigDict(strict=True, str_min_length=2)\n\n    brand: str\n    storage: int\n\nComputerModelStrict.model_validate({\"brand\": \"HP\", \"storage\": \"256\"})\n\n# ValidationError: 1 validation error for ComputerModel\n# storage\n#  Input should be a valid integer [type=int_type, input_value='256', input_type=str]\n\nComputerModelStrict.model_validate({'brand': 'X', 'storage': 256})\n# ValidationError: 1 validation error for ComputerModelStrict\n# brand\n#  String should have at least 2 characters [type=string_too_short, input_value='X', input_type=str]\n```", "```py\nfrom typing import Annotated\n\nclass ComputerModelStrict(BaseModel):\n    brand: str\n    storage: Annotated[int, Field(strict=True, gt=0)]\n\nComputerModelStrict.model_validate({'brand': 'HP', 'storage': '256'})\n\n# ValidationError: 1 validation error for ComputerModel\n# storage\n#  Input should be a valid integer [type=int_type, input_value='256', input_type=str]\n\nComputerModelStrict.model_validate({'brand': 'HP', 'storage': 0})\n# ValidationError: 1 validation error for ComputerModelStrict\n# storage\n#   Input should be greater than 0 [type=greater_than, input_value=0, input_type=int]\n```", "```py\nfrom datetime import datetime\nfrom typing import Annotated\nfrom uuid import UUID, uuid4\n\nfrom pydantic import BaseModel, Field\n\nclass ComputerModel(BaseModel):\n    uid: UUID = Field(default_factory=uuid4)\n    brand: str\n    storage: int\n    created: datetime = Field(default_factory=datetime.utcnow)\n\nComputerModel.model_validate({'brand': 'HP', 'storage': 256})\n# ComputerModel(uid=UUID('81474288-f691-4e37-b5e3-d28f0656d972'), brand='HP', storage=256, created=datetime.datetime(2023, 9, 29, 0, 5, 2, 958755))\n```", "```py\nfrom typing import Annotated\nfrom pydantic.functional_validators import AfterValidator\n\ndef check_storage(storage: int):\n    allowed = (128, 256, 512, 1000, 1024, 2000, 2048)\n    if storage not in allowed:\n        raise ValueError(f\"Invalid storage, storage must be one of {allowed}\")\n    return storage\n\nclass ComputerModel(BaseModel):\n    brand: str\n    storage: Annotated[int, AfterValidator(check_storage)]\n\nComputerModel.model_validate({'brand': 'HP', 'storage': 256})\n# ComputerModel(brand='HP', storage=256)\n\nComputerModel.model_validate({'brand': 'HP', 'storage': 250})\n# ValidationError: 1 validation error for ComputerModel\n# storage\n#  Value error, Invalid storage, storage must be one of (128, 256, 512, 1000, 1024, 2000, 2048) [type=value_error, input_value=250, input_type=int] \n```", "```py\nfrom typing import Annotated\n\nfrom pydantic import BaseModel, Field, field_validator\nfrom pydantic.functional_validators import AfterValidator\n\nclass ComputerModel(BaseModel):\n    brand: str\n    storage: int\n\n    @field_validator('storage', mode='after')\n    @classmethod\n    def check_storage(cls, storage: int):\n        allowed = (128, 256, 512, 1000, 1024, 2000, 2048)\n        if storage not in allowed:\n            raise ValueError(f\"Invalid storage, storage must be one of {allowed}\")\n        return storage\n```", "```py\nfrom __future__ import annotations\nfrom typing import Annotated\n\nfrom pydantic import BaseModel, Field, model_validator\nfrom pydantic.functional_validators import AfterValidator\n\nclass ComputerModel(BaseModel):\n    brand: str\n    storage: int\n\n    @model_validator(mode='after')\n    def check_brand_storage(self) -> ComputerModel:\n        if self.brand.upper() == 'APPLE' and self.storage < 256:\n            raise ValueError(\"For Apple, the storage must be at least 256GB.\")\n        return self\n\nComputerModel.model_validate({'brand': 'Apple', 'storage': 256})\n# ComputerModel(brand='HP', storage=256)\n\nComputerModel.model_validate({'brand': 'Apple', 'storage': 128})\n# ValidationError: 1 validation error for ComputerModel\n#   Value error, For Apple, the storage must be at least 256GB. [type=value_error, input_value={'brand': 'Apple', 'storage': 128}, input_type=dict]\n```", "```py\nfrom pydantic import BaseModel\n\nclass ComputerModel(BaseModel):\n    brand: str\n    cpu: str\n    storage: int\n    ssd: bool = True\n\ninput_dict = {\"brand\": \"HP\", \"cpu\": \"Intel i7 1265U\", \"storage\": \"256\"}\nmodel = ComputerModel(**input_dict)\n\noutput_dict_default = model.model_dump()\n# {'brand': 'HP', 'cpu': 'Intel i7 1265U', 'storage': 256, 'ssd': True}\n\noutput_dict_no_unset = model.model_dump(exclude_unset=True)\n# {'brand': 'HP', 'cpu': 'Intel i7 1265U', 'storage': 256}\n\noutput_dict_included = model.model_dump(include={'brand', 'storage'})\n# {'brand': 'HP', 'storage': 256}\n\noutput_dict_excluded = model.model_dump(exclude={'cpu'})\n# {'brand': 'HP', 'storage': 256, 'ssd': True}\n```", "```py\nfrom pydantic import BaseModel, field_serializer\n\nclass ComputerModel(BaseModel):\n    brand: str\n    cpu: str\n    storage: int\n    ssd: bool = True\n\n    @field_serializer('brand')\n    def serialize_dt(self, brand: str, _info):\n        return brand.upper()\n\ninput_dict = {\"brand\": \"Apple\", \"cpu\": \"M1\", \"storage\": \"512\"}\nmodel = ComputerModel(**input_dict)\n# {'brand': 'APPLE', 'cpu': 'M1', 'storage': 512, 'ssd': True}\n```"]