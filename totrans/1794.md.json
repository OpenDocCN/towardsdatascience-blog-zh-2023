["```py\nimport matplotlib.pyplot as plt\nimport rasterio as rio\n\n# Path to our raster file\ndata_file = \"./data/\"\n\n# ID of the raster we want to open\nID = \"LC08_L2SP_175083_20131218_20200912_02_T1\"\n\n# Open the red band (B4):\nB4 = rio.open(data_file + '{}/{}_SR_B4.TIF'.format(ID, ID))\n\n# Display the band\nfig, ax = plt.subplots(figsize=(10, 10))\nax.imshow(B4.read(1), cmap='pink')\n```", "```py\nprint(B4.crs) # Gives coordinate reference system\nprint(B4.transform) # Affine transformation matrix\n\n# convert array positions to UTM coordinates\nx,y = (1000,2000)\nutmx,utmy = B4.xy(y,x)\nprint(\"\\n\"+ str((utmx,utmy))) \n```", "```py\nfrom rasterio.warp import reproject, Resampling\nfrom affine import Affine\nimport numpy as np\n\ndef rotate_raster(in_file,out_file, angle, shift_x=0, shift_y=0,adj_width=0, adj_height=0):\n    \"\"\"Rotate a raster image and save it to disk.\n            in_file: path to input raster file\n            out_file: path to output raster file\n            angle: angle of rotation in degrees\n            shift_x: shift in x direction\n            shift_y: shift in y direction\n            adj_width: adjust width of output raster\n            adj_height: adjust height of output raster\"\"\"\n\n    with rio.open(in_file) as src:\n\n        # Get the old transform and crs\n        src_transform = src.transform \n        crs = src.crs\n\n        # Affine transformations for rotation and translation\n        rotate = Affine.rotation(angle)\n        trans_x = Affine.translation(shift_x,0)\n        trans_y = Affine.translation(0, -shift_y)\n\n        # Combine affine transformations\n        dst_transform = src_transform * rotate * trans_x * trans_y\n\n        # Get band data\n        band = np.array(src.read(1))\n\n        # Get the new shape\n        y,x = band.shape\n        dst_height = y + adj_height\n        dst_width = x + adj_width\n\n        # set properties for output\n        dst_kwargs = src.meta.copy()\n        dst_kwargs.update(\n            {\n                \"transform\": dst_transform,\n                \"height\": dst_height,\n                \"width\": dst_width,\n                \"nodata\": 0,  \n            }\n        )\n\n        # write to disk\n        with rio.open(out_file, \"w\", **dst_kwargs) as dst:\n            # reproject to new CRS\n\n            reproject(source=band,\n                        destination=rio.band(dst, 1),\n                        src_transform=src_transform,\n                        src_crs=crs,\n                        dst_transform=dst_transform,\n                        dst_crs=crs,\n                        resampling=Resampling.nearest)\n```", "```py\nfile = data_file + '{}/{}_SR_B4.TIF'.format(ID, ID)\nout_file = data_file + '{}/{}_SR_B4_rotated.TIF'.format(ID, ID)\n\nrotate_raster(file,out_file, 12, shift_x=600, shift_y=700)\n```", "```py\nout_file = data_file + '{}/{}_SR_B4_noshift.TIF'.format(ID, ID)\n\nrotate_raster(file,out_file, 12)\n```", "```py\n#With dimensions adjustment\nout_file_1 = data_file + '{}/{}_SR_B4_adjust.TIF'.format(ID, ID)\nrotate_raster(file,out_file_1, 30,800,2800,adj_width=800, adj_height=800)\n\n#Without dimensions adjustment\nout_file_2 = data_file + '{}/{}_SR_B4_noadjust.TIF'.format(ID, ID)\nrotate_raster(file,out_file_2, 30,800,2800)\n```"]