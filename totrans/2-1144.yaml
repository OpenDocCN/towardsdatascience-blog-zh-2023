- en: How to Create Beautiful Bar Charts with Seaborn and Matplotlib (Including Animation)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-create-beautiful-bar-charts-with-seaborn-and-matplotlib-including-animation-c2bc9ade1d7c](https://towardsdatascience.com/how-to-create-beautiful-bar-charts-with-seaborn-and-matplotlib-including-animation-c2bc9ade1d7c)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Graph Tutorial
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A data visualization tutorial for Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@oscarleo?source=post_page-----c2bc9ade1d7c--------------------------------)[![Oscar
    Leo](../Images/7733c9147bad2875a35155fca3903aa8.png)](https://medium.com/@oscarleo?source=post_page-----c2bc9ade1d7c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c2bc9ade1d7c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c2bc9ade1d7c--------------------------------)
    [Oscar Leo](https://medium.com/@oscarleo?source=post_page-----c2bc9ade1d7c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c2bc9ade1d7c--------------------------------)
    ·7 min read·Jun 15, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0a763b4611b2c631030faccd3c320cbe.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph created by the author
  prefs: []
  type: TYPE_NORMAL
- en: Hi, and welcome to my first Matplotlib and Seaborn tutorial. Today, I will show
    you how to turn a default bar chart into a stunning visual with icons and animation.
  prefs: []
  type: TYPE_NORMAL
- en: Let me know if you like this kind of content. If that’s the case, I can create
    more of the same! :)
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the code and preprocessed data in this repository: [simple-bar-chart-tutorial](https://github.com/oscarleoo/simple-bar-chart-tutorial).'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Creating a default bar chart'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this tutorial, I’ve created a simple dataset with the total number of stars
    over time for three popular open-source deep-learning frameworks (`Tensorflow`
    , `PyTorch` , and `Keras`).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fbc9983d68b8d3d52d22ac17ccfe9c15.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by the author
  prefs: []
  type: TYPE_NORMAL
- en: And here’s a simple function that creates a simple barplot for one row in the
    DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: To create a first visual, I run the code above like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here’s the default bar chart I get if I run this function for the last row in
    the dataset with the color orange.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/71e1b79a4cd419a70a95e19b156d00dd.png)'
  prefs: []
  type: TYPE_IMG
- en: Bar chart created by the author
  prefs: []
  type: TYPE_NORMAL
- en: In the following steps, I will create additional functions that we can run together
    with the code above to improve the charts.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try to create something more beautiful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Creating a theme'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, I want to create a function that allows me to test different colors and
    fonts for my charts.
  prefs: []
  type: TYPE_NORMAL
- en: There are a ton of methods in both Matplotlib and Seaborn that will enable you
    to alter the looks of your graphs.
  prefs: []
  type: TYPE_NORMAL
- en: I prefer to first create a theme by using `sns.set_style()`. Here’s a code snippet
    I use to create a new theme quickly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There are a few more options for `sns.set_style()`, and you might want to use
    it differently. But this is the setup that works best for me.
  prefs: []
  type: TYPE_NORMAL
- en: I often go to [colorhunt.co](https://colorhunt.co) or [canva.com](https://www.canva.com/colors/color-palettes)
    for inspiration to create a color scheme. When I have base colors I like, I go
    to [coolors.co](https://coolors.co/) if I need a few more.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s the color palette I created for this tutorial (And yes, I like purple).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/16859174bd444096d52ae74915938758.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by the author
  prefs: []
  type: TYPE_NORMAL
- en: My font of choice is “PT Mono”, and with that decision, I can run the following
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If I now run the original code to create a bar chart, I get the following.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/af163bf5e829f5021c670cc5a3257d7c.png)'
  prefs: []
  type: TYPE_IMG
- en: Bar chart created by the author
  prefs: []
  type: TYPE_NORMAL
- en: It’s a clear improvement, but not good enough. Let’s continue by formatting
    the title text and the axes labels.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Text formatting'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing I notice is that the axes labels need to be larger. All information
    displayed in a chart should be easy to see straight away.
  prefs: []
  type: TYPE_NORMAL
- en: And I don’t like the way the numbers look on the x-axis. Instead of writing
    75000, I want to write 75K to get a less intimidating look.
  prefs: []
  type: TYPE_NORMAL
- en: That’s why I created this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: For the title, I add parameters to increase the font size and adjust the position.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s the code to create the chart with my new modifications.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: And here’s the result.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/28eea820ca81b91c76fcff470f51aad2.png)'
  prefs: []
  type: TYPE_IMG
- en: Bar chart created by the author
  prefs: []
  type: TYPE_NORMAL
- en: It’s starting to look pretty good, but now it’s time to add some icon magic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: Adding icons'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding images and icons to charts is fun but tricky. It’s not always straightforward
    to put them in the perfect location or with the ideal size.
  prefs: []
  type: TYPE_NORMAL
- en: The following function adds icons to the end of each bar in my graph by using
    `xycoords="data"` and the values from my DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: The `boxstyle` parameter inside `bboxprops` creates a white circular background.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: I want to put the icon on a white circle and add a border in the same dark purple
    as the chart background.
  prefs: []
  type: TYPE_NORMAL
- en: So far, I haven’t found a good way to handle the `zoom` parameter dynamically,
    so I tune it manually to get the correct sizes.
  prefs: []
  type: TYPE_NORMAL
- en: Now my code for creating the chart looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: And this is what I get.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/01dfe35feb8f42b8b302a71ad09db829.png)'
  prefs: []
  type: TYPE_IMG
- en: Bar chart created by the author
  prefs: []
  type: TYPE_NORMAL
- en: To add the star, I’ve created another function that adds a custom icon anywhere
    on the chart using `xycoords="axes fraction"`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this next trick, I make room for the star icon by adding additional spaces
    to the title and adjusting the `x` and `y` parameters to place the icon in the
    correct location.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now our bar chart looks like this, and we’re almost finished.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5b8829c09db2e4836942f792e9ed87bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Bar chart created by the author
  prefs: []
  type: TYPE_NORMAL
- en: It’s looking excellent, but now I want to turn the chart into a more versatile
    format.
  prefs: []
  type: TYPE_NORMAL
- en: And let’s do something about that squeezed look by adding some padding.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 5: Turning the chart into an Image'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this part, I’ve created a function that takes the figure and turns it into
    a PIL Image. A PIL Image is easier to work with for the last steps of our tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: I’ve also created the following function to add padding around the chart.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here’s a new version of the code to generate the chart where I’ve replaced the
    standard `plt.show()` with our new methods.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: And here’s the result.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0a763b4611b2c631030faccd3c320cbe.png)'
  prefs: []
  type: TYPE_IMG
- en: Bar chart created by the author
  prefs: []
  type: TYPE_NORMAL
- en: Fantastic!
  prefs: []
  type: TYPE_NORMAL
- en: We’ve now turned the default bar chart into something much more beautiful.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s finish things off with a bonus section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bonus: Creating an animation'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because we’ve separated the code into reusable functions, it’s pretty easy to
    create an animation.
  prefs: []
  type: TYPE_NORMAL
- en: All we have to do is to run the code multiple times with different values and
    stitch the frames together.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s a for loop where I take 200 of the last 2000 rows in the dataset. I’m
    also fixing the x-axis by setting `xlim=(0, 185000)` to avoid flickering values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Next, I use `imageio` to create a GIF.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Here’s the result.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fbbc22098563ad0256383123f7151ed3.png)'
  prefs: []
  type: TYPE_IMG
- en: Visualization created by the author
  prefs: []
  type: TYPE_NORMAL
- en: That marks the end of this tutorial, and I hope you liked it. If you did, please
    share this story and subscribe to my [channel](https://medium.com/@oscarleo).
  prefs: []
  type: TYPE_NORMAL
- en: 'You should also follow me on Twitter: [@oscarle3o](https://twitter.com/oscarl3o)'
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading.
  prefs: []
  type: TYPE_NORMAL
- en: See you next time! :)
  prefs: []
  type: TYPE_NORMAL
