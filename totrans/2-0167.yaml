- en: A Brief Introduction to SciKit Pipelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/a-brief-introduction-to-scikit-pipelines-888edc86da9b](https://towardsdatascience.com/a-brief-introduction-to-scikit-pipelines-888edc86da9b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And why you should start using them.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@jodancker?source=post_page-----888edc86da9b--------------------------------)[![Jonte
    Dancker](../Images/29e37a1a1cabc15cfb90a860b2931f03.png)](https://medium.com/@jodancker?source=post_page-----888edc86da9b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----888edc86da9b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----888edc86da9b--------------------------------)
    [Jonte Dancker](https://medium.com/@jodancker?source=post_page-----888edc86da9b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----888edc86da9b--------------------------------)
    ·7 min read·Aug 23, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f2987996b1c9e2cc8de667615c02c9c0.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Sigmund](https://unsplash.com/@sigmund?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Have you ever trained a machine learning model and your predictions looked too
    good to be true? But then you realized that you had some data leakage between
    your training and testing data?
  prefs: []
  type: TYPE_NORMAL
- en: Or have you had many pre-processing steps to prepare your data so that it was
    difficult to transfer the pre-processing steps from your model training into production
    to make actual predictions?
  prefs: []
  type: TYPE_NORMAL
- en: Or your pre-processing becomes messy and it is hard to share you code in a readable
    and easy to understand manner?
  prefs: []
  type: TYPE_NORMAL
- en: Then you might want to try `scikit-learn`’s Pipeline. The Pipeline is an elegant
    solution to set up your workflow for ML training, testing, and in production,
    making your life easier and your results more reproducible.
  prefs: []
  type: TYPE_NORMAL
- en: But what is a pipeline, what are the benefits, and how do you set up a pipeline?
    I will go through these questions and give you some code examples of the building
    blocks. By combining these building blocks you can build more sophisticated pipelines,
    which are tailored to your needs.
  prefs: []
  type: TYPE_NORMAL
- en: What is a Pipeline?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A pipeline allows you to assemble several steps in your ML workflow that sequentially
    transform your data before passing the data to an estimator. Hence, a pipeline
    can consist of pre-processing, feature engineering and feature selection steps
    before passing the data to a final estimator for classification or regression
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Why should I use a Pipeline?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In general, using a pipeline makes your life easier and speeds up the development
    of your ML models. This is because a pipeline
  prefs: []
  type: TYPE_NORMAL
- en: leads to cleaner and better understandable code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: is easy to replicate and understand data workflows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: is easier to read and adjust
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: makes data preparation faster as the pipeline automates data preparation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: helps avoid data leakage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: allows hyperparameter optimization to be run over all estimators and parameters
    in the pipeline at once
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: is convenient as you only have to call `fit()` and `predict()` once to run your
    entire data pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After you have trained and optimized your model and are happy with the results,
    you can easily save the trained pipeline. Then, whenever you want to run your
    model, just load the pre-trained pipeline and you are ready to do some inference.
    With this you can easily share your model in a very clean way, which is easy to
    replicate and understand.
  prefs: []
  type: TYPE_NORMAL
- en: How do I set up a Pipeline?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting up a pipeline with `scikit-learn` is very simple and straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: '`scikit-learn`’s `Pipeline` uses a list of key-value pairs which contains the
    transformers you want to apply on your data as values. The keys you can choose
    arbitrarily. The keys can be used to access the parameters of the transformers,
    for example, when running a grid search during a hyperparameter optimization.
    As the transformers are stored in a list you can also access the transformers
    by indexing.'
  prefs: []
  type: TYPE_NORMAL
- en: To fit data on your pipeline and make predictions you can then run `fit()` and
    `predict()` as you would to with any transformer or regressor in `scikit-learn`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A very simple pipeline could look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`scikit-learn`, however, makes your life even easier if you do not want to
    enter key values for your transformers. Instead you can just use the `make_pipeline()`
    function and `scikit-learn` sets the names based on the transformer’s class name.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: That’s it. With this you have quickly set up a simple pipeline that you can
    start using to train a model and run predictions with. If you want to have a look
    at how your pipeline looks, you can just print the pipeline and `scikit-learn`
    shows you an interactive view of the pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: But what if you want to build something more complex and customizable? For example,
    handle categorical and numerical values differently, add features or transform
    the target value.
  prefs: []
  type: TYPE_NORMAL
- en: 'No worries, `scikit-learn` provides additional functionality with which you
    can create more custom pipelines and bring your pipelines to the next level. These
    functions are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ColumnTransformer`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FeatureUnion`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TransformedTargetRegressor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I will go through them and show you examples of how to use them.
  prefs: []
  type: TYPE_NORMAL
- en: Transforming selected features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have different kinds of features, e. g., continuous and categorical,
    you probably want to transform these features differently. For example, scale
    the continuous features while one-hhot-encode the categorical features.
  prefs: []
  type: TYPE_NORMAL
- en: You could do these pre-processing steps before passing your features into the
    pipeline. But by doing so you would not be able to include these pre-processing
    steps and parameters in your hyperparameter search later. Also, including them
    in the pipeline makes handling your ML model much easier.
  prefs: []
  type: TYPE_NORMAL
- en: To apply a transformation or even a sequence of transformations only to selected
    columns you can use the `ColumnTransformer`. The use is very similar to `Pipeline`
    as instead of passing a key-value pair to `steps` we just pass the same pairs
    to `transformers`. We can then include the created transformer as one step in
    our pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Since we only want to run the transformation on certain columns, we need to
    pass these columns in the pipeline. Moreover, we can let the `ColumnTransformer`
    know what we want to do with the remaining columns. For example, if you want to
    keep the columns that are not changed by the transformer you need to set `remainder`
    to `passthrough`. Otherwise, the columns get dropped. Instead of doing nothing
    or dropping the columns you could also transform the remaining columns by passing
    a transformer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: from sklearn.compose import ColumnTransformer
  prefs: []
  type: TYPE_NORMAL
- en: from sklearn.impute import SimpleImputer
  prefs: []
  type: TYPE_NORMAL
- en: from sklearn.pipeline import Pipeline
  prefs: []
  type: TYPE_NORMAL
- en: from sklearn.preprocessing import MinMaxScaler, OneHotEncoder
  prefs: []
  type: TYPE_NORMAL
- en: categorical_transformer = Pipeline(steps=[("encode", OneHotEncoder())])
  prefs: []
  type: TYPE_NORMAL
- en: numerical_transformer = Pipeline(
  prefs: []
  type: TYPE_NORMAL
- en: steps=[("imputation", SimpleImputer()), ("scaling", MinMaxScaler())]
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: preprocessor = ColumnTransformer(
  prefs: []
  type: TYPE_NORMAL
- en: transfomers=[
  prefs: []
  type: TYPE_NORMAL
- en: ("numeric", numerical_transformer),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ("categoric", categorical_transformer, ["col_name"]),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: pipeline = Pipeline(steps=["preprocesssing", preprocessor])
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: from sklearn.compose import FeatureUnion
  prefs: []
  type: TYPE_NORMAL
- en: from sklearn.pipeline import Pipeline
  prefs: []
  type: TYPE_NORMAL
- en: preprocessor = (
  prefs: []
  type: TYPE_NORMAL
- en: FeatureUnion(
  prefs: []
  type: TYPE_NORMAL
- en: '['
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ("moving_Average", MovingAverage(window=30)),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ("numerical", numerical_pipeline),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ']'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ),
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: pipeline = Pipeline(steps=["preprocesssing", preprocessor])
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: from sklearn.compose import TransformedTargetRegressor
  prefs: []
  type: TYPE_NORMAL
- en: from sklearn.impute import SimpleImputer
  prefs: []
  type: TYPE_NORMAL
- en: from sklearn.pipeline import Pipeline
  prefs: []
  type: TYPE_NORMAL
- en: from sklearn.preprocessing import MinMaxScaler
  prefs: []
  type: TYPE_NORMAL
- en: regressor = TransformedTargetRegressor(
  prefs: []
  type: TYPE_NORMAL
- en: regressor=model,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: func=np.log1p,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: inverse_func=np.expm1
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: pipeline = Pipeline(
  prefs: []
  type: TYPE_NORMAL
- en: steps=[
  prefs: []
  type: TYPE_NORMAL
- en: ("imputer", SimpleImputer()),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ("scaler", MinMaxScaler()),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ("regressor", regressor)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ']'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: pipeline.fit(X_train, y_train)
  prefs: []
  type: TYPE_NORMAL
- en: y_pred = pipeline.predict(X_test)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: from sklearn.base import BaseEstimator, TransformerMixin
  prefs: []
  type: TYPE_NORMAL
- en: from sklearn.impute import SimpleImputer
  prefs: []
  type: TYPE_NORMAL
- en: from sklearn.pipeline import Pipeline
  prefs: []
  type: TYPE_NORMAL
- en: from sklearn.preprocessing import MinMaxScaler
  prefs: []
  type: TYPE_NORMAL
- en: 'class MovingAverage(BaseEstimator, TransformerMixin):'
  prefs: []
  type: TYPE_NORMAL
- en: 'def __init__(self, window=30):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: self.window = window
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def fit(self, X, y=None):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return self
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def transform(self, X, y=None):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return X.rolling(window=self.window, min_periods=1, center=False).mean()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: pipeline = Pipeline(
  prefs: []
  type: TYPE_NORMAL
- en: steps=[
  prefs: []
  type: TYPE_NORMAL
- en: ("ma", MovingAverage(window=30)),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ("imputer", SimpleImputer()),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ("scaler", MinMaxScaler()),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ("regressor", model),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: pipeline.fit(X_train, y_train)
  prefs: []
  type: TYPE_NORMAL
- en: y_pred = pipeline.predict(X_test)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: from sklearn import set_config
  prefs: []
  type: TYPE_NORMAL
- en: set_config(transform_output = "pandas")
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: When running a hyperparameter optimization or when checking single parameters
    of your pipeline, it can be helpful to access the parameters directly. To access
    parameters you can use the `<estimator>__<parameter>`syntax. For example, in the
    above example, of the moving average we could access the window width of the MovingAverage
    transformer by calling `pipeline.set_params(pipeline__ma_window=7)`.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using `scikit-learn`’s Pipeline can make your life a lot easier when developing
    new ML models and setting up the pre-processing steps. Besides having many benefits,
    setting up a Pipeline is also simple and straightforward. Nevertheless, you can
    build sophisticated and customizable pre-processing Pipelines in which only your
    creativity sets the boundaries.
  prefs: []
  type: TYPE_NORMAL
- en: If you liked this article or have any questions, feel free to leave a comment
    or reach out to me. I am also interested in your experiences with `scikit-learn`’s
    Pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Do you want to read more about Pipelines, check out the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://scikit-learn.org/stable/modules/compose.html#pipeline](https://scikit-learn.org/stable/modules/compose.html#pipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
