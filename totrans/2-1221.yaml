- en: How to Perform Image Segmentation with Thresholding Using OpenCV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-perform-image-segmentation-with-thresholding-using-opencv-b2a78abb07ac](https://towardsdatascience.com/how-to-perform-image-segmentation-with-thresholding-using-opencv-b2a78abb07ac)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/d02ca3281b7d0e272bd0b812d2f46411.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Lysander Yuen](https://unsplash.com/@lysanderyuen?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Simple, Otsu, and Adaptive Thresholding Implementation with Examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://rashida00.medium.com/?source=post_page-----b2a78abb07ac--------------------------------)[![Rashida
    Nasrin Sucky](../Images/42bd057e8eca255907c43c29a498f2ca.png)](https://rashida00.medium.com/?source=post_page-----b2a78abb07ac--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b2a78abb07ac--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b2a78abb07ac--------------------------------)
    [Rashida Nasrin Sucky](https://rashida00.medium.com/?source=post_page-----b2a78abb07ac--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b2a78abb07ac--------------------------------)
    ·6 min read·Jan 12, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: One of the most commonly used segmentation techniques is thresholding. It is
    widely used in computer vision and is very useful to separate the object that
    we are interested in from the background. This article will focus on the thresholding
    techniques in OpenCV.
  prefs: []
  type: TYPE_NORMAL
- en: There are three different types of thresholding. We will know how they work
    at a high level and basically focus on how to use them in OpenCV with examples.
  prefs: []
  type: TYPE_NORMAL
- en: What is Thresholding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Thresholding is the process of binarization of an image. If you get confused
    between grayscale images and binary images as I used to in my beginning, in grayscale
    images, there might be an array of shades. But in the binary images, the pixel
    values are either 0 or 255.
  prefs: []
  type: TYPE_NORMAL
- en: Simple Thresholding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the most basic type of thresholding and is harder to use in a lot of
    practical applications. But still, we need to start with learning this one to
    understand how thresholding actually works. We will see how simple thresholding
    can work well.
  prefs: []
  type: TYPE_NORMAL
- en: '**Simple thresholding can work well in very controlled lighting conditions
    where there is high contrast between the foreground (the object we are interested
    in, in the image) and background.** The hardest part about simple thresholding
    is, we need to manually supply the threshold values which may take a lot of trials.
    In that way, it may become very time-consuming. Let’s work on an example.'
  prefs: []
  type: TYPE_NORMAL
- en: We will use the following image for this tutorial. Please feel free to save
    this image and follow along.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f6aa932fe5bacf571bc1c77e437b73f9.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Lucas Hoang](https://unsplash.com/@zuizuii?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to import the necessary libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Reading the image using OpenCV as an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As thresholding is binarization, we start with a grayscale image. Also, using
    a Gaussian blur on the grayscale image will help get rid of some high-frequency
    edges and noises.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the simple thresholding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The first parameter is the blurred image,
  prefs: []
  type: TYPE_NORMAL
- en: 45 is the threshold value that says if the pixel value is greater than 45 it
    will become 255, otherwise 0\. So, the third parameter is 255\. If you choose
    a value different than 255, such as 200, the pixels greater than 45 will become
    200**.**
  prefs: []
  type: TYPE_NORMAL
- en: Please feel free to try with a different value and see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: I decided to use a threshold value of 45 after a lot of trials.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'So, it took some time. Here is what ‘thresh’ looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/479f2fcf937fe14d2e88db3061d56355.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use cv2.THRESH_BINARY_INV as well which will do the otherwise. Let’s
    see how it looks if the same threshold value 45 is used with cv2.THRESH_BINARY_INV:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bccfe144b6d159b97e4a6b2ff83b550b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: In this case, when the pixel is greater than the threshold value of 45, it becomes
    0 and 255 otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: As I mentioned before I had to go through quite a few trials to find that threshold
    value of 45.
  prefs: []
  type: TYPE_NORMAL
- en: But if the lighting conditions is different for the same picture this threshold
    value wouldn’t work.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: That’s why in a real-world application where we may not have prior knowledge
    about the lighting condition, it is hard to work this way. **We need to find an
    optimum threshold value that can scale.**
  prefs: []
  type: TYPE_NORMAL
- en: Otsu Thresholding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Otsu’s thresholding, OpenCV finds an optimum threshold value for you. It
    takes the grayscale image and computes the optimum threshold value, T.
  prefs: []
  type: TYPE_NORMAL
- en: Here is a high-level overview of how Otsu’s method chooses the threshold value.
    If a distribution is made with all the pixel values of a grayscale image, Otsu’s
    method finds a threshold that optimally separates the peaks of the distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Look, here we used 0 as the threshold value. Simply because Ostu’s will find
    the optimal threshold value for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see what is the optimal threshold value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the image of the ‘threshOtsu’:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/450c46ecd70501a73106f19904be1302.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: We wanted to focus on the meter reading part, right? So, how can we do that
    from this image? Just masking the original image using bitwise_and operation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ec690976b9604baa3dcab02737f3be3a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Lots of noises in the background are smoothed out.
  prefs: []
  type: TYPE_NORMAL
- en: The problem with both simple and Otsu’s thresholding methods is they use a single
    thresholding value all over the image which may not be a good idea. The thresholding
    value that works well for one area of the image may not be good for the other
    areas of the image.
  prefs: []
  type: TYPE_NORMAL
- en: Adaptive Thresholding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The adaptive thresholding method considers a small set of pixels and computes
    a threshold for each small region of the image. We will explain some more after
    this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here the second parameter 255 means, when the pixel is greater than the local
    threshold it becomes 255\. The fifth parameter 17 says it will be a 17x17 region
    of the image to compute a local threshold. Finally, 3 is a constant. This value
    is subtracted from the computed threshold value. Based on your project you need
    to choose a region of the image to compute the local threshold and the constant.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what the image looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/06fe2f7ffae29bdf7e1e0191dd2d6b7e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: As per the discussion above, adaptive thresholding also needs some trials to
    find the last two parameters. But still, the method itself does a lot for us.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All three thresholding methods are important. Each of them may come in handy
    based on your situation or your project. Please feel free to try different images.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to follow me on [Twitter](https://twitter.com/rashida048) and like
    my [Facebook](https://www.facebook.com/rashida.smith.161) page.
  prefs: []
  type: TYPE_NORMAL
- en: More Reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](/morphological-operations-for-image-preprocessing-in-opencv-in-detail-15fccd1e5745?source=post_page-----b2a78abb07ac--------------------------------)
    [## Morphological Operations for Image Preprocessing in OpenCV, in Detail'
  prefs: []
  type: TYPE_NORMAL
- en: Erosion, dilation, opening, closing, morphological gradient, tophat / whitehat,
    and blackhat explained with examples
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/morphological-operations-for-image-preprocessing-in-opencv-in-detail-15fccd1e5745?source=post_page-----b2a78abb07ac--------------------------------)
    [](/some-basic-image-preprocessing-operations-for-beginners-in-python-7d297316853b?source=post_page-----b2a78abb07ac--------------------------------)
    [## Some Basic Image Preprocessing Operations for Beginners in Python
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenCV for beginners: move or translate, resize, and cropping'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/some-basic-image-preprocessing-operations-for-beginners-in-python-7d297316853b?source=post_page-----b2a78abb07ac--------------------------------)
    [](/a-step-by-step-tutorial-to-develop-a-multi-output-model-in-tensorflow-ec9f13e5979c?source=post_page-----b2a78abb07ac--------------------------------)
    [## A Step-by-Step Tutorial to Develop a Multi-Output Model in TensorFlow
  prefs: []
  type: TYPE_NORMAL
- en: With complete code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/a-step-by-step-tutorial-to-develop-a-multi-output-model-in-tensorflow-ec9f13e5979c?source=post_page-----b2a78abb07ac--------------------------------)
    [](https://pub.towardsai.net/some-simple-but-advanced-styling-in-pythons-matplotlib-visualization-107f3be56a24?source=post_page-----b2a78abb07ac--------------------------------)
    [## Some Simple But Advanced Styling in Python’s Matplotlib Visualization
  prefs: []
  type: TYPE_NORMAL
- en: Adding Some Extra Flavor to Your Python Plots
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pub.towardsai.net](https://pub.towardsai.net/some-simple-but-advanced-styling-in-pythons-matplotlib-visualization-107f3be56a24?source=post_page-----b2a78abb07ac--------------------------------)
    [](/precision-recall-and-f1-score-of-multiclass-classification-learn-in-depth-6c194b217629?source=post_page-----b2a78abb07ac--------------------------------)
    [## Precision, Recall, and F1 Score of Multiclass Classification — Learn in Depth
  prefs: []
  type: TYPE_NORMAL
- en: Manual Calculation From a Confusion Matrix and the Syntax of sklearn Library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/precision-recall-and-f1-score-of-multiclass-classification-learn-in-depth-6c194b217629?source=post_page-----b2a78abb07ac--------------------------------)
    [](/how-to-make-animated-and-racing-bar-plots-in-python-c5c7c3c648f7?source=post_page-----b2a78abb07ac--------------------------------)
    [## How to Make Animated and Racing Bar Plots in Python
  prefs: []
  type: TYPE_NORMAL
- en: Complete Working Code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-make-animated-and-racing-bar-plots-in-python-c5c7c3c648f7?source=post_page-----b2a78abb07ac--------------------------------)
  prefs: []
  type: TYPE_NORMAL
