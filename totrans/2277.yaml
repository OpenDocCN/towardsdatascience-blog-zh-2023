- en: Using React to Build Interactive Interfaces to Exciting Dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/using-react-to-build-interactive-interfaces-to-exciting-dataset-c01691a5fc38](https://towardsdatascience.com/using-react-to-build-interactive-interfaces-to-exciting-dataset-c01691a5fc38)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Data Tutorial
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating a more dynamic data visualization experience using web development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@oscarleo?source=post_page-----c01691a5fc38--------------------------------)[![Oscar
    Leo](../Images/7733c9147bad2875a35155fca3903aa8.png)](https://medium.com/@oscarleo?source=post_page-----c01691a5fc38--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c01691a5fc38--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c01691a5fc38--------------------------------)
    [Oscar Leo](https://medium.com/@oscarleo?source=post_page-----c01691a5fc38--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c01691a5fc38--------------------------------)
    ¬∑5 min read¬∑Sep 19, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Demo video of the interface
  prefs: []
  type: TYPE_NORMAL
- en: On the side of my full-time job as the CEO of a small machine-learning company,
    my hobby is creating beautiful data visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: I usually do that using Matplotlib, but I wanted to create a more interactive
    experience this time.
  prefs: []
  type: TYPE_NORMAL
- en: Since I enjoy web development and design, I decided to create a React application
    for the [Population Estimates And Projections](https://datacatalog.worldbank.org/search/dataset/0037655/Population-Estimates-and-Projections)
    dataset from the World Bank.
  prefs: []
  type: TYPE_NORMAL
- en: It‚Äôs a fascinating dataset where you can look at population pyramids for all
    countries and regions from 1960 to 2022, including projections to 2050\. It‚Äôs
    licensed under Creative Commons Attribution 4.0.
  prefs: []
  type: TYPE_NORMAL
- en: It‚Äôs also a dataset well suited for an interactive interface where people can
    change years and regions quickly.
  prefs: []
  type: TYPE_NORMAL
- en: In this story, I‚Äôll share insights from my work and what I learned.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to test the solution, you can find it here: [https://datawonder.io/population-pyramids](https://datawonder.io/population-pyramids)'
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 1: Preparing the data'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I wanted to create a simple and fast backend that serves data to the front end
    without doing any time-consuming preprocessing.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, my idea was to do all the data ahead of time and load it all into memory
    when the applications start.
  prefs: []
  type: TYPE_NORMAL
- en: 'The World Bank data always have a set of indicators, and the ones I want have
    the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: Population ages <age-group>, <gender>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There are 17 age groups ranging from 0‚Äì4 and 80+. Each indicator has a separate
    column for every year, like in the pandas data frame below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a27abb435cc7cdb1505d8473c232b234.png)'
  prefs: []
  type: TYPE_IMG
- en: Since I knew exactly what parts of the data I needed and didn‚Äôt want to do any
    filtering or other operations on the backend.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, I decided to turn the DataFrame into a JSON file with the following
    format.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: That‚Äôs it for preparing the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 2: Creating the backend'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The backend is the most straightforward part of this web application and only
    serves the JSON data for the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: When the app starts, I load the preprocessed JSON into memory as a Python dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: I decided to use FastAPI because it‚Äôs one of the viable options and makes it
    easy to create endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: When the user sends a query, I can instantly access the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: I also have an endpoint to list all available countries and areas.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: That‚Äôs every single line of code I have on my backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 3: Creating the user interface'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building the front end was the most time-consuming aspect of this project. I
    can‚Äôt go through every line of code in detail.
  prefs: []
  type: TYPE_NORMAL
- en: My goal was to create a minimalistic application that‚Äôs both responsive and
    easy to use because many data interfaces are too complicated.
  prefs: []
  type: TYPE_NORMAL
- en: 'I use two primary JavaScript libraries to make my life easier: [Recharts](https://recharts.org/en-US)
    and [Chakra](https://chakra-ui.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: I won‚Äôt go into much detail on Recharts because they have excellent [documentation](https://recharts.org/en-US/api)
    describing everything you can do.
  prefs: []
  type: TYPE_NORMAL
- en: In essence, they provide a React component called `ResponsiveContainer` that
    serves as the base of your charts.
  prefs: []
  type: TYPE_NORMAL
- en: You can then define things like `BarChart`, `YAxis`, `XAxis`, `Tooltip`, and
    `Legend` to create the perfect graph.
  prefs: []
  type: TYPE_NORMAL
- en: The structure looks like this; all components have several properties to get
    the styling right.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: For example, I set my `BarChart` component to have a verticle layout and stack
    the bars on ‚Äúsign‚Äù to make them go in opposite directions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `prepare_data()` the function takes the population data for one area and
    year and turns it into a list of objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here‚Äôs what each chart looks like.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2499679d768a1767896735042e6f4483.png)'
  prefs: []
  type: TYPE_IMG
- en: I set additional properties for other components to style the axis labels and
    grid, among other things.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 4: Deploying the application'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I decided to use the Digital Ocean apps platform as my deployment, but it‚Äôs
    probably not the cheapest option.
  prefs: []
  type: TYPE_NORMAL
- en: Their minimum backend service is way better than I require, but I plan to add
    additional endpoints for other datasets over time.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the frontend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you create your front end with `create-react-app`, you can point Digital
    Ocean to that repo, and it will build the application whenever you push your code
    to master.
  prefs: []
  type: TYPE_NORMAL
- en: You don‚Äôt need to create a Docker container or anything like that. It‚Äôs fantastic
    for people like me who are lazy regarding DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: It‚Äôs also perfect for this application because it doesn‚Äôt require anything fancy.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Static data visualizations are great, but sometimes, you want a more interactive
    experience allowing users to explore patterns themselves.
  prefs: []
  type: TYPE_NORMAL
- en: When that‚Äôs the case, it‚Äôs surprisingly easy to build simple React web applications
    that use open-source libraries to create charts and graphics.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, I shared some insight into how I created a user interface
    that allows users to look at age distributions for different countries and regions.
  prefs: []
  type: TYPE_NORMAL
- en: I hope that you got some inspiration to do a similar project yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading, and see you next time! üòä
  prefs: []
  type: TYPE_NORMAL
