["```py\npip install --upgrade scalecast\npip install tqdm\n```", "```py\nimport pandas as pd\nimport numpy as np\nfrom scalecast.Forecaster import Forecaster\nfrom scalecast import GridGenerator\nfrom scalecast.util import metrics, find_optimal_transformation\nfrom scalecast.notebook import tune_test_forecast\nfrom scalecast.SeriesTransformer import SeriesTransformer\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport time\nfrom tqdm.notebook import tqdm\n\navocados = pd.read_csv('avocado.csv',parse_dates = ['Date'])\nvolume = avocados.groupby('Date')['Total Volume'].sum()\n```", "```py\nval_len = 20\nfcst_len = 20\n\nvolume_sep = volume.iloc[-fcst_len:]\nvolume = volume.iloc[:-fcst_len]\n```", "```py\nf = Forecaster(\n    y = volume,\n    current_dates = volume.index,\n    future_dates = fcst_len,\n    test_length = val_len,\n    validation_length = val_len,\n    cis = True, # adjust the width using the cilevel attribute\n)\n```", "```py\ntransformer = SeriesTransformer(f)\nf = transformer.DiffTransform(1)\nf = transformer.DiffTransform(52) # seasonal differencing\n```", "```py\nf.auto_Xvar_select(\n    estimator='elasticnet',\n    alpha=.2,\n    max_ar=26,\n    monitor='ValidationMetricValue', # not test set\n    decomp_trend=False,\n)\n\nf\n```", "```py\nForecaster(\n    DateStartActuals=2016-01-10T00:00:00.000000000\n    DateEndActuals=2017-11-05T00:00:00.000000000\n    Freq=W-SUN\n    N_actuals=96\n    ForecastLength=20\n    Xvars=['AR1', 'AR2', 'AR3', 'AR4', 'AR5', 'AR6', 'AR7', 'AR8', 'AR9']\n    Differenced=0\n    TestLength=20\n    ValidationLength=20\n    ValidationMetric=rmse\n    ForecastsEvaluated=[]\n    CILevel=0.95\n    CurrentEstimator=None\n    GridsFile=Grids\n)\n```", "```py\nmodels = (\n    'mlr',\n    'elasticnet',\n    'ridge',\n    'knn',\n    'xgboost',\n    'lightgbm',\n    'gbt',\n) # these are all scikit-learn models or APIs\n\ntune_test_forecast(\n    f,\n    models,\n    dynamic_testing = fcst_len,\n)\n```", "```py\n# revert differencing\nf = transformer.DiffRevert(52)\nf = transformer.DiffRevert(1)\n\nfig, ax = plt.subplots(figsize=(12,6))\nf.plot(ci=True,models='top_1',order_by='TestSetRMSE',ax=ax)\nsns.lineplot(\n    y = 'Total Volume',\n    x = 'Date',\n    data = volume_sep.reset_index(),\n    ax = ax,\n    label = 'held-out actuals',\n    color = 'green',\n    alpha = 0.7,\n)\nplt.show()\n```"]