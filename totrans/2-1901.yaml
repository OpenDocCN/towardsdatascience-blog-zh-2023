- en: SQL Riddles to Test Your Wits
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的智慧的 SQL 谜题
- en: 原文：[https://towardsdatascience.com/sql-riddles-to-test-your-wits-8ce31202ae7f](https://towardsdatascience.com/sql-riddles-to-test-your-wits-8ce31202ae7f)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/sql-riddles-to-test-your-wits-8ce31202ae7f](https://towardsdatascience.com/sql-riddles-to-test-your-wits-8ce31202ae7f)
- en: Timestamps, dependent filters, and misbehaving left joins
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间戳、依赖过滤器和表现异常的左连接
- en: '[](https://mgsosna.medium.com/?source=post_page-----8ce31202ae7f--------------------------------)[![Matt
    Sosna](../Images/c3175c0dc62b795a8d0fa57532fb669b.png)](https://mgsosna.medium.com/?source=post_page-----8ce31202ae7f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8ce31202ae7f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8ce31202ae7f--------------------------------)
    [Matt Sosna](https://mgsosna.medium.com/?source=post_page-----8ce31202ae7f--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mgsosna.medium.com/?source=post_page-----8ce31202ae7f--------------------------------)[![Matt
    Sosna](../Images/c3175c0dc62b795a8d0fa57532fb669b.png)](https://mgsosna.medium.com/?source=post_page-----8ce31202ae7f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----8ce31202ae7f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----8ce31202ae7f--------------------------------)
    [Matt Sosna](https://mgsosna.medium.com/?source=post_page-----8ce31202ae7f--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----8ce31202ae7f--------------------------------)
    ·8 min read·Feb 22, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----8ce31202ae7f--------------------------------)
    ·阅读时长 8 分钟·2023年2月22日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/e1fc7bf3a6b50e65020f31e0892a018c.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e1fc7bf3a6b50e65020f31e0892a018c.png)'
- en: Photo by [Saffu](https://unsplash.com/@saffu?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Saffu](https://unsplash.com/@saffu?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: SQL is a deceptively simple language. Across its many dialects, users can query
    databases in a syntax similar to English. **What you see is what you get… until
    you don’t.**
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 是一种看似简单的语言。通过其多种方言，用户可以使用类似英语的语法查询数据库。**你看到的就是你得到的……直到你发现不是。**
- en: Every now and then I come across a query that produces a result completely different
    from what I expected, teaching me little nuances about the language. I’ve compiled
    three recent head-scratchers in this post, and I’ve arranged them as riddles to
    make them more interesting. Try to figure out the answer before reading the end
    of each section!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我时不时会遇到一些查询，它们的结果与我预期的完全不同，这教会了我一些语言中的细微差别。我在这篇文章中汇编了三个最近的难题，并将它们以谜题的形式排列，使其更有趣。尝试在阅读每个部分的结尾之前找出答案！
- en: I’ve also included quick [**common table expressions (CTEs)**](https://learnsql.com/blog/what-is-common-table-expression/)
    to generate the tables in each example, so you don’t need to try querying your
    company’s production tables! But to get really comfortable with SQL, I actually
    recommend creating your own database and tables to play with. Check out [this
    post](https://medium.com/towards-data-science/intermediate-sql-for-everyone-fe35c541147a)
    to learn how.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我还包含了快速的 [**公共表表达式（CTEs）**](https://learnsql.com/blog/what-is-common-table-expression/)
    来生成每个示例中的表格，因此你不需要尝试查询你公司的生产表格！但要真正熟练掌握 SQL，我实际上建议你创建自己的数据库和表格进行练习。查看 [这篇文章](https://medium.com/towards-data-science/intermediate-sql-for-everyone-fe35c541147a)
    了解如何操作。
- en: Note that all queries are in Postgres — you may get different results in a different
    dialect. Finally, an obligatory note that the actual data and topics in each query
    are just illustrative examples. 🙂
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，所有查询均为 Postgres 语法 —— 在其他方言中你可能会得到不同的结果。最后，必须说明的是，每个查询中的实际数据和主题仅为示例。 🙂
- en: '![](../Images/a6561e629797d06859c10d601195dcd0.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a6561e629797d06859c10d601195dcd0.png)'
- en: Photo by [Akram Huseyn](https://unsplash.com/@akramhuseyn?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Akram Huseyn](https://unsplash.com/@akramhuseyn?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: 'Riddle 1: Timestamp Specificity'
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谜题 1：时间戳的具体性
- en: 'Imagine we have a table called `purchases` with purchase IDs, amounts, and
    times the purchase were made. Let’s say it looks like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个名为 `purchases` 的表，其中包含购买 ID、金额以及购买时间。假设它看起来是这样的：
- en: '![](../Images/e841213f41d988b969e1bf43b3a2f006.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e841213f41d988b969e1bf43b3a2f006.png)'
- en: Image by author
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: As a CTE, this would look something like this. Note that we need to specify
    that the `dt` column is a timestamp so it isn’t interpreted as a string. We also
    only need to specify the data types for one of the rows; the rest are inferred.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 作为CTE，它大致看起来像这样。请注意，我们需要指定`dt`列是时间戳，以免被解释为字符串。我们只需要为其中一行指定数据类型；其余的会被推断。
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now let’s calculate the sum of purchases made on Feb 15\. We can write a query
    like the one below:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们计算2月15日的购买总额。我们可以写一个如下的查询：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We mysteriously receive the following response.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们神秘地收到以下响应。
- en: '![](../Images/f08b7fac27108cd6b6875f91a1d0851e.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f08b7fac27108cd6b6875f91a1d0851e.png)'
- en: Image by author
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'What happened? There were three purchases made on Feb 15: IDs 1, 2, and 3\.
    The sum should therefore be $26.97\. Instead, only the first purchase was counted.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么？2月15日有三笔购买：ID 1、2和3。总和应该是$26.97。然而，只计算了第一笔购买。
- en: Hint
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示
- en: If you change the filter to `2023-02-16`, no rows are returned.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将过滤器更改为`2023-02-16`，则没有行返回。
- en: Answer
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: The `dt` column format is a timestamp that includes both date and time. Our
    `WHERE` filter only specifies the date. Rather than rejecting this query, Postgres
    automatically reformats the date string to `2023-02-15 00:00:00`. This matches
    only the first transaction in the table, so we’re therefore taking only the sum
    of one row.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`dt`列格式是包含日期和时间的时间戳。我们的`WHERE`过滤器只指定了日期。Postgres不会拒绝此查询，而是自动将日期字符串重新格式化为`2023-02-15
    00:00:00`。这仅匹配表中的第一笔交易，因此我们只计算了一行的总和。'
- en: If we wanted to select all rows corresponding to Feb 15, we should first cast
    the timestamp to date.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想选择对应于2月15日的所有行，我们应该首先将时间戳转换为日期。
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We now get the expected result.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在得到了预期的结果。
- en: '![](../Images/277c9dfd7a79e6c3539c7dcc37eb6ea4.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/277c9dfd7a79e6c3539c7dcc37eb6ea4.png)'
- en: Image by author
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: '![](../Images/1bcdb45db73942c600750ed2a31e8721.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1bcdb45db73942c600750ed2a31e8721.png)'
- en: Photo by [Womanizer Toys](https://unsplash.com/es/@womanizer?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[Womanizer Toys](https://unsplash.com/es/@womanizer?utm_source=medium&utm_medium=referral)提供，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: 'Riddle 2: Dependent vs. independent filters'
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谜题 2：依赖过滤器与独立过滤器
- en: Alright, next riddle. We have a table called `users`, and our goal is to **remove
    all rows that meet *any one* of three conditions.** In the table below, for example,
    let’s say that we want to only return tenured and active users, i.e., ones who
    *have* logged in during the last 28 days, *have* posted before, and are *not*
    a new account.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，下一个谜题。我们有一个名为`users`的表，我们的目标是**删除符合*任意一个*三种条件的所有行**。在下表中，例如，假设我们只想返回有职位并且活跃的用户，即那些*在过去28天内*登录过，*曾经*发过帖，并且*不是*新账户。
- en: '![](../Images/b300a25500f94c581ecc23ad3a84da85.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b300a25500f94c581ecc23ad3a84da85.png)'
- en: Image by author
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: In other words, we want our query to only user 8, who has False values for `no_login_l28`,
    `has_never_posted`, and `is_new_account`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我们希望我们的查询仅使用8号用户，该用户在`no_login_l28`、`has_never_posted`和`is_new_account`上都有False值。
- en: Let’s start with the top of our query.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从查询的顶部开始。
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How should we structure the `WHERE` clause of our query? Think for a minute
    – **we need to be careful not to return rows where *any* of the columns is** `**False**`**.**
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该如何构建查询的`WHERE`子句？考虑一下——**我们需要小心不要返回*任何*列为** `**False**`**的行**。
- en: When you’re ready, take a look at the options below. **Two are correct and two
    are wrong.**
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当你准备好时，查看下面的选项。**两个是正确的，两个是错误的。**
- en: '**Option 1: Multiple** `**AND NOT**`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**选项 1：多个** `**AND NOT**`'
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Option 2: Multiple** `**OR NOT**`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**选项 2：多个** `**OR NOT**`'
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Option 3:** `**NOT**` **+ grouped** `**OR**`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**选项 3：** `**NOT**` **+ 分组** `**OR**`'
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Option 4:** `**NOT**` **+ grouped** `**AND**`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**选项 4：** `**NOT**` **+ 分组** `**AND**`'
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Hint
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示
- en: When are conditions in a filter evaluated separately versus together? If they’re
    evaluated together, can we condense all conditions down to one `True` or `False`
    value?
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 条件在过滤器中是分别评估还是一起评估？如果它们一起评估，我们能否将所有条件浓缩为一个`True`或`False`值？
- en: Answer
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: '**Option 1.** This one tripped me up a bit. A data scientist on my team submitted
    a PR with this filter, which I was convinced would pull in rows 2–7 because the
    query would only remove users with `False` values for all three columns. But to
    my surprise, Option 1 actually works **because the three filters are evaluated
    independently.** ✅'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**选项 1.** 这个让我有点困惑。我的团队中的一位数据科学家提交了一个包含这个过滤器的 PR，我确信它会提取行 2–7，因为查询只会移除所有三个列的值为
    `False` 的用户。但令我惊讶的是，选项 1 实际上有效 **因为三个过滤器是独立评估的。** ✅'
- en: '**Option 2.** This was the filter I initially thought was correct, since I
    didn’t realize the filters would be evaluated independently. But this filter will
    actually return users 2–8, since anyone who has at least one `True` for `no_login_l28`,
    `has_never_posted`, and `is_new_account` will be allowed through. ❌'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**选项 2.** 这是我最初认为正确的过滤器，因为我没有意识到这些过滤器会被独立评估。但实际上这个过滤器会返回用户 2–8，因为任何在 `no_login_l28`、`has_never_posted`
    和 `is_new_account` 中至少有一个 `True` 的用户都会被允许通过。 ❌'
- en: '**Option 3.** This was how I initially thought the filter needed to be worded.
    If a user has `True` for *any* of `no_login_l28`, `has_never_posted`, or `is_new_account`,
    then lines 3-5 evaluate to `True`, the `NOT` flips this to `False`, and those
    rows are ultimately excluded. This indeed works, and I find this easier to understand
    than Option 1, but both are valid. ✅'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**选项 3.** 这是我最初认为过滤器需要这样表达的方式。如果用户在 `no_login_l28`、`has_never_posted` 或 `is_new_account`
    中有 *任何* 一个 `True`，那么第 3 行到第 5 行评估为 `True`，`NOT` 将其翻转为 `False`，这些行最终会被排除。这确实有效，我发现这比选项
    1 更容易理解，但两者都是有效的。 ✅'
- en: '**Option 4.** This returns the same incorrect result as Option 2\. Lines 3–5
    evaluate to `True` only for user 1, meaning that when we flip the boolean with
    `NOT`, all remaining users are pulled through. ❌'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**选项 4.** 这会返回与选项 2 相同的错误结果。第 3 行到第 5 行仅对用户 1 评估为 `True`，这意味着当我们用 `NOT` 取反时，所有剩余用户都会被提取出来。
    ❌'
- en: '![](../Images/0cf6fb60d6ba852509c672abe8c1bed8.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0cf6fb60d6ba852509c672abe8c1bed8.png)'
- en: Photo by [Nick Fewings](https://unsplash.com/@jannerboy62?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[Nick Fewings](https://unsplash.com/@jannerboy62?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) 上的照片'
- en: 'Riddle 3: Left joins acting like inner joins'
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谜题 3：左连接像内连接一样工作
- en: Take a look at the query below. We have two tables, `customers` and `reviews`.
    `customers` contains customer IDs and their lifetime dollars spent on the platform.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下下面的查询。我们有两个表，`customers` 和 `reviews`。`customers` 包含客户 ID 及其在平台上花费的终身金额。
- en: '![](../Images/a85750c1c18e374de1a3ddd382f83bb6.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a85750c1c18e374de1a3ddd382f83bb6.png)'
- en: Image by author
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: '`reviews` contains information about reviews left by customers: the review
    ID, customer ID, and whether the review was reported as spam.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`reviews` 包含客户留下的评论信息：评论 ID、客户 ID 和评论是否被报告为垃圾评论。'
- en: '![](../Images/a0d8514acf7b406b7693089521e1ddda.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a0d8514acf7b406b7693089521e1ddda.png)'
- en: Image by author
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'Here’s the subquery to generate the two CTEs:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这是生成两个 CTE 的子查询：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now let’s say we’re curious about the relationship between a customer’s total
    spend and the number of non-spam reviews they write. Since not each customer has
    left a review, we’ll want to left join `reviews` to `customers`. We can structure
    our query like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们对客户的总消费与他们写的非垃圾评论数量之间的关系感到好奇。由于不是每个客户都留下了评论，我们希望将 `reviews` 左连接到 `customers`。我们可以这样构建我们的查询：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Ready? Here’s what comes out.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好了吗？看看结果吧。
- en: '![](../Images/23213b592479c359fab0bb3cb77f951d.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/23213b592479c359fab0bb3cb77f951d.png)'
- en: Image by author
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Wait a minute. Where did users 200, 300, and 400 go? Why were they removed,
    and how can we bring them back in?
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 等一下。用户 200、300 和 400 去哪里了？为什么它们被移除了，我们怎么能把它们找回来呢？
- en: Hint
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示
- en: If you create a CTE for `reviews` with spam reviews filtered out, *then* join
    on this CTE, do we get the same result?
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你创建一个过滤掉垃圾评论的 `reviews` CTE，然后在这个 CTE 上进行连接，我们会得到相同的结果吗？
- en: Answer
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: Looking closely, we can see that users 200 and 300 have never left any reviews.
    400 only has spam reviews, but they were completely removed as well. Since we
    did a left join, these users should still be in the table and have a 0 for `n_reviews`.
    Instead, our left join [behaved like an inner join](https://trevorscode.com/why-is-my-left-join-behaving-like-an-inner-join-and-filtering-out-all-the-right-side-rows/).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细查看，我们可以看到用户 200 和 300 从未留下任何评论。400 只有垃圾评论，但它们也被完全移除。由于我们进行了左连接，这些用户仍应存在于表中，并且
    `n_reviews` 应为 0。相反，我们的左连接 [表现得像内连接](https://trevorscode.com/why-is-my-left-join-behaving-like-an-inner-join-and-filtering-out-all-the-right-side-rows/)。
- en: The issue, it turns out, is that `**WHERE**` **clauses are evaluated *after*
    joins.** Our left join brings in null values for `reported_as_spam` for users
    200 and 300\. The `WHERE` filter then removes all rows where `reported_as_spam`
    is True, which removes user 400\. However, this filter also removes null values,
    so users 200 and 300 are also removed.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是，`**WHERE**` **子句是在连接操作*之后*进行评估的**。我们的左连接带来了用户200和300的`reported_as_spam`的空值。然后，`WHERE`过滤器移除所有`reported_as_spam`为True的行，这样用户400就被移除。然而，这个过滤器也会移除空值，因此用户200和300也被移除。
- en: To do this properly, we need to pre-filter `reviews` before joining with `customers`.
    As the hint states, we can create a CTE for `reviews` and perform the filtering
    there. But more efficiently, [let’s perform the filtering *within* the join](https://mode.com/sql-tutorial/sql-joins-where-vs-on/).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确完成这一点，我们需要在与`customers`连接之前预先过滤`reviews`。正如提示所述，我们可以为`reviews`创建一个CTE，并在那里进行过滤。但更有效的是，[我们可以在连接*内部*进行过滤](https://mode.com/sql-tutorial/sql-joins-where-vs-on/)。
- en: 'We can do this by adding `AND NOT r.reported_as_spam` to the `LEFT JOIN` block.
    See below:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在`LEFT JOIN`块中添加`AND NOT r.reported_as_spam`来实现。见下文：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now we get the expected result.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们得到了预期的结果。
- en: '![](../Images/5ded0c2dd29a48a3a2fa22f53527f5eb.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5ded0c2dd29a48a3a2fa22f53527f5eb.png)'
- en: Image by author
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: '![](../Images/26ff34d90559419122b8dd79bb8cf443.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/26ff34d90559419122b8dd79bb8cf443.png)'
- en: Photo by [Laura Chouette](https://unsplash.com/@laurachouette?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Laura Chouette](https://unsplash.com/@laurachouette?utm_source=medium&utm_medium=referral)拍摄，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Conclusions
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'This post shared three SQL wrinkles that can lead to unexpected results: timestamp
    specificity, dependent versus independent filters, and left joins acting like
    inner joins. I specifically provided simple examples to keep the focus on the
    syntax, but you’ll likely encounter SQL nuances like these nestled within large,
    complex queries.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 本文分享了三种可能导致意外结果的SQL难点：时间戳的具体性、依赖性与独立性过滤器，以及左连接表现得像内连接。我特别提供了简单的示例，以保持对语法的关注，但你可能会在大型复杂查询中遇到类似的SQL细微差别。
- en: These bugs can be incredibly challenging to identify, especially for queries
    with many components. Whenever I’m confused by a result, I try to break the query
    into its pieces and verify each component’s result. But when in doubt, write some
    simple CTEs with test data and confirm the results do what you expect.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这些错误可能非常难以识别，尤其是对于包含多个组件的查询。当我对结果感到困惑时，我会尝试将查询拆分成各个部分，并验证每个组件的结果。但是如果有疑问，写一些简单的CTE并用测试数据进行验证，确认结果是否符合预期。
- en: Happy querying!
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 祝查询愉快！
- en: Matt
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Matt
