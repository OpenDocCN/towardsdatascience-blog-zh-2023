- en: Create Galactic Art with Tkinter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/create-galactic-art-with-tkinter-e0418a59b215](https://towardsdatascience.com/create-galactic-art-with-tkinter-e0418a59b215)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Model Mother Nature with Logarithmic Spirals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@lee_vaughan?source=post_page-----e0418a59b215--------------------------------)[![Lee
    Vaughan](../Images/9f6b90bb76102f438ab0b9a4a62ffa3f.png)](https://medium.com/@lee_vaughan?source=post_page-----e0418a59b215--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e0418a59b215--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e0418a59b215--------------------------------)
    [Lee Vaughan](https://medium.com/@lee_vaughan?source=post_page-----e0418a59b215--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e0418a59b215--------------------------------)
    ·11 min read·Sep 30, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fa440313af850b9e4e0de5318f23ce2e.png)'
  prefs: []
  type: TYPE_IMG
- en: A model of a spiral galaxy (by author)
  prefs: []
  type: TYPE_NORMAL
- en: One of the wonders of our world is that it can be described with math. The connection
    is so strong that MIT physicist Max Tegmark believes that the universe isn’t just
    *described* by math, but that it *is* math in the sense that we’re all parts of
    a giant mathematical object [1].
  prefs: []
  type: TYPE_NORMAL
- en: What this means is that many seemingly complex objects — across mind-boggling
    scales — can be reduced to simple equations. Why does a hurricane look like a
    galaxy? Why is the pattern in a nautilus shell repeated in a pinecone? The answer
    is math.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2879ee1043c113f3360e152192001e61.png)'
  prefs: []
  type: TYPE_IMG
- en: Examples of logarithmic spirals in nature (from “Python Tools for Scientists”
    [2])
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides their appearance, the objects pictured above have something in common:
    they all *grow,* and growth in nature is a *geometric progression.* Spirals that
    increase geometrically are considered to be *logarithmic*, due to the use of the
    base of the natural logarithm (*e*) in the equation that describes them. While
    generally known as *logarithmic spirals*, their ubiquity in nature has earned
    them an additional title: *spira mirabilis* — “miraculous spiral.”'
  prefs: []
  type: TYPE_NORMAL
- en: In this *Quick Success Data Science* project, we’ll use logarithmic spirals
    and Python’s *Tkinter* GUI module to simulate a spiral galaxy. In the process,
    we’ll generate some attractive and unique digital art.
  prefs: []
  type: TYPE_NORMAL
- en: The Polar Equation for a Logarithmic Spiral
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modeling a spiral galaxy is all about modeling *spiral arms*. Each spiral arm
    can be *approximated* by a logarithmic spiral*.*
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9b1de8fbd1f243db66445ce40b9decd9.png)'
  prefs: []
  type: TYPE_IMG
- en: Schematic plan view of spiral galaxy (by author)
  prefs: []
  type: TYPE_NORMAL
- en: Because spirals radiate out from a central point or *pole*, you’ll more easily
    graph them with *polar coordinates*. In this system, the (*x, y*) coordinates
    used in the more familiar Cartesian coordinate system are replaced by (*r,* Ɵ),
    where *r* is the distance from the center and Ɵ (theta) is the angle made by *r*
    and the x-axis. The coordinates for the pole are (0, 0).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e69f4225cac1548df350025c279c3e95.png)'
  prefs: []
  type: TYPE_IMG
- en: Example polar coordinate system (from “Impractical Python Projects” [3])
  prefs: []
  type: TYPE_NORMAL
- en: 'The polar equation for a logarithmic spiral is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b58ebfab4af1e7c476c69a98524a3767.png)'
  prefs: []
  type: TYPE_IMG
- en: where *r* is the radius (distance from the origin), Ɵ is the angle measured
    counterclockwise from the x-axis, *e* is the base of natural logarithms, *a* is
    a scaling factor that controls the size, and *b* is a growth factor that controls
    the spiral’s “openness” and direction of growth.
  prefs: []
  type: TYPE_NORMAL
- en: The Programming Strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To model a four-armed spiral galaxy, we can use the previous formula to draw
    a single spiral and then rotate and redraw the spiral three more times. We’ll
    build the spirals out of various-sized markers, which will represent stars. While
    these will be way out of scale for single stars, they will capture the overall
    brightness patterns in the galaxy (see the title image).
  prefs: []
  type: TYPE_NORMAL
- en: To capture the “background glow” of the galaxy, we’ll randomly distribute small
    “stars” around the galactic disc.
  prefs: []
  type: TYPE_NORMAL
- en: The Tkinter Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll draw our galaxy simulation with `tkinter` (pronounced “tee-kay-inter”).
    This is the default GUI library for developing desktop applications in Python.
    Although primarily designed for GUI elements such as windows, buttons, and scroll
    bars, `tkinter` can also generate graphs, screensavers, simple games, and more.
  prefs: []
  type: TYPE_NORMAL
- en: As part of the standard Python distribution, `tkinter` is portable across all
    operating systems and there’s no need to install external libraries. You can find
    the official online documentation [here](https://docs.python.org/3/library/tk.html).
  prefs: []
  type: TYPE_NORMAL
- en: The Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following code was written in the Spyder IDE. You can download the full
    script from this [Gist](https://gist.github.com/rlvaugh/e7a6411e12594ea6d8c57addaacbd9db).
  prefs: []
  type: TYPE_NORMAL
- en: Importing Libraries and Assigning Constants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All of the libraries we need to use are part of the Python Standard Library,
    so there’s no need to install anything. Besides `tkinter`, we’ll need the `math`
    module for working with equations and `random` for randomizing the star locations.
    The latter will make the simulations *stochastic*, so each will be slightly different
    and unique, in case you want to bust out some NFTs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `SCALE` constant will change the size of our galaxy. Large numbers will
    increase the disc diameter and small numbers will reduce it.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up the tkinter Display Canvas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following code instantiates a `tkinter` window with a *canvas* on which
    you can draw things. This is where the galaxy simulation will appear.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We start by creating a window with the conventional name `root`. This is a *top-level*
    window that holds everything else. After naming the window, we add a *widget*
    (“Windows gadget”)to the root window. This `Canvas` widget, assigned to the variable
    `c`, is a general-purpose widget intended for graphics and other complex layouts,
    and it will contain all our drawing objects.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we call the `grid()` geometry manager on `c` and finish by configuring
    the canvas to use a `scrollregion`. This code sets the origin coordinates (0,
    0) to the *center* of the canvas by using *half* of the width and height dimensions.
    We need this setup to draw the galaxy’s spiral arms with polar coordinates. Without
    it, the default origin would be the top-left corner of the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a Function to Draw a Spiral Arm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we’ll define a function to draw a single spiral arm using the logarithmic
    spiral equation. This spiral may be miraculous, but a large part of the magic
    is tinkering with the initial bare-bones spiral to “flesh out” the arm. We’ll
    accomplish this by varying the size and location of stars, and by duplicating
    the spiral for each arm and shifting it slightly backwards while dimming its stars.
    This creates “leading” and “trailing” edges.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, we define a function with five parameters. The first two, `b` and `r`,
    are from the spiral equation. The next, `rot_fac`, is the rotation factor that
    lets you move the spiral around the center point so you can produce a new spiral
    arm in a different location.
  prefs: []
  type: TYPE_NORMAL
- en: The fuzz factor, `fuz_fac`, lets you tweak how far you move stars away from
    the center of the spiraling line. Finally, the `arm` parameter lets you specify
    either the *leading* arm or the *trailing* arm of faint stars. The trailing arm
    will be *shifted* — that is, plotted a little *behind* the leading arm — and its
    stars will be smaller (dimmer).
  prefs: []
  type: TYPE_NORMAL
- en: To start the function, we initialize an empty list, called `spiral_stars`, to
    hold the star coordinates. We next assign a `fuzz` variable to an arbitrary constant
    multiplied by the absolute value of the `r` (radius) value. This represents a
    starting point for shifting the stars, which we’ll modify later with the fuzz
    factor (`fuz_fac`). It also ensures that the *amount* of displacement is *scalable*
    with respect to the size of the display.
  prefs: []
  type: TYPE_NORMAL
- en: The logarithmic spiral equation alone produces stars that are *lined up*, as
    in the left two panels in the figure below. “Fuzzing” moves stars back and forth
    a little, to either side of the spiral line. You can see the effect on the bright
    stars in the rightmost panel of the figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7ec00614194a6ad6abf54fb026c9439a.png)'
  prefs: []
  type: TYPE_IMG
- en: Filling out spiral arms by shifting spirals and changing star positions (from
    “Impractical Python Projects” [3])
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to build the spiral lines. We use a range of values to represent
    Ɵ in the equation. You can tinker with these values to produce different results
    (this is art, after all).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we loop through the Ɵ values and apply the logarithmic spiral equation,
    adding the randomized `fuzz` value, multiplied by the `fuzz_factor`, to the result.
    We finish the loop by appending the coordinates to the list.
  prefs: []
  type: TYPE_NORMAL
- en: Later, we’ll call this function multiple times and specify the rotation factor
    (`rot_fac`) variable, which will move the spiral around the center. After the
    program builds the four main arms, it will use `rot_fac` to build four *new* arms,
    slightly offset from the first four, to produce bands of dim, trailing stars.
    You can see these stars in the rightmost panel of the previous figure; they’re
    the arc of dim stars to the left of each arc of bright stars.
  prefs: []
  type: TYPE_NORMAL
- en: After building the list of star locations, we loop through it, using a conditional
    statement to choose leading and trailing arms. While `tkinter` has the ability
    to draw circles (with the `create_oval()` method), I find that punctuation marks
    work better at tiny scales. So, we used the `create_text()` method instead.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned earlier, these star objects are for visual impact only. Neither
    their size nor number is to scale. To be realistic, they would be much, much smaller,
    and much more numerous (over 100 billion!).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Scattering Star Haze
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The space between the spiral arms isn’t devoid of stars, so we need a function
    to randomly cast points across the whole galactic model. Think of these as the
    “haze” or “glow” you see in photographs of galaxies.
  prefs: []
  type: TYPE_NORMAL
- en: First, we’ll need a function to generate random polar coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This function takes our previously defined `SCALE` constant as its only argument.
    It then chooses a float value between 0.0 and 1.0 and assigns it to a variable
    named `n`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, it randomly chooses `theta` from a uniform distribution between 0 and
    360 degrees (2π is the radian equivalent of 360 degrees).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, it calculates the x and y values over a unit disc, yielding values
    between -1 and 1, and then multiplies these by the scale factor to scale the results
    to the size of our galaxy model.
  prefs: []
  type: TYPE_NORMAL
- en: The next function draws the haze stars on the display. It takes as arguments
    our scale factor constant and an integer multiplier (`density`) used to increase
    or decrease the base number of random stars. So, if you prefer a thick fog rather
    than a light haze, increase the value of the `density` argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: To plot the stars, we use the same `tkinter` method, `create_text()`, that we
    used for the spiral arms. Here’s the result with and without star haze.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/89d46ff81d9aef65049555701b891cb6.png)'
  prefs: []
  type: TYPE_IMG
- en: Without haze (left) and with haze (right) (by author)
  prefs: []
  type: TYPE_NORMAL
- en: You can get creative with the haze. For example, increase the density and color
    them gray, or use a loop to vary both their size and color. Don’t use green, however,
    as there are no green stars in the universe!
  prefs: []
  type: TYPE_NORMAL
- en: Defining a Function to Build the Display
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll now define a function to build the four main spiral arms and distribute
    the star haze. Each spiral arm will consist of two calls to our previously defined
    `build_spiral ()` function: one for the leading edge with bright stars (`arm=0`)
    and one for the trailing edge with dimmer stars (`arm=1`).'
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to play with the parameters. I would recommend changing them one at
    a time to best judge their impact.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d060b548855363a47e9f5dad1c73367f.png)'
  prefs: []
  type: TYPE_IMG
- en: The output of the build_galaxy() function (by author)
  prefs: []
  type: TYPE_NORMAL
- en: After calling the `build_galaxy()` function, an external window should pop up
    (or appear as an icon on your taskbar). You’ll need to close this window before
    calling the function again.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned previously, each display will be absolutely unique. To add depth
    and interest, try changing half the stars in the leading (`arm=0`) arm to light
    blue or a similar color.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/82b3ede871ae91e446c3fc1836f585e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Output where half the main spiral arm stars are light blue (by author)
  prefs: []
  type: TYPE_NORMAL
- en: Don’t Limit Yourself to Logarithmic Spirals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the standpoint of digital art, there are more ways to build galaxy-like
    objects than logarithmic spirals, and more things you can do *with* the models.
    Here are some examples from my book, [*Impractical Python Projects*](https://a.co/d/3xXtEOK)[3]*.*
  prefs: []
  type: TYPE_NORMAL
- en: A Galaxy Far, Far Away
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following model was inspired by Alexandre Devert’s post on [Marmakoide’s
    Blog](http://blog.marmakoide.org/?m=201204), “Spreading Points on a Disc and on
    a Sphere” [4].
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cf87c883e24149cb89128f33ed737edb.png)'
  prefs: []
  type: TYPE_IMG
- en: An imaginary galaxy far, far away (by author)
  prefs: []
  type: TYPE_NORMAL
- en: To Boldly Go
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The radius of the Milky Way galaxy is roughly 50,000 light-years. When our
    scale factor (`SCALE`) is set to 200, each pixel represents about 250 light-years
    (50,000 / 200). Knowing this, we can visualize how much of the galaxy the Star
    Trek Federation could have explored in its first 100 years, assuming they averaged
    100x light speed at warp 4:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/29f89ded3b3a3cbe9d516d48e4e97721.png)'
  prefs: []
  type: TYPE_IMG
- en: Expansion of the Star Trek Federation in the first 100 years under warp factor
    4 (from “Impractical Python Projects” [3])
  prefs: []
  type: TYPE_NORMAL
- en: For this simulation, I used a scale factor of 200 and Earth coordinates of (130,
    80).
  prefs: []
  type: TYPE_NORMAL
- en: Immeasurable Heaven
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our radio transmissions currently form an expanding sphere around Earth with
    a diameter of around 230 light-years. That’s basically the size of one of the
    smallest stars in the previous image. Earth is, as Carl Sagan described it, “just
    a mote of dust, suspended in a sunbeam.”
  prefs: []
  type: TYPE_NORMAL
- en: 'When you consider that, you can begin to appreciate the sheer enormity and
    emptiness of our galaxy. Astronomers even have a word for this: *Laniakea*, Hawaiian
    for “immeasurable heaven.”'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Python, `tkinter`, and a simple equation, we turned a model of a spiral
    galaxy into some striking digital art that helped us envision our place in the
    universe. This model has multiple tuning parameters and a stochastic basis, letting
    you create beautiful and unique works of art.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tegmark, Max, 2014, “Is the Universe Made of Math?” *Scientific American*, [https://www.scientificamerican.com/article/is-the-universe-made-of-math-excerpt/](https://www.scientificamerican.com/article/is-the-universe-made-of-math-excerpt/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Vaughan, Lee, 2023, [*Python Tools for Scientists: An Introduction to Using
    Anaconda, JuptyerLab, and Python’s Scientific Libraries*](https://a.co/d/1SfWbGf),
    No Starch Press, San Francisco.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Vaughan, Lee, 2018, [*Impractical Python Projects: Playful Programming Activities
    to Make You Smarter*](https://a.co/d/5e2NG9b), No Starch Press, San Fransisco.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Devert, Alexandre, 2012, Spreading Points on a Disc and on a Sphere,” *Marmakoide’s
    Blog*, [http://blog.marmakoide.org/?m=201204](http://blog.marmakoide.org/?m=201204).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Thanks!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for reading and please follow me for more *Quick Success Data Science*
    projects in the future.
  prefs: []
  type: TYPE_NORMAL
