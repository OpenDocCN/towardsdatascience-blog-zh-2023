["```py\npip install langchain\n```", "```py\nimport langchain\n```", "```py\nimport os\nos.environ[\"OPENAI_API_KEY\"] = ... # insert your API_TOKEN here\n```", "```py\nimport os\n\nos.environ[\"HUGGINGFACEHUB_API_TOKEN\"] = ... # insert your API_TOKEN here\n```", "```py\n# Proprietary LLM from e.g. OpenAI\n# pip install openai\nfrom langchain.llms import OpenAI\nllm = OpenAI(model_name=\"text-davinci-003\")\n\n# Alternatively, open-source LLM hosted on Hugging Face\n# pip install huggingface_hub\nfrom langchain import HuggingFaceHub\nllm = HuggingFaceHub(repo_id = \"google/flan-t5-xl\")\n\n# The LLM takes a prompt as an input and outputs a completion\nprompt = \"Alice has a parrot. What animal is Alice's pet?\"\ncompletion = llm(prompt)\n```", "```py\n# Proprietary text embedding model from e.g. OpenAI\n# pip install tiktoken\nfrom langchain.embeddings import OpenAIEmbeddings\nembeddings = OpenAIEmbeddings()\n\n# Alternatively, open-source text embedding model hosted on Hugging Face\n# pip install sentence_transformers\nfrom langchain.embeddings import HuggingFaceEmbeddings\nembeddings = HuggingFaceEmbeddings(model_name = \"sentence-transformers/all-MiniLM-L6-v2\")\n\n# The embeddings model takes a text as an input and outputs a list of floats\ntext = \"Alice has a parrot. What animal is Alice's pet?\"\ntext_embedding = embeddings.embed_query(text)\n```", "```py\nfrom langchain import PromptTemplate\n\ntemplate = \"What is a good name for a company that makes {product}?\"\n\nprompt = PromptTemplate(\n    input_variables=[\"product\"],\n    template=template,\n)\n\nprompt.format(product=\"colorful socks\")\n```", "```py\nfrom langchain import PromptTemplate, FewShotPromptTemplate\n\nexamples = [\n    {\"word\": \"happy\", \"antonym\": \"sad\"},\n    {\"word\": \"tall\", \"antonym\": \"short\"},\n]\n\nexample_template = \"\"\"\nWord: {word}\nAntonym: {antonym}\\n\n\"\"\"\n\nexample_prompt = PromptTemplate(\n    input_variables=[\"word\", \"antonym\"],\n    template=example_template,\n)\n\nfew_shot_prompt = FewShotPromptTemplate(\n    examples=examples,\n    example_prompt=example_prompt,\n    prefix=\"Give the antonym of every input\",\n    suffix=\"Word: {input}\\nAntonym:\",\n    input_variables=[\"input\"],\n    example_separator=\"\\n\",\n)\n\nfew_shot_prompt.format(input=\"big\")\n```", "```py\nGive the antonym of every input\n\nWord: happy\nAntonym: sad\n\nWord: tall\nAntonym: short\n\nWord: big\nAntonym:\n```", "```py\nfrom langchain.chains import LLMChain\n\nchain = LLMChain(llm = llm, \n                  prompt = prompt)\n\n# Run the chain only specifying the input variable.\nchain.run(\"colorful socks\")\n```", "```py\nfrom langchain.chains import LLMChain, SimpleSequentialChain\n\n# Define the first chain as in the previous code example\n# ...\n\n# Create a second chain with a prompt template and an LLM\nsecond_prompt = PromptTemplate(\n    input_variables=[\"company_name\"],\n    template=\"Write a catchphrase for the following company: {company_name}\",\n)\n\nchain_two = LLMChain(llm=llm, prompt=second_prompt)\n\n# Combine the first and the second chain \noverall_chain = SimpleSequentialChain(chains=[chain, chain_two], verbose=True)\n\n# Run the chain specifying only the input variable for the first chain.\ncatchphrase = overall_chain.run(\"colorful socks\")\n```", "```py\n# pip install youtube-transcript-api\n# pip install pytube\n\nfrom langchain.document_loaders import YoutubeLoader\n\nloader = YoutubeLoader.from_youtube_url(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n\ndocuments = loader.load()\n```", "```py\n# pip install faiss-cpu\nfrom langchain.vectorstores import FAISS\n\n# create the vectorestore to use as the index\ndb = FAISS.from_documents(documents, embeddings)\n```", "```py\nfrom langchain.chains import RetrievalQA\n\nretriever = db.as_retriever()\n\nqa = RetrievalQA.from_chain_type(\n    llm=llm, \n    chain_type=\"stuff\", \n    retriever=retriever, \n    return_source_documents=True)\n\nquery = \"What am I never going to do?\"\nresult = qa({\"query\": query})\n\nprint(result['result'])\n```", "```py\nfrom langchain import ConversationChain\n\nconversation = ConversationChain(llm=llm, verbose=True)\n\nconversation.predict(input=\"Alice has a parrot.\")\n\nconversation.predict(input=\"Bob has two cats.\")\n\nconversation.predict(input=\"How many pets do Alice and Bob have?\")\n```", "```py\n# pip install wikipedia\nfrom langchain.agents import load_tools\nfrom langchain.agents import initialize_agent\nfrom langchain.agents import AgentType\n\ntools = load_tools([\"wikipedia\", \"llm-math\"], llm=llm)\nagent = initialize_agent(tools, \n                         llm, \n                         agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, \n                         verbose=True)\n\nagent.run(\"When was Barack Obama born? How old was he in 2022?\")\n```"]