- en: 'Python Lists Vs. NumPy Arrays: A Deep Dive into Memory Layout and Performance
    Benefits'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 列表与 NumPy 数组：深入探讨内存布局和性能优势
- en: 原文：[https://towardsdatascience.com/python-lists-vs-numpy-arrays-a-deep-dive-into-memory-layout-and-performance-benefits-a74ce774bc1e](https://towardsdatascience.com/python-lists-vs-numpy-arrays-a-deep-dive-into-memory-layout-and-performance-benefits-a74ce774bc1e)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/python-lists-vs-numpy-arrays-a-deep-dive-into-memory-layout-and-performance-benefits-a74ce774bc1e](https://towardsdatascience.com/python-lists-vs-numpy-arrays-a-deep-dive-into-memory-layout-and-performance-benefits-a74ce774bc1e)
- en: '[FAST COMPUTING](https://medium.com/@qtalen/list/fast-computing-2a37a7e82be5)'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[快速计算](https://medium.com/@qtalen/list/fast-computing-2a37a7e82be5)'
- en: Exploring allocation differences and efficiency gains
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索分配差异和效率提升
- en: '[](https://qtalen.medium.com/?source=post_page-----a74ce774bc1e--------------------------------)[![Peng
    Qian](../Images/9ce9aeb381ec6b017c1ee5d4714937e2.png)](https://qtalen.medium.com/?source=post_page-----a74ce774bc1e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a74ce774bc1e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a74ce774bc1e--------------------------------)
    [Peng Qian](https://qtalen.medium.com/?source=post_page-----a74ce774bc1e--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://qtalen.medium.com/?source=post_page-----a74ce774bc1e--------------------------------)[![Peng
    Qian](../Images/9ce9aeb381ec6b017c1ee5d4714937e2.png)](https://qtalen.medium.com/?source=post_page-----a74ce774bc1e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a74ce774bc1e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a74ce774bc1e--------------------------------)
    [Peng Qian](https://qtalen.medium.com/?source=post_page-----a74ce774bc1e--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a74ce774bc1e--------------------------------)
    ·9 min read·Jul 14, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a74ce774bc1e--------------------------------)
    ·9 分钟阅读·2023 年 7 月 14 日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/9c59152b04be4c0785841172da617a50.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9c59152b04be4c0785841172da617a50.png)'
- en: Data in NumPy arrays are arranged as compactly as books on a shelf. Photo by
    [Eliabe Costa](https://unsplash.com/@eliabevces?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 数组中的数据像书架上的书一样紧凑地排列。照片由 [Eliabe Costa](https://unsplash.com/@eliabevces?utm_source=medium&utm_medium=referral)
    拍摄，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: In this article, we will delve into the memory design differences between native
    Python lists and NumPy arrays, revealing why NumPy can provide better performance
    in many cases.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将深入探讨原生 Python 列表和 NumPy 数组之间的内存设计差异，揭示为什么在许多情况下 NumPy 可以提供更好的性能。
- en: We will compare data structures, memory allocation, and access methods, showcasing
    the power of NumPy arrays.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将比较数据结构、内存分配和访问方法，展示 NumPy 数组的强大功能。
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'Imagine you are preparing to go to the library to find a book. Now, you discover
    that the library has two shelves:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你正在准备去图书馆找一本书。现在，你发现图书馆有两个货架：
- en: The first shelf is filled with various exquisite boxes, some containing CDs,
    some containing pictures, and others containing books. Only the name of the item
    is attached to the box.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个货架上装满了各种精美的盒子，有些盒子里装着光盘，有些装着图片，还有些装着书籍。只有物品的名称附在盒子上。
- en: This represents native Python lists, where each element has its memory space
    and type information.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这代表了原生 Python 列表，其中每个元素都有自己的内存空间和类型信息。
- en: 'However, this approach has a problem: many empty spaces in the boxes, wasting
    shelf space. Moreover, when you want to find a specific book, you must look inside
    each box, which takes extra time.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种方法存在一个问题：盒子里有许多空余空间，浪费了货架空间。而且，当你想找一本特定的书时，你必须查看每一个盒子，这会花费额外的时间。
- en: Now let’s look at the second shelf. This time there are no boxes; books, CDs,
    and pictures are all compactly placed together according to their categories.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看第二个货架。这次没有盒子；书籍、光盘和图片都根据它们的类别紧凑地放在一起。
- en: This is NumPy arrays, which store data in memory in a continuous fashion, improving
    space utilization.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 NumPy 数组，它们在内存中以连续的方式存储数据，从而提高了空间利用率。
- en: Since the items are all grouped by category, you can quickly find a book without
    having to search through many boxes. This is why NumPy arrays are faster than
    native Python lists in many operations.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于物品都是按类别分组的，你可以快速找到一本书，而不必在许多盒子中搜索。这就是为什么在许多操作中，NumPy 数组比原生 Python 列表更快的原因。
- en: 'Python Lists: A Flexible but Less Efficient Solution'
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 列表：一种灵活但效率较低的解决方案
- en: Everything in Python is an object
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python中的一切都是对象
- en: 'Let’s start with the Python interpreter: although CPython is written in C,
    Python variables are not basic data types in C, but rather C structures that contain
    values and additional information.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从Python解释器开始：虽然CPython是用C编写的，但Python变量不是C中的基本数据类型，而是包含值和附加信息的C结构。
- en: Take a Python integer `x = 10_000` as an example, `x` is not a basic type on
    the stack. Instead, it is a pointer to a memory heap object.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以Python整数`x = 10_000`为例，`x`不是栈上的基本类型。相反，它是指向内存堆对象的指针。
- en: 'If you delve into the source code of `Python 3.10`, you’ll find that the C
    structure that `x` points to is as shown in the following figure:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你深入研究`Python 3.10`的源代码，你会发现`x`所指向的C结构如下图所示：
- en: '![](../Images/e8ab1f9b423c39d2154cf23062e737c9.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e8ab1f9b423c39d2154cf23062e737c9.png)'
- en: Python integer vs. C native integer. Image by Author.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Python整数与C原生整数。图像来源：作者。
- en: The `PyObject_HEAD` contains information such as reference count, type information,
    and object size.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`PyObject_HEAD`包含了如引用计数、类型信息和对象大小等信息。'
- en: Python lists are objects containing a series of objects
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python列表是包含一系列对象的对象
- en: From this, we can deduce that a Python list is also an object, except that it
    contains pointers to other objects.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 从中我们可以推断出，Python列表也是一个对象，只不过它包含指向其他对象的指针。
- en: 'We can create a list that contains only integers:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个只包含整数的列表：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can also create a list that includes multiple object types:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以创建一个包含多种对象类型的列表：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Pros and cons of Python lists
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python列表的优缺点
- en: As we can see, Python lists contain a series of pointer objects. These pointers,
    in turn, point to other objects in memory.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，Python列表包含一系列指针对象。这些指针反过来指向内存中的其他对象。
- en: The advantage of this approach is flexibility. You can put any object in a Python
    list without worrying about type errors.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的优点是灵活性。你可以将任何对象放入Python列表中，而无需担心类型错误。
- en: 'However, the downside is also evident:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，缺点也很明显：
- en: '![](../Images/8bd8a6e6c917ad70888efa730be2c265.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8bd8a6e6c917ad70888efa730be2c265.png)'
- en: Python lists contain a series of pointer objects. Image by Author
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Python列表包含一系列指针对象。图像来源：作者
- en: The objects pointed to by each pointer are scattered in memory. When you traverse
    a Python list, you need to look up the memory location of each object based on
    the pointer, resulting in lower performance.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 每个指针所指向的对象在内存中是分散的。当你遍历一个Python列表时，你需要根据指针查找每个对象的内存位置，这会导致性能下降。
- en: 'NumPy Arrays: A Contiguous Memory Layout for Enhanced Performance'
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy数组：一种用于增强性能的连续内存布局
- en: Next, let’s explore the components and arrangement of NumPy arrays, and how
    it benefits [cache locality](https://en.wikipedia.org/wiki/Locality_of_reference)
    and [vectorization](https://en.wikipedia.org/wiki/Array_programming).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们探索NumPy数组的组成部分和排列方式，以及它如何有利于[缓存局部性](https://en.wikipedia.org/wiki/Locality_of_reference)和[向量化](https://en.wikipedia.org/wiki/Array_programming)。
- en: 'NumPy arrays: structure and memory layout'
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NumPy数组：结构和内存布局
- en: 'According to NumPy’s internal description, NumPy arrays consist of two parts:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 根据NumPy的内部描述，NumPy数组由两部分组成：
- en: One part stores the metadata of the NumPy array, which describes the data type,
    array shape, etc.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一部分存储了NumPy数组的元数据，描述了数据类型、数组形状等。
- en: The other part is the data buffer, which stores the values of array elements
    in a tightly packed arrangement in memory.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一部分是数据缓冲区，它以紧凑的方式在内存中存储数组元素的值。
- en: '![](../Images/293e30473af49ed86ee6557e21a73bcd.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/293e30473af49ed86ee6557e21a73bcd.png)'
- en: 'NumPy arrays: structure and memory layout. Image by Author'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy数组：结构和内存布局。图像来源：作者
- en: Memory layout of NumPy arrays
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NumPy数组的内存布局
- en: 'When we observe the `.flags` attribute of a ndarray, we find that it includes:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们观察ndarray的`.flags`属性时，我们发现它包括：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`C_CONTIGUOUS`, which indicates whether the data can be read using row-major
    order.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C_CONTIGUOUS`，表示数据是否可以使用行优先顺序读取。'
- en: '`F_CONTIGUOUS`, which indicates whether the data can be read using column-major
    order.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`F_CONTIGUOUS`，表示数据是否可以使用列优先顺序读取。'
- en: Row-major order is the data arrangement used by the C language, denoted by `order=’C’`.
    It means that data is stored row by row.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 行优先顺序是C语言使用的数据排列方式，标记为`order=’C’`。这意味着数据按行存储。
- en: Column-major order, on the other hand, is used by FORTRAN, denoted by `order=’F’`,
    and stores data column by column.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，列优先顺序由FORTRAN使用，标记为`order=’F’`，按列存储数据。
- en: '![](../Images/61c02ad2bfe42cab37edc845fcb12a13.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/61c02ad2bfe42cab37edc845fcb12a13.png)'
- en: Memory layout of NumPy arrays. Image by Author
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy数组的内存布局。图片由作者提供
- en: Advantages of NumPy’s memory layout
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NumPy内存布局的优势
- en: Since `ndarray` is designed for matrix operations, all its data types are identical,
    with the same byte size and interpretation.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`ndarray`设计用于矩阵操作，它的所有数据类型都是相同的，具有相同的字节大小和解释。
- en: This allows data to be tightly packed together, bringing advantages in cache
    locality and vectorized computation.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得数据紧密打包在一起，带来了缓存局部性和向量化计算的优势。
- en: 'Cache Locality: How NumPy’s Memory Layout Improves Cache Utilization'
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存局部性：NumPy的内存布局如何提高缓存利用率
- en: What is CPU cache
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是CPU缓存
- en: NumPy’s contiguous memory layout helps improve cache hit rates because it matches
    how CPU caches work. To better explain this, let’s first understand the basic
    concept of [CPU cache](https://en.wikipedia.org/wiki/CPU_cache).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy的连续内存布局有助于提高缓存命中率，因为它与CPU缓存的工作方式相匹配。为了更好地解释这一点，我们首先了解一下[CPU缓存](https://en.wikipedia.org/wiki/CPU_cache)的基本概念。
- en: A CPU cache is a small, high-speed storage area between the CPU and main memory
    (RAM). The purpose of the CPU cache is to speed up data access in memory.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: CPU缓存是CPU和主内存（RAM）之间的小型高速存储区域。CPU缓存的目的是加快内存中的数据访问速度。
- en: '![](../Images/65ec790c90e1f80582d8effeafe103ca.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/65ec790c90e1f80582d8effeafe103ca.png)'
- en: A CPU cache is a small, high-speed storage area between the CPU and main memory
    (RAM). Image by Author
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: CPU缓存是CPU和主内存（RAM）之间的小型高速存储区域。图片由作者提供
- en: When the CPU needs to read or write data, it first checks if it is already in
    the cache.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当CPU需要读写数据时，它首先检查数据是否已经在缓存中。
- en: The CPU can read directly from the cache if the required data is in the cache
    (cache hit). If the data is not present (cache miss), the CPU loads the data from
    RAM and stores it in the cache for future use.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所需数据在缓存中（缓存命中），CPU可以直接从缓存中读取。如果数据不在缓存中（缓存未命中），CPU会从RAM中加载数据并将其存储在缓存中以供将来使用。
- en: CPU caches are usually organized in [cache lines](https://open-cas.github.io/cache_line.html),
    which are contiguous memory addresses. When the CPU accesses RAM, the cache loads
    the entire cache line into the high-speed cache.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: CPU缓存通常以[缓存行](https://open-cas.github.io/cache_line.html)的形式组织，这些缓存行是连续的内存地址。当CPU访问RAM时，缓存会将整个缓存行加载到高速缓存中。
- en: This means that if the CPU accesses neighboring memory addresses, subsequent
    accesses are more likely to hit the cache after loading a cache line, thus improving
    performance.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，如果CPU访问相邻的内存地址，在加载缓存行之后，后续访问更有可能命中缓存，从而提高性能。
- en: '![](../Images/8a46ad394890e167696d1acb56acde03.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8a46ad394890e167696d1acb56acde03.png)'
- en: When the CPU accesses RAM, the cache loads the entire cache line into the high-speed
    cache. Image by Author
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当CPU访问RAM时，缓存会将整个缓存行加载到高速缓存中。图片由作者提供
- en: How NumPy utilizes cache
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NumPy如何利用缓存
- en: NumPy’s contiguous memory layout takes advantage of this fact.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy的连续内存布局利用了这一事实。
- en: NumPy arrays store data in continuous memory addresses, which helps improve
    cache locality.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy数组将数据存储在连续的内存地址中，这有助于提高缓存局部性。
- en: When accessing an element in the array, the entire cache line (containing neighboring
    array elements) is loaded into the cache.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问数组中的一个元素时，整个缓存行（包含相邻的数组元素）会被加载到缓存中。
- en: As you traverse the array, you access each element in a sequence. Because array
    elements are stored contiguously in memory, cache hits are more likely during
    the traversal, improving performance.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当你遍历数组时，你会依次访问每个元素。由于数组元素在内存中是连续存储的，因此在遍历过程中缓存命中更有可能发生，从而提高性能。
- en: This is similar to going to the library to read a book. Instead of just grabbing
    the book you need, you also take out related books and place them on the table.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于去图书馆读书。你不仅取出所需的书，还会拿出相关的书并将它们放在桌子上。
- en: This way, when you need to consult associated materials, they’re easily accessible
    and more efficient than searching the shelves.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，当你需要查阅相关材料时，它们会更容易获取，比起在书架上寻找更加高效。
- en: 'Vectorization: Unleashing the Power of NumPy’s Memory Layout'
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向量化：释放NumPy内存布局的威力
- en: What is vectorization
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是向量化
- en: Vectorization is a technique that leverages the [Single Instruction Multiple
    Data (SIMD)](https://en.wikipedia.org/wiki/Single_instruction,_multiple_data)
    features of CPUs or GPUs to perform multiple data operations simultaneously.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 向量化是一种利用[单指令多数据（SIMD）](https://en.wikipedia.org/wiki/Single_instruction,_multiple_data)功能的技术，这些功能可在CPU或GPU上同时执行多个数据操作。
- en: Vectorized operations can significantly improve code execution efficiency by
    simultaneously processing multiple data items.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 向量化操作可以通过同时处理多个数据项显著提高代码执行效率。
- en: NumPy’s contiguous memory layout facilitates vectorized operations.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 的连续内存布局促进了向量化操作。
- en: Why is vectorization suitable
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么向量化适用
- en: Consider yourself a delivery person who must deliver packages to various households
    daily.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你是一个每天必须向不同家庭送货的送货员。
- en: Suppose the packages are arranged sequentially in the vehicle, and the houses
    are numbered along the street. In that case, the delivery person can efficiently
    deliver packages along the street in order.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 假设包裹在车辆中按顺序排列，而房屋沿街编号。在这种情况下，送货员可以有效地沿街按顺序送达包裹。
- en: 'This efficient method is analogous to NumPy’s memory layout, which brings the
    following benefits in vectorization:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这种高效的方法类似于 NumPy 的内存布局，在向量化中带来了以下好处：
- en: '**Data alignment**: NumPy arrays’ contiguous memory layout ensures that data
    is aligned in memory in a vectorization-friendly manner. This allows the CPU to
    efficiently load and process data in NumPy.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据对齐**：NumPy 数组的连续内存布局确保数据在内存中以向量化友好的方式对齐。这使得 CPU 能够高效地加载和处理 NumPy 中的数据。'
- en: '**Sequential access pattern**: NumPy’s tightly packed data in memory helps
    improve vectorization performance. The sequential access pattern also takes full
    advantage of CPU cache and prefetching, reducing memory access latency.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**顺序访问模式**：NumPy 在内存中紧凑的数据有助于提高向量化性能。顺序访问模式还充分利用了 CPU 缓存和预取功能，减少了内存访问延迟。'
- en: '**Simplified code**: NumPy offers a range of functions (e.g., `np.add`, `np.multiply`)
    and operations (e.g., array slicing) that automatically handle vectorized operations.
    You can write concise and efficient code without worrying about the underlying
    implementation.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化代码**：NumPy 提供了一系列函数（例如，`np.add`、`np.multiply`）和操作（例如，数组切片），这些函数和操作自动处理向量化操作。你可以编写简洁高效的代码，而无需担心底层实现。'
- en: 'Copies and Views: NumPy’s Excellent Design for Performance Optimization'
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 副本和视图：NumPy 在性能优化方面的出色设计
- en: In the earlier discussion, we discussed how NumPy leverages its contiguous memory
    layout to achieve performance advantages.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的讨论中，我们讨论了 NumPy 如何利用其连续内存布局来实现性能优势。
- en: Now, let’s discuss how NumPy gains performance benefits through copies and views.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们讨论 NumPy 如何通过副本和视图获得性能优势。
- en: What are copies and views
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 副本和视图是什么
- en: 'Copies and views are two options that define the relationship between existing
    data and the original array. Based on the characteristics of these two options,
    they can be summarized as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 副本和视图是定义现有数据与原始数组之间关系的两种选项。根据这两种选项的特性，可以总结如下：
- en: '**Copy**: Uses a different memory space than the original array, but the data
    content is the same.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**副本**：使用与原始数组不同的内存空间，但数据内容相同。'
- en: '**View**: References the same memory address as the original array.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：引用与原始数组相同的内存地址。'
- en: '![](../Images/0631a2f1f1b65b13f83aa786a8ccc0e9.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0631a2f1f1b65b13f83aa786a8ccc0e9.png)'
- en: A copy may have multiple views. Image by Author
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一个副本可以有多个视图。图片来源：作者
- en: If we compare this to a book, a view is like a bookmark placed in the book,
    without creating a copy of the book.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将其与书籍进行比较，视图就像书中的书签，而不需要创建书籍的副本。
- en: On the other hand, a copy is a duplicate of the original book, containing a
    complete replica, including text and images. When you add notes to this copy,
    the original book remains unaffected.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，副本是原书的复制品，包含文本和图像的完整副本。当你在这个副本上做笔记时，原书不会受到影响。
- en: Making good use of both features
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 充分利用这两种特性
- en: Utilizing the characteristics of views and copies can help us write concise
    and efficient code.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 利用视图和副本的特性可以帮助我们编写简洁高效的代码。
- en: Let’s take arithmetic operations as an example. A new copy will be created if
    you use `a = a + 1`. However, if you use `a += 1` or `np.add`, broadcasting is
    applied, and the addition is performed directly on the original array.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以算术操作为例。如果你使用 `a = a + 1`，将会创建一个新的副本。然而，如果你使用 `a += 1` 或 `np.add`，则会应用广播，并且直接在原始数组上进行加法操作。
- en: 'Consider the following code, which measures the execution time:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 请看以下代码，该代码测量了执行时间：
- en: 'Executing the above code will yield a result similar to the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述代码将产生类似于以下结果：
- en: '![](../Images/27788bf9a18866baa8dc92921a9bda1f.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/27788bf9a18866baa8dc92921a9bda1f.png)'
- en: Using views for calculations takes less time. Screenshot by Author
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 使用视图进行计算所需时间更少。截图由作者提供
- en: As we can see from the results, using views for calculations takes less time.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 从结果来看，使用视图进行计算所需时间更少。
- en: Distinguishing between copies and views
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区分副本和视图
- en: Confirming whether the result is a view or a copy every time a calculation is
    performed would require much effort.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 确认每次计算结果是视图还是副本将需要付出很大努力。
- en: 'However, there’s a more straightforward way to verify this:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，还有一种更直接的验证方法：
- en: Use `may_share_memory` to determine if the two arrays in the argument refer
    to the same memory space. This judgment may not be strict. True doesn’t necessarily
    mean the arrays are shared, but False confirms that the arrays are definitely
    not shared.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`may_share_memory`来判断参数中的两个数组是否引用相同的内存空间。这个判断可能不够严格。True 并不一定意味着数组是共享的，但 False
    确认数组绝对不共享。
- en: If you need a more accurate answer, you can use the `share_memory` function.
    However, this function takes longer to execute than `may_share_memory`.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你需要更准确的答案，可以使用`share_memory`函数。然而，这个函数的执行时间比`may_share_memory`要长。
- en: Conclusion
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In summary, we have learned about the differences in memory arrangement between
    NumPy arrays and native Python lists.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，我们了解了 NumPy 数组与原生 Python 列表之间在内存安排上的差异。
- en: Due to the contiguous arrangement of the same data type in NumPy’s array, significant
    performance advantages are achieved in both Cache Locality and Vectorization.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 NumPy 数组中相同数据类型的连续排列，显著提高了缓存局部性和向量化的性能优势。
- en: Separating views and copies in NumPy’s design provides greater flexibility for
    code execution performance and memory management.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NumPy 的设计中分离视图和副本，为代码执行性能和内存管理提供了更大的灵活性。
- en: In the upcoming series of articles, I will start from the basics and reiterate
    the best practices for data science at work. If you have any suggestions or questions,
    please feel free to comment, and I will address them individually.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的系列文章中，我将从基础开始，重申工作中数据科学的最佳实践。如果你有任何建议或问题，请随时评论，我会逐一解答。
- en: 'Besides improving code execution speed and performance, using various tools
    to improve work efficiency is also a performance enhancement:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提高代码执行速度和性能外，使用各种工具提高工作效率也是一种性能提升：
- en: '![Peng Qian](../Images/fa6bd24b4781f623be8ea40c4e6bdb78.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![Peng Qian](../Images/fa6bd24b4781f623be8ea40c4e6bdb78.png)'
- en: '[Peng Qian](https://qtalen.medium.com/?source=post_page-----a74ce774bc1e--------------------------------)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[Peng Qian](https://qtalen.medium.com/?source=post_page-----a74ce774bc1e--------------------------------)'
- en: Python Toolbox
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 工具箱
- en: '[View list](https://qtalen.medium.com/list/python-toolbox-4289824c6407?source=post_page-----a74ce774bc1e--------------------------------)6
    stories![Seaborn 0.12: An Insightful Guide to the Objects Interface and Declarative
    Graphics](../Images/6c1f4ca8d7b82c288cb229b73f560c04.png)![Supercharge Your Python
    Asyncio With Aiomultiprocess: A Comprehensive Guide](../Images/9c366de04067cd0ec1b30d9ce223011b.png)![Conquer
    Retries in Python Using Tenacity: An In-depth Tutorial](../Images/e636d5546f5826d60865c6a95f976fa8.png)[](https://medium.com/@qtalen/membership?source=post_page-----a74ce774bc1e--------------------------------)
    [## Join Medium with my referral link - Peng Qian'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[查看列表](https://qtalen.medium.com/list/python-toolbox-4289824c6407?source=post_page-----a74ce774bc1e--------------------------------)6个故事![Seaborn
    0.12: An Insightful Guide to the Objects Interface and Declarative Graphics](../Images/6c1f4ca8d7b82c288cb229b73f560c04.png)![Supercharge
    Your Python Asyncio With Aiomultiprocess: A Comprehensive Guide](../Images/9c366de04067cd0ec1b30d9ce223011b.png)![Conquer
    Retries in Python Using Tenacity: An In-depth Tutorial](../Images/e636d5546f5826d60865c6a95f976fa8.png)[](https://medium.com/@qtalen/membership?source=post_page-----a74ce774bc1e--------------------------------)
    [## 加入 Medium 使用我的推荐链接 - Peng Qian'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为 Medium 的会员，你的部分会员费用将用于你阅读的作者，同时你可以全面访问每个故事……
- en: medium.com](https://medium.com/@qtalen/membership?source=post_page-----a74ce774bc1e--------------------------------)
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@qtalen/membership?source=post_page-----a74ce774bc1e--------------------------------)
- en: 'This article was originally published at: [https://www.dataleadsfuture.com/python-lists-vs-numpy-arrays-a-deep-dive-into-memory-layout-and-performance-benefits/](https://www.dataleadsfuture.com/python-lists-vs-numpy-arrays-a-deep-dive-into-memory-layout-and-performance-benefits/)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 本文最初发布于：[https://www.dataleadsfuture.com/python-lists-vs-numpy-arrays-a-deep-dive-into-memory-layout-and-performance-benefits/](https://www.dataleadsfuture.com/python-lists-vs-numpy-arrays-a-deep-dive-into-memory-layout-and-performance-benefits/)
