["```py\n# pandas histogram\nimport pandas as pd\nimport numpy as np\ndata = {'value' : [0,1,1,2,3,5,8,13,21,34,55,89,144]}\ndf = pd.DataFrame(data=data)\ndata_range = df['value'].max() - df['value'].min()\nnum_bins = np.ceil(data_range/5).astype(int)\nprint(num_bins) # 29\ndf['value'].hist(bins=num_bins, color='w', edgecolor='black', \n  linewidth=1.2, grid=False, figsize=(7,1.5))\n```", "```py\n# vizmath (modified) beeswarm chart\nfrom vizmath.beeswarm import swarm\nimport pandas as pd\nfrom math import pi\ndata = {\n    'id' : [str(i) for i in range(1, 14)],\n    'value' : [0,1,1,2,3,5,8,13,21,34,55,89,144]\n}\ndf = pd.DataFrame(data=data)\nbs = swarm(df, 'id', 'value', None, size_override=pi*(5/2)**2)\nbs.beeswarm_plot(color=False)\n```", "```py\n# vizmath crystal bar chart\nimport pandas as pd\nfrom vizmath.crystal_bar_chart import crystals\ndata = {\n    'id' : [str(i) for i in range(1, 14)],\n    'value' : [0,1,1,2,3,5,8,13,21,34,55,89,144]\n}\ndf = pd.DataFrame(data=data)\ncbc = crystals(df, 'id', 'value', 5, width_override=5, rotation=90)\ncbc.cbc_plot(legend=False, alternate_color=True, color=False)\n```", "```py\n# vizmath crystal bar chart with added width property\nimport pandas as pd\nfrom vizmath.crystal_bar_chart import crystals\ndata = {\n    'id' : [str(i) for i in range(1, 14)],\n    'value' : [0,1,1,2,3,5,8,13,21,34,55,89,144],\n    'size' : [5,13,8,7,6,8,13,5,11,4,9,12,6] # new size property\n}\ndf = pd.DataFrame(data=data)\ncbc = crystals(df, 'id', 'value', 5, width_field='size', rotation=90)\ncbc.cbc_plot(legend=False, alternate_color=True, color=False)\n```", "```py\n# vizmath crystal bar chart with adjusted origin\nimport pandas as pd\nfrom vizmath.crystal_bar_chart import crystals\ndata = {\n    'id' : [str(i) for i in range(1, 14)],\n    'value' : [0,1,1,2,3,5,8,13,21,34,55,89,144]\n}\ndf = pd.DataFrame(data=data)\ncbc = crystals(df, 'id', 'value', 5, width_override=5,\n    rotation=90, offset=21) # new offset\ncbc.cbc_plot(legend=False, alternate_color=True, color=False)\n```", "```py\nimport pandas as pd\nfrom vizmath.crystal_bar_chart import crystals # pip install vizmath==0.0.14\n\n# using the example data from above:\ndata = {\n    'id' : [str(i) for i in range(1, 14)],\n    'value' : [0,1,1,2,3,5,8,13,21,34,55,89,144],\n    'size' : [5,13,8,7,6,8,13,5,11,4,9,12,6]\n}\ndf = pd.DataFrame(data=data)\n\n# create a crystals object\n#   > df: DataFrame with 1 numerical column of data and an\n#     optional size column 'width_field'\n#   > id_field: required identifier (can be dummy values)\n#   > height_field: required value column\n#   > height_range: sequential differential clustering threshold\n#   > width_field = optional size column\n#   > bottom_up: False = descending, True = ascending\n#   > width_override: value constant to set the size value\n#     (overrides the width_field values)\n#   > offset: value to adjust the origin by\n#   > reset_origin: False = keeps offset, True: resets origin with offset\n#   > rotation: overall rotation around the center in degrees\ncbc = crystals(df, 'id', 'value', 5, width_field='size', bottom_up = True, \n    width_override = None, offset=21, reset_origin=True, rotation=90)\n\n#plot the Crystal Bar Chart\ncbc.cbc_plot(legend=False, alternate_color=True, color=False)\n```", "```py\n# Cyrtsal Bar Chart DataFrame\ncbc.o_crystal_bar_chart.df[['id', 'group', 'side',\n    'value', 'height', 'width', 'x', 'y', 'path']].head()\n```", "```py\nimport pandas as pd\n\n# https://en.wikipedia.org/wiki/List_of_diamonds (as of 12/25/2023)\n# filtered to enries with uncut and cut values with only 1 cut, >200 carats\ndiamonds = {\n    'Name' : [\n        '4 February Stone', 'Centenary Diamond', 'Cross of Asia',\n        'DeBeers Diamond', 'Earth Star Diamond', 'Golden Jubilee Diamond',\n        'Graff Lesedi La Rona', 'Great Mogul Diamond', 'Gruosi Diamond',\n        'Incomparable Diamond', 'Jubilee Diamond', 'Koh-i-Noor',\n        'Lesotho Brown', 'Lesotho Promise', 'Millennium Star',\n        'Premier Rose Diamond', 'Regent Diamond', 'Taylor-Burton Diamond',\n        'Tiffany Yellow Diamond'],\n    'Uncut' : [\n        404.2, 599, 280, 440, 248.9, 755.5, 1111, 780, 300.12, \n        890, 650.8, 793, 601, 603, 777, 353.9, 410, 241, 280],\n    'Cut' : [\n        163.41, 273.85, 79.12, 234.5, 111.59, 545.67, 302.37, 280, 115.34,\n        407.48, 245.3, 105.6, 71.73, 75, 203.04, 137, 140.64, 68, 128.54],\n    'Color' : [\n        'white', 'colorless', 'yellow', '-', 'brown', 'yellow-brown',\n        'colourless', '-', 'black', 'brownish-yellow', 'colorless',\n        'colorless', 'pale brown', 'colorless', 'colorless',\n        'colorless', 'white with pale blue', 'colorless', 'yellow'],\n    'Origin' : [\n        'Angola', 'South Africa', 'South Africa', 'South Africa',\n        'South Africa', 'South Africa', 'Botswana', 'India', 'India',\n        'Democratic Republic of Congo', 'South Africa', 'India', 'Lesotho',\n        'Lesotho', 'Democratic Republic of Congo', 'South Africa', 'India',\n        'South Africa', 'South Africa']\n    }\n\ndf = pd.DataFrame(data=diamonds)\n```", "```py\nfrom vizmath.crystal_bar_chart import crystals\ncbc = crystals(df, 'Name', 'Uncut', 100, width_field='Cut') # calculate\ncbc.o_crystal_bar_chart.dataframe_rescale(0, 5000, -2500, 2500) #rescale\ncbc.to_csv('crystal_bar_chart') # crystal bar chart output\ncbc.df.to_csv('data.csv') # original data\n```"]