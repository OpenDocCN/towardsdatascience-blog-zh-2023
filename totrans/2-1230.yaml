- en: How to Properly Deploy ML Models as Flask APIs on Amazon ECS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在 Amazon ECS 上将 ML 模型正确部署为 Flask APIs
- en: 原文：[https://towardsdatascience.com/how-to-properly-deploy-ml-models-as-flask-apis-on-amazon-ecs-98428f9a0ecf](https://towardsdatascience.com/how-to-properly-deploy-ml-models-as-flask-apis-on-amazon-ecs-98428f9a0ecf)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-properly-deploy-ml-models-as-flask-apis-on-amazon-ecs-98428f9a0ecf](https://towardsdatascience.com/how-to-properly-deploy-ml-models-as-flask-apis-on-amazon-ecs-98428f9a0ecf)
- en: Deploy XGBoost models on Amazon ECS to recommend perfect puppies
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Amazon ECS 上部署 XGBoost 模型以推荐完美的小狗
- en: '[](https://medium.com/@nikola.kuzmic945?source=post_page-----98428f9a0ecf--------------------------------)[![Nikola
    Kuzmic](../Images/b6be2a8e377bc450ced5260a79a1f4bb.png)](https://medium.com/@nikola.kuzmic945?source=post_page-----98428f9a0ecf--------------------------------)[](https://towardsdatascience.com/?source=post_page-----98428f9a0ecf--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----98428f9a0ecf--------------------------------)
    [Nikola Kuzmic](https://medium.com/@nikola.kuzmic945?source=post_page-----98428f9a0ecf--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nikola.kuzmic945?source=post_page-----98428f9a0ecf--------------------------------)[![Nikola
    Kuzmic](../Images/b6be2a8e377bc450ced5260a79a1f4bb.png)](https://medium.com/@nikola.kuzmic945?source=post_page-----98428f9a0ecf--------------------------------)[](https://towardsdatascience.com/?source=post_page-----98428f9a0ecf--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----98428f9a0ecf--------------------------------)
    [Nikola Kuzmic](https://medium.com/@nikola.kuzmic945?source=post_page-----98428f9a0ecf--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----98428f9a0ecf--------------------------------)
    ·8 min read·Mar 16, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----98428f9a0ecf--------------------------------)
    ·阅读时间 8 分钟·2023年3月16日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/d488dd1778ca6099a3740b2e610a8a63.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d488dd1778ca6099a3740b2e610a8a63.png)'
- en: Photo by [Carissa Weiser](https://unsplash.com/@carissaweiser?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Carissa Weiser](https://unsplash.com/@carissaweiser?utm_source=medium&utm_medium=referral)
    提供，来自 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: With the wild success of ChatGPT it is becoming apparent just how much AI technology
    will impact our lives. However, unless those amazing ML models are made available
    for everyone to use and deployed properly to address high user demand, they will
    fail to create any positive impact on the world. Hence, why it is so important
    to be able to not only develop AI solutions, but also know how to deploy them
    properly. Not to mention that this skillset will make you vastly more valuable
    on the marketplace and open career opportunities to take on the lucrative roles
    of ML Engineering.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 ChatGPT 的大获成功，AI 技术对我们生活的影响变得越来越明显。然而，除非这些出色的 ML 模型向所有人开放并且正确部署以应对高用户需求，否则它们将无法对世界产生任何积极影响。因此，能够不仅开发
    AI 解决方案，还要了解如何正确部署它们是如此重要。更不用说，这项技能将使你在市场上变得更有价值，并开启有利可图的 ML 工程师职业机会。
- en: In this post we’re going to deploy an **XGBoost** model as a **Flask API** using
    the **Gunicorn** application server on Amazon Elastic Container Service**.** The
    model will recommend aDachshund or a German Shepherd puppy based on how big someone’s
    home is.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将把 **XGBoost** 模型部署为 **Flask API**，并使用 **Gunicorn** 应用服务器在 Amazon Elastic
    Container Service 上进行部署。该模型将根据某人家的大小推荐一只腊肠犬或德国牧羊犬小狗。
- en: '![](../Images/dc2a92633d6bb52863eea43d0f470682.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dc2a92633d6bb52863eea43d0f470682.png)'
- en: 'Image by Author, Sources: [1–2]'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '图片由作者提供，来源: [1–2]'
- en: 👉 Game Plan
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 👉 游戏计划
- en: Train an XGBoost model
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 训练一个 XGBoost 模型
- en: Build a simple Gunicorn-Flask API to make recommendations
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建一个简单的 Gunicorn-Flask API 进行推荐
- en: Build a Docker Image for the API
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 API 构建 Docker 镜像
- en: Deploy the Docker Container on Amazon ECS
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Amazon ECS 上部署 Docker 容器
- en: 'Entire Source Code Github Repo: [link](https://github.com/kuzmicni/flask-on-ecs)🧑‍💻'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '完整源码 GitHub 仓库: [链接](https://github.com/kuzmicni/flask-on-ecs)🧑‍💻'
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Deploying ML Models on Cloud
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在云上部署 ML 模型
- en: It is often the case that we need to deploy our locally trained ML models to
    production for everyone on the internet to use. This approach requires first wrapping
    the ML model into an API and then Dockerizing it. AWS has built a specialized
    tool called Elastic Container Service (ECS) which removes the headache of managing
    compute environments like EC2s and enables us to simply deploy our Docker Containers
    using a serverless tool called **Fargate**.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常需要将本地训练的 ML 模型部署到生产环境中供互联网用户使用。这种方法需要首先将 ML 模型封装成 API，然后进行 Docker 化。AWS
    提供了一个名为 Elastic Container Service（ECS）的专用工具，它消除了管理计算环境（如 EC2）的麻烦，使我们可以使用名为 **Fargate**
    的无服务器工具简单地部署 Docker 容器。
- en: Note about Web vs Application Servers
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于 Web 服务器与应用服务器的说明
- en: 'In the traditional world of web development, it is common practice to have
    a Web Server, such as NGINX, handle enormous traffic from clients and interact
    with the backend applications (APIs) which serve dynamic content. A Web Server
    can be thought of as a waiter in a restaurant where he/she receives and processes
    orders from customers. Similarly, a web server receives and processes requests
    from web clients (such as web browsers). The waiter then communicates with the
    kitchen to have the order prepared and delivers the finished meal to the customer.
    In the same way, a web server communicates with the backend application to process
    the request and sends the response back to the web client. The setup would typically
    be as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的 web 开发世界中，通常的做法是让 Web 服务器（如 NGINX）处理来自客户端的大量流量，并与提供动态内容的后台应用程序（API）进行交互。可以将
    Web 服务器视为餐厅中的服务员，服务员接收并处理顾客的订单。类似地，Web 服务器接收并处理来自 Web 客户端（如 web 浏览器）的请求。服务员随后与厨房沟通以准备订单，并将完成的餐点送到顾客那里。同样，Web
    服务器与后台应用程序沟通以处理请求，并将响应发送回 Web 客户端。设置通常如下：
- en: '![](../Images/3113e0d3262d2d67c619c31913ef2db8.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3113e0d3262d2d67c619c31913ef2db8.png)'
- en: Image by Author
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Web Servers are awesome as they are able to distribute client requests to multiple
    backend applications and improve performance, security and scalability. However,
    in our case, since we’ll be deploying the Flask API on AWS, there are cloud-native
    Load Balancers which can handle traffic routing to the backend APIs and also enable
    us to enforce SSL encryption. Hence, including NGINX would be somewhat redundant.
    Having only a Gunicorn application server is sufficient for the majority of ML
    model deployment cases, given you intend to use AWS Load Balancers. Ok but…
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Web 服务器非常棒，因为它们能够将客户端请求分发到多个后台应用程序，从而提高性能、安全性和可扩展性。然而，在我们的案例中，由于我们将在 AWS 上部署
    Flask API，因此有云原生的负载均衡器可以处理流量路由到后台 API，并且还可以强制执行 SSL 加密。因此，包含 NGINX 会显得有些多余。仅使用
    Gunicorn 应用服务器对于大多数 ML 模型部署情况而言是足够的，前提是你打算使用 AWS 负载均衡器。好吧，但……
- en: What is WSGI & Gunicorn?
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 WSGI 和 Gunicorn？
- en: '**WSGI** (Web Server Gateway Interface) is simply a convention or a **set of
    rules** that need to be used when a web server communicates with a web application.
    **Gunicorn** (Green Unicorn) is one such **Application Server** which follows
    WSGI rules and handles client request when sending them to the Python Flask applications.
    Flask itself provides a WSGI Werkzeug’s development server for initial development,
    but if we want to deploy the API in production, then likely our Flask application
    needs to handle multiple requests at a time, hence why we need Gunicorn.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**WSGI**（Web 服务器网关接口）只是一个约定或 **规则集**，在 web 服务器与 web 应用程序通信时需要遵循。**Gunicorn**（绿色独角兽）是一个遵循
    WSGI 规则并处理客户端请求的 **应用服务器**，将请求发送到 Python Flask 应用程序。Flask 本身提供了 WSGI Werkzeug
    的开发服务器用于初步开发，但如果我们要在生产中部署 API，那么我们的 Flask 应用程序可能需要同时处理多个请求，因此我们需要 Gunicorn。'
- en: Typical Cloud Architecture for Real-time APIs
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实时 API 的典型云架构
- en: Running APIs in cloud is greatly enhanced by the Application Load Balancers
    (ALBs) as they can typically serve the purpose of NGINX and route traffic to our
    backend applications. This tutorial will only focus on deploying the **Flask API
    on ECS** and we can cover ALBs in a future post.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在云中运行 API 得到了应用负载均衡器（ALBs）的极大提升，因为它们通常可以代替 NGINX 的功能并将流量路由到我们的后台应用程序。这个教程将仅专注于在
    **ECS 上部署 Flask API**，我们可以在未来的帖子中讨论 ALBs。
- en: '![](../Images/2b2f52668a668d49376f4ea002d06a9a.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2b2f52668a668d49376f4ea002d06a9a.png)'
- en: Image by Author
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Alright, enough of background, let’s build & deploy some APIs!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，背景介绍完了，我们开始构建和部署一些 API 吧！
- en: '👉 Step 1: Train an XGBoost model'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 👉 第一步：训练 XGBoost 模型
- en: Train an XGBoost model to predict either a Dachshund (Wiener Dog) or a German
    Shepherd based on house area and save the model as a pickle file.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 训练一个 XGBoost 模型，根据房屋面积预测 Dachshund（腊肠犬）或 German Shepherd（德国牧羊犬），并将模型保存为 pickle
    文件。
- en: 'To run it inside VS Code, let’s create a separate Python 3.8 environment:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 VS Code 中运行它，我们来创建一个单独的 Python 3.8 环境：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Then Restart VS Code and in Jupyter Notebook -> Select '**py38demo**' as the
    Kernel.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后重新启动 VS Code 并在 Jupyter Notebook 中 -> 选择 '**py38demo**' 作为内核。
- en: 'Train & pickle the XGBoost model:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 训练并 pickle XGBoost 模型：
- en: '![](../Images/3dc22e313eb54d85806635d6a98169b2.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3dc22e313eb54d85806635d6a98169b2.png)'
- en: As you can see, we were able to train the model, tested it on a 300 & 600 ft2
    homes, and saved the XGBoost model as a **pickle** (.pkl) file.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们成功训练了模型，在 300 和 600 平方英尺的房屋上进行了测试，并将 XGBoost 模型保存为 **pickle** (.pkl)
    文件。
- en: '👉 Step 2: Build a simple Gunicorn-Flask API'
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 👉 步骤 2：构建一个简单的 Gunicorn-Flask API
- en: 'Let’s build a very simple Flask API which serves our XGBoost model predictions.
    We have a simple helper function which translates 0/1 model predictions into ‘wiener
    dog’/‘german shepherd’ outputs:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个非常简单的 Flask API 来提供我们的 XGBoost 模型预测。我们有一个简单的助手函数，将 0/1 模型预测转换为 ‘wiener
    dog’/‘german shepherd’ 输出：
- en: 'To run the API, in terminal:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行 API，请在终端中：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In a separate terminal, test it out by sending a POST request:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个终端中，测试一下发送 POST 请求：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'How I ran it locally on my Mac:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我是如何在我的 Mac 上本地运行它的：
- en: '![](../Images/1f73f9a77c74818c53bcbb1581b96dd5.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1f73f9a77c74818c53bcbb1581b96dd5.png)'
- en: 'Our API is working great but you can see we get a warning that this is a Development
    Server:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 API 工作得很好，但你可以看到我们收到一个警告，说明这是一个开发服务器：
- en: '![](../Images/4ea674183a38197dd0514885ed2aca3f.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4ea674183a38197dd0514885ed2aca3f.png)'
- en: 'Let’s stop our API, and use Gunicorn production-grade server instead:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们停止 API，改用 Gunicorn 生产级服务器：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Going back to our VS Code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的 VS Code：
- en: '![](../Images/a5f26cfb620603f0ccfbae2869d69ed3.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a5f26cfb620603f0ccfbae2869d69ed3.png)'
- en: Now we’re ready to Dockerize the API! 📦
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备好将 API Docker 化了！📦
- en: 👉 3\. Build a Docker Image for the API
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 👉 3. 为 API 构建 Docker 镜像
- en: Below is a **Dockerfile** which uses a python3.8 base image. We need the 3.8
    version since we used that version locally to train our XGBoost model.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 **Dockerfile**，它使用 python3.8 基础镜像。我们需要 3.8 版本，因为我们在本地使用该版本训练了 XGBoost
    模型。
- en: 'Note: since I am building the image on a Mac, I need to specify'
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：由于我在 Mac 上构建镜像，我需要指定
- en: ''
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- -platform linux/amd64'
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- -platform linux/amd64'
- en: for it to be compatible with the ECS Fargate Linux environment.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使其与 ECS Fargate Linux 环境兼容。
- en: Here’s how we build & run the image.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们构建和运行镜像的方法。
- en: 'Note: we bind our host (i.e. laptop’s) port 80 to docker container’s port 80:'
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：我们将主机（即笔记本电脑）的 80 端口绑定到 Docker 容器的 80 端口：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let’s quickly test it again:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速再测试一下：
- en: '![](../Images/0c387e865a0efd17425aaf980c0b1daa.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0c387e865a0efd17425aaf980c0b1daa.png)'
- en: Now that we know our API is working inside a Docker Container, it’s time to
    push it to AWS! 🌤️
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道我们的 API 在 Docker 容器内运行良好，是时候将其推送到 AWS 了！🌤️
- en: '👉 Step 4: Deploy the Docker Container on Amazon ECS'
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 👉 步骤 4：在 Amazon ECS 上部署 Docker 容器
- en: This section may look complicated at first, but actually is quite simple if
    we break the process into 6 simple steps.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个部分看起来可能很复杂，但实际上，如果我们将过程分解为 6 个简单步骤，就会很简单。
- en: '![](../Images/48d378716110eaaf9830785bc81ba3e1.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/48d378716110eaaf9830785bc81ba3e1.png)'
- en: Image by Author
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: '**i) Push the Docker image to ECR**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**i) 将 Docker 镜像推送到 ECR**'
- en: Let’s create an ECR repo called **demo** where we can push the Docker image.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为 **demo** 的 ECR 仓库，在这里我们可以推送 Docker 镜像。
- en: '![](../Images/052bc48fc29df4f521e507c1ce4522c1.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/052bc48fc29df4f521e507c1ce4522c1.png)'
- en: 'Then we can use the Push Commands provided by the ECR:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以使用 ECR 提供的推送命令：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Assumption: you have configured AWS CLI on your local machine and setup an
    IAM user with the right permission to interact with the ECR. You can find more
    info at this [link](https://docs.aws.amazon.com/AmazonECR/latest/userguide/getting-started-cli.html).'
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 假设：你已经在本地计算机上配置了 AWS CLI，并设置了具有正确权限的 IAM 用户来与 ECR 进行交互。你可以在此 [链接](https://docs.aws.amazon.com/AmazonECR/latest/userguide/getting-started-cli.html)
    中找到更多信息。
- en: After running the above 3 commands, we can see our image is there on ECR 🎉
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述 3 个命令后，我们可以看到我们的镜像已经在 ECR 上 🎉
- en: '![](../Images/0d986a7d46f60dccfb5000753d6c4285.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0d986a7d46f60dccfb5000753d6c4285.png)'
- en: '**Copy & Paste the Image URI** somewhere as we’ll need it in the next couple
    of steps.'
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**复制并粘贴图像 URI** 到某处，因为我们在接下来的步骤中需要它。'
- en: '**ii) Create an IAM Execution Role**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**ii) 创建一个 IAM 执行角色**'
- en: 'We need to create an Execution Role so that our ECS task which will run the
    container has the access to pull images from the ECR. We’ll name it: **simpleRole**'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个执行角色，以便我们的 ECS 任务能够从 ECR 拉取镜像。我们将其命名为：**simpleRole**
- en: '![](../Images/baa3344183dc1d1c70b2124b4fd2f84e.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/baa3344183dc1d1c70b2124b4fd2f84e.png)'
- en: '**iii) Create a Security Group**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**iii) 创建一个安全组**'
- en: 'Security Group is needed to allow anyone on the internet to send requests to
    our API. In the real world you may want to constrain this to a specific set of
    IPs but we’ll open it for everyone and call it: **simpleSG**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 安全组是必需的，以允许互联网中的任何人向我们的 API 发送请求。在现实中，你可能希望将其限制为特定 IP 集合，但我们将其开放给所有人，并称之为：**simpleSG**
- en: '![](../Images/b03a4f6fdaa10334799b8dd0fc1e057b.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b03a4f6fdaa10334799b8dd0fc1e057b.png)'
- en: '**iv) Create an ECS Cluster**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**iv) 创建一个 ECS 集群**'
- en: 'This step is straightforward and only takes couple seconds. We’ll call it:
    **flaskCluster**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步很简单，只需几秒钟。我们称之为：**flaskCluster**
- en: '![](../Images/7e86f7cfaede8933a5bacb1fb73dbbc1.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7e86f7cfaede8933a5bacb1fb73dbbc1.png)'
- en: while our cluster is being provisioned, let’s create a Task Definition.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的集群正在配置的同时，让我们创建一个任务定义。
- en: '**v) Create a Task Definition**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**v) 创建任务定义**'
- en: 'Task Definition, as the name implies is a set of instructions related to which
    image to run, port to open, and how much virtual CPU and memory we want to allocate.
    We’ll call it: **demoTask**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 任务定义，顾名思义，是一组与要运行的镜像、要打开的端口以及我们希望分配的虚拟 CPU 和内存相关的指令。我们称之为：**demoTask**
- en: '![](../Images/713bffc8c5e6f1cd4fdd219169bb96af.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/713bffc8c5e6f1cd4fdd219169bb96af.png)'
- en: '**vi) Run the Task**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**vi) 运行任务**'
- en: Let’s run our **demoTask** on **flaskCluster,** with the **simpleSG** from ***step
    iii)***.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在**flaskCluster**上运行我们的**demoTask**，使用来自***步骤 iii)***的**simpleSG**。
- en: '![](../Images/f46cd2d6ea10f104037ae766e2a28ad7.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f46cd2d6ea10f104037ae766e2a28ad7.png)'
- en: Time to test out our deployed API from the **Public IP** address! 🥁
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 该测试我们部署的 API 从**公共 IP**地址开始！ 🥁
- en: '[PRE7]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/d95cf31e132277c595c0d4eb4d33366c.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d95cf31e132277c595c0d4eb4d33366c.png)'
- en: It’s working! 🥳
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 它运行正常！ 🥳
- en: As you can see we are able to get a perfect puppy recommendation by sending
    a POST request to the **Public IP** provided by ECS. 🔥
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，我们通过向 ECS 提供的**公共 IP**发送 POST 请求，成功获得了完美的狗狗推荐。 🔥
- en: Thanks for reading, hope you found this useful for getting started with Flask,
    Gunicorn, Docker and ECS!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读，希望你发现这对入门 Flask、Gunicorn、Docker 和 ECS 有所帮助！
- en: Want more useful articles on ML Engineering?
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 想要更多关于机器学习工程的实用文章吗？
- en: '[*Subscribe for free*](https://medium.com/@nikola.kuzmic945/subscribe) *to
    get notified when I publish a new story.*'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[*免费订阅*](https://medium.com/@nikola.kuzmic945/subscribe) *以便在我发布新故事时收到通知。*'
- en: '*Become a Medium member to read more stories from me and thousands of other
    writers. You can support me by using my* [*referral link*](https://medium.com/@nikola.kuzmic945/membership)
    *when you sign up. I’ll receive a commission at no extra cost to you.*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*成为 Medium 会员以阅读我和其他成千上万位作者的更多故事。你可以通过使用我的* [*推荐链接*](https://medium.com/@nikola.kuzmic945/membership)
    *来支持我。你不会额外支付费用，但我会获得佣金。*'
- en: References
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考资料
- en: '[1] Dachshund Image: [Link](https://www.wisdompanel.com/en-us/dog-breeds/dachshund)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 腊肠犬图片：[链接](https://www.wisdompanel.com/en-us/dog-breeds/dachshund)'
- en: '[2] German Shepherd Image: [Link](https://www.lovetoknowpets.com/dogs/german-shepherd)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] 德国牧羊犬图片：[链接](https://www.lovetoknowpets.com/dogs/german-shepherd)'
