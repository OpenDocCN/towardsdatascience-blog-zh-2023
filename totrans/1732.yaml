- en: 'Python OOP Tutorial: How to Create Classes and Objects'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/python-oop-tutorial-how-to-create-classes-and-objects-c36a92b01552](https://towardsdatascience.com/python-oop-tutorial-how-to-create-classes-and-objects-c36a92b01552)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An easy guide to using classes and objects in Object-Oriented Programming (OOP)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@yazihejazi?source=post_page-----c36a92b01552--------------------------------)[![Yasmine
    Hejazi](../Images/1c280c78e49f62345b3cd0c30b185482.png)](https://medium.com/@yazihejazi?source=post_page-----c36a92b01552--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c36a92b01552--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c36a92b01552--------------------------------)
    [Yasmine Hejazi](https://medium.com/@yazihejazi?source=post_page-----c36a92b01552--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c36a92b01552--------------------------------)
    ·6 min read·Jan 4, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0dde12a92beeefc82d69df98b05a3724.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Taylor Heery](https://unsplash.com/@taylorheeryphoto?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Python programming, everything is an object. Variables and even functions
    are objects. **A class is a mold** that creates an object.
  prefs: []
  type: TYPE_NORMAL
- en: '*Think of a popsicle tray.* First, you manufacture the popsicle tray to create
    your desired size, shape, and depth; this is the **class**. Then, you can decide
    what to pour into your popsicle tray to freeze — maybe you add water and simply
    make ice, or maybe you add different kinds of fruit and juices to make popsicles.
    Each popsicle you create is an **object**, and objects can have different “data”
    or flavors associated with them.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This article will demonstrate with code how to create your own class and use
    it in your Python code. The different components of a class can be broken down
    into the following: constructors, getters and setters, properties, decorators,
    privacy naming, class methods, attributes, and inheritance.'
  prefs: []
  type: TYPE_NORMAL
- en: '**When to use a class/object versus a module:**'
  prefs: []
  type: TYPE_NORMAL
- en: Use classes when you need a number of individual instances with similar behavior
    but different data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use classes when you want support for inheritance; modules do not support inheritance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a module if you only want one of something
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the simplest solution; modules are usually simpler than classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction Example of a Class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Below is an example of a simple class. Within the class, we see three components:
    the `__init__` method which is the initialization method, or constructor, a setter
    method called `toss`, and a getter method called `get_sideup`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How do you use it in your main Python script? In your script, you simply call
    the object and set it to a new variable. Then you can begin to use its components.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Let’s break it down.
  prefs: []
  type: TYPE_NORMAL
- en: Class Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Object Initialization Method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you see a method with the special name `__init__`, you will know that this
    is the object initialization method. This is called the **constructor** because
    it constructs the object in memory. This method is run automatically when you
    create an object of your class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `__init__` method above requires an argument called **name**. When we create
    an object using our `Person` class, we should pass a name into the call like:
    `Person("Bob")`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **self** argument specifies that it refers to the individual object itself.
    Remember that the class is a **mold** and we can use that mold to initialize (and
    then later modify) multiple objects. For example, we can create two objects with
    the `Person` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Getters and Setters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some object-oriented languages support private object attributes that can’t
    be accessed directly from the outside. For that reason, you need **getter** and
    **setter** methods to read and write the values of private attributes.
  prefs: []
  type: TYPE_NORMAL
- en: All attributes and methods in Python are public. We don’t need getters and setters.
    To be “Pythonic”, use **properties**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The last line defines the getter and setter methods as properties of the **name**
    attribute. Now it will call the getter and setter methods in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Decorators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Decorators are another way to define properties (the same thing we did above).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Privacy Naming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Begin by using two underscores in the name. This makes it so that the attribute
    can’t be accessed outside of the class definition once you create your object.
    This also helps to prevent the accidental overriding of attributes by subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: In our Duck class, instead of using `hidden_name`, use `__name`.
  prefs: []
  type: TYPE_NORMAL
- en: '`self.hidden_name = input_name` → `self.__name = input_name`'
  prefs: []
  type: TYPE_NORMAL
- en: Class Methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, what we’ve been demonstrating have been **instance methods**. How can
    we tell? The first parameter of an instance method is **self**. When you call
    an instance method, the call will only affect the copy of the object you are working
    with.
  prefs: []
  type: TYPE_NORMAL
- en: Class methods affect the class as a whole (and therefore all of its copies of
    objects). Instead of the **self** parameter, a class method uses the **cls** parameter.
    A class method can be defined by using the class decorator `@classmethod`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Static methods** are a third type of method that affect neither the class
    nor its objects. It uses no self or cls parameters. It’s just there for convenience.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instance attributes are the outward behaviors we want the object instances
    to share. A student class may have the attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'methods: student.get_gpa(), student.add_class(), student.get_schedule()'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'data: student.first_name, student.last_name, student.class_list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dir(object_instance)` gives you the list of attributes of that object.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object_instance.__dict__` gives you all the instance attributes specific to
    that instance (and values)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A class attribute is an attribute of the class, rather than an attribute of
    an *instance* of a class. This is an attribute that all objects of the class share
    together. Let’s say we want to track that every student is a human:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If you want to know more, here is an [overly-thorough guide on Python class
    attributes](https://www.toptal.com/python/python-class-attributes-an-overly-thorough-guide).
  prefs: []
  type: TYPE_NORMAL
- en: Inheritance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Inheritance allows you to create a hierarchy of classes where a class acquires
    all the properties and behaviors of a parent class. Then you can make your own
    specifications on the child class that is different from the parent.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we have a parent class `Animal` with the ability to eat and sleep.
    Then we create a child class `Cat` that also takes on the attributes from `Animal`,
    plus its own special attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: All you need to do is pass the Animal class into Cat. Now the Cat class has
    `eat()` and `sleep()`. You can override the eat or sleep methods on the Cat subclass
    by simply defining the method in Cat. You can override any method using `__init__()`.
  prefs: []
  type: TYPE_NORMAL
- en: The child class can add a method that wasn’t in the parent (i.e.; `meow()`).
    The parent will not have this method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use `super()` when the child class is doing something on its own but still
    needs something from the parent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Benefits of inheritance:**'
  prefs: []
  type: TYPE_NORMAL
- en: Allows subclasses to reuse code from the parent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instead of starting a class from scratch, you can specialize or extend a class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The parent class can define an interface to allow subclasses to interact with
    a program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows the programmer to organize related objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A class is a mold (popsicle tray) and an object is created from that class (the
    popsicle)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Objects can call instance methods of their class (using self) to receive and
    change their data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privacy naming helps to prevent the accidental overriding of attributes by subclasses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classes themselves have methods (using cls) where you can track and manipulate
    all object instances of that class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inheritance allows us to bring similar classes to scale
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
