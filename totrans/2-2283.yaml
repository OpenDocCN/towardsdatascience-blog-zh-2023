- en: Utilising pykrige and matplotlib for Spatial Visualisation of Geological Variations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/utilising-pykrige-and-matplotlib-for-spatial-visualisation-of-geological-variations-a288b186bfd6](https://towardsdatascience.com/utilising-pykrige-and-matplotlib-for-spatial-visualisation-of-geological-variations-a288b186bfd6)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exploring Spatial Geological Variation from Well Log Measurements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://andymcdonaldgeo.medium.com/?source=post_page-----a288b186bfd6--------------------------------)[![Andy
    McDonald](../Images/df11d647be032aeb3d31852affb33a64.png)](https://andymcdonaldgeo.medium.com/?source=post_page-----a288b186bfd6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a288b186bfd6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a288b186bfd6--------------------------------)
    [Andy McDonald](https://andymcdonaldgeo.medium.com/?source=post_page-----a288b186bfd6--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a288b186bfd6--------------------------------)
    ·7 min read·Jun 13, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b6ab3c6febc3ef3385b82c9fba52aaca.png)'
  prefs: []
  type: TYPE_IMG
- en: Spatial variation of acoustic compressional slowness measurements across the
    Norwegian Continental Shelf. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: When working with geological and petrophysical data, we often want to understand
    how that data changes over our field or region. One of the ways we can do this
    is to grid our actual measurement values and extrapolate what those values may
    be in other areas that have yet to be explored using boreholes.
  prefs: []
  type: TYPE_NORMAL
- en: 'One particular method for carrying out this extrapolation is kriging, a geostatistical
    procedure named after South African mining engineer Danie G. Krige. The idea behind
    kriging lies in its estimation technique: it uses spatial correlation between
    observed data to predict values at unmeasured locations.'
  prefs: []
  type: TYPE_NORMAL
- en: By gauging how variables change over a distance, this method establishes a statistical
    relationship that can be used to predict values across an area, transforming scattered
    data points into a coherent spatial map.
  prefs: []
  type: TYPE_NORMAL
- en: Within this tutorial, we will look at a Python library called [**pykrige**](https://github.com/GeoStat-Framework/PyKrige)**.**
    This library has been designed for 2D and 3D kriging calculations and is easy
    to use with well log data.
  prefs: []
  type: TYPE_NORMAL
- en: Importing Libraries & Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we need to import the libraries we are going to need. For this article,
    we will require the following libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**pandas**](https://pandas.pydata.org/) — to read our data, which is in `csv`
    format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**matplotlib**](https://matplotlib.org/) to create our visualisation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**pykrige**](https://github.com/GeoStat-Framework/PyKrige) to carry out the
    kriging'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**numpy**](https://numpy.org/) for some numerical calculations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once we have imported the libraries, we can now import our data.
  prefs: []
  type: TYPE_NORMAL
- en: Within this tutorial, we will be using a dataset derived from the Xeek and Force
    2020 Machine Learning competition for predicting lithology from well log measurements.
    Details of this dataset can be found at the bottom of this article.
  prefs: []
  type: TYPE_NORMAL
- en: This subset of the competition dataset contains 65 well locations with average
    acoustic compressional slowness measurements for the Balder Formation.
  prefs: []
  type: TYPE_NORMAL
- en: To read our data we can use the pandas `read_csv()` function, and pass in the
    location of the datafile. In this example, we use a path relative to our Jupyter
    Notebook, but we could use an absolute path if our file is located elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When we view the dataframe, we will see that we have 65 wells, which contain
    the location of the top of the Balder Formation (X_LOC and Y_LOC for grid coordinates,
    and LAT & LON for latitude and longitude). We also have the True Vertical Depth
    Sub Sea (TVDSS) at which the formation was encountered, and the mean value for
    acoustic compressional slowness (DTC).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a0c32c7c2d4b57b4b66d801d5ff38e5b.png)'
  prefs: []
  type: TYPE_IMG
- en: Dataframe containing our location data for selected wells and the mean DTC —
    Acoustic Compressional Slowness value for the Balder Formation in the Norwegian
    North Sea. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Visualising the Spatial Locations of Wells
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our data has been successfully loaded into a dataframe, we can visualise
    our data to understand where our wells are located. To do this we will use matplotlib’s
    scatter plot and pass in the longitude and latitude columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above code, we get the following plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c32596ab85c3b2ae58adf97c366cf62e.png)'
  prefs: []
  type: TYPE_IMG
- en: Basic matplotlib figure shows the location of our wells and DTC values across
    the Norwegian North Sea region. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We can see the above figure is very basic, with no colourbar or axis labels.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s modify the plot slightly by adding these features to it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above code, we get back the following figure, which tells us
    more about our data. We can use the colourbar to estimate our point values.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fbc25669e84b8108e033f18b971366fb.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib scatter plot of selected wells within the Norwegian North Sea after
    adding colourbar and labels. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Applying Kriging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To better understand our data points and how the DTC measurement varies across
    the area for the Balder Formation, we can use kriging and our data points to fill
    in the gaps between our measured values.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we need to create an `OrdinaryKriging` object from the pykrige library.
  prefs: []
  type: TYPE_NORMAL
- en: Into this object we pass our location data for x and y, and the data we want
    to map to the z parameter.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to select what variogram model we want to use. In this case, we
    will use an exponential model. More details on the model types can be found in
    the [**documentation**](https://geostat-framework.readthedocs.io/projects/pykrige/en/stable/variogram_models.html).
  prefs: []
  type: TYPE_NORMAL
- en: As we are using latitude and longitude for our x and y coordinates, we can change
    the coordinates_type parameter to `geographic`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When we run the above, we return the following model summary and semi-variogram.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/befc8ead53a51f2831bf8c1aed96b4a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Model summary from pykrige. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a short rundown of the parameters that are returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nugget**: The nugget is the y-intercept of the variogram, representing the
    variance at zero distance, often due to measurement errors or very small-scale
    variations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Full Sill**: The sill is the maximum variance the variogram reaches and begins
    to level off, which happens when the points are very far apart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Range**: The range is the distance at which the variogram reaches the sill,
    meaning the distance beyond which further separation of points does not increase
    the variance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Partial Sill**: The partial sill is the difference between the sill and the
    nugget, representing the amount of variance that is spatially structured in the
    data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This can give us an understanding of how suitable our model is for the data
    based on the shape of the generated line and points.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the Kriging Results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To begin displaying our data, we need to create a data grid.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we first create arrays for the latitudes and longitudes between
    the coordinates we define. In this case, we would like the chart to extend from
    57.5 degrees N to 62 degrees N and from 1.5 degrees E to 4.5 degrees E.
  prefs: []
  type: TYPE_NORMAL
- en: Using `np.arange` will allow us to create these arrays at regular spacing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the X & Y coordinates, we can create our grid of values. For
    this, we call upon `OK.execute`, and pass in our latitude and longitude arrays.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This will return two arrays. Our data grid (zstar) and the uncertainty associated
    with it (ss)
  prefs: []
  type: TYPE_NORMAL
- en: Next, we can now use our data array and plot it using matplotlib’s `imshow`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When we run this, we get back the following map showing the variation in acoustic
    compressional slowness for the Balder Formation across our 65 wells.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2bf7c79319cfddb5a722c02afe038f1a.png)'
  prefs: []
  type: TYPE_IMG
- en: Data grid for acoustic compressional slowness (DTC) generated using pykrige.
    Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We can see that around 59 to 60 degrees N we have much faster rocks, and in
    the North East and South West regions we have much slower rocks.
  prefs: []
  type: TYPE_NORMAL
- en: To interpret this, we would need to understand how deep the formation is at
    each of these wells. This will allow us to identify whether the difference relates
    to burial and compaction or other geological processes.
  prefs: []
  type: TYPE_NORMAL
- en: We will see how we can do this in a future article.
  prefs: []
  type: TYPE_NORMAL
- en: Visualising Kriging Uncertainty
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the key things when looking at data like this is to understand the uncertainty
    associated with the kriging.
  prefs: []
  type: TYPE_NORMAL
- en: We can do this by resuing the same plotting code, and instead of `zstar` being
    passed in, we can swap it for the `ss` variable we created earlier.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: With the following plot, we are able to see the areas where we have a high or
    low uncertainty.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/33667557b458eeda72df0f2dd9bb3969.png)'
  prefs: []
  type: TYPE_IMG
- en: An uncertainty data grid for acoustic compressional slowness (DTC) generated
    using pykrige. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: In areas where we have less coverage from the wells, we will have a much higher
    uncertainty, whereas in areas where we have multiple wells, our uncertainty will
    be much lower.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within this tutorial, we have seen how we can take average values for a well
    log measurement (DTC) and map them across an entire region. This allows us to
    understand the trends in our data over a geographical area.
  prefs: []
  type: TYPE_NORMAL
- en: However, when looking at this data, we must bear in mind that we are looking
    at a 2D surface rather than a more complex 3D structure, which we encounter within
    the subsurface. Therefore, variations in measurement could be attributable to
    variations in depth.
  prefs: []
  type: TYPE_NORMAL
- en: Dataset Used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The dataset used in this article is a subset of a training dataset used as
    part of a Machine Learning competition run by Xeek and FORCE 2020 *(Bormann et
    al., 2020)*. It is released under a NOLD 2.0 licence from the Norwegian Government,
    details of which can be found here: [Norwegian Licence for Open Government Data
    (NLOD) 2.0](https://data.norge.no/nlod/en/2.0/). The full dataset can be accessed
    [here](https://doi.org/10.5281/zenodo.4351155).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The full reference for the dataset is:'
  prefs: []
  type: TYPE_NORMAL
- en: Bormann, Peter, Aursand, Peder, Dilib, Fahad, Manral, Surrender, & Dischington,
    Peter. (2020). FORCE 2020 Well well log and lithofacies dataset for machine learning
    competition [Data set]. Zenodo. [http://doi.org/10.5281/zenodo.4351156](http://doi.org/10.5281/zenodo.4351156)
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks for reading. Before you go, you should definitely subscribe to my content
    and get my articles in your inbox.* [***You can do that here!***](https://andymcdonaldgeo.medium.com/subscribe)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Secondly, you can get the full Medium experience and support thousands of
    other writers and me by signing up for a membership. It only costs you $5 a month,
    and you have full access to all of the fantastic Medium articles, as well as the
    chance to make money with your writing.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you sign up using* [***my link***](https://andymcdonaldgeo.medium.com/membership)***,***
    *you will support me directly with a portion of your fee, and it won’t cost you
    more. If you do so, thank you so much for your support.*'
  prefs: []
  type: TYPE_NORMAL
