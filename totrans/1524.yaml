- en: ML model registry — the “interface” that binds model experiments and model deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/ml-model-registry-the-interface-that-binds-model-experiments-and-model-deployment-f6df00f0b695](https://towardsdatascience.com/ml-model-registry-the-interface-that-binds-model-experiments-and-model-deployment-f6df00f0b695)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: MLOps in Practice — A deep- dive into ML model registries, model versioning
    and model lifecycle management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@weiyunna91?source=post_page-----f6df00f0b695--------------------------------)[![YUNNA
    WEI](../Images/ffd0dd5c697dd2b4640ade49274d2bf9.png)](https://medium.com/@weiyunna91?source=post_page-----f6df00f0b695--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f6df00f0b695--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f6df00f0b695--------------------------------)
    [YUNNA WEI](https://medium.com/@weiyunna91?source=post_page-----f6df00f0b695--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f6df00f0b695--------------------------------)
    ·8 min read·Feb 16, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '**Background**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In my previous article:'
  prefs: []
  type: TYPE_NORMAL
- en: '[MLOps in Practice — De-constructing an ML Solution Architecture into 10 components](/mlops-in-practice-de-constructing-an-ml-solution-architecture-into-10-components-c55c88d8fc7a?sk=a14ce7ead68a2f90868d7a063eea84e3)'
  prefs: []
  type: TYPE_NORMAL
- en: I talked about the architectural importance of managing model metadata and artifacts
    generated by ML experiment runs. We all know that the model training process produces
    many artifacts for further ML model performance tuning, as well as for subsequent
    ML model deployment. These artifacts include the trained models themselves as
    well as model parameters and hyperparameters, metrics, codes, notebooks, configurations
    and so on. Central management and leveraging these model artifacts and metadata
    is critical for a robust MLOps architecture. Therefore, in today’s article, I
    will discuss the ML model registry store, which performs as the “interface” that
    binds model experiments and model deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, today’s article will focus on the following aspects:'
  prefs: []
  type: TYPE_NORMAL
- en: The question of …… what is an ML registry store, as well as the key functions
    performed by a ML registry store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The key benefits brought by an ML model registry store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to integrate an ML model registry into an end-to-end MLOps solution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The technologies behind a ML registry store and popular open source solutions
    for a ML registry store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/e5ac4442dd93d7bac0482abd94be00af.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Robert Anasch](https://unsplash.com/ko/@diesektion?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: What is an ML registry ?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An ML registry is a centralized place to store all your ML artifacts along with
    their metadata from early-stage experiments to production-ready models. Similar
    to container registries like DockerHub or Python package registries like PyPi,
    an ML registry allows data scientists and ML practitioners to publish and share
    ML models and artifacts. Generally, an ML registry provides a User Interface (UI),
    as well as set of APIs for ML admins and users to register, discover, share, version,
    and manage permissions and lifecycle of ML models.
  prefs: []
  type: TYPE_NORMAL
- en: 'The information kept within an ML registry store, can be summarized into the
    following categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model metadata** including model name, model annotations and descriptions,
    model tags, model creation time, model modification time and model schema (model
    input schema and output schema);'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model lifecycle management** encompasses all stages of a model’s life, from
    its creation to its retirement. For example, [MLflow](https://mlflow.org/) provides
    predefined stages for common use-cases such as Staging, Production and Archived.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model versioning.** It is almost 100% certain that there will be multiple
    versions for any registered ML model. The reason is that ML models need to be
    constantly monitored and updated to reflect how the business context and data
    changes. Model versioning is more than just providing a version number, but a
    mechanism to align each version of the ML model with the corresponding data, features
    and codes used to train it for end-to-end model lineage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model governance —** including managing model permissions (controlling who
    can manage and update models), auditing model activities and usage trails, reviewing
    and approving models before deploying into production, notifications for critical
    model changes and model lineage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model serving**. Model registry can facilitate model serving by providing
    webhooks that enable ML engineers to listen for model registry events. When a
    particular event happens, corresponding actions can be automatically triggered.
    You can use webhooks to automate and integrate your ML pipelines with existing
    CI/CD tools and workflows. For example, you can trigger CI builds when a new model
    version is created, or notify your team members through Slack each time a model
    transition to production is requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model monitoring and debugging**. After an ML model is deployed into production,
    monitoring how the model performs is necessary. An ML model registry provides
    the mechanism for data scientists to test against the deployed models with production
    data to closely monitor how the model performs. If any model degradation is identified,
    data scientists can leverage the model linage information to identify root causes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/552fea98b636c845b90b95cdac652d4d.png)'
  prefs: []
  type: TYPE_IMG
- en: Key components of a ML model registry | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Key benefits brought by an ML model registry store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Productivity** — A central ML registry significantly removes the silos where
    each data science / ML team manages their own ML models and artifacts. An ML registry
    can perform like an ML model marketplace where teams can publish, share and reuse
    the work of other teams. Overall, this can significantly improve the team productivity
    and have more ML applications developed with less resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Governance** — Responsible AI and ML governance have been critical topics
    for many organizations from regulatory, ethical, social, and legal perspectives.
    A central ML registry can assist the AI/ML governance effort, by providing information
    such as model permissions, model usage trails, model auditing reports, and model
    linage to raw and features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Collaboration** —An ML model registry is the single and unified interface
    shared by both data scientists and ML engineers, which can facilitate and streamline
    the handoff between data scientists and ML engineers. When data scientists are
    happy with the overall model performance after rounds of experiments, they will
    hand over the code and model to ML engineers for production deployment. Having
    the ML model registry in place, ML engineers have good visibility of understanding
    how the model is trained, what data and features are used, and what the feature
    engineering logics are. This significantly reduces the communication effort between
    data scientists and ML engineers and improves the collaboration among teams.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/86c924d8f744970f8422d290f1dff5fa.png)'
  prefs: []
  type: TYPE_IMG
- en: Key benefits brought by an ML model registry store | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: The technologies behind an ML registry store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Under the hood, model registries generally comprise the following two elements:'
  prefs: []
  type: TYPE_NORMAL
- en: One is an ML entities (metadata) store — The entities store, stores the metadata
    of ML entities, such as ML experiments, runs, parameters, metrics, tags, notes,
    sources, lifecycle stages, as well as ML artifact locations. An ML entities store
    is normally implemented by a SQL relational database, such as PostgreSQL, MySQL,
    MSSQL and SQLite.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The other is an ML artifacts store — The artifacts store persists artifacts
    files, models, images, in-memory objects, model summary or any objects that are
    logged to the ML registry store. The artifact store is a location suitable for
    large data and is where clients log their artifact output (for example, models).
    The artifact store implementation is generally backed up by a persistent file
    system, such as Amazon S3 and S3-compatible storage, Azure Blob Storage, Google
    Cloud Storage, FTP server, SFTP Server, NFS and HDFS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/7caf11682d37e4f2d9b114270a2f2534.png)'
  prefs: []
  type: TYPE_IMG
- en: The technologies behind an ML registry store | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Integrate an ML model registry into an end-to-end MLOps solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An ML model registry plays a very important role for the 3 critical stages
    of an end-to-end MLOps solution:'
  prefs: []
  type: TYPE_NORMAL
- en: The first is **model development** — Model development is very iterative and
    experimental, meaning data scientists need to try various algorithms, frameworks,
    and different combinations of features, parameters and hyperparameters for these
    algorithms, in order to find out what works best for the problem. Therefore being
    able to reproduce ML experiments runs can significantly improve data scientist’s
    productivity and help them to more quickly find the most ideal solution. An ML
    model registry provides lineage capabilities that allow data scientists to trace
    back from a registered ML model to the training runs that produce the model, so
    that they can either reproduce the model or make necessary changes to retrain
    a newer version of the ML model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second is **model deployment** — Model registry events (such as a new model
    version being created for the associated model or a model version’s stage being
    changed from staging to production) can be leveraged to automatically trigger
    ML model deployment. For example, you can trigger CI builds when a new model version
    is created, or notify your team members through Slack each time a model transition
    to production is requested. You can also integrate the model registry events to
    automatically trigger existing CI/CD pipleines and workflows.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third is **model in production** — Model registry provides a holistic view
    of all the models in production and allows the ML operation teams to monitor these
    models accordingly. ML models are extremely data reliant. Therefore, ML models
    can have deteriorated performance not only due to suboptimal coding, but also
    due to constantly evolving data landscapes. Once model performance deterioration
    is identified, an ML registry service can help ML operations team debug and retrain
    the model by providing necessary model artifacts and model lineage capability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Therefore, MLOps in it’s entirety, cannot be done fully and correctly until
    you have a state-of-the-art Model Registry.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0d65ddb593fceda9a275ed5a14dc2e53.png)'
  prefs: []
  type: TYPE_IMG
- en: Integrate an ML model registry into an end-to-end MLOps solution | Image by
    Author
  prefs: []
  type: TYPE_NORMAL
- en: The popular solutions for a ML registry store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[MLflow Model Registry](https://mlflow.org/docs/latest/model-registry.html)
    — MLflow is an open source platform to manage the ML lifecycle, including experimentation,
    reproducibility, deployment, and a central model registry. The fourth major component
    of MLflow is the model registry. With MLflow, you can build a registry store in
    your local file system of the machine where MLflow is running, or you can spin
    up a remote central tracking server where teams can centrally register and share
    ML model artifacts. If you are already on Databricks, you would have access to
    a hosted tracking server available to you.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[VertaAI ModelDB](https://github.com/VertaAI/modeldb) — An open-source system
    for Machine Learning model versioning, metadata, and experiment management. The
    Verta library comes with a model catalog component where users can find, publish,
    and use ML models or ML model pipeline components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Amazon SageMaker Model Registry](https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry.html)
    — As is well-known, SageMaker is AWS’s ML manager, that provides various components
    for users to build, train and deploy ML models. SageMaker also has a model registry
    service that users can catalog versions of an ML model into predefined model package
    groups. If you have built your ML platform on top of SageMaker, SageMaker’s native
    model registry could be a good option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ML model registry is a central component of MLOps that assists to minimize
    the well-known gap between model experiments, activities and model production
    activities. It’s a fact, I believe, that MLOps cannot be done right until you
    have a state-of-the-art Model Registry.
  prefs: []
  type: TYPE_NORMAL
- en: Please feel free to let me know if you have any comments and questions on this
    topic or other MLOps related topics! I generally publish 1 article related to
    data and AI every week. Please feel free to follow me on Medium so that you can
    get notified when these articles are published.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to see more guides, deep dives, and insights around modern and efficient
    data+AI stack, please subscribe to my free newsletter — [***Efficient Data+AI
    Stack***](https://yunnawei.substack.com/), thanks!
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: Just in case you haven’t become a Medium member yet, and you really should,
    as you’ll get unlimited access to Medium, you can sign up using my [referral link](https://medium.com/@weiyunna91/membership)!'
  prefs: []
  type: TYPE_NORMAL
- en: Thanks so much for your support!
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://mlflow.org/docs/latest/model-registry.html](https://mlflow.org/docs/latest/model-registry.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.databricks.com/mlflow/model-registry-webhooks.html](https://docs.databricks.com/mlflow/model-registry-webhooks.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.tensorflow.org/tfx/guide/mlmd](https://www.tensorflow.org/tfx/guide/mlmd)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry.html](https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/VertaAI/modeldb](https://github.com/VertaAI/modeldb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
