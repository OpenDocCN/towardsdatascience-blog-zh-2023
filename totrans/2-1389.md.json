["```py\nkind create cluster --name kserve-demo\n```", "```py\nkubectx kind-kserve-demo\n```", "```py\n# Install istio\ncurl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.16.0 TARGET_ARCH=x86_64 sh -\nistioctl install --set profile=default -y\n```", "```py\n# Install the Knative Serving component\nexport KNATIVE_VERSION=\"v1.7.2\"\nkubectl apply -f https://github.com/knative/serving/releases/download/knative-$KNATIVE_VERSION/serving-crds.yaml\nkubectl apply -f https://github.com/knative/serving/releases/download/knative-$KNATIVE_VERSION/serving-core.yaml\n\n# Install istio-controller for knative\nkubectl apply -f https://github.com/knative/net-istio/releases/download/knative-v1.7.0/net-istio.yaml\n```", "```py\nhelm repo add jetstack https://charts.jetstack.io\nhelm repo update\nhelm install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --version v1.11.0 --set installCRDs=true\n```", "```py\nkubectl create namespace kserve\n```", "```py\ngit clone git@github.com:kserve/kserve.git\n```", "```py\ncd kserve\nhelm install kserve-crd charts/kserve-crd -n kserve\nhelm install kserve-resources charts/kserve-resources -n kserve\n```", "```py\nkubectl apply -n kserve -f - <<EOF\napiVersion: \"serving.kserve.io/v1beta1\"\nkind: \"InferenceService\"\nmetadata:\n  name: \"sklearn-iris\"\nspec:\n  predictor:\n    model:\n      modelFormat:\n        name: sklearn\n      storageUri: \"gs://kfserving-examples/models/sklearn/1.0/model\"\nEOF\n```", "```py\nkubectl get pods -n kserve\n```", "```py\nkubectl describe pod <name_of_pod> -n kserve\n```", "```py\nkubectl get isvc -A\n```", "```py\nkubectl get svc istio-ingressgateway -n istio-system\n```", "```py\nkubectl port-forward -n istio-system service/istio-ingressgateway 8080:80\n```", "```py\nexport INGRESS_HOST=localhost\nexport INGRESS_PORT=8080\n```", "```py\nexport INGRESS_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')\nexport INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name==\"http2\")].port}')\n```", "```py\ncat <<EOF > \"./iris-input.json\"\n{\n  \"instances\": [\n    [6.8,  2.8,  4.8,  1.4],\n    [6.0,  3.4,  4.5,  1.6]\n  ]\n}\nEOF\n```", "```py\nSERVICE_HOSTNAME=$(kubectl get inferenceservice sklearn-iris -n kserve -o jsonpath='{.status.url}' | cut -d \"/\" -f 3)\ncurl -v -H \"Host: ${SERVICE_HOSTNAME}\" -H \"Content-Type: application/json\" \"http://${INGRESS_HOST}:${INGRESS_PORT}/v1/models/sklearn-iris:predict\" -d @./iris-input.json \n```", "```py\nkubectl apply -n kserve -f - <<EOF\napiVersion: \"serving.kserve.io/v1beta1\"\nkind: \"InferenceService\"\nmetadata:\n  name: \"sklearn-iris\"\nspec:\n  predictor:\n    minReplicas: 0\n    model:\n      modelFormat:\n        name: sklearn\n      storageUri: \"gs://kfserving-examples/models/sklearn/1.0/model\"\nEOF\n```", "```py\nkubectl get pods -n kserve\n```", "```py\nSERVICE_HOSTNAME=$(kubectl get inferenceservice sklearn-iris -n kserve -o jsonpath='{.status.url}' | cut -d \"/\" -f 3)\ncurl -v -H \"Host: ${SERVICE_HOSTNAME}\" \"http://${INGRESS_HOST}:${INGRESS_PORT}/v1/models/sklearn-iris:predict\" -d @./iris-input.json\n```"]