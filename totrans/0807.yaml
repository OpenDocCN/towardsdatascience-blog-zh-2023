- en: Enhance Your Polar Bar Charts With Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/enhance-your-polar-bar-charts-with-matplotlib-c08e332ec01c](https://towardsdatascience.com/enhance-your-polar-bar-charts-with-matplotlib-c08e332ec01c)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Improve Your Polar Bar Chart Data Visualisations With a Few Simple Tweaks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://andymcdonaldgeo.medium.com/?source=post_page-----c08e332ec01c--------------------------------)[![Andy
    McDonald](../Images/df11d647be032aeb3d31852affb33a64.png)](https://andymcdonaldgeo.medium.com/?source=post_page-----c08e332ec01c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c08e332ec01c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c08e332ec01c--------------------------------)
    [Andy McDonald](https://andymcdonaldgeo.medium.com/?source=post_page-----c08e332ec01c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c08e332ec01c--------------------------------)
    ·8 min read·Apr 24, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/117d3fa97589d9986c02fffa1aa742da.png)'
  prefs: []
  type: TYPE_IMG
- en: Polar bar chart created with matplotlib and themed using mplcyberpunk. Image
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Polar bar charts provide a great alternative to traditional bar charts. Rather
    than the bars being arranged horizontally or vertically on Cartesian coordinates,
    these charts represent them using a polar grid.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting data this way can help visualise cyclical data and provide a more eye-catching
    and aesthetically pleasing data visualisation.
  prefs: []
  type: TYPE_NORMAL
- en: Polar bar charts can easily be created in [matplotlib](https://matplotlib.org/);
    however, the default chart is lacking and needs a little work to make it more
    visually appealing.
  prefs: []
  type: TYPE_NORMAL
- en: Within this short tutorial, we will see how we can improve upon the basic chart
    that is generated by changing the styling and even applying a cyberpunk theme
    to the data for something more eye-catching.
  prefs: []
  type: TYPE_NORMAL
- en: Importing Libraries and Setting Up Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step is to import the libraries that we will need. In this tutorial,
    we will be using [numpy](https://numpy.org/) to perform some calculations and
    [matplotlib](https://matplotlib.org/) to display our plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once the libraries have been imported, we can create some data to work with.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we will create dummy data representing a survey where people
    select their favourite rock type.
  prefs: []
  type: TYPE_NORMAL
- en: To create this dummy data set, we first have to create ten random integers between
    1 and 10\. This will represent ten different rock names, which we will create
    next and assign to the variable `rock_names`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Creating a Basic Matplotlib Bar Chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating simple charts is very easy with matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create a simple bar chart to see what our plot would look like.
  prefs: []
  type: TYPE_NORMAL
- en: To create the bar chart, all we need are two lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When the code is run, we get the following chart.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/87085a8b5416f533c8631263b3d71831.png)'
  prefs: []
  type: TYPE_IMG
- en: Basic bar chart created using matplotlib. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: This is the standard chart style that is generated using matplotlib. They are
    very dull, uninspiring, and often confusing. Generally, we need to improve these
    charts with several lines of code before we have something that can be used in
    a infographic or visualisation dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: In a previous article, I covered how to take your traditional bar chart to the
    next level in 7 simple steps. You can check it out below.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/7-steps-to-help-you-make-your-matplotlib-bar-charts-beautiful-f87419cb14cb?source=post_page-----c08e332ec01c--------------------------------)
    [## 7 Steps to Help You Make Your Matplotlib Bar Charts Beautiful'
  prefs: []
  type: TYPE_NORMAL
- en: Easily Improve the Quality of Your Matplotlib Data Visualisations With a Few
    Simple Tweaks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/7-steps-to-help-you-make-your-matplotlib-bar-charts-beautiful-f87419cb14cb?source=post_page-----c08e332ec01c--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Polar Bar Chart with Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s now have a look at a polar bar chart, which is essentially the same chart
    as above, but rather than being plotted on a traditional cartesian coordinate
    system; we are now plotting it on a polar project.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see below, we need several lines of code to create our basic figure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: First, we need to create our figure object by calling upon `plt.subplots`. It
    is here that we can specify that we want the data to be plotted on a polar projection.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then create four new variables based on our original lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '`indexes` : creates a list of numbers ranging from 0 to the total number of
    items in our list. In our case, this will generate a list from 0 to 9.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`width` : creates a list based on calculating the width of each bar in the
    chart by dividing the circumference of a circle by the number of rock types we
    have in `rock_names`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`angles` : creates a list containing the angles for each of the rock types'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`label_loc` : creates a list of evenly spaced values between 0 and 2 * pi for
    displaying the rock-type labels'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once these variables have been created, we can call upon `ax.bar` and begin
    passing in some of the variables to the required parameters.
  prefs: []
  type: TYPE_NORMAL
- en: To make the grid appear below the bars, we can set the `zorder` value to 2.
  prefs: []
  type: TYPE_NORMAL
- en: We will also set the `edgecolour` of the bars to black and the opacity (alpha)
    to 0.8.
  prefs: []
  type: TYPE_NORMAL
- en: When we run the code, we return the following chart, and we now have a basic
    polar bar plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/76ebb210d93a5f534a371d7ad2d61076.png)'
  prefs: []
  type: TYPE_IMG
- en: A basic matplotlib polar bar chart. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: In the above chart, we can see that we do not know what each of the bars are
    — which can be addressed by adding our labels from the `label_loc` list.
  prefs: []
  type: TYPE_NORMAL
- en: We will also see that the spokes extending from the centre do not match the
    bars, which we can easily address.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Labels to the Polar Bar Chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let’s add some labels to our plot.
  prefs: []
  type: TYPE_NORMAL
- en: To ensure our labels are easily readable without having to strain our necks,
    we can make sure that the labels are positioned appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we need to loop over the elements in our `angles` , `rankings` and
    `rock_names` lists.
  prefs: []
  type: TYPE_NORMAL
- en: We then need to convert the angle measurement from radians to degrees.
  prefs: []
  type: TYPE_NORMAL
- en: We then need to check what the current angle is within the loop. If the angle
    of the bar is less than pi, then 90 degrees is subtracted from the rotation angle.
    Otherwise, if the bar is in the bottom half of the circle, 90 degrees is added
    to the rotation angle.
  prefs: []
  type: TYPE_NORMAL
- en: Note that in the previous image, 0 degrees is located on the right-hand side
    of the plot.
  prefs: []
  type: TYPE_NORMAL
- en: Following that, we then need to add the labels using `ax.text.` To ensure that
    the labels are positioned outside the plot, we can set the `y` parameter to 11,
    as our max value for our outer ring is 10.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When the code is run, we now get the following plot with the labels neatly positioned
    around the chart, and they are easily readable.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bad1b898082d4e5d51273acc7b8caf2b.png)'
  prefs: []
  type: TYPE_IMG
- en: Polar bar chart after setting the labels to be parallel with the bars. Image
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Formatting the Radial Bar Plot Grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous plots, we had the grid displayed in the background. However,
    the spokes are misaligned with the edges of the bars.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few ways to tackle this. In this example, I have added a second
    radial bar chart which sits underneath the data bars called `bars_bg` . This is
    set to grey, and the height parameter is set to 10, which creates a fill all the
    way to the edge of the plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: To hide the grid lines, we can use `ax.set_ticks` and pass it an empty list.
  prefs: []
  type: TYPE_NORMAL
- en: We may also want to retain the polar grid so that we can see the segments clearly.
    This is optional, but it can help with readability.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Our full code for creating the polar bar chart now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Which then generates the following plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a2cee878070330fdfb2a1c83d7711909.png)'
  prefs: []
  type: TYPE_IMG
- en: Polar bar chart after tweaking styling and fixing gridlines. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We can tweak the plot until we are happy with it, however, this gives a much
    more improved plot compared to the one we started with.
  prefs: []
  type: TYPE_NORMAL
- en: Cyberpunking Our Radial Bar Chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we want to change the styling of the plot, we can use one of the many theming
    libraries available for matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: Applying these styles often requires adding a couple of lines of code — usually
    an `import` statement and a `with` statement containing the selected style.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the full code for cyberpunking the plot. Note that a few changes were
    made to the to `alpha` values for the bars to make them slightly less “in your
    face”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: After running the above code, we get back the following figure, which is great
    for including in infographics and for catching people’s attention.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/370ed69d496af8df21048af065ee0fb7.png)'
  prefs: []
  type: TYPE_IMG
- en: Polar bar chart after applying cyberpunk theming. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about other styling libraries, check out my article below on four
    essential ones that will take your matplotlib figures to the next level.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/upgrade-your-data-visualisations-4-python-libraries-to-enhance-your-matplotlib-charts-74361bc3b92e?source=post_page-----c08e332ec01c--------------------------------)
    [## Upgrade Your Data Visualisations: 4 Python Libraries to Enhance Your Matplotlib
    Charts'
  prefs: []
  type: TYPE_NORMAL
- en: Improve Your Data Visualisations with These Easy-to-Use Matplotlib Style Libraries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/upgrade-your-data-visualisations-4-python-libraries-to-enhance-your-matplotlib-charts-74361bc3b92e?source=post_page-----c08e332ec01c--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Polar bar charts provide a great alternative to the traditional bar chart by
    representing the data on a polar grid rather. This can be helpful when looking
    at cyclical data and creating visually appealing data visualisation.
  prefs: []
  type: TYPE_NORMAL
- en: As matplotlib is known for creating boring and bland plots out of the box, we
    can — with a few tweaks and several lines of code — make them look significantly
    better.
  prefs: []
  type: TYPE_NORMAL
- en: The numerous themes available for matplotlib also allow us to go from a basic
    plot to something completely different with a few additional lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks for reading. Before you go, you should definitely subscribe to my content
    and get my articles in your inbox.* [***You can do that here!***](https://andymcdonaldgeo.medium.com/subscribe)*Alternatively,
    you can* [***sign up for my newsletter***](https://fabulous-founder-2965.ck.page/2ca286e572)
    *to get additional content straight into your inbox for free.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Secondly, you can get the full Medium experience and support thousands of
    other writers and me by signing up for a membership. It only costs you $5 a month,
    and you have full access to all of the fantastic Medium articles, as well as the
    chance to make money with your writing.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you sign up using* [***my link***](https://andymcdonaldgeo.medium.com/membership)***,***
    *you will support me directly with a portion of your fee, and it won’t cost you
    more. If you do so, thank you so much for your support.*'
  prefs: []
  type: TYPE_NORMAL
