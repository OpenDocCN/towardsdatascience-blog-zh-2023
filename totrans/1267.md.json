["```py\nlibrary(tidyverse)\n\n# Set seed for reproducibility\nset.seed(1234)\n\n# Generate list of numeric values for this example\nvalues_list <- list(rnorm(100, 100, 15), \n                    rnorm(100, 110, 20), \n                    rnorm(100, 75, 15))\n\n# Use map to get the mean of each set of numbers\nmap(values_list, mean)\n```", "```py\n# Add some missing values to the second element of the list\nvalues_list[[2]][c(2, 24, 93)] <- NA\n\n# Get the means with map again, this time discounting NAs\nmap(values_list, ~ mean(., na.rm = T))\n```", "```py\n# Expressing the operation above as a loop\nfor (i in values_list) {\n  print(mean(i, na.rm = TRUE))\n}\n```", "```py\n# Define combinations of variables to model\nx <- c(\"mpg\", \"hp\", \"wt\")\ny <- c(\"hp\", \"wt\", \"mpg\")\n\n# Apply the lm function to these variables using map2\nmap2(x, y, ~ lm(get(.x) ~ get(.y), data = mtcars))\n```", "```py\n# Define some example values from a clinical trial\nbaseline <- c(101, 92.3, 98.2)\ntreatment <- c(103.3, 92.1, 99.8)\nfollowup <- c(112.1, 95.4, 104.2)\n\n# Concatenate those values together, rowwise\npmap(list(baseline, treatment, followup), ~ c(..1, ..2, ..3))\n```", "```py\nmap_dbl(values_list, ~ mean(., na.rm = TRUE))\n```"]