["```py\nimport holoviews as hv\nfrom holoviews import opts, dim\nhv.extension('bokeh')\n\n# Define the data for the Sankey diagram\ndata = {\n    ('Sensors', 'Collection'): 20,\n    ('External Sources', 'Collection'): 25,\n    ('Databases', 'Collection'): 10,\n    ('Surveys/polls', 'Collection'): 20,\n    ('Internal Sources', 'Collection'): 25,\n\n    ('Collection', 'Preprocessing'): 70,\n    ('Collection', 'Storage'): 30,\n\n    ('Preprocessing', 'Storage'): 20,\n    ('Preprocessing', 'Transformation'): 40,\n    ('Preprocessing', 'Analysis'): 10,\n\n    ('Storage', 'Transformation'): 40,\n    ('Storage', 'Archives'): 10,\n\n    ('Transformation', 'Analysis'): 20,\n    ('Transformation', 'Product'): 60,\n\n    ('Analysis', 'Insights'): 10,\n    ('Analysis', 'Reporting'): 20,\n\n}\n\n# Define a dimension for the data\nvalue_dim = hv.Dimension('Percentage', unit='%')\n\n# Create a Sankey diagram using Holoviews and configure options\nsankey_diagram = hv.Sankey(data, ['From', 'To'], vdims = [value_dim]).opts(\n    # edge specs\n    edge_color = dim('From').str(),\n    edge_line_color = dim('To').str(),\n    edge_alpha = 0.6,\n    edge_line_width = 1,\n    # node specs\n    node_line_color = 'gray',\n    node_alpha = 0.9,\n    node_width = 20,\n    node_line_width = 1,\n    # title, font and figure specs\n    title = 'End-to-End Data Pipeline: From Source to Product',\n    fontsize = {'title': 20},\n    cmap = 'BuPu',\n    bgcolor = 'lavender',\n    label_position = 'right',\n    width = 900,\n    height = 700,\n    iterations = 2,\n)\n\n# Display the Sankey diagram\nhv.output(widget_location='bottom')\n\n# displaying plot\nsankey_diagram\n```", "```py\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Circle\nimport circlify as circ\nimport matplotlib as mpl\nimport numpy as np\n\ncmap = mpl.colormaps['rainbow']\n\n# data for 1000 students enrolled in various data science courses normalized to 1\ndata = [\n    {'id' :  'Machine Learning', 'datum': 0.5, 'level': 1, 'children' : [\n        {'id': 'Supervised Learning', 'datum': 0.2, 'level': 2, 'children' : [\n            {'id': 'Classification', 'datum': 0.1, 'level': 3},\n            {'id': 'Regression', 'datum': 0.1, 'level': 3},\n        ]},\n        {'id': 'Unupervised Learning', 'datum':0.2, 'level': 2, 'children' : [\n            {'id': 'Dimension Reduction', 'datum':0.1, 'level': 3},\n            {'id': 'Clustering', 'datum':0.1, 'level': 3},\n        ]},\n        {'id': 'Reinforcement Learning', 'datum': 0.1 , 'level': 2}\n    ]},\n    {'id' :  'Data Visualization', 'datum': 0.3, 'level': 1,'children' : [\n        {'id': 'Matplotlib', 'datum': 0.1, 'level': 2},\n        {'id': 'Plotly', 'datum': 0.1, 'level': 2},\n        {'id': 'ggplot2', 'datum': 0.1, 'level': 2}\n    ]},\n    {'id' :  'Big Data', 'datum': 0.2, 'level': 1, 'children' : [\n        {'id': 'Hadoop', 'datum': 0.1, 'level': 2},\n        {'id': 'Spark', 'datum': 0.1, 'level': 2}\n    ]}\n]\n\nfiltered_data = [item for item in data if isinstance(item, dict) and 'datum' in item]\ncircles = circ.circlify(filtered_data, show_enclosure=True)\nfig, ax = plt.subplots(figsize = (18, 18))\n\nvalue_color = 'white'\nlabel_color = 'black'\nnum_colors = len(circles)\nfor i, circle in enumerate(circles):\n    circle_patch = Circle((circle.x, circle.y), \n                          circle.r, fill=True, \n                          color=cmap(i / num_colors), \n                          linewidth=2, alpha = 0.9)\n    ax.add_patch(circle_patch)\n    try:\n        level = circle.ex[\"level\"]\n        if level == 1:\n            label_y = circle.y + circle.ex[\"datum\"]\n            label_y_val = label_y - 0.1\n        elif level == 3:\n            label_y = circle.y\n            label_y_val = label_y - 0.05\n        else:\n            label_y = circle.y - circle.ex[\"datum\"]\n            label_y_val = label_y - 0.07\n\n        label = circle.ex[\"id\"]\n        ax.text(circle.x, label_y, label, \n                ha = 'center', va = 'top', \n                fontsize = int(18/level)+2, \n                color = label_color)\n\n        value = str(int(circle.ex[\"datum\"]*1000)) + ' students'\n        ax.text(circle.x, label_y_val, value, \n                ha = 'center', va = 'center', \n                fontsize = int(20/level)+2, \n                color = value_color)\n    except:\n        label = 'Data Science Courses'\n        ax.text(circle.x, circle.y - 0.7, label, \n                ha = 'center', va = 'top', \n                fontsize = 22, \n                color = label_color)\n        value = '1000 students'\n        ax.text(circle.x, circle.y - 0.85, value, \n                ha = 'center', va = 'top', \n                fontsize = 22, \n                color = value_color)\n\nax.set_aspect('equal', adjustable='datalim')\nplt.xlim(-1.5, 1.5)\nplt.ylim(-1.5, 1.5)\nplt.gca().set_axis_off()\n\nfig.patch.set_facecolor('black')\nfig.patch.set_alpha(0.9)\n\nplt.title(\"Enrollment of Students in Data Science Courses this Semester\", fontsize=30, color = 'White')\nplt.savefig('ds_circularpack.png', bbox_inches='tight')\nplt.show()\n```", "```py\nimport networkx as nx\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport matplotlib.patches as mpatches\nimport random\n\ncmap = mpl.colormaps['Wistia']\n\n# Create a graph\nG = nx.Graph()\n\n# Add nodes with attributes\n\ninfluencers = [\n    (1, {'label': 'John', 'niche': 'Fashion', 'followers': 10000, 'engagement': 8.7}),\n    (2, {'label': 'Anna', 'niche': 'Technology', 'followers': 20000, 'engagement': 6.2}),\n    (3, {'label': 'Jane', 'niche': 'Fitness', 'followers': 15000, 'engagement': 7.5}),\n    (4, {'label': 'Kai', 'niche': 'Fashion', 'followers': 18000, 'engagement': 9.1}),\n    (5, {'label': 'Ellio', 'niche': 'Technology', 'followers': 12000, 'engagement': 5.8}),\n    (6, {'label': 'Cillian', 'niche': 'Fitness', 'followers': 13000, 'engagement': 8.9}),\n    (7, {'label': 'Vivian', 'niche': 'Technology', 'followers': 17000, 'engagement': 6.3}),\n    (8, {'label': 'Alex', 'niche': 'Fashion', 'followers': 14000, 'engagement': 7.1}),\n    (9, {'label': 'Hannah', 'niche': 'Fitness', 'followers': 9000, 'engagement': 5.9}),\n    (10, {'label': 'Emma', 'niche': 'Technology', 'followers': 11000, 'engagement': 5.0}),\n    (11, {'label': 'Daniel', 'niche': 'Fashion', 'followers': 19000, 'engagement': 8.7}),\n    (12, {'label': 'Danielle', 'niche': 'Technology', 'followers': 8000, 'engagement': 6.2}),\n    (13, {'label': 'Milo', 'niche': 'Fitness', 'followers': 12000, 'engagement': 7.5}),\n    (14, {'label': 'Mina', 'niche': 'Fashion', 'followers': 21000, 'engagement': 9.1}),\n    (15, {'label': 'Alina', 'niche': 'Technology', 'followers': 10000, 'engagement': 8.8}),\n    (16, {'label': 'Ali', 'niche': 'Fitness', 'followers': 16000, 'engagement': 6.1}),\n    (17, {'label': 'Sarah', 'niche': 'Fashion', 'followers': 13000, 'engagement': 7.2}),\n    (18, {'label': 'Mary', 'niche': 'Fashion', 'followers': 9000, 'engagement': 6.9}),\n    (19, {'label': 'Dimitri', 'niche': 'Technology', 'followers': 15000, 'engagement': 8.5}),\n    (20, {'label': 'Ari', 'niche': 'Fitness', 'followers': 18000, 'engagement': 5.5}),\n]\n\nG.add_nodes_from(influencers)\n\n# In absence of actual connection we generate random connections\n# i.e. about density percent of actual connections depending on wanted density\ndensity = 0.3\n\nall_possible_connections = [(node1, node2) for node1 in G.nodes for node2 in G.nodes if node1 != node2]\nnum_connections = int(density * len(all_possible_connections)) \n\nrandom_connections = random.sample(all_possible_connections, num_connections)\n\n# Add edges (interactions) with colors\n\ninteractions = []\nedge_colors = []\n\nfor edge in random_connections:\n    node1, node2 = edge\n    # the influencers are connected to other influencers either in same niche or different niche\n    # we want to visually see that\n    color = 'darkgray' if G.nodes[node1]['niche'] == G.nodes[node2]['niche'] else 'darkorange'\n    edge_colors.append(color)\n    interactions.append((node1, node2))\n\nG.add_edges_from(interactions)\n\n# Extract node attributes\nnode_labels = {node: f\"{data['label']}\\nFollowers: {data['followers']}\\nEngagement: {data['engagement']}\" for node, data in G.nodes(data=True)}\nnode_sizes = [data['followers'] for _, data in G.nodes(data=True)]\nnode_niches = [data['niche'] for _, data in G.nodes(data=True)]\n\n# Create a mapping from niche names to numerical values \nniche_to_num = {niche: i for i, niche in enumerate(set(node_niches))}\nnode_colors = [niche_to_num[niche] for niche in node_niches]\n\nfig = plt.figure(figsize=(20, 20))\n\nlayout = nx.circular_layout(G)\nnx.draw(G, \n        alpha = 0.6, \n        pos = layout, \n        labels = node_labels, \n        node_size = node_sizes, \n        node_color = node_colors,\n        cmap = cmap, \n        font_color = 'black', \n        font_size = 10, \n        font_weight = 'bold', \n        with_labels = True, \n        edge_color = edge_colors, \n        width = 3)\n\nfig.patch.set_facecolor('yellowgreen')\nfig.patch.set_alpha(0.1)\n\nplt.title(\"Social Media Influencer Network\", fontsize=30)\n\nlegend_handles = [mpatches.Patch(color = cmap(i / (len(niche_to_num) - 1)), \n                                 label = niche) for niche, i in niche_to_num.items()]\n\nplt.legend(handles = legend_handles, \n           title = 'Niche', \n           bbox_to_anchor = (1, 1), \n           loc = 'upper right', \n           fontsize = 16)\n\nplt.savefig('sni-network.png', bbox_inches = 'tight')\n\nplt.show()\n```"]