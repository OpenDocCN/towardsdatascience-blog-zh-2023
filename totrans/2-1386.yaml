- en: Keep Track of your Experiments with Hydra
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/keep-track-of-your-experiments-with-hydra-b29937a99fc9](https://towardsdatascience.com/keep-track-of-your-experiments-with-hydra-b29937a99fc9)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/01cd12756484fac696d8c911c15cd612.png)'
  prefs: []
  type: TYPE_IMG
- en: (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Configure hyperparameters using YAML files and speed up your research!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@marcellopoliti?source=post_page-----b29937a99fc9--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----b29937a99fc9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b29937a99fc9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b29937a99fc9--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----b29937a99fc9--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b29937a99fc9--------------------------------)
    ¬∑5 min read¬∑Aug 1, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the same way that it is impossible to write code that does not contain a
    bug within it on the first try, it is impossible to train a model that is the
    right one on the first try.
  prefs: []
  type: TYPE_NORMAL
- en: Those who have some experience in Machine Learning and Deep Learning know that
    you often have to **spend a lot of time choosing the right hyperparameters of
    models**. These hyperparameters are for example learning rate, batch size, and
    number of classes in output, but these are just some of the most common, a project
    can have hundreds of such parameters.
  prefs: []
  type: TYPE_NORMAL
- en: By changing the hyperparameters we could get different results (better or worse),
    and at some point **keeping track of all the tests done is very hard**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here‚Äôs what I did for a very long time: I used to write down all these hyperparameters
    by hand in an Excel sheet and write next to it the result of each experiment,
    the loss value for example. Later I ‚Äúevolved‚Äù and started writing configuration
    files for the hyperparameters, in which I put various values that I wanted to
    test. I used to write custom Python functions that would read those values and
    put them into the training function. A YAML file is basically a hierarchically
    constructed file where you can insert keys and values like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: I later discovered [Hydra](https://hydra.cc/docs/intro/), an open-source framework
    which made this whole process easier and even faster.
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs get started!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose we are developing a simple Machine Learning project using PyTorch. As
    usual, we create a class for the dataset, instantiate the dataloaders, create
    the model and train. In this example, I will use PyTorch [Lightning](https://www.pytorchlightning.ai/index.html)
    to better organize the code, in which we have a Trainer object, similar to what
    you do in Keras. If you are used to PyTorch you will also understand Lightning
    in no time.
  prefs: []
  type: TYPE_NORMAL
- en: For our example, we could use the famous ESC50 dataset that you can find for
    free [here](https://github.com/karolpiczak/ESC-50).
  prefs: []
  type: TYPE_NORMAL
- en: First, we import all the libraries we will need. I will run the code using Deepnote.
  prefs: []
  type: TYPE_NORMAL
- en: As usual, we implement a PyTorch class to manage the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: We implement the model using Lightning. I won‚Äôt describe the model, because
    that‚Äôs not what‚Äôs important, it‚Äôs not even important if you don‚Äôt have experience
    with audio-related tasks, what‚Äôs important is just how to structure and use Hydra
    to experiment.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the train function.
  prefs: []
  type: TYPE_NORMAL
- en: Add Hydra configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the above code, you see that there are many hard-coded parameters such as
    batch size, folds used for train-val-test split, number of epochs, and more.
  prefs: []
  type: TYPE_NORMAL
- en: I want to find the best parameters and then launch various experiments and judge
    from the results. Hydra makes this very easy, let‚Äôs see, how to install and use
    this library.
  prefs: []
  type: TYPE_NORMAL
- en: Now we create a configuration file called ‚Äúdefault.yaml‚Äù in a new folder called
    configs.
  prefs: []
  type: TYPE_NORMAL
- en: The file will contain key-value pairs with all the hyperparameters we want to
    test. Here is an example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now we want to **pass these parameters dynamically to the train function**.
    **Hydra allows us to use a decorator to do this**.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see the decorator defines the folder and file name to be used with
    the parameters. And the **hard-coded values have been changed by going to take
    the file values and treating them in Python as a dictionary**, very simple!
  prefs: []
  type: TYPE_NORMAL
- en: You will notice, however, that in the Audionet Model the expected input has
    been changed so that it accepts a dictionary of parameters in the following way.
  prefs: []
  type: TYPE_NORMAL
- en: Now everything is ready.
  prefs: []
  type: TYPE_NORMAL
- en: Try running train() and Hydra will produce results that are organized and easy
    to verify.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of Hydra‚Äôs output in my case.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d49b09806f6c00209fc9ffe90ce0e658.png)'
  prefs: []
  type: TYPE_IMG
- en: (Image By Author)
  prefs: []
  type: TYPE_NORMAL
- en: As we see, Hydra provides us with a recap of the parameter configuration file,
    lightning logs regarding model training, and a CSV file to check metrics.
  prefs: []
  type: TYPE_NORMAL
- en: All this, however, is only the basis of Hydra, which is a tool that allows you
    to do much more.
  prefs: []
  type: TYPE_NORMAL
- en: One very nice feature is to run the script via the terminal and add or change
    file parameters from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we want to change the seed quickly without tweaking the YAML
    file we can do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We can also add some keywords to the config file that is given as input to the
    Trainer in the line pl.Trainer(**cfg.trainer).
  prefs: []
  type: TYPE_NORMAL
- en: To add a keyword we use the + command from the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Sometimes you might want to save experiments in a folder other than the default
    one, and even this can be set up easily from the command line by going to override
    Hydra‚Äôs hydra.run.dir parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Final Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hydra is a framework created on top of OmegaConf, which allows us to manage
    our experiments very easily. Once we have implemented the code and pipeline, our
    job will be to track the progress of the models and change the configuration as
    we see fit.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we have seen a practical example of how to use Hydra, but there
    are many more advanced features that we have not covered for example launching
    multi-runs to run multiple experiments in parallel. And for that, I suggest you
    go read the documentation. If you were interested in this article follow me on
    Medium! üòÑ
  prefs: []
  type: TYPE_NORMAL
- en: üíº [Linkedin](https://www.linkedin.com/in/marcello-politi/) Ô∏è| üê¶ [Twitter](https://twitter.com/_March08_)
    | [üíª](https://emojiterra.com/laptop-computer/) [Website](https://marcello-politi.super.site/)
  prefs: []
  type: TYPE_NORMAL
