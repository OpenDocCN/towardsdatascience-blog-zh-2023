- en: Keep Track of your Experiments with Hydra
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Hydra跟踪你的实验
- en: 原文：[https://towardsdatascience.com/keep-track-of-your-experiments-with-hydra-b29937a99fc9](https://towardsdatascience.com/keep-track-of-your-experiments-with-hydra-b29937a99fc9)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/keep-track-of-your-experiments-with-hydra-b29937a99fc9](https://towardsdatascience.com/keep-track-of-your-experiments-with-hydra-b29937a99fc9)
- en: '![](../Images/01cd12756484fac696d8c911c15cd612.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/01cd12756484fac696d8c911c15cd612.png)'
- en: (Image by Author)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: （图片来源：作者）
- en: Configure hyperparameters using YAML files and speed up your research!
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用YAML文件配置超参数，加速你的研究！
- en: '[](https://medium.com/@marcellopoliti?source=post_page-----b29937a99fc9--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----b29937a99fc9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b29937a99fc9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b29937a99fc9--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----b29937a99fc9--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@marcellopoliti?source=post_page-----b29937a99fc9--------------------------------)[![Marcello
    Politi](../Images/484e44571bd2e75acfe5fef3146ab3c2.png)](https://medium.com/@marcellopoliti?source=post_page-----b29937a99fc9--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b29937a99fc9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b29937a99fc9--------------------------------)
    [Marcello Politi](https://medium.com/@marcellopoliti?source=post_page-----b29937a99fc9--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b29937a99fc9--------------------------------)
    ·5 min read·Aug 1, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b29937a99fc9--------------------------------)
    ·阅读时间5分钟·2023年8月1日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: In the same way that it is impossible to write code that does not contain a
    bug within it on the first try, it is impossible to train a model that is the
    right one on the first try.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 就像不可能在第一次尝试时编写没有错误的代码一样，第一次尝试也不可能训练出合适的模型。
- en: Those who have some experience in Machine Learning and Deep Learning know that
    you often have to **spend a lot of time choosing the right hyperparameters of
    models**. These hyperparameters are for example learning rate, batch size, and
    number of classes in output, but these are just some of the most common, a project
    can have hundreds of such parameters.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些机器学习和深度学习经验的人知道，你经常需要**花费大量时间选择模型的正确超参数**。这些超参数例如学习率、批量大小和输出中的类别数，但这些只是最常见的一些，一个项目可以有数百个这样的参数。
- en: By changing the hyperparameters we could get different results (better or worse),
    and at some point **keeping track of all the tests done is very hard**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更改超参数，我们可以得到不同的结果（更好或更差），而在某些时候**跟踪所有已进行的测试是非常困难的**。
- en: 'Here’s what I did for a very long time: I used to write down all these hyperparameters
    by hand in an Excel sheet and write next to it the result of each experiment,
    the loss value for example. Later I “evolved” and started writing configuration
    files for the hyperparameters, in which I put various values that I wanted to
    test. I used to write custom Python functions that would read those values and
    put them into the training function. A YAML file is basically a hierarchically
    constructed file where you can insert keys and values like the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾经做了很长时间的事情：我用手在Excel表格中写下所有这些超参数，并在旁边写下每个实验的结果，例如损失值。后来我“进化”了，开始编写超参数的配置文件，在其中放入我想测试的各种值。我曾经编写自定义Python函数来读取这些值并将其放入训练函数中。YAML文件基本上是一个层次结构构建的文件，你可以在其中插入键和值，如下所示：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: I later discovered [Hydra](https://hydra.cc/docs/intro/), an open-source framework
    which made this whole process easier and even faster.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我后来发现了[Hydra](https://hydra.cc/docs/intro/)，这是一个开源框架，使整个过程更简单、更快捷。
- en: Let’s get started!
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Suppose we are developing a simple Machine Learning project using PyTorch. As
    usual, we create a class for the dataset, instantiate the dataloaders, create
    the model and train. In this example, I will use PyTorch [Lightning](https://www.pytorchlightning.ai/index.html)
    to better organize the code, in which we have a Trainer object, similar to what
    you do in Keras. If you are used to PyTorch you will also understand Lightning
    in no time.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在使用 PyTorch 开发一个简单的机器学习项目。像往常一样，我们创建一个数据集类，实例化数据加载器，创建模型并进行训练。在这个示例中，我将使用
    PyTorch [Lightning](https://www.pytorchlightning.ai/index.html) 更好地组织代码，其中我们有一个
    Trainer 对象，类似于你在 Keras 中所做的。如果你习惯了 PyTorch，你也会很快理解 Lightning。
- en: For our example, we could use the famous ESC50 dataset that you can find for
    free [here](https://github.com/karolpiczak/ESC-50).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们可以使用著名的 ESC50 数据集，你可以在 [这里](https://github.com/karolpiczak/ESC-50)
    免费找到。
- en: First, we import all the libraries we will need. I will run the code using Deepnote.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们导入所有需要的库。我将使用 Deepnote 运行代码。
- en: As usual, we implement a PyTorch class to manage the dataset.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，我们实现一个 PyTorch 类来管理数据集。
- en: We implement the model using Lightning. I won’t describe the model, because
    that’s not what’s important, it’s not even important if you don’t have experience
    with audio-related tasks, what’s important is just how to structure and use Hydra
    to experiment.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Lightning 实现模型。我不会描述模型，因为那并不是重点，即使你没有音频相关任务的经验也没关系，重要的是如何构建和使用 Hydra 进行实验。
- en: Finally, the train function.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最后是训练函数。
- en: Add Hydra configuration
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 Hydra 配置
- en: In the above code, you see that there are many hard-coded parameters such as
    batch size, folds used for train-val-test split, number of epochs, and more.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，你会看到有许多硬编码的参数，比如批量大小、用于训练-验证-测试分割的折数、纪元数等。
- en: I want to find the best parameters and then launch various experiments and judge
    from the results. Hydra makes this very easy, let’s see, how to install and use
    this library.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我想找到最佳参数，然后启动各种实验并根据结果做出判断。Hydra 使这变得非常简单，让我们看看如何安装和使用这个库。
- en: Now we create a configuration file called “default.yaml” in a new folder called
    configs.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在一个名为 configs 的新文件夹中创建一个名为“default.yaml”的配置文件。
- en: The file will contain key-value pairs with all the hyperparameters we want to
    test. Here is an example.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 文件将包含所有我们想测试的超参数的键值对。以下是一个示例。
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now we want to **pass these parameters dynamically to the train function**.
    **Hydra allows us to use a decorator to do this**.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想要**动态传递这些参数到训练函数中**。**Hydra 允许我们使用装饰器来实现这一点**。
- en: As you can see the decorator defines the folder and file name to be used with
    the parameters. And the **hard-coded values have been changed by going to take
    the file values and treating them in Python as a dictionary**, very simple!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，装饰器定义了要与参数一起使用的文件夹和文件名。并且**通过获取文件值并将其作为字典在 Python 中处理，硬编码的值已经被更改**，非常简单！
- en: You will notice, however, that in the Audionet Model the expected input has
    been changed so that it accepts a dictionary of parameters in the following way.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你会注意到，在 Audionet 模型中，预期输入已经被更改，以便接受以下方式的参数字典。
- en: Now everything is ready.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切准备就绪。
- en: Try running train() and Hydra will produce results that are organized and easy
    to verify.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试运行 train()，Hydra 将生成组织良好且易于验证的结果。
- en: Here is an example of Hydra’s output in my case.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我使用 Hydra 的输出示例。
- en: '![](../Images/d49b09806f6c00209fc9ffe90ce0e658.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d49b09806f6c00209fc9ffe90ce0e658.png)'
- en: (Image By Author)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: (图片来源：作者)
- en: As we see, Hydra provides us with a recap of the parameter configuration file,
    lightning logs regarding model training, and a CSV file to check metrics.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们看到的，Hydra 提供了参数配置文件的回顾，关于模型训练的 Lightning 日志，以及用于检查指标的 CSV 文件。
- en: All this, however, is only the basis of Hydra, which is a tool that allows you
    to do much more.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些只是 Hydra 的基础功能，Hydra 是一个允许你做更多事情的工具。
- en: One very nice feature is to run the script via the terminal and add or change
    file parameters from the command line.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的功能是通过终端运行脚本并从命令行添加或更改文件参数。
- en: 'For example, if we want to change the seed quickly without tweaking the YAML
    file we can do that:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想快速更改种子而不修改 YAML 文件，我们可以这样做：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can also add some keywords to the config file that is given as input to the
    Trainer in the line pl.Trainer(**cfg.trainer).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以向作为输入传递给 Trainer 的配置文件中添加一些关键字，例如 pl.Trainer(**cfg.trainer)。
- en: To add a keyword we use the + command from the terminal.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加关键字，我们使用来自终端的 + 命令。
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Sometimes you might want to save experiments in a folder other than the default
    one, and even this can be set up easily from the command line by going to override
    Hydra’s hydra.run.dir parameter.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你可能会想把实验保存在默认文件夹以外的位置，这可以通过在命令行中覆盖Hydra的`hydra.run.dir`参数轻松设置。
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Final Thoughts
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后的思考
- en: Hydra is a framework created on top of OmegaConf, which allows us to manage
    our experiments very easily. Once we have implemented the code and pipeline, our
    job will be to track the progress of the models and change the configuration as
    we see fit.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Hydra是建立在OmegaConf之上的一个框架，它让我们可以非常轻松地管理实验。一旦我们实现了代码和管道，我们的任务就是跟踪模型的进展并根据需要更改配置。
- en: In this article, we have seen a practical example of how to use Hydra, but there
    are many more advanced features that we have not covered for example launching
    multi-runs to run multiple experiments in parallel. And for that, I suggest you
    go read the documentation. If you were interested in this article follow me on
    Medium! 😄
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们看到了如何使用Hydra的实际例子，但还有许多更高级的功能我们没有涉及，例如启动多次运行以并行进行多个实验。为此，我建议你去阅读文档。如果你对这篇文章感兴趣，可以在Medium上关注我！😄
- en: 💼 [Linkedin](https://www.linkedin.com/in/marcello-politi/) ️| 🐦 [Twitter](https://twitter.com/_March08_)
    | [💻](https://emojiterra.com/laptop-computer/) [Website](https://marcello-politi.super.site/)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 💼 [Linkedin](https://www.linkedin.com/in/marcello-politi/) ️| 🐦 [Twitter](https://twitter.com/_March08_)
    | [💻](https://emojiterra.com/laptop-computer/) [Website](https://marcello-politi.super.site/)
