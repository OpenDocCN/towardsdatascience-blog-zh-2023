- en: Two Advanced SQL Techniques That Can Drastically Improve Your Queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/two-advanced-sql-techniques-that-can-drastically-improve-your-queries-81a97c92ddd0](https://towardsdatascience.com/two-advanced-sql-techniques-that-can-drastically-improve-your-queries-81a97c92ddd0)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn about Common Table Expression (CTE) and Window Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://chongjason.medium.com/?source=post_page-----81a97c92ddd0--------------------------------)[![Jason
    Chong](../Images/af940189f50be491653b6469eef6fb46.png)](https://chongjason.medium.com/?source=post_page-----81a97c92ddd0--------------------------------)[](https://towardsdatascience.com/?source=post_page-----81a97c92ddd0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----81a97c92ddd0--------------------------------)
    [Jason Chong](https://chongjason.medium.com/?source=post_page-----81a97c92ddd0--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----81a97c92ddd0--------------------------------)
    ·11 min read·Jun 30, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b1f706d22404a4cbcab78d47197c01d4.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Karina Szczurek](https://unsplash.com/@karinaszczurek?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: SQL is the bread and butter of every data professional. It doesn’t matter if
    you are a data analyst, data scientist, or data engineer, you need to have a solid
    understanding of how to write clean and efficient SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: This is because behind any rigorous data analysis or any sophisticated machine
    learning model is the underlying data itself, and this data has to come from somewhere.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully after reading my introductory [blog post](https://medium.com/towards-data-science/10-most-important-sql-commands-every-data-analyst-needs-to-know-f0f568914b98)
    to SQL, you would have already learned that SQL stands for Structured Query Language
    and it is a language that is used to retrieve data from a relational database.
  prefs: []
  type: TYPE_NORMAL
- en: In that blog post, we went over some fundamental SQL commands such as `SELECT`,
    `FROM`, and `WHERE` which should cover most of the basic queries you will come
    across when using SQL.
  prefs: []
  type: TYPE_NORMAL
- en: But what happens if those simple commands are simply not enough? What happens
    if the data you want demands a more robust approach to query?
  prefs: []
  type: TYPE_NORMAL
- en: Well, look no further because today, we will go over two new SQL techniques
    that you can add to your toolkit that will take your queries to the next level.
    These techniques are called Common Table Expression (CTE) and Window Functions.
  prefs: []
  type: TYPE_NORMAL
- en: To help us learn these techniques, we will be using an online SQL editor called
    [DB Fiddle](https://www.db-fiddle.com/) (set to SQLite v3.39) and the taxi trip
    duration [dataset](https://console.cloud.google.com/marketplace/product/city-of-new-york/nyc-tlc-trips)
    sourced from Google Cloud (NYC Open Data license).
  prefs: []
  type: TYPE_NORMAL
- en: Data Preparation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are not interested to learn how I prepared the dataset, feel free to
    skip past this section and paste the following code onto DB fiddle to generate
    the schema.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After running `SELECT * from taxi`, you should get a resulting table that looks
    like this.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/29b801eda17e78c1b17bd2c347af3dab.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: For the keen beans who are wondering how this table actually came about, I filtered
    the data to the first 30 rows and only kept the columns that you see above. As
    for the distance field, I computed the orthodromic distance between the pick-up
    and drop-off coordinates (latitude and longitude).
  prefs: []
  type: TYPE_NORMAL
- en: The orthodromic distance is the shortest distance between two points on a sphere,
    so this actually turns out to be an underestimate of the real distance travelled
    by the taxi. However, for the purpose of what we are doing today, we can ignore
    this for now.
  prefs: []
  type: TYPE_NORMAL
- en: The formula to calculate the orthodromic distance can be found [here](https://www.geeksforgeeks.org/program-distance-two-points-earth/).
    Now, back to SQL.
  prefs: []
  type: TYPE_NORMAL
- en: Common Table Expression (CTE)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common table expression (CTE) is a temporary table that you return within
    a query. You can think of it as a query within a query. They help to not only
    split your queries into more readable chunks but you can write new queries based
    on a CTE that has been defined.
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate this, suppose we want to analyze taxi trips split by the hour
    of the day and filter to trips that took place between the months of January and
    March 2016.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7ff5550cf10bc0445f34b8a731862c38.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Straightforward enough; let’s take this one step further.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose now we want to compute the number of trips and the average speed for
    each of these hours. This is where we can utilize a CTE to first obtain a temporary
    table like the one we observe above, followed by a subsequent query to count the
    number of trips and compute the average speed group by hour of the day.
  prefs: []
  type: TYPE_NORMAL
- en: The way you would define a CTE is by using the `WITH` and `AS` statements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/da91ec35bb9d2861c917f72385b3fea1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: An alternative to using a CTE is simply wrapping the temporary table within
    a `FROM` statement (see code below), which would give you the same result. However,
    this is not advisable from a code readability standpoint. Moreover, imagine if
    we wanted to create more than just one temporary table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Bonus: an interesting insight we can pull from this exercise is that taxis
    tend to move slower (lower average speed) during peak hours most likely due to
    heavier traffic as people travel to and back from work.'
  prefs: []
  type: TYPE_NORMAL
- en: Window Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Window functions perform aggregate operations on groups of rows but they produce
    a result for each row in the original table.
  prefs: []
  type: TYPE_NORMAL
- en: To fully understand how window functions work, it is helpful to first do a quick
    recap of aggregation via `GROUP BY`.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say we wish to compute a list of summary statistics by month using the
    taxi dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3ce3585ede9a5ff9d1de73d20b3cd600.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: In the example above, we have computed the count, sum, average, minimum, and
    maximum distance travelled for each individual month in the dataset. Notice how
    our original taxi table with 30 rows has now been collapsed into six rows, one
    for each individual month.
  prefs: []
  type: TYPE_NORMAL
- en: So, what is actually happening behind the scenes? Firstly, SQL grouped all 30
    rows in the original table based on their months. It then applied the relevant
    calculations based on the values in these individual groups.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take January as an example. There are two trips in the dataset that took
    place in the month of January, with distance travelled of 3.97 and 0.68 respectively.
    SQL then calculated the count, sum, average, minimum, and maximum based on these
    two values. The process then repeats for the other months until eventually we
    get an output that looks like the one above.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, hold this thought as we begin to explore how window functions work. There
    are three broad categories of window functions: aggregate functions, ranking functions,
    and navigation functions. We will look at examples of each one of them.'
  prefs: []
  type: TYPE_NORMAL
- en: Aggregate functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already seen aggregate functions at play in our previous example. Aggregate
    functions include functions like count, sum, average, minimum, and, maximum.
  prefs: []
  type: TYPE_NORMAL
- en: But where window functions differ from `GROUP BY` is the number of rows in the
    final output. Specifically, we saw that after aggregating by months, our output
    table is left with only six rows (one row for each distinct month).
  prefs: []
  type: TYPE_NORMAL
- en: Window functions, on the other hand, will not summarise the table by the aggregate
    field, but simply output the result in a new column for each row. The number of
    rows in the output table will not change. In other words, the output table will
    always have the same number of rows as the original table.
  prefs: []
  type: TYPE_NORMAL
- en: The syntax to perform a window function is `OVER(PARTITION BY ...)`. You can
    think of this as the `GROUP BY` statement in our previous example.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how this works in practice.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/01f02b04940f7bda25ec3b06f6491c2d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we want the same output as last time, but rather than collapsing the table,
    we want the output displayed as individual rows in a new column.
  prefs: []
  type: TYPE_NORMAL
- en: You would notice the values after the aggregation did not change but rather,
    they are simply displayed as repeated rows in the table. For example, the first
    two rows (January) have the same values for trip count, total month distance,
    average month distance, minimum month distance, and maximum month distance as
    before. The same applies to the other months.
  prefs: []
  type: TYPE_NORMAL
- en: In case you are wondering how window functions are useful, it helps us compare
    each row value with the aggregated value. In this instance, we can easily compare
    the distance travelled in each row with the monthly average, minimum and maximum,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Ranking functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another type of window function is the ranking function. As the name suggests,
    this ranks a group of rows based on an aggregate field.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/44466b91bfa220f0b28a79bb17cce64c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example above, we have two ranking columns: one for the overall rank
    (from 1–30) and one for the monthly rank, both in descending order.'
  prefs: []
  type: TYPE_NORMAL
- en: To specify the order when ranking, you will need to use `ORDER BY` within the
    `OVER` statement.
  prefs: []
  type: TYPE_NORMAL
- en: The way you would interpret the results for the first row is that it has the
    third-longest distance travelled in the whole dataset and the longest distance
    travelled for the month of January.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Last but not least, we have navigation functions.
  prefs: []
  type: TYPE_NORMAL
- en: A navigation function assigns a value based on the value in a different row
    than the current row. Some common navigation functions include `FIRST_VALUE`,
    `LAST_VALUE`, `LEAD`, and `LAG`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e1f596fc156b146298bec77ec2e36a87.png)'
  prefs: []
  type: TYPE_IMG
- en: Lag returns the value of the preceding row. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f26330310a14beb3cf07f90323086639.png)'
  prefs: []
  type: TYPE_IMG
- en: Lead returns the value of the subsequent row. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: In the example above, we used the `LAG` function to return the value of the
    preceding row and the `LEAD` function to return the value of the subsequent row.
    Notice how the first row of the lag column is null whereas the last row of the
    lead column is null.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/40d639f6d0c0d4e01886d46c68a1ba08.png)'
  prefs: []
  type: TYPE_IMG
- en: The first two rows are null when lag offset is set to 2\. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d1da567ad9b3f6e64095fb4f572c7748.png)'
  prefs: []
  type: TYPE_IMG
- en: The last two rows are null when lead offset is set to 2\. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: On a similar note, we can also offset the `LEAD` and `LAG` functions, i.e. to
    start from a particular index or position. When the offset is set to two, you
    can see that the first two rows of the lag column are null and the last two rows
    of the lead column are null.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this blog post has helped introduce you to the concepts of Common Table
    Expression (CTE) and Window Functions.
  prefs: []
  type: TYPE_NORMAL
- en: To summarise, a CTE is a temporary table or a query within a query. They are
    used to split queries into more readable chunks and you can write new queries
    against a CTE that has been defined. Window functions, on the other hand, perform
    aggregation on groups of rows and return the results for each row in the original
    table.
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to improve on these techniques, I highly encourage you to start
    implementing them in your SQL queries either at work, solving interview problems,
    or just playing around with random datasets. Practice makes perfect, am I right?
  prefs: []
  type: TYPE_NORMAL
- en: Support me and other amazing writers by signing up for a Medium membership using
    the link below. Happy learning!
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://chongjason.medium.com/membership?source=post_page-----81a97c92ddd0--------------------------------)
    [## Join Medium with my referral link - Jason Chong'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: chongjason.medium.com](https://chongjason.medium.com/membership?source=post_page-----81a97c92ddd0--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Don’t know what to read next? Here are some suggestions.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/10-most-important-sql-commands-every-data-analyst-needs-to-know-f0f568914b98?source=post_page-----81a97c92ddd0--------------------------------)
    [## 10 Most Important SQL Commands Every Data Analyst Needs to Know'
  prefs: []
  type: TYPE_NORMAL
- en: Querying data from a database doesn’t need to be complicated
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/10-most-important-sql-commands-every-data-analyst-needs-to-know-f0f568914b98?source=post_page-----81a97c92ddd0--------------------------------)
    [](/regular-expressions-clearly-explained-with-examples-822d76b037b4?source=post_page-----81a97c92ddd0--------------------------------)
    [## Regular Expressions Clearly Explained with Examples
  prefs: []
  type: TYPE_NORMAL
- en: One of the most underrated skills any data analyst should have when working
    with strings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/regular-expressions-clearly-explained-with-examples-822d76b037b4?source=post_page-----81a97c92ddd0--------------------------------)
    [](/common-issues-that-will-make-or-break-your-data-science-project-64e976c21a14?source=post_page-----81a97c92ddd0--------------------------------)
    [## Common Issues that Will Make or Break Your Data Science Project
  prefs: []
  type: TYPE_NORMAL
- en: A helpful guide on spotting data problems, why they can be detrimental, and
    how to properly address them
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/common-issues-that-will-make-or-break-your-data-science-project-64e976c21a14?source=post_page-----81a97c92ddd0--------------------------------)
  prefs: []
  type: TYPE_NORMAL
