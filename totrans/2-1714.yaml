- en: 'Python Callables: The Basics and the Secrets'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 可调用对象：基础和秘密
- en: 原文：[https://towardsdatascience.com/python-callables-the-basics-and-the-secrets-ba88bf0729aa](https://towardsdatascience.com/python-callables-the-basics-and-the-secrets-ba88bf0729aa)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/python-callables-the-basics-and-the-secrets-ba88bf0729aa](https://towardsdatascience.com/python-callables-the-basics-and-the-secrets-ba88bf0729aa)
- en: PYTHON PROGRAMMING
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON 编程
- en: Learn how powerful Python callables can be.
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解 Python 可调用对象的强大功能。
- en: '[](https://medium.com/@nyggus?source=post_page-----ba88bf0729aa--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----ba88bf0729aa--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ba88bf0729aa--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ba88bf0729aa--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----ba88bf0729aa--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus?source=post_page-----ba88bf0729aa--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----ba88bf0729aa--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ba88bf0729aa--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ba88bf0729aa--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----ba88bf0729aa--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ba88bf0729aa--------------------------------)
    ·10 min read·Oct 27, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ba88bf0729aa--------------------------------)
    ·10 分钟阅读·2023年10月27日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/16289801bda2c8ec8dfa0b3a3bba76f4.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/16289801bda2c8ec8dfa0b3a3bba76f4.png)'
- en: In Python, there are many callables to choose from. Photo by [Pavan Trikutam](https://unsplash.com/@ptrikutam?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，有许多可调用对象可以选择。照片由 [Pavan Trikutam](https://unsplash.com/@ptrikutam?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: In programming languages, callable objects are typically associated with functions,
    and for good reason. Functions are perhaps the best examples of callable objects,
    but they are not the only ones. In Python, there are many other callable types,
    which can be incredibly useful and powerful. You can also create your own callable
    objects. This article is about both.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程语言中，可调用对象通常与函数相关联，这也是有充分理由的。函数可能是可调用对象的最佳示例，但它们并不是唯一的。在 Python 中，还有许多其他可调用类型，它们可以非常有用且强大。你还可以创建自己的可调用对象。本文将讨论这两者。
- en: '*A callable* is an object that can be called using a pair of parentheses, like
    for example below, where we use the built-in function `sum()`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*可调用对象*是指可以通过一对括号来调用的对象，例如下面的例子，我们使用了内置函数 `sum()`：'
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A call to a callable, depending on its definition, can be
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对可调用对象的调用，根据其定义，可能是
- en: without any arguments, as in `no_args_callable()`
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何参数，如 `no_args_callable()`
- en: or a series of positional and/or keyword arguments, as in `args_callable(arg1,
    arg2)`, `args_callable(arg1, arg2=value2)` or `args_callable(arg1=value1, arg2=value2)`
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或一系列位置参数和/或关键字参数，如 `args_callable(arg1, arg2)`、`args_callable(arg1, arg2=value2)`
    或 `args_callable(arg1=value1, arg2=value2)`
- en: Above, I described a callable as a noun. The word *callable*, however, is also
    used as an adjective, meaning *being a callable*. Therefore, a callable is the
    same as a callable object.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 上述中，我将可调用对象描述为一个名词。然而，*可调用对象*一词也可以用作形容词，意思是 *作为一个可调用对象*。因此，可调用对象与可调用对象是相同的。
- en: 'Python has a built-in function , `callable()`, that checks if an object is
    callable, or — in other words — if it’s a callable. Consider the following examples
    of actual callables:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Python 有一个内置函数 `callable()`，用于检查一个对象是否是可调用的，或者换句话说，是否是一个可调用对象。请考虑以下实际的可调用对象示例：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The below objects are not callables:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的对象不是可调用的：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The positive examples above were about functions, which are what most people
    associate with callables. However, in fact, every Python class is callable. If
    you know the basics of object-oriented programming in Python, you know that to
    create an instance of a class, you do the following:¹
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 上述正面示例是关于函数的，这也是大多数人对可调用对象的主要关联。然而，实际上，每个 Python 类都是可调用的。如果你了解 Python 中面向对象编程的基础知识，你会知道要创建一个类的实例，你需要执行以下操作¹
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This looks exactly like a call, and it is — and that is why Python classes are
    callables.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来完全像是一次调用，实际上确实如此——这就是为什么 Python 类是可调用的原因。
- en: 'This code shows that the `Empty` class is callable, but the truth is, every
    single Python class is callable. However, in Python terminology, the term “callable
    classes” is usually used to indicate something different: a class whose instances
    are callable.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码显示了`Empty`类是可调用的，但事实上，每一个Python类都是可调用的。然而，在Python术语中，“可调用类”通常用于表示不同的东西：其实例是可调用的类。
- en: 'Our `Empty` class is callable, but its instances are not:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`Empty`类是可调用的，但其实例不是：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This code throws `TypeError`, because instances of the `Empty` class are not
    callable:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码抛出了`TypeError`，因为`Empty`类的实例不可调用：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To make a class’s instances callable, you need to implement a `.__call__()`
    method. We do so below, although the method is empty — it does nothing:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要使类的实例可调用，你需要实现`.__call__()`方法。我们在下面做到了这一点，尽管该方法是空的——它什么也不做：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you see, nothing happened — which basically means that `Empty()` return `None`.
    This time, however, no error was thrown, as instances of `EmptyCallable` are indeed
    callable.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，什么都没发生——这基本上意味着`Empty()`返回了`None`。然而，这次没有抛出错误，因为`EmptyCallable`的实例确实是可调用的。
- en: 'Note: Every Python class is callable, meaning that calling it creates a new
    instance of the class. However, not all instances of Python classes are callable.
    To make an instance callable, you must implement the `__call__()` method in the
    class body. We typically name a class as callable only when its instances are
    callable, even if theoretically this is not fully correct.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：每个Python类都是可调用的，这意味着调用它会创建一个类的新实例。然而，并非所有Python类的实例都是可调用的。要使实例可调用，你必须在类体中实现`__call__()`方法。我们通常只将类称为可调用类，当其实例是可调用的，即使从理论上讲这并不完全正确。
- en: Examples of callables
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可调用对象的示例
- en: Sometimes the best way of showing something is… to do it. Hence, I will provide
    a list of examples of callables, and then we will discuss when it is useful to
    make an object callable.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，展示某样东西的最佳方式是……去做它。因此，我将提供一系列可调用对象的示例，然后我们将讨论使对象可调用的情况。
- en: Let’s start with the most obvious examples and work our way down to less common
    ones.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从最明显的示例开始，然后逐渐深入到不太常见的示例。
- en: '*Regular and lambda functions*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*常规和lambda函数*'
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Classes and class instances*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*类和类实例*'
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Functions from the operator module*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*来自operator模块的函数*'
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Partial objects*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*部分对象*'
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Decorators*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*装饰器*'
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Closures*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*闭包*'
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Let’s pause here for a moment. This code line requires some explanation.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在这里稍作停顿。这一行代码需要一些解释。
- en: I would never recommend writing this code. The only advantage to doing so is
    that it demonstrates your understanding of Python intricacies. However, it should
    never be written in production code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我绝不会推荐编写这段代码。唯一的好处是它展示了你对Python复杂性的理解。然而，它绝不应该在生产代码中编写。
- en: 'Let’s see how it works:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它是如何工作的：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Do you see what’s happening? The `mult` function is an example of a closure:
    a function that returns a function, and the inner function can access free variables
    in the outer function’s scope, even after the outer function, `mult()`, has returned.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到发生了什么吗？`mult`函数是闭包的一个示例：一个返回函数的函数，内层函数可以访问外层函数作用域中的自由变量，即使外层函数`mult()`已经返回。
- en: If you are familiar with the `operator` module, you know that some of its functions
    are closures. Examples include `mul`, `add`, `itemgetter`, and `methodcaller`.
    It’s good to be familiar with closures and to understand how they work, as understanding
    them elevates your Python skills to a deeper level.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对`operator`模块比较熟悉，你会知道它的一些函数是闭包。示例包括`mul`、`add`、`itemgetter`和`methodcaller`。了解闭包及其工作原理是很有益的，因为理解它们可以将你的Python技能提升到更深层次。
- en: Closures can be very useful in Python and are used in many different ways, but
    that is not the topic of this article. We will discuss them another time. What
    matters to us now is that *a closure is callable and returns a callable*, which
    is the same thing we observed for the `decorator` decorator above.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 闭包在Python中非常有用，并以多种不同方式使用，但这不是本文的主题。我们将另择时间讨论它们。现在对我们来说重要的是*闭包是可调用的，并返回可调用的*，这与上面的`decorator`装饰器观察到的情况相同。
- en: 'Let’s rewrite the closure to make it more readable; it will be easier to see
    what’s happening and why closures both are and return callable objects:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重写闭包，使其更具可读性；这样更容易看到发生了什么，以及为什么闭包既是又返回可调用对象：
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Definitely cleaner. If you noticed that decorators are just specific examples
    of closures, you’re right. Anyway:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对更干净。如果你注意到装饰器只是闭包的特定示例，那你是对的。无论如何：
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: So, *closures are* and *closures return* callables.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，*闭包是*并且*闭包返回*可调用对象。
- en: For a short moment, I’d like to return to `functools.partial`. Any discussion
    of callables in Python must not ignore them — as partial objects constitute an
    extremely useful tool.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 短暂地，我想回到`functools.partial`。在 Python 中讨论可调用对象时，不能忽视它们——因为部分对象构成了一个极其有用的工具。
- en: 'It’s yet another subject that deserves a dedicated article, so I will only
    show some simple examples of these powerful callables. [The official Python documentation](https://docs.python.org/3/library/functools.html#functools.partial)
    explains partial objects as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个值得专门讨论的主题，所以我只会展示一些简单的这些强大可调用对象的例子。[官方 Python 文档](https://docs.python.org/3/library/functools.html#functools.partial)
    解释了部分对象如下：
- en: The partial() is used for partial function application which “freezes” some
    portion of a function’s arguments and/or keywords resulting in a new object with
    a simplified signature.
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`partial()`用于部分函数应用，它“冻结”函数的某些参数和/或关键字，结果是一个具有简化签名的新对象。'
- en: Hence, you can achieve similar things as you do with closures. Remember this?
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你可以实现类似于闭包的功能。还记得吗？
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We can achieve the same in the following way:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式实现相同的功能：
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You can create a new callable with some (even all, if that’s what you need)
    of the arguments being assigned particular values. You can use it also to change
    the default values of a function’s arguments:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以创建一个新的可调用对象，使某些（甚至全部，如果这是你需要的）参数被赋予特定的值。你也可以用它来改变函数参数的默认值：
- en: '[PRE18]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Technically, partial objects are not functions:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，部分对象不是函数：
- en: '[PRE19]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: They are callables, and they are [*partial objects*](https://docs.python.org/3/library/functools.html#functools.partial).
    It’s worth to mention also `functools.partialmethod()`, which creates partial
    objects to be used as class methods, unlike `functools.partial()`, whose objects
    are used as functions. If you’re interested, I hope to publish the dedicated article
    in the near future; and for the moment, you can read [the official documentation](https://docs.python.org/3/library/functools.html#functools.partialmethod).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 它们是可调用的，而且它们是[*部分对象*](https://docs.python.org/3/library/functools.html#functools.partial)。还值得一提的是`functools.partialmethod()`，它创建的部分对象可用作类方法，与`functools.partial()`不同，后者的对象用作函数。如果你感兴趣，我希望在不久的将来发布专门的文章；目前，你可以阅读[官方文档](https://docs.python.org/3/library/functools.html#functools.partialmethod)。
- en: When to make an object callable?
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么时候需要使对象可调用？
- en: 'As shown above, not only is Python full of callable objects, but also we can
    create them with ease. The following article shows this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所示，不仅 Python 充满了可调用对象，我们还可以轻松创建它们。以下文章展示了这一点：
- en: '[](/a-callable-float-fun-and-creativity-in-python-7a311ccd742d?source=post_page-----ba88bf0729aa--------------------------------)
    [## A Callable Float? Fun and Creativity in Python'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/a-callable-float-fun-and-creativity-in-python-7a311ccd742d?source=post_page-----ba88bf0729aa--------------------------------)
    [## 可调用的浮点数？ Python 中的乐趣与创造力'
- en: To learn being creative, we’ll implement callable floating-point numbers in
    Python.
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为了学习如何进行创造性编程，我们将在 Python 中实现可调用的浮点数。
- en: towardsdatascience.com](/a-callable-float-fun-and-creativity-in-python-7a311ccd742d?source=post_page-----ba88bf0729aa--------------------------------)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/a-callable-float-fun-and-creativity-in-python-7a311ccd742d?source=post_page-----ba88bf0729aa--------------------------------)'
- en: I show there how to implement a callable class, `Float`, that inherits from
    `float`. The class’s instances are callable, so we’re talking about callable floating-point
    numbers.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里展示了如何实现一个可调用类`Float`，它继承自`float`。这个类的实例是可调用的，所以我们在讨论可调用的浮点数。
- en: 'Why bother at all? What can you achieve that way? Consider this example taken
    from the above article, and if you’re interested in the implementation of the
    `Float` class, you’ll find it there:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要这样做？你能通过这种方式实现什么？考虑这个从上面文章中提取的例子，如果你对`Float`类的实现感兴趣，你可以在那里找到它：
- en: '[PRE20]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: So, you can call a `Float` number and provide a function as an argument, and
    the function will be applied to the number kept by the instance. The article in
    question did not make a point that such a callable class is useful; nor do I want
    to make it here. Not trying to prove a class like that makes sense, the article
    discussed creativity in Python and showed the fun of Python coding.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你可以调用一个`Float`数字，并将一个函数作为参数提供，函数将应用于实例所保持的数字。相关的文章并没有指出这样一个可调用类是有用的；我也不打算在这里提出这个观点。不试图证明这样的类有意义，文章讨论了
    Python 中的创造力，并展示了 Python 编码的乐趣。
- en: Why am I mentioning this, then? Because the article does show something else.
    It shows that you can create callable objects with ease. The point is to know
    not only how to do it, but also — if not mainly — when to do it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 那我为什么提到这一点？因为这篇文章确实展示了其他内容。它表明你可以轻松创建可调用对象。关键是要知道不仅仅如何做，而且——如果不是主要的话——何时做。
- en: Some examples when you may want to create a callable are as provided below.
    I will omit the most obvious one, like a need of creating a function or a class.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当你可能需要创建一个可调用对象时，下面的例子提供了一些。我将省略最明显的，比如需要创建一个函数或类。
- en: Function-like objects. For example, you might want to create a function-like
    object that takes arguments and returns a value, but that also has additional
    state or behavior. Closures, decorators and context managers are good examples.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类函数对象。例如，你可能想要创建一个函数类对象，它接受参数并返回一个值，但也有附加的状态或行为。闭包、装饰器和上下文管理器是很好的例子。
- en: Design patterns that use callable objects. [The Strategy pattern](https://en.wikipedia.org/wiki/Strategy_pattern)
    is a perfect example; it allows you to define a family of algorithms, encapsulate
    each one, and make them interchangeable.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用可调用对象的设计模式。[策略模式](https://en.wikipedia.org/wiki/Strategy_pattern)就是一个完美的例子；它允许你定义一系列算法，封装每一个算法，并使它们可互换。
- en: Dynamic functions and dynamic callables. This means creating a function or a
    callable at runtime. Callable objects allow you to do this easily.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态函数和动态可调用对象。这意味着在运行时创建一个函数或可调用对象。可调用对象允许你轻松做到这一点。
- en: 'This was pretty technical and theoretical, so let’s analyze a practical example.
    Imagine you have a class `ClassifyTextTo` that aims to classify a text into several
    categories. Let’s ignore implementation details, instead focusing on the class’s
    design. We can write the following prototype of this class:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当技术性和理论性，所以我们来分析一个实际的例子。假设你有一个`ClassifyTextTo`类，旨在将文本分类到多个类别中。我们忽略实现细节，专注于类的设计。我们可以写出这个类的以下原型：
- en: '[PRE21]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `.pipeline()` method explains the whole process:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`.pipeline()`方法解释了整个过程：'
- en: the text is read from `self.path`
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本从`self.path`中读取
- en: the text is preprocessed, to make it ready for the classification model
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本被预处理，以使其准备好用于分类模型
- en: the classification model is run; it’s configured in `self.config`
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分类模型被运行；它在`self.config`中配置
- en: the model is diagnosed
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型被诊断
- en: a report is created and logged
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建报告并记录
- en: 'The class works for a particular text — or more specifically — for a particular
    file located in `path`. So, for each file you create an instance of the class
    and run the pipeline, like here:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 该类适用于特定的文本——或者更具体地说——适用于位于`path`中的特定文件。因此，对于每个文件，你创建一个类的实例并运行管道，就像这里：
- en: '[PRE22]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If you have more such texts, you can do it in a loop:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有更多类似的文本，可以循环处理：
- en: '[PRE23]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'or, simpler:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，更简单地说：
- en: '[PRE24]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note that we’re creating as many instances of `ClassifyTextTo` as we have texts.
    Do we need to do so?
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们正在为每个文本创建`ClassifyTextTo`的实例。我们需要这样做吗？
- en: 'When you have a pipeline to run in a class, oftentimes creating a callable
    class is a natural thing to do. Consider this alternative prototype:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在一个类中运行管道时，通常创建一个可调用类是一件自然的事情。考虑这个替代原型：
- en: '[PRE25]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Although the implementation does not look all that different, the difference
    is significant and lies in the design. While `ClassifyTextTo` needed to create
    an instance per path, `CallClassifyTextTo` doesn’t. If the configuration is the
    same for all texts, we can use just one instance. In fact, we could do so even
    if the configuration needed to change from path to path, but that way we would
    lose the big advantage of the design — using the very same instance for each path:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管实现看起来没什么不同，但差异是显著的，体现在设计上。虽然`ClassifyTextTo`需要为每个路径创建一个实例，`CallClassifyTextTo`则不需要。如果所有文本的配置都相同，我们只需使用一个实例。事实上，即使配置需要从路径到路径变化，我们也可以使用一个实例，但那样我们将失去设计的重大优势——为每个路径使用相同的实例：
- en: '[PRE26]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'or:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 或者：
- en: '[PRE27]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This is a natural thing because now we have the `classify` object, which is
    callable, thanks to the `.__call__()` method in the `ClassifyTextTo` class. It’s
    a little cheaper than the first approach, as it creates only one instance of the
    class.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一件自然的事情，因为现在我们有了`classify`对象，它是可调用的，得益于`ClassifyTextTo`类中的`.__call__()`方法。这比第一种方法便宜一点，因为它只创建一个类实例。
- en: 'The most important thing for me is that calling `classify()` per path is a
    natural thing to do, as it means running the whole pipeline for path after path.
    I like the simplicity of this design:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，最重要的是对每条路径调用`classify()`是一件自然的事，因为这意味着对每条路径运行整个管道。我喜欢这个设计的简单性：
- en: The instance of the `CallClassifyTextTo` class represents a particular model,
    not a path.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CallClassifyTextTo`类的实例代表一个特定的模型，而不是路径。'
- en: Running a model is an action, and calling the instance does represent this action,
    just like calling a function does.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行一个模型是一种操作，而调用实例确实代表了这种操作，就像调用一个函数一样。
- en: 'I am not saying this is the only correct approach. In programming, oftentimes
    several approaches will be correct. In such cases, I use several criteria to decide
    which one to use:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我并不是说这是唯一正确的方法。在编程中，通常有几种方法是正确的。在这种情况下，我使用几个标准来决定使用哪一种：
- en: code readability and simplicity
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码的可读性和简洁性
- en: how well the code design reflects the actual objects and actions
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码设计如何反映实际对象和操作
- en: performance
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能
- en: the team’s and my own preferences
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队和我个人的偏好
- en: Conclusion
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We discussed the basics and intricacies of callables in Python programming.
    I’d say that you need to know both if you want to be an advanced Python developer.
    Lucky for us, they are not as difficult as they may seem at first glance.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了Python编程中可调用对象的基础和复杂性。我会说，如果你想成为一名高级Python开发人员，你需要了解这两方面。幸运的是，它们不像最初看起来那么困难。
- en: 'On the other hand, I’m just talking about understanding how callables work
    in Python. This is not the same as understanding every single scenario in which
    they can be used. For instance, closures are quite a complex topic, and understanding
    them is a totally different thing from understanding how to create classes with
    callable instances. Often, the only closures you will use are decorators, but
    one day you may need to use them for other scenarios. One example is [the](https://github.com/nyggus/rounder)
    `[rounder](https://github.com/nyggus/rounder)` [package](https://github.com/nyggus/rounder)
    and the `_do()`function:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，我只是讨论了如何理解Python中的可调用对象。这与理解它们可以使用的每个场景不同。例如，闭包是一个相当复杂的话题，理解它们与理解如何创建具有可调用实例的类完全不同。通常，你使用的唯一闭包是装饰器，但有一天你可能需要在其他场景中使用它们。一个例子是[the](https://github.com/nyggus/rounder)
    `[rounder](https://github.com/nyggus/rounder)` [package](https://github.com/nyggus/rounder)和`_do()`函数：
- en: '[](https://github.com/nyggus/rounder/blob/main/rounder/rounder.py?source=post_page-----ba88bf0729aa--------------------------------)
    [## rounder/rounder/rounder.py at main · nyggus/rounder'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/nyggus/rounder/blob/main/rounder/rounder.py?source=post_page-----ba88bf0729aa--------------------------------)
    [## rounder/rounder/rounder.py at main · nyggus/rounder'
- en: Python package for rounding floats and complex numbers in complex Python objects.
    - rounder/rounder/rounder.py at main…
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于在复杂Python对象中舍入浮点数和复杂数字的Python包。 - rounder/rounder/rounder.py at main…
- en: github.com](https://github.com/nyggus/rounder/blob/main/rounder/rounder.py?source=post_page-----ba88bf0729aa--------------------------------)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/nyggus/rounder/blob/main/rounder/rounder.py?source=post_page-----ba88bf0729aa--------------------------------)
- en: Nevertheless, I hope this article helped you understand the basics of Python
    callables and take a look at some of their intricacies. From now on, in your Python
    work, remember that Python callables can be quite powerful and consider whether
    using them can improve the code design of your project.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我希望这篇文章能帮助你理解Python可调用对象的基础知识，并了解它们的一些细节。从现在起，在你的Python工作中，记住Python可调用对象可能非常强大，并考虑是否使用它们可以改善项目的代码设计。
- en: Footnotes
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚注
- en: ¹ The `Empty` class does nothing. However, this does not mean that it cannot
    have any sensible uses. For example, it could serve as a sentinel, that is, an
    object that is used to indicate a specific state or condition. `None` is the best-known
    example of a sentinel.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: ¹ `Empty`类什么都不做。然而，这并不意味着它没有任何实际用途。例如，它可以作为一个哨兵，即一个用于指示特定状态或条件的对象。`None`是最著名的哨兵例子。
- en: 'Thanks for reading. If you enjoyed this article, you may also enjoy other articles
    I wrote; you will see them [here](https://medium.com/@nyggus). And if you want
    to join Medium, please use my referral link below:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。如果你喜欢这篇文章，你可能也会喜欢我写的其他文章，你可以在[这里](https://medium.com/@nyggus)查看。如果你想加入Medium，请使用下面的推荐链接：
- en: '[](https://medium.com/@nyggus/membership?source=post_page-----ba88bf0729aa--------------------------------)
    [## Join Medium with my referral link - Marcin Kozak'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus/membership?source=post_page-----ba88bf0729aa--------------------------------)
    [## 使用我的推荐链接加入Medium - Marcin Kozak'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为 Medium 会员，您的一部分会员费用会分配给您阅读的作者，并且您可以完全访问每一个故事……
- en: medium.com](https://medium.com/@nyggus/membership?source=post_page-----ba88bf0729aa--------------------------------)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/@nyggus/membership?source=post_page-----ba88bf0729aa--------------------------------)'
