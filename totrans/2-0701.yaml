- en: Delta Lake — Automatic Schema Evolution
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Delta Lake — 自动模式演变
- en: 原文：[https://towardsdatascience.com/delta-lake-automatic-schema-evolution-11d32bd1aa99](https://towardsdatascience.com/delta-lake-automatic-schema-evolution-11d32bd1aa99)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/delta-lake-automatic-schema-evolution-11d32bd1aa99](https://towardsdatascience.com/delta-lake-automatic-schema-evolution-11d32bd1aa99)
- en: What happens and what you can/can’t do when merging evolutive DataFrames
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 合并演变数据框时发生了什么，以及你可以/不能做的事情
- en: '[](https://medium.com/@vitorf24?source=post_page-----11d32bd1aa99--------------------------------)[![Vitor
    Teixeira](../Images/db450ae1e572a49357c02e9ba3eb4f9d.png)](https://medium.com/@vitorf24?source=post_page-----11d32bd1aa99--------------------------------)[](https://towardsdatascience.com/?source=post_page-----11d32bd1aa99--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----11d32bd1aa99--------------------------------)
    [Vitor Teixeira](https://medium.com/@vitorf24?source=post_page-----11d32bd1aa99--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@vitorf24?source=post_page-----11d32bd1aa99--------------------------------)[![Vitor
    Teixeira](../Images/db450ae1e572a49357c02e9ba3eb4f9d.png)](https://medium.com/@vitorf24?source=post_page-----11d32bd1aa99--------------------------------)[](https://towardsdatascience.com/?source=post_page-----11d32bd1aa99--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----11d32bd1aa99--------------------------------)
    [Vitor Teixeira](https://medium.com/@vitorf24?source=post_page-----11d32bd1aa99--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----11d32bd1aa99--------------------------------)
    ·5 min read·Mar 10, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----11d32bd1aa99--------------------------------)
    ·阅读时间5分钟·2023年3月10日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/1b8dfc96acde282413eda93c212cb337.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1b8dfc96acde282413eda93c212cb337.png)'
- en: Photo by [McDobbie Hu](https://unsplash.com/@hjx518756?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[McDobbie Hu](https://unsplash.com/@hjx518756?utm_source=medium&utm_medium=referral)提供，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: In the last post, we covered the transaction log and [how to keep Delta Tables
    fast and clean](https://medium.com/p/3c9d4f9e2f5e). This time we will be covering
    automatic schema evolution in Delta tables.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一篇文章中，我们讨论了事务日志和[如何保持 Delta 表快速和干净](https://medium.com/p/3c9d4f9e2f5e)。这次我们将讨论
    Delta 表中的自动模式演变。
- en: Schema evolution is a critical aspect of managing data over time. It is very
    common for data sources to evolve and adapt to new business requirements, which
    might mean adding or removing fields from an existing data schema. As a data consumer,
    it is imperative a quick and agile adaption to the new characteristics of the
    data sources and automatic schema evolution allows us to seamlessly adapt to these
    changes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 模式演变是管理数据随时间变化的关键方面。数据源不断发展以适应新的业务需求，这可能意味着需要从现有的数据模式中添加或删除字段。作为数据使用者，快速而灵活地适应数据源的新特性是至关重要的，而自动模式演变使我们能够无缝地适应这些变化。
- en: In this post, we will cover automatic schema evolution in [Delta](https://delta.io/)
    while using the [people10m public dataset](https://learn.microsoft.com/en-us/azure/databricks/dbfs/databricks-datasets#create-a-table-based-on-a-databricks-dataset)
    that is available on Databricks Community Edition. We’ll test adding and removing
    fields in several scenarios.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将讨论在使用[Delta](https://delta.io/)时的自动模式演变，并使用[people10m 公共数据集](https://learn.microsoft.com/en-us/azure/databricks/dbfs/databricks-datasets#create-a-table-based-on-a-databricks-dataset)（这是在
    Databricks Community Edition 上提供的）进行测试。我们将在几个场景中测试添加和删除字段。
- en: Setup
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'Automatic schema evolution can be enabled in two ways, depending on our workload.
    If we are doing blind appends, all we need to do is to enable ***mergeSchema***
    option:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 自动模式演变可以通过两种方式启用，具体取决于我们的工作负载。如果我们进行盲目追加，只需启用***mergeSchema***选项即可：
- en: If we use a merge strategy for inserting data we need to enable ***spark.databricks.delta.schema.autoMerge.enabled***by
    setting it to ***true.***
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用合并策略插入数据，则需要通过将***spark.databricks.delta.schema.autoMerge.enabled***设置为***true***来启用它。
- en: In this post, we’ll be using merge so we’ll go with the latter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将使用合并策略，因此我们将选择后者。
- en: 'We are all set so we can load our Delta Table which should look like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经设置好了，可以加载我们的 Delta 表，它应该如下所示：
- en: '![](../Images/8839e62234f398505c236f99438d592c.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8839e62234f398505c236f99438d592c.png)'
- en: Initial dataset
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 初始数据集
- en: Evolving Schemas
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模式演变
- en: To simulate evolving schemas we will be creating custom DataFrames using a hand-made
    schema and merging them using Scala’s [Delta API](https://docs.delta.io/latest/delta-update.html#upsert-into-a-table-using-merge).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟模式演变，我们将使用手动创建的模式创建自定义 DataFrame，并使用 Scala 的 [Delta API](https://docs.delta.io/latest/delta-update.html#upsert-into-a-table-using-merge)
    合并它们。
- en: 'Disclaimer: All the updates that we will be doing to the schema are just examples
    and are not meant to make much sense.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 免责声明：我们将对模式进行的所有更新只是示例，并不意味着有太大意义。
- en: Initial DataFrame schema
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 初始 DataFrame 模式
- en: Simulating and merging new records
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟和合并新记录
- en: Adding a field
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加字段
- en: Let’s say our company wants to be nickname friendly and people can be called
    by their favorite nicknames (how awesome!).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们公司希望友好对待昵称，员工可以用他们喜欢的昵称被称呼（真棒！）。
- en: We’ll add a new field to our current schema called *nickName* and update Pennie’s
    nickName (id number 1).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向当前模式中添加一个名为*nickName*的新字段，并更新 Pennie 的 nickName（id 编号 1）。
- en: Schema with nickName
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 带有 nickName 的模式
- en: '![](../Images/76766b715befdb9bb7772984303adfaa.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/76766b715befdb9bb7772984303adfaa.png)'
- en: Adding a new field
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 添加新字段
- en: As we can see a new field as added and Pennie can now be called by her new favorite
    nickname! Notice how all the other records' value was automatically filled with
    null.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，添加了一个新字段，Pennie 现在可以用她的新喜欢的昵称称呼！注意到所有其他记录的值都自动填充为 null。
- en: Removing a field
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除字段
- en: With the addition of nicknames, everyone started thinking about how no one uses
    their middle name so they decided to remove it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于添加了昵称，大家开始思考为何没有人使用他们的中间名，因此决定删除它。
- en: Schema without middleName
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 无中间名的模式
- en: We’re going to update Quyen’s nickname as well but as a result of the source
    deleting the field, her middle name won’t be present. What should happen to the
    table?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将更新 Quyen 的昵称，但由于源删除了字段，她的中间名将不会存在。表格应该如何处理？
- en: '![](../Images/36d9e751d84a3a69ffbd630467ba2335.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/36d9e751d84a3a69ffbd630467ba2335.png)'
- en: Table after deleting middleName
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 删除中间名后的表
- en: If you guessed nothing, you were right. Every current target table record remains
    the same, only new records will have *middleName* as *null*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你什么也没猜到，那你是对的。每个当前目标表记录保持不变，只有新记录的*middleName*将是*null*。
- en: To showcase this we’re going to insert a new id (0).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示这一点，我们将插入一个新的 id（0）。
- en: '![](../Images/c5dd1de121806ddf7bc081c97bc07586.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c5dd1de121806ddf7bc081c97bc07586.png)'
- en: Table after inserting a new record
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 插入新记录后的表
- en: Renaming a column
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重命名列
- en: Renaming a column is the same as removing a column and adding another with a
    new name. If you wish to rename a column in place please refer to [Delta Column
    Name Mapping](https://docs.databricks.com/delta/delta-column-mapping.html#rename-a-column).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 重命名列与删除一列并用新名称添加另一列相同。如果你希望在原地重命名列，请参阅 [Delta 列名映射](https://docs.databricks.com/delta/delta-column-mapping.html#rename-a-column)。
- en: I won’t dig further into this topic as even though it is a schema evolution,
    it is not automatic. Have in mind that this feature is irreversible, once you
    turn it on you aren’t able to turn it off.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会进一步深入这个话题，因为尽管这是一种模式演变，但它不是自动的。请记住，这个功能是不可逆的，一旦启用，你将无法关闭它。
- en: Changing a column type/order
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改列类型/顺序
- en: Changing a column type or column order is also not part of automatic schema
    evolution.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 更改列类型或列顺序也不是自动模式演变的一部分。
- en: Adding/Removing a field in a struct
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在结构中添加/删除字段
- en: Let’s imagine that we have added an employee history struct that includes the
    *startDate* and *endDate* to track when the employee started and left the job.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们添加了一个员工历史结构，其中包括*startDate*和*endDate*，以追踪员工何时开始和离开工作。
- en: '![](../Images/b758f6669537daf41bfc7ae793dd3cb8.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b758f6669537daf41bfc7ae793dd3cb8.png)'
- en: For a more complete history, we now wish to include the *title* in order to
    track the employee’s career in the company.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更完整的历史记录，我们现在希望包括*title*以追踪员工在公司的职业生涯。
- en: Updated struct with ‘title’
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 更新了带有‘title’的结构
- en: '![](../Images/61777ff2afd04f1c474f7d9eb4b6502c.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/61777ff2afd04f1c474f7d9eb4b6502c.png)'
- en: As we can see, adding a field to a struct is also not an issue. If we try to
    remove the newly added field it will also work. Adding and removing fields inside
    a struct works the same way as if it is performed on the root.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，向结构中添加字段也不是问题。如果我们尝试删除新添加的字段，它也会成功。添加和删除结构中的字段与在根中执行的方式相同。
- en: Adding/Removing a field in an array of structs
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在结构数组中添加/删除字段
- en: 'Now we are getting more complex. In this case, we’ll be adding a new field
    to a struct that is inside an array. Imagine we now have an array of equipment
    that currently belongs to an employee:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要处理更复杂的情况。在这种情况下，我们将向数组中的结构体添加一个新字段。假设我们现在有一个属于某个员工的设备数组：
- en: '![](../Images/1fd9959a1f975febf5e503df3c8b980b.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1fd9959a1f975febf5e503df3c8b980b.png)'
- en: To showcase the addition of a new field inside the array we’ll be adding a *serial_num*
    to the struct so that we can better track the equipment.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示在数组中添加新字段的情况，我们将向结构体中添加一个*serial_num*，以便更好地跟踪设备。
- en: Updated struct inside array with ‘serial_num’
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在数组中更新的结构体添加了‘serial_num’
- en: '![](../Images/71e939fa1fa139c21dbe30d28157f5da.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/71e939fa1fa139c21dbe30d28157f5da.png)'
- en: As we can see, this also works as expected. The table schema is updated, new
    records have the respective *serial_num* and older records *serial_num* arefilled
    with *null* values.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，这也按预期工作。表模式已更新，新记录具有相应的*serial_num*，而旧记录的*serial_num*被填充为*null*值。
- en: If we remove the newly added field again it works as expected.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次移除新添加的字段，它会按预期工作。
- en: Adding/Removing a field in a map of structs
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在结构体的映射中添加/删除字段
- en: Now it's time to test the same but inside a map. We have added a new column
    called *connections* that will be responsible for holding the hierarchy for each
    employee.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候在映射中测试相同的操作了。我们添加了一个名为*connections*的新列，该列将负责存储每个员工的层级。
- en: '![](../Images/0080df5b27d737475f8c9ee7a4454e92.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0080df5b27d737475f8c9ee7a4454e92.png)'
- en: To simulate an update we’ll be adding a new column called *title* to the struct
    inside the *connections* column.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟更新，我们将向*connections*列中的结构体添加一个名为*title*的新列。
- en: Updated struct inside map with ‘title’
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在映射中更新的结构体添加了‘title’
- en: '![](../Images/5ec4b487a79f3f62ed9847b708c14d18.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5ec4b487a79f3f62ed9847b708c14d18.png)'
- en: This time, removing the field that returns an *AnalysisException* which means
    that MapType conversions are not well supported.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，删除返回*AnalysisException*的字段，这意味着MapType转换不被很好地支持。
- en: After a brief investigation, I found that it is due to [castIfNeeded](https://github.com/delta-io/delta/blob/master/core/src/main/scala/org/apache/spark/sql/delta/UpdateExpressionsSupport.scala#L53)
    function not supporting MapTypes yet. I have [opened a bug](https://github.com/delta-io/delta/issues/1641)
    and will try to work on a fix for this issue.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 经简要调查，我发现这是因为[castIfNeeded](https://github.com/delta-io/delta/blob/master/core/src/main/scala/org/apache/spark/sql/delta/UpdateExpressionsSupport.scala#L53)函数尚不支持MapTypes。我已[报告了一个错误](https://github.com/delta-io/delta/issues/1641)，并将尝试解决这个问题。
- en: '**Edit:** [https://github.com/delta-io/delta/pull/1645](https://github.com/delta-io/delta/pull/1645)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**编辑：** [https://github.com/delta-io/delta/pull/1645](https://github.com/delta-io/delta/pull/1645)'
- en: Conclusion
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, we went through the addition and removal of fields in several
    different scenarios. We concluded that automatic schema evolution in Delta is
    very complete and supports most of the complex scenarios. By allowing these scenarios
    we can avoid having to manually intervene to update our schemas when data sources
    evolve. This is especially useful when consuming hundreds of data sources.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们讨论了在几种不同情况下添加和删除字段的问题。我们得出结论，Delta中的自动模式演变非常完善，支持大多数复杂场景。通过允许这些场景，我们可以避免在数据源演变时手动干预以更新模式。这在处理数百个数据源时特别有用。
- en: As a bonus, we also found a missing case that is not supported in MapTypes which
    is a great opportunity to give back to the community for such an awesome open-source
    project.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外的奖励，我们还发现了MapTypes中不支持的一个遗漏案例，这是一个很好的机会为这样一个出色的开源项目做出贡献。
- en: I hope you liked the read! Make sure to tune in for more!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你喜欢这篇文章！请确保关注更多内容！
