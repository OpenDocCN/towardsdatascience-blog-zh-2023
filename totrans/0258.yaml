- en: Adding Inset Axes to Matplotlib Figures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/adding-inset-axes-to-matplotlib-figures-811a9482c43c](https://towardsdatascience.com/adding-inset-axes-to-matplotlib-figures-811a9482c43c)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A how-to on adding inset axes to a Matplotlib figure to improve your data visualisation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://andymcdonaldgeo.medium.com/?source=post_page-----811a9482c43c--------------------------------)[![Andy
    McDonald](../Images/df11d647be032aeb3d31852affb33a64.png)](https://andymcdonaldgeo.medium.com/?source=post_page-----811a9482c43c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----811a9482c43c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----811a9482c43c--------------------------------)
    [Andy McDonald](https://andymcdonaldgeo.medium.com/?source=post_page-----811a9482c43c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----811a9482c43c--------------------------------)
    ·6 min read·Nov 3, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c2611dd7ee8b182f605f24f27231806c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image created by DALL-E 3 by the author.
  prefs: []
  type: TYPE_NORMAL
- en: When creating figures in matplotlib, there may be occasions where you want to
    add a smaller figure or axes inside of your main figure. This could be for a number
    of reasons, but most commonly, it is used to highlight an area of interest and
    enlarge it or to include additional information that is related to the main figure.
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib makes this process very simple by allowing us to add inset axes within
    the main figure. This can then be further tweaked to get the information we want
    displayed how we want.
  prefs: []
  type: TYPE_NORMAL
- en: In this short tutorial, we will see how to create a simple well location map,
    like the one below, using grid coordinates. We will then add inset axes to highlight
    and enlarge a smaller area of the main map.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9dba1000ac81fb72734b47a229dbfb3c.png)'
  prefs: []
  type: TYPE_IMG
- en: The final matplotlib figure containing the inset_axes highlights a smaller selection
    of wells. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Importing Libraries and Loading Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step in our tutorial is to import the libraries we are going to be
    using.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first two import statements should be familiar: importing [**pandas**](https://pandas.pydata.org/)
    and [**matplotib**](https://matplotlib.org/stable/). The third import from `[mpl.toolkits.axes_grid1.inset_locator](https://matplotlib.org/stable/api/_as_gen/mpl_toolkits.axes_grid1.inset_locator.html)`
    allows us to plot our inset figure within the bounds of our main figure.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once the libraries have been imported, we can import the data. The data used
    here is from the Force 2020 Xeek Machine Learning competition and contains around
    100 wells worth of well logging measurements.
  prefs: []
  type: TYPE_NORMAL
- en: As this file is delimited by a semi-colon ( `;` ) we need to include an extra
    parameter to tell the `pd.read_csv()` function that is what the separator is between
    the values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Creating a Well Location Map Using X and Y Co-ordinates in Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the data has been loaded, we can create our first figure.
  prefs: []
  type: TYPE_NORMAL
- en: This figure will contain the X and Y location information from the CSV file
    and will show us the positions of the wells that are included within the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: These locations are grid coordinates rather than latitude and longitude.
  prefs: []
  type: TYPE_NORMAL
- en: First, we create the figure and set the size to 12 x 12.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Then, we create the scatter plot and pass it in the `X_LOC` and `Y_LOC` columns.
    To make the data points sit in front of the grid, we need to set the `zorder`
    to 1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Next, we set the x and y axes by defining the labels and limits.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In cases where we have very large numbers, matplotlib will switch to scientific
    notation. If we want to avoid this, we can use the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we will make the grid appear and then set the `zorder` to 0, which
    will then place the grid at the lowest layer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Our final code should look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When we call upon `plt.show()`, we get back the following plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7052e1938e0596f5f7fcf156e16943f9.png)'
  prefs: []
  type: TYPE_IMG
- en: Main matplotlib scatter plot showing the locations of wells on the Norwegian
    Continental Shelf. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an Inset Figure to Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have the main figure set up, we need to set up the inset figure. This
    code essentially follows from the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: First, we declare a new variable called `ax_inset` and assign it to the `inset_axes`
    method we imported earlier. This will allow us to create a new inset axes in the
    lower right corner of the existing axes `ax`.
  prefs: []
  type: TYPE_NORMAL
- en: The inset axes will be set to 30% of the width and height of `ax`. The `loc`
    parameter controls the position of the inset axes and places it in the lower right
    edge of the parent axes.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the calls to `bbox_transform` and `bbox_to_anchor` will specify the
    coordinate reference system for the bounding box (`bbox`) to anchor to.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Once the inset axes have been defined, we can set parameters like a normal axes
    object in matplotlib. Here we set it to display the same data as the main figure,
    but as we are zooming in to a smaller section of it, we need to adjust the `xlim`
    and `ylim` parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: To avoid any issues with scientific notation on the axes, we can set the tick
    label style to plain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ba8ff39bf9a7e9c242d7b1c4f918e709.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib figure after adding an inset axes. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Reducing X and Y Axis Label Spacing of Inset Axes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we leave the inset axes as is, we could end up with a large number of tick
    labels on our plot. To resolve this, we can use the following code to divide the
    figure up into three evenly spaced intervals and then place the tick mark and
    label.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3a85a1335ecc9cb5f279339e2f1844db.png)'
  prefs: []
  type: TYPE_IMG
- en: Matplotlib figure after adding an inset axes and fixing the labels to three
    on each axes. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Marking the Inset Axes and Tying it Back to the Main Axes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, to highlight how our inset figure relates to the main figure, we can
    call upon `mark_inset` and pass in the two axes objects, first the parent axes
    object( `ax` ) followed by the inset axes object (`ax_inset` ).
  prefs: []
  type: TYPE_NORMAL
- en: We then need to specify the locations of the connecting lines that mark the
    inset. In this case, we are using locations 2 (upper left corner) and 3 (lower
    left corner). The colour ( `ec`) of the connecting lines can also be set here
    if needed.
  prefs: []
  type: TYPE_NORMAL
- en: If we want, we can add some colour to the main axes object to fill in the area
    that the inset covers. In this example, I have set it to fill the area in red.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: When we display our map, we should have something similar to the image below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9dba1000ac81fb72734b47a229dbfb3c.png)'
  prefs: []
  type: TYPE_IMG
- en: The final matplotlib figure containing the inset_axes highlights a smaller selection
    of wells. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the final code to generate the above figure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within this short tutorial, we have seen how we can easily add inset axes to
    our main matplotlib figure to highlight a smaller area of a well location map.
    This not only highlights important areas to the reader, but it can also make the
    plot more aesthetically pleasing to look at.
  prefs: []
  type: TYPE_NORMAL
- en: Dataset Used Within this Tutorial
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Training dataset used as part of a Machine Learning competition run by Xeek
    and FORCE 2020 *(Bormann et al., 2020)*. This dataset is licensed under Creative
    Commons Attribution 4.0 International.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full dataset can be accessed at the following link: [https://doi.org/10.5281/zenodo.4351155](https://doi.org/10.5281/zenodo.4351155).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks for reading. Before you go, you should definitely subscribe to my content
    and get my articles in your inbox.* [***You can do that here!***](https://andymcdonaldgeo.medium.com/subscribe)*Also,
    if you have enjoyed this content and want to show your appreciation, consider
    giving it a few claps.*'
  prefs: []
  type: TYPE_NORMAL
