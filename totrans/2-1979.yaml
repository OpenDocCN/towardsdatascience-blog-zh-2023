- en: The 3 Reasons Why I Have Permanently Switched From Pandas To Polars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/the-3-reasons-why-i-have-permanently-switched-from-pandas-to-polars-b41d013a787b](https://towardsdatascience.com/the-3-reasons-why-i-have-permanently-switched-from-pandas-to-polars-b41d013a787b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I came for the speed, but I stayed for the syntax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@benfeifke?source=post_page-----b41d013a787b--------------------------------)[![Ben
    Feifke](../Images/dd4eb09e404dbd3a478ea1049cf17c90.png)](https://medium.com/@benfeifke?source=post_page-----b41d013a787b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b41d013a787b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b41d013a787b--------------------------------)
    [Ben Feifke](https://medium.com/@benfeifke?source=post_page-----b41d013a787b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b41d013a787b--------------------------------)
    ·10 min read·Mar 28, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1b105bb38f3f0c27e6b2974660509eae.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Photo](https://unsplash.com/photos/qQWV91TTBrE) by [Hans-Jurgen Mager](https://unsplash.com/@hansjurgen007)
    on [Unsplash](https://unsplash.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing this post, it’s been six years since I landed my first
    job in data science. And, for those entire six years spent doing data science,
    `[Pandas](https://pandas.pydata.org/)` has been the foundation of all my work:
    exploratory data analyses, impact analyses, data validations, model experimentation,
    you name it. My career was built on top of `Pandas`!'
  prefs: []
  type: TYPE_NORMAL
- en: Needless to say, I had some serious `Pandas` [lock-in](https://en.wikipedia.org/wiki/Vendor_lock-in).
  prefs: []
  type: TYPE_NORMAL
- en: That is, until I discovered `[Polars](https://github.com/pola-rs/polars)`, the
    new “blazingly fast DataFrame library” for Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, I’ll explain:'
  prefs: []
  type: TYPE_NORMAL
- en: What `Polars` is, and what makes it so fast;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The 3 reasons why I have permanently switched from `Pandas` to `Polars`;
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '- The `.list` namespace;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- `.scan_parquet()` and `.sink_parquet()`;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Data-oriented programming.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Introducing Polars: The Fastest Python Dataframe Library That You’ve (Maybe)
    Never Heard Of.'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Maybe you’ve heard of `Polars`, maybe you haven''t! Either way it''s slowly
    taking over Python''s data-processing landscape, starting right here on [Towards
    Data Science](https://towardsdatascience.com/):'
  prefs: []
  type: TYPE_NORMAL
- en: '[Leonie Monigatti](https://medium.com/@iamleonie) recently wrote [a comprehensive
    timing comparison of](/Pandas-vs-polars-a-syntax-and-speed-comparison-5aa54e27497e)
    `[Pandas](/Pandas-vs-polars-a-syntax-and-speed-comparison-5aa54e27497e)` [to](/Pandas-vs-polars-a-syntax-and-speed-comparison-5aa54e27497e)
    `[Polars](/Pandas-vs-polars-a-syntax-and-speed-comparison-5aa54e27497e)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Wei-Meng Lee](https://weimenglee.medium.com/) already published a [Getting
    Started guide](/getting-started-with-the-polars-dataframe-library-6f9e1c014c5c)
    last summer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Carl M. Kadie](https://medium.com/@carlmkadie) wrote a few months ago on [one
    of the biggest surface-level differences between](https://medium.com/towards-data-science/understand-polars-lack-of-indexes-526ea75e413)
    `[Pandas](https://medium.com/towards-data-science/understand-polars-lack-of-indexes-526ea75e413)`
    [and](https://medium.com/towards-data-science/understand-polars-lack-of-indexes-526ea75e413)
    `[Polars](https://medium.com/towards-data-science/understand-polars-lack-of-indexes-526ea75e413)`
    [–](https://medium.com/towards-data-science/understand-polars-lack-of-indexes-526ea75e413)
    `[Polars](https://medium.com/towards-data-science/understand-polars-lack-of-indexes-526ea75e413)`[''s
    lack of an index](https://medium.com/towards-data-science/understand-polars-lack-of-indexes-526ea75e413).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So what makes `Polars` so fast? From the `[Polars](https://pola-rs.github.io/polars-book/user-guide/#introduction)`
    [User Guide](https://pola-rs.github.io/polars-book/user-guide/#introduction):'
  prefs: []
  type: TYPE_NORMAL
- en: '`Polars` completely written in `[Rust](https://www.rust-lang.org/)` (no runtime
    overhead!) and uses `[Arrow](https://arrow.apache.org/)` – the [native arrow2](https://github.com/jorgecarleitao/arrow2)
    `[Rust](https://github.com/jorgecarleitao/arrow2)` [implementation](https://github.com/jorgecarleitao/arrow2)
    – as its foundation…'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`Polars` is written in Rust which gives it C/C++ performance and allows it
    to fully control performance critical parts in a query engine…'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: …Unlike tools such as dask – which tries to parallelize existing single-threaded
    libraries like NumPy and Pandas – Polars is written from the ground up, designed
    for parallelization of queries on DataFrames
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'And there you have it. `Polars` is not just a framework for alleviating the
    single-threaded nature of `Pandas`, like `[dask](https://docs.dask.org/en/stable/)`
    or `[modin](https://modin.readthedocs.io/en/latest/#)`; rather, it is a full makeover
    of the Python dataframe, including the highly optimal [Apache Arrow](http://arrow.apache.org)
    columnar memory format as its foundation, and its own query optimization engine
    to boot. And the results on speed are mind-blowing (as per [h2oai''s data benchmark](https://h2oai.github.io/db-benchmark/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e6962454865d41eb3f406bfc26929104.png)'
  prefs: []
  type: TYPE_IMG
- en: Image captured from [h2oai’s data benchmark tool](https://h2oai.github.io/db-benchmark/).
  prefs: []
  type: TYPE_NORMAL
- en: On a groupby operation of a 5GB dataframe, `Polars` is more than 6 times faster
    than `Pandas`!
  prefs: []
  type: TYPE_NORMAL
- en: This speed alone is enough to get anyone interested. But as you’ll see in the
    rest of this article, the speed is what got me interested, but it’s really the
    syntax that made me fall in love.
  prefs: []
  type: TYPE_NORMAL
- en: The 3 Reasons Why I Have Permanently Switched from Pandas to Polars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 1\. The `.list` Namespace
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Imagine the following scenario in `Pandas`: you have a dataset of families
    and some information about them, including a list of all the members of the family:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: For your analysis, you want to create a new column from the first element of
    the `members` list. How do you do this? A search of the `Pandas` API will leave
    you lost, but a brief stackoverflow search will show you the answer!
  prefs: []
  type: TYPE_NORMAL
- en: 'The prevailing method to extract an element of a list in a Pandas column is
    to use the `.str` namespace ([stackoverflow ref1](https://stackoverflow.com/questions/69409763/Pandas-index-the-first-element-of-each-list-in-a-dataframe-column-of-lists),
    [stackoverflow ref2](https://stackoverflow.com/questions/45983017/extracting-an-element-of-a-list-in-a-Pandas-column)),
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you’re like me, you’re probably wondering, “why do I have to use the `.str`
    namespace to handle a `list` data-type?”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, `Pandas`''s `.str` namespace can''t do all `list` operations
    that one might desire; some things will require a costly `.apply` for example.
    In `Polars`, however, this is not a problem. By conforming to Apache Arrow''s
    columnar data format, `Polars` has all standard data-types, and appropriate namespaces
    for handling all of them - including `list`s:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'That’s right: `Polars` is so explicit about data-types, that it even tells
    you the data-type of each column in your dataframe every time you print it!'
  prefs: []
  type: TYPE_NORMAL
- en: 'It doesn’t stop here though. Not only does the `Pandas` API require use of
    one data-type''s namespace for handling of another data-type, but the API has
    become so bloated that there are often many ways to do the same thing. This can
    be confusing, especially for newcomers. Consider the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code snippet, the same `Pandas` syntax `df[...]` can do three distinct
    operations: retrieve a column of the dataframe, perform a row-based boolean mask
    on the dataframe, and retrieve a slice of the dataframe by index.'
  prefs: []
  type: TYPE_NORMAL
- en: Another troubling example is that, to process `dict` columns with `Pandas`,
    you usually have to do a costly `apply()` function; `Polars`, on the other hand,
    has a `struct` data-type for handling `dict` columns directly!
  prefs: []
  type: TYPE_NORMAL
- en: In `Pandas`, you can't do everything you want, and for the things that you can
    do, there's sometimes multiple ways to do them. Compare this with `Polars`, where
    you can do everything, the data-types are clear, and there's usually only one
    way to do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. `.scan_parquet()` and `.sink_parquet()`
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the best things about `Polars` is the fact that it offers two API''s:
    an eager API and a lazy API.'
  prefs: []
  type: TYPE_NORMAL
- en: The eager API runs all commands in-memory, like `Pandas`.
  prefs: []
  type: TYPE_NORMAL
- en: The lazy API, however, does everything only when explicitly asked for a response
    (e.g. with a `.collect()` statement), a bit like `dask`. And, upon being asked
    for a response, `Polars` will lean on its query optimization engine to get you
    your result in the fastest time possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following code snippet, comparing the syntax of the `Polars` eager
    `DataFrame` to that of its lazy counterpart `LazyFrame`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax is remarkably similar! In fact, the only major difference between
    the eager API and the lazy API is in dataframe creation, reading, and writing,
    making it quite easy to switch between the two:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/48193a95496f3402a6cd2881f30bed31.png)'
  prefs: []
  type: TYPE_IMG
- en: Table by Author
  prefs: []
  type: TYPE_NORMAL
- en: And that brings us to `.scan_parquet()` and `.sink_parquet()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[By using](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html)
    `[.scan_parquet()](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html)`
    [as your data input function,](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html)
    `[LazyFrame](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html)`
    [as your dataframe, and](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html)
    `[.sink_parquet()](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html)`
    [as your data output function, you can process larger than memory datasets!](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html)
    Now that''s cool, especially when you compare it with what the creator of `Pandas`
    himself, Wes McKinney, has said about `Pandas`''s memory footprint in a post titled
    [“Apache Arrow and the “10 Things I Hate About Pandas”](https://wesmckinney.com/blog/apache-arrow-pandas-internals/)
    back in 2017:'
  prefs: []
  type: TYPE_NORMAL
- en: “my rule of thumb for pandas is that you should have 5 to 10 times as much RAM
    as the size of your dataset”.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 3\. Data-Oriented Programming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Pandas` treats dataframes like objects, enabling [Object-Oriented Programming](https://en.wikipedia.org/wiki/Object-oriented_programming);
    but `Polars` treats dataframes as data tables, enabling Data-Oriented Programming.'
  prefs: []
  type: TYPE_NORMAL
- en: Let me explain.
  prefs: []
  type: TYPE_NORMAL
- en: With dataframes, most of what we want to do is run queries or transformations;
    we want to add columns, pivot along two variables, aggregate, group by, you name
    it. Even when we want to subset a dataset into train and test for training and
    evaluating a machine learning model, those are SQL-like query expressions in nature.
  prefs: []
  type: TYPE_NORMAL
- en: 'And it’s true — with `Pandas`, you can do most of the transformations, manipulations,
    and queries on your data that you would want. However, frustratingly, some transformations
    and queries simply cannot be done in one expression, or one query if you will.
    Unlike other query and data-processing languages like SQL or Spark, many queries
    in `Pandas` require multiple successive, distinct assignment expressions, and
    this can make things messy. Consider the following code snippet, where we create
    a dataframe of people and their ages, and we want to see how many people there
    are in each decade:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: There’s no way around it — we have to do our query in three assignment expressions.
    To get it down to two expressions, we could have used the rarely seen `[.assign()](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.assign.html)`
    operator in place of the `df["decade"] = ...` operation, but that’s it! It might
    not seem like a big problem here, but when you find yourself needing seven, eight,
    nine successive assignment expressions to get the job done, things can start to
    get a bit unreadable and hard to maintain.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Polars`, though, this query can be cleanly written as one expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: So smooth.
  prefs: []
  type: TYPE_NORMAL
- en: You might read all this and think to yourself “why do I want to do everything
    in one expression though?”. It’s true, maybe you don’t. After all, many data pipelines
    use intermediate queries, save intermediate results to tables, and query those
    intermediate tables to get to the final result, or even to monitor data quality.
  prefs: []
  type: TYPE_NORMAL
- en: But, like SQL, Spark, or other non-`Pandas` data-processing languages, `Polars`
    gives you 100% flexibility to break up your query where you want to in order to
    maximize readability, while `Pandas` forces you to break up your query according
    to its API's limitations. This is a huge boon not only for code-readability, but
    also for ease of development!
  prefs: []
  type: TYPE_NORMAL
- en: Further still, as an added bonus, if you use the lazy API with `Polars`, then
    you can break your query wherever you want, into as many parts as you want, and
    the whole thing will be optimized into one query under the hood anyway.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What I’ve discussed in this article is just a glimpse into the superiority of
    `Polars` over `Pandas`; there remain still many functions in `Polars` that harken
    to SQL, Spark, and other data-processing languages (e.g. `[pipe()](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.pipe.html#polars.DataFrame.pipe)`,
    `[when()](https://pola-rs.github.io/polars/py-polars/html/reference/expressions/api/polars.when.html#polars.when)`,
    and `[filter()](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.filter.html#polars.DataFrame.filter)`,
    to name a few).
  prefs: []
  type: TYPE_NORMAL
- en: And while `Polars` is now my go-to library for data processing and analysis
    in Python, I do still use `Pandas` for narrow use-cases like [styling dataframes
    for display in reports and presentations](https://pandas.pydata.org/pandas-docs/stable/user_guide/style.html)
    or communication with spreadsheets. That said, I fully expect `Polars` to subsume
    `Pandas` bit by bit as time goes on.
  prefs: []
  type: TYPE_NORMAL
- en: What Next?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with a new tool is hard; especially if it’s a new dataframe
    library, something which is so pivotal to our work as data scientists! I got started
    by taking [Liam Brannigan](https://www.linkedin.com/in/liam-brannigan-9080b214a/)’s
    Udemy course [“Data Analysis with Polars”](https://www.udemy.com/course/data-analysis-with-polars/),
    and I can highly recommend it — it covers all the basics of `Polars`, and helped
    make the transition quite easy for me (I receive no referral bonus from suggesting
    this course; I simply liked it that much!).
  prefs: []
  type: TYPE_NORMAL
- en: 'As another option, even though Polars is most often learned as a drop-in replacement
    for Pandas, the transition from Pandas to Polars can be a bit strange given the
    heavy differences in syntax between the two. Because Polars is more similar to
    SQL than it is to Pandas, starting to learn Polars by comparing it to SQL can
    be a much easier path, and that’s exactly what I do in a later post, [“Anatomy
    of a Polars Query: A Syntax Comparison of Polars vs SQL”](https://medium.com/towards-data-science/anatomy-of-a-polars-query-a-syntax-comparison-of-polars-vs-sql-a0035ac8a4fa)'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/anatomy-of-a-polars-query-a-syntax-comparison-of-polars-vs-sql-a0035ac8a4fa?source=post_page-----b41d013a787b--------------------------------)
    [## Anatomy of a Polars Query: A Syntax Comparison of Polars vs SQL'
  prefs: []
  type: TYPE_NORMAL
- en: Transitioning from Pandas to Polars the easy way — by taking a pit stop at SQL.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/anatomy-of-a-polars-query-a-syntax-comparison-of-polars-vs-sql-a0035ac8a4fa?source=post_page-----b41d013a787b--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A special thank you to [Liam Brannigan](https://www.linkedin.com/in/liam-brannigan-9080b214a/)
    for your `Polars` course, without which I'm not sure I would have made the transition
    from `Pandas` to `Polars`. And, of course, a huge thank you to [Ritchie Vink](https://www.linkedin.com/in/ritchievink/),
    the creator of `Polars`! Not only have you created an awesome library, but you
    promptly responded to my questions and comments about `Polars` on both LinkedIn
    and Github - you've not only created an amazing tool, but also a welcoming community
    around it. And to you, the reader - thank you for reading; I wish you happy data-crunching
    :)
  prefs: []
  type: TYPE_NORMAL
- en: Contact
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Enjoyed what you read? Feel free to get in touch with me:*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Connect**: [*My Website*](https://benfeifke.com/) *|* [*Book a Call*](https://calendly.com/benfeifke)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Socials**: [*LinkedIn*](https://www.linkedin.com/in/benjamin-feifke/) *|*
    [*Twitter*](https://twitter.com/benfeifke) *|* [*Instagram*](https://www.instagram.com/benfeifke/)
    *|* [*YouTube*](https://www.youtube.com/channel/UClsmEGubpjn_oY9N7sjrIbg)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Support:** [*Buy me a coffee!*](https://buymeacoffee.com/benfeifke)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Check out this blog post on* [*my website*](https://benfeifke.com/posts/why-are-the-most-common-verbs-irregular-20220904/)*!*'
  prefs: []
  type: TYPE_NORMAL
