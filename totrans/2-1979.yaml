- en: The 3 Reasons Why I Have Permanently Switched From Pandas To Polars
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我永久切换从 Pandas 到 Polars 的 3 个理由
- en: 原文：[https://towardsdatascience.com/the-3-reasons-why-i-have-permanently-switched-from-pandas-to-polars-b41d013a787b](https://towardsdatascience.com/the-3-reasons-why-i-have-permanently-switched-from-pandas-to-polars-b41d013a787b)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/the-3-reasons-why-i-have-permanently-switched-from-pandas-to-polars-b41d013a787b](https://towardsdatascience.com/the-3-reasons-why-i-have-permanently-switched-from-pandas-to-polars-b41d013a787b)
- en: I came for the speed, but I stayed for the syntax
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我来是为了速度，但我留在这里是为了语法
- en: '[](https://medium.com/@benfeifke?source=post_page-----b41d013a787b--------------------------------)[![Ben
    Feifke](../Images/dd4eb09e404dbd3a478ea1049cf17c90.png)](https://medium.com/@benfeifke?source=post_page-----b41d013a787b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b41d013a787b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b41d013a787b--------------------------------)
    [Ben Feifke](https://medium.com/@benfeifke?source=post_page-----b41d013a787b--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@benfeifke?source=post_page-----b41d013a787b--------------------------------)[![Ben
    Feifke](../Images/dd4eb09e404dbd3a478ea1049cf17c90.png)](https://medium.com/@benfeifke?source=post_page-----b41d013a787b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b41d013a787b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b41d013a787b--------------------------------)
    [Ben Feifke](https://medium.com/@benfeifke?source=post_page-----b41d013a787b--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b41d013a787b--------------------------------)
    ·10 min read·Mar 28, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b41d013a787b--------------------------------)
    ·阅读时间 10 分钟·2023年3月28日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/1b105bb38f3f0c27e6b2974660509eae.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1b105bb38f3f0c27e6b2974660509eae.png)'
- en: '[Photo](https://unsplash.com/photos/qQWV91TTBrE) by [Hans-Jurgen Mager](https://unsplash.com/@hansjurgen007)
    on [Unsplash](https://unsplash.com/)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[照片](https://unsplash.com/photos/qQWV91TTBrE)由 [Hans-Jurgen Mager](https://unsplash.com/@hansjurgen007)
    供稿，刊登在 [Unsplash](https://unsplash.com/)'
- en: 'At the time of writing this post, it’s been six years since I landed my first
    job in data science. And, for those entire six years spent doing data science,
    `[Pandas](https://pandas.pydata.org/)` has been the foundation of all my work:
    exploratory data analyses, impact analyses, data validations, model experimentation,
    you name it. My career was built on top of `Pandas`!'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写这篇文章时，我已经在数据科学领域工作了六年。而在这六年中，`[Pandas](https://pandas.pydata.org/)` 一直是我所有工作的基础：探索性数据分析、影响分析、数据验证、模型实验等。我的职业生涯是建立在`Pandas`之上的！
- en: Needless to say, I had some serious `Pandas` [lock-in](https://en.wikipedia.org/wiki/Vendor_lock-in).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 不用说，我曾经在`Pandas`中有过严重的[锁定](https://en.wikipedia.org/wiki/Vendor_lock-in)。
- en: That is, until I discovered `[Polars](https://github.com/pola-rs/polars)`, the
    new “blazingly fast DataFrame library” for Python.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，直到我发现了`[Polars](https://github.com/pola-rs/polars)`，这个新的“极其快速的 DataFrame
    库”。
- en: 'In this article, I’ll explain:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将解释：
- en: What `Polars` is, and what makes it so fast;
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Polars` 是什么，以及是什么让它如此快速；'
- en: The 3 reasons why I have permanently switched from `Pandas` to `Polars`;
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我永久切换从`Pandas`到`Polars`的 3 个理由；
- en: '- The `.list` namespace;'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- `.list` 命名空间；'
- en: '- `.scan_parquet()` and `.sink_parquet()`;'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- `.scan_parquet()` 和 `.sink_parquet()`；'
- en: '- Data-oriented programming.'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 面向数据的编程。'
- en: 'Introducing Polars: The Fastest Python Dataframe Library That You’ve (Maybe)
    Never Heard Of.'
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Polars：你可能从未听说过的最快 Python 数据框库。
- en: 'Maybe you’ve heard of `Polars`, maybe you haven''t! Either way it''s slowly
    taking over Python''s data-processing landscape, starting right here on [Towards
    Data Science](https://towardsdatascience.com/):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你听说过`Polars`，也许你没有！无论如何，它正在慢慢改变 Python 的数据处理领域，就从这里的 [Towards Data Science](https://towardsdatascience.com/)
    开始：
- en: '[Leonie Monigatti](https://medium.com/@iamleonie) recently wrote [a comprehensive
    timing comparison of](/Pandas-vs-polars-a-syntax-and-speed-comparison-5aa54e27497e)
    `[Pandas](/Pandas-vs-polars-a-syntax-and-speed-comparison-5aa54e27497e)` [to](/Pandas-vs-polars-a-syntax-and-speed-comparison-5aa54e27497e)
    `[Polars](/Pandas-vs-polars-a-syntax-and-speed-comparison-5aa54e27497e)`.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Leonie Monigatti](https://medium.com/@iamleonie) 最近写了一篇 [Pandas 与 Polars 的全面时间比较](/Pandas-vs-polars-a-syntax-and-speed-comparison-5aa54e27497e)。'
- en: '[Wei-Meng Lee](https://weimenglee.medium.com/) already published a [Getting
    Started guide](/getting-started-with-the-polars-dataframe-library-6f9e1c014c5c)
    last summer.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Wei-Meng Lee](https://weimenglee.medium.com/) 已于去年夏天发布了 [入门指南](/getting-started-with-the-polars-dataframe-library-6f9e1c014c5c)。'
- en: '[Carl M. Kadie](https://medium.com/@carlmkadie) wrote a few months ago on [one
    of the biggest surface-level differences between](https://medium.com/towards-data-science/understand-polars-lack-of-indexes-526ea75e413)
    `[Pandas](https://medium.com/towards-data-science/understand-polars-lack-of-indexes-526ea75e413)`
    [and](https://medium.com/towards-data-science/understand-polars-lack-of-indexes-526ea75e413)
    `[Polars](https://medium.com/towards-data-science/understand-polars-lack-of-indexes-526ea75e413)`
    [–](https://medium.com/towards-data-science/understand-polars-lack-of-indexes-526ea75e413)
    `[Polars](https://medium.com/towards-data-science/understand-polars-lack-of-indexes-526ea75e413)`[''s
    lack of an index](https://medium.com/towards-data-science/understand-polars-lack-of-indexes-526ea75e413).'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Carl M. Kadie](https://medium.com/@carlmkadie) 几个月前在 [一个关于](https://medium.com/towards-data-science/understand-polars-lack-of-indexes-526ea75e413)
    `[Pandas](https://medium.com/towards-data-science/understand-polars-lack-of-indexes-526ea75e413)`
    [和](https://medium.com/towards-data-science/understand-polars-lack-of-indexes-526ea75e413)
    `[Polars](https://medium.com/towards-data-science/understand-polars-lack-of-indexes-526ea75e413)`
    [的最大表面差异之一](https://medium.com/towards-data-science/understand-polars-lack-of-indexes-526ea75e413)
    中写道 `[Polars](https://medium.com/towards-data-science/understand-polars-lack-of-indexes-526ea75e413)`[没有索引](https://medium.com/towards-data-science/understand-polars-lack-of-indexes-526ea75e413)。'
- en: 'So what makes `Polars` so fast? From the `[Polars](https://pola-rs.github.io/polars-book/user-guide/#introduction)`
    [User Guide](https://pola-rs.github.io/polars-book/user-guide/#introduction):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，是什么让 `Polars` 如此快速？来自 `[Polars](https://pola-rs.github.io/polars-book/user-guide/#introduction)`
    [用户指南](https://pola-rs.github.io/polars-book/user-guide/#introduction)：
- en: '`Polars` completely written in `[Rust](https://www.rust-lang.org/)` (no runtime
    overhead!) and uses `[Arrow](https://arrow.apache.org/)` – the [native arrow2](https://github.com/jorgecarleitao/arrow2)
    `[Rust](https://github.com/jorgecarleitao/arrow2)` [implementation](https://github.com/jorgecarleitao/arrow2)
    – as its foundation…'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Polars` 完全用 `[Rust](https://www.rust-lang.org/)` 编写（没有运行时开销！），并使用 `[Arrow](https://arrow.apache.org/)`
    – 作为其基础的 [原生 arrow2](https://github.com/jorgecarleitao/arrow2) `[Rust](https://github.com/jorgecarleitao/arrow2)`
    [实现](https://github.com/jorgecarleitao/arrow2)……'
- en: '`Polars` is written in Rust which gives it C/C++ performance and allows it
    to fully control performance critical parts in a query engine…'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`Polars` 是用 Rust 编写的，这使它具备了 C/C++ 的性能，并且能够完全控制查询引擎中的性能关键部分……'
- en: …Unlike tools such as dask – which tries to parallelize existing single-threaded
    libraries like NumPy and Pandas – Polars is written from the ground up, designed
    for parallelization of queries on DataFrames
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: …与像 dask 这样的工具不同，dask 试图并行化现有的单线程库如 NumPy 和 Pandas，而 Polars 从零开始编写，专为 DataFrame
    上的查询并行化设计。
- en: 'And there you have it. `Polars` is not just a framework for alleviating the
    single-threaded nature of `Pandas`, like `[dask](https://docs.dask.org/en/stable/)`
    or `[modin](https://modin.readthedocs.io/en/latest/#)`; rather, it is a full makeover
    of the Python dataframe, including the highly optimal [Apache Arrow](http://arrow.apache.org)
    columnar memory format as its foundation, and its own query optimization engine
    to boot. And the results on speed are mind-blowing (as per [h2oai''s data benchmark](https://h2oai.github.io/db-benchmark/)):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。`Polars` 不仅仅是一个用于缓解 `Pandas` 单线程特性的框架，像 `[dask](https://docs.dask.org/en/stable/)`
    或 `[modin](https://modin.readthedocs.io/en/latest/#)`；相反，它是对 Python 数据框的全面改造，包含了作为基础的高度优化的
    [Apache Arrow](http://arrow.apache.org) 列存储内存格式，还有其自身的查询优化引擎。而速度方面的结果令人惊叹（根据 [h2oai
    的数据基准测试](https://h2oai.github.io/db-benchmark/)）：
- en: '![](../Images/e6962454865d41eb3f406bfc26929104.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e6962454865d41eb3f406bfc26929104.png)'
- en: Image captured from [h2oai’s data benchmark tool](https://h2oai.github.io/db-benchmark/).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于 [h2oai 的数据基准工具](https://h2oai.github.io/db-benchmark/)。
- en: On a groupby operation of a 5GB dataframe, `Polars` is more than 6 times faster
    than `Pandas`!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个 5GB 的数据框进行 groupby 操作时，`Polars` 比 `Pandas` 快 6 倍以上！
- en: This speed alone is enough to get anyone interested. But as you’ll see in the
    rest of this article, the speed is what got me interested, but it’s really the
    syntax that made me fall in love.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅是这速度就足以引起任何人的兴趣。但正如你将在本文其余部分看到的，速度吸引了我，但真正让我爱上的是其语法。
- en: The 3 Reasons Why I Have Permanently Switched from Pandas to Polars
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我为什么永久切换到 Polars 的 3 个理由
- en: 1\. The `.list` Namespace
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. `.list` 命名空间
- en: 'Imagine the following scenario in `Pandas`: you have a dataset of families
    and some information about them, including a list of all the members of the family:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下在`Pandas`中的以下场景：你有一个包含家庭及其信息的数据集，其中包括家庭成员的所有成员列表：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For your analysis, you want to create a new column from the first element of
    the `members` list. How do you do this? A search of the `Pandas` API will leave
    you lost, but a brief stackoverflow search will show you the answer!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你的分析，你想从`members`列表的第一个元素创建一个新列。你该怎么做？搜索`Pandas` API会让你迷失，但简单的stack overflow搜索会告诉你答案！
- en: 'The prevailing method to extract an element of a list in a Pandas column is
    to use the `.str` namespace ([stackoverflow ref1](https://stackoverflow.com/questions/69409763/Pandas-index-the-first-element-of-each-list-in-a-dataframe-column-of-lists),
    [stackoverflow ref2](https://stackoverflow.com/questions/45983017/extracting-an-element-of-a-list-in-a-Pandas-column)),
    like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 提取`Pandas`列中列表元素的主要方法是使用`.str`命名空间（[stackoverflow ref1](https://stackoverflow.com/questions/69409763/Pandas-index-the-first-element-of-each-list-in-a-dataframe-column-of-lists),
    [stackoverflow ref2](https://stackoverflow.com/questions/45983017/extracting-an-element-of-a-list-in-a-Pandas-column)），像这样：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you’re like me, you’re probably wondering, “why do I have to use the `.str`
    namespace to handle a `list` data-type?”.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你像我一样，你可能会想，“为什么我必须使用`.str`命名空间来处理`list`数据类型？”。
- en: 'Unfortunately, `Pandas`''s `.str` namespace can''t do all `list` operations
    that one might desire; some things will require a costly `.apply` for example.
    In `Polars`, however, this is not a problem. By conforming to Apache Arrow''s
    columnar data format, `Polars` has all standard data-types, and appropriate namespaces
    for handling all of them - including `list`s:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，`Pandas`的`.str`命名空间不能完成所有可能需要的`list`操作；例如，有些操作需要代价高昂的`.apply`。而在`Polars`中，这不是问题。通过符合Apache
    Arrow的列式数据格式，`Polars`具有所有标准数据类型，并有适当的命名空间来处理所有这些类型——包括`list`：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'That’s right: `Polars` is so explicit about data-types, that it even tells
    you the data-type of each column in your dataframe every time you print it!'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 没错：`Polars`对数据类型非常明确，甚至在每次打印数据框时都会告诉你每一列的数据类型！
- en: 'It doesn’t stop here though. Not only does the `Pandas` API require use of
    one data-type''s namespace for handling of another data-type, but the API has
    become so bloated that there are often many ways to do the same thing. This can
    be confusing, especially for newcomers. Consider the following code snippet:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 但这还不是全部。`Pandas`的API不仅需要使用一个数据类型的命名空间来处理另一个数据类型，而且API变得非常臃肿，往往有许多种方法来做同一件事。这可能会令人困惑，尤其是对新手而言。考虑以下代码片段：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In this code snippet, the same `Pandas` syntax `df[...]` can do three distinct
    operations: retrieve a column of the dataframe, perform a row-based boolean mask
    on the dataframe, and retrieve a slice of the dataframe by index.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码片段中，相同的`Pandas`语法`df[...]`可以执行三种不同的操作：检索数据框的一列，在数据框上执行基于行的布尔掩码，以及按索引检索数据框的切片。
- en: Another troubling example is that, to process `dict` columns with `Pandas`,
    you usually have to do a costly `apply()` function; `Polars`, on the other hand,
    has a `struct` data-type for handling `dict` columns directly!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个令人困扰的例子是，要处理`dict`列时，使用`Pandas`通常需要执行一个代价高昂的`apply()`函数；而`Polars`则有一个`struct`数据类型，可以直接处理`dict`列！
- en: In `Pandas`, you can't do everything you want, and for the things that you can
    do, there's sometimes multiple ways to do them. Compare this with `Polars`, where
    you can do everything, the data-types are clear, and there's usually only one
    way to do the same thing.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Pandas`中，你不能完成所有你想做的事情，对于可以做的事情，有时有多种方式来完成。与此相比，`Polars`可以做所有事情，数据类型明确，通常只有一种方法来做同一件事。
- en: 2\. `.scan_parquet()` and `.sink_parquet()`
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. `.scan_parquet()` 和 `.sink_parquet()`
- en: 'One of the best things about `Polars` is the fact that it offers two API''s:
    an eager API and a lazy API.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`Polars`最棒的地方之一是它提供了两个API：一个急切的API和一个延迟的API。'
- en: The eager API runs all commands in-memory, like `Pandas`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 急切的API会像`Pandas`一样在内存中运行所有命令。
- en: The lazy API, however, does everything only when explicitly asked for a response
    (e.g. with a `.collect()` statement), a bit like `dask`. And, upon being asked
    for a response, `Polars` will lean on its query optimization engine to get you
    your result in the fastest time possible.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，延迟API只有在明确要求响应时（例如，通过`.collect()`语句）才会执行所有操作，有点像`dask`。而且，一旦被要求响应，`Polars`会依赖其查询优化引擎，以最快的时间提供结果。
- en: 'Consider the following code snippet, comparing the syntax of the `Polars` eager
    `DataFrame` to that of its lazy counterpart `LazyFrame`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下代码片段，比较`Polars`的急切`DataFrame`与其延迟对应物`LazyFrame`的语法：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The syntax is remarkably similar! In fact, the only major difference between
    the eager API and the lazy API is in dataframe creation, reading, and writing,
    making it quite easy to switch between the two:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 语法非常相似！实际上，急切API和延迟API之间唯一的主要区别在于数据框的创建、读取和写入，这使得在两者之间切换变得非常容易：
- en: '![](../Images/48193a95496f3402a6cd2881f30bed31.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/48193a95496f3402a6cd2881f30bed31.png)'
- en: Table by Author
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 作者表
- en: And that brings us to `.scan_parquet()` and `.sink_parquet()`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这就引出了`.scan_parquet()`和`.sink_parquet()`。
- en: '[By using](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html)
    `[.scan_parquet()](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html)`
    [as your data input function,](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html)
    `[LazyFrame](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html)`
    [as your dataframe, and](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html)
    `[.sink_parquet()](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html)`
    [as your data output function, you can process larger than memory datasets!](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html)
    Now that''s cool, especially when you compare it with what the creator of `Pandas`
    himself, Wes McKinney, has said about `Pandas`''s memory footprint in a post titled
    [“Apache Arrow and the “10 Things I Hate About Pandas”](https://wesmckinney.com/blog/apache-arrow-pandas-internals/)
    back in 2017:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[通过使用](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html)`[.scan_parquet()](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html)`
    [作为数据输入函数，](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html)`[LazyFrame](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html)`
    [作为数据框，和](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html)`[.sink_parquet()](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html)`
    [作为数据输出函数，你可以处理超出内存的数据集！](https://pola-rs.github.io/polars-book/user-guide/lazy-api/streaming.html)
    这真的很酷，尤其是当你把它与`Pandas`的创始人Wes McKinney在2017年发布的[“Apache Arrow和‘我讨厌Pandas的10件事’”](https://wesmckinney.com/blog/apache-arrow-pandas-internals/)中关于`Pandas`内存占用的说法进行比较时：'
- en: “my rule of thumb for pandas is that you should have 5 to 10 times as much RAM
    as the size of your dataset”.
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “我的Pandas使用规则是，你的RAM应该是数据集大小的5到10倍。”
- en: 3\. Data-Oriented Programming
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3. 数据导向编程
- en: '`Pandas` treats dataframes like objects, enabling [Object-Oriented Programming](https://en.wikipedia.org/wiki/Object-oriented_programming);
    but `Polars` treats dataframes as data tables, enabling Data-Oriented Programming.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`Pandas`将数据框视为对象，支持[面向对象编程](https://en.wikipedia.org/wiki/Object-oriented_programming)；但`Polars`将数据框视为数据表，支持数据导向编程。'
- en: Let me explain.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我解释一下。
- en: With dataframes, most of what we want to do is run queries or transformations;
    we want to add columns, pivot along two variables, aggregate, group by, you name
    it. Even when we want to subset a dataset into train and test for training and
    evaluating a machine learning model, those are SQL-like query expressions in nature.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数据框时，我们大多数时候要做的是运行查询或转换；我们要添加列，按两个变量进行透视，聚合，分组，等等。即使当我们想将数据集分为训练集和测试集以训练和评估机器学习模型时，这些本质上也是类似SQL的查询表达式。
- en: 'And it’s true — with `Pandas`, you can do most of the transformations, manipulations,
    and queries on your data that you would want. However, frustratingly, some transformations
    and queries simply cannot be done in one expression, or one query if you will.
    Unlike other query and data-processing languages like SQL or Spark, many queries
    in `Pandas` require multiple successive, distinct assignment expressions, and
    this can make things messy. Consider the following code snippet, where we create
    a dataframe of people and their ages, and we want to see how many people there
    are in each decade:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是真的——使用`Pandas`，你可以对数据进行大多数你想要的转换、操作和查询。然而，让人沮丧的是，有些转换和查询只能在多个表达式或查询中完成。与SQL或Spark等其他查询和数据处理语言不同，`Pandas`中的许多查询需要多个连续的、独立的赋值表达式，这可能使事情变得复杂。考虑以下代码片段，我们创建了一个包含人员及其年龄的数据框，并且我们想要查看每个十年中有多少人：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There’s no way around it — we have to do our query in three assignment expressions.
    To get it down to two expressions, we could have used the rarely seen `[.assign()](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.assign.html)`
    operator in place of the `df["decade"] = ...` operation, but that’s it! It might
    not seem like a big problem here, but when you find yourself needing seven, eight,
    nine successive assignment expressions to get the job done, things can start to
    get a bit unreadable and hard to maintain.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Polars`, though, this query can be cleanly written as one expression:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: So smooth.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: You might read all this and think to yourself “why do I want to do everything
    in one expression though?”. It’s true, maybe you don’t. After all, many data pipelines
    use intermediate queries, save intermediate results to tables, and query those
    intermediate tables to get to the final result, or even to monitor data quality.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: But, like SQL, Spark, or other non-`Pandas` data-processing languages, `Polars`
    gives you 100% flexibility to break up your query where you want to in order to
    maximize readability, while `Pandas` forces you to break up your query according
    to its API's limitations. This is a huge boon not only for code-readability, but
    also for ease of development!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Further still, as an added bonus, if you use the lazy API with `Polars`, then
    you can break your query wherever you want, into as many parts as you want, and
    the whole thing will be optimized into one query under the hood anyway.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What I’ve discussed in this article is just a glimpse into the superiority of
    `Polars` over `Pandas`; there remain still many functions in `Polars` that harken
    to SQL, Spark, and other data-processing languages (e.g. `[pipe()](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.pipe.html#polars.DataFrame.pipe)`,
    `[when()](https://pola-rs.github.io/polars/py-polars/html/reference/expressions/api/polars.when.html#polars.when)`,
    and `[filter()](https://pola-rs.github.io/polars/py-polars/html/reference/dataframe/api/polars.DataFrame.filter.html#polars.DataFrame.filter)`,
    to name a few).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: And while `Polars` is now my go-to library for data processing and analysis
    in Python, I do still use `Pandas` for narrow use-cases like [styling dataframes
    for display in reports and presentations](https://pandas.pydata.org/pandas-docs/stable/user_guide/style.html)
    or communication with spreadsheets. That said, I fully expect `Polars` to subsume
    `Pandas` bit by bit as time goes on.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: What Next?
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with a new tool is hard; especially if it’s a new dataframe
    library, something which is so pivotal to our work as data scientists! I got started
    by taking [Liam Brannigan](https://www.linkedin.com/in/liam-brannigan-9080b214a/)’s
    Udemy course [“Data Analysis with Polars”](https://www.udemy.com/course/data-analysis-with-polars/),
    and I can highly recommend it — it covers all the basics of `Polars`, and helped
    make the transition quite easy for me (I receive no referral bonus from suggesting
    this course; I simply liked it that much!).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用新工具是困难的，尤其是当它是一个新的 dataframe 库时，这对我们作为数据科学家来说至关重要！我通过参加[Liam Brannigan](https://www.linkedin.com/in/liam-brannigan-9080b214a/)的
    Udemy 课程[“使用 Polars 进行数据分析”](https://www.udemy.com/course/data-analysis-with-polars/)，并且强烈推荐这个课程——它涵盖了`Polars`的所有基础知识，并且让我过渡得非常顺利（我推荐这个课程并没有获得任何推荐奖金；我只是觉得它非常好！）。
- en: 'As another option, even though Polars is most often learned as a drop-in replacement
    for Pandas, the transition from Pandas to Polars can be a bit strange given the
    heavy differences in syntax between the two. Because Polars is more similar to
    SQL than it is to Pandas, starting to learn Polars by comparing it to SQL can
    be a much easier path, and that’s exactly what I do in a later post, [“Anatomy
    of a Polars Query: A Syntax Comparison of Polars vs SQL”](https://medium.com/towards-data-science/anatomy-of-a-polars-query-a-syntax-comparison-of-polars-vs-sql-a0035ac8a4fa)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 作为另一种选择，尽管 Polars 通常被学习为 Pandas 的直接替代品，但由于两者之间语法差异较大，从 Pandas 过渡到 Polars 可能会有些奇怪。因为
    Polars 更类似于 SQL 而不是 Pandas，所以通过将 Polars 与 SQL 进行比较来学习 Polars 可能是一条更简单的路径，这正是我在后面的文章中所做的，[“Polars
    查询的结构：Polars 与 SQL 的语法比较”](https://medium.com/towards-data-science/anatomy-of-a-polars-query-a-syntax-comparison-of-polars-vs-sql-a0035ac8a4fa)
- en: '[](/anatomy-of-a-polars-query-a-syntax-comparison-of-polars-vs-sql-a0035ac8a4fa?source=post_page-----b41d013a787b--------------------------------)
    [## Anatomy of a Polars Query: A Syntax Comparison of Polars vs SQL'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/anatomy-of-a-polars-query-a-syntax-comparison-of-polars-vs-sql-a0035ac8a4fa?source=post_page-----b41d013a787b--------------------------------)
    [## Polars 查询的结构：Polars 与 SQL 的语法比较'
- en: Transitioning from Pandas to Polars the easy way — by taking a pit stop at SQL.
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 Pandas 过渡到 Polars 的简单方法——先在 SQL 上停留一下。
- en: towardsdatascience.com](/anatomy-of-a-polars-query-a-syntax-comparison-of-polars-vs-sql-a0035ac8a4fa?source=post_page-----b41d013a787b--------------------------------)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/anatomy-of-a-polars-query-a-syntax-comparison-of-polars-vs-sql-a0035ac8a4fa?source=post_page-----b41d013a787b--------------------------------)
- en: Acknowledgements
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 致谢
- en: A special thank you to [Liam Brannigan](https://www.linkedin.com/in/liam-brannigan-9080b214a/)
    for your `Polars` course, without which I'm not sure I would have made the transition
    from `Pandas` to `Polars`. And, of course, a huge thank you to [Ritchie Vink](https://www.linkedin.com/in/ritchievink/),
    the creator of `Polars`! Not only have you created an awesome library, but you
    promptly responded to my questions and comments about `Polars` on both LinkedIn
    and Github - you've not only created an amazing tool, but also a welcoming community
    around it. And to you, the reader - thank you for reading; I wish you happy data-crunching
    :)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 特别感谢[Liam Brannigan](https://www.linkedin.com/in/liam-brannigan-9080b214a/)的`Polars`课程，没有它我不确定自己是否能顺利过渡到`Polars`。当然，也要感谢[Richie
    Vink](https://www.linkedin.com/in/ritchievink/)，`Polars`的创始人！你不仅创建了一个很棒的库，还迅速回应了我在
    LinkedIn 和 Github 上关于`Polars`的问题和评论——你不仅创造了一个了不起的工具，还建立了一个友好的社区。还有你，读者——感谢你的阅读；祝你数据处理愉快
    :)
- en: Contact
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联系方式
- en: '*Enjoyed what you read? Feel free to get in touch with me:*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*喜欢你所读到的内容吗？随时与我联系：*'
- en: '**Connect**: [*My Website*](https://benfeifke.com/) *|* [*Book a Call*](https://calendly.com/benfeifke)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**联系我**：[*我的网站*](https://benfeifke.com/) *|* [*预约电话*](https://calendly.com/benfeifke)'
- en: '**Socials**: [*LinkedIn*](https://www.linkedin.com/in/benjamin-feifke/) *|*
    [*Twitter*](https://twitter.com/benfeifke) *|* [*Instagram*](https://www.instagram.com/benfeifke/)
    *|* [*YouTube*](https://www.youtube.com/channel/UClsmEGubpjn_oY9N7sjrIbg)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**社交媒体**：[*LinkedIn*](https://www.linkedin.com/in/benjamin-feifke/) *|* [*Twitter*](https://twitter.com/benfeifke)
    *|* [*Instagram*](https://www.instagram.com/benfeifke/) *|* [*YouTube*](https://www.youtube.com/channel/UClsmEGubpjn_oY9N7sjrIbg)'
- en: '**Support:** [*Buy me a coffee!*](https://buymeacoffee.com/benfeifke)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**支持**：[*请给我买杯咖啡!*](https://buymeacoffee.com/benfeifke)'
- en: '*Check out this blog post on* [*my website*](https://benfeifke.com/posts/why-are-the-most-common-verbs-irregular-20220904/)*!*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*查看我网站上的博客文章* [*我的网站*](https://benfeifke.com/posts/why-are-the-most-common-verbs-irregular-20220904/)*！*'
