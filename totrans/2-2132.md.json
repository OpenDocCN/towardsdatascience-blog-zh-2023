["```py\n!pip install inseq\nimport inseq\n\n# list available attribution methods\ninseq.list_feature_attribution_methods()\n\n# load a model from HuggingFace model hub and define the feature attribution \n# method you want to use\nmdl_gpt2 = inseq.load_model(\"gpt2\", \"integrated_gradients\")\n\n# compute the attributions for a given prompt\nattr = mdl_gpt2.attribute(\n    \"Hello ladies and\",\n    generation_args={\"max_new_tokens\": 9},\n    n_steps=500,\n    internal_batch_size=50 )\n\n# display the generated attributions\nattr.show()\n```", "```py\n'''\nYou are a creative and intelligent movie review analyst, whose purpose is \nto aid in sentiment analysis of movie reviews. You will receive a review, and \nyou must analyze the importance of each word and punctuation in Python tuple \nformat: (<word or punctuation>, <float importance>). Each word or punctuation \nis separated by a space. The importance should be a decimal number to three \ndecimal places ranging from -1 to 1, with -1 implying a negative sentiment and \n1 implying a positive sentiment. Provide a list of (<word or punctuation>,\n<float importance>) for each and every word and punctuation in the sentence in \na format of Python list of tuples. Then classify the review as either \n1 (positive) or 0 (negative), as well as your confidence in the score you chose \nand output the classification and confidence in the format (<int classification>, \n<float confidence>). The confidence should be a decimal number between 0 and 1, \nwith 0 being the lowest confidence and 1 being the highest confidence.\n\nIt does not matter whether or not the sentence makes sense. Do your best given \nthe sentence. The movie review will be encapsulated within <review> tags. \nHowever, these tags are not considered part of the actual content of the movie \nreview.\n\nExample output: [(<word or punctuation>, <float importance>), \n(<word or punctuation>, <float importance>), ... ]\n(<int classification>, <float confidence>)\n'''\n```"]