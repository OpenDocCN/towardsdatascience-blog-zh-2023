["```py\n# average credit limit for customer type x gender\nsegments = ['attrition_flag','gender']\ndf.groupby(segments)['credit_limit'].mean().round().to_frame()\n```", "```py\n# extended segmentation and feature selection\nsegments = ['attrition_flag','education_level','gender']\nfeatures = ['credit_limit','avg_utilization_ratio']\ndf.groupby(segments)[features].mean()\n```", "```py\n# group counts\nsegments = ['attrition_flag','gender']\nfeature = 'customer_age'\ndf.groupby(segments)[feature].size().to_frame(name = 'group_size')\n```", "```py\n# define the bespoke function\ndef scaled_median(s):\n    # calculates Series median x Series maximum / Series minimum\n\n    return s.median() * s.max() / s.min()\n\n# apply it to data\nsegments = ['attrition_flag','gender']\nfeature = 'customer_age'\ndf.groupby(segments)[feature].apply(scaled_median).to_frame(name='result')\n```", "```py\napply(lambda u: u.median() * u.max() / u.min())\n```", "```py\n# maps to convert categorical to numeric\nstatus_mapper = {'Married':1.1, 'Single':1, 'Unknown':0.8, 'Divorced':0.9}\ngender_mapper = {'F':1.1, 'M':1}\n\n# define the appetite score function\ndef cohort_score(dataframe):\n    score = (\n        dataframe['marital_status'].map(status_mapper).astype(int) \n        * dataframe['gender'].map(gender_mapper).astype(int) \n        * (1 + dataframe['dependent_count']) \n        * dataframe['avg_utilization_ratio']\n    ).mean()\n\n    return score\n\n# apply\nsegments = ['attrition_flag','gender']\ndf.groupby(segments).apply(cohort_score).to_frame(name = 'score')\n```", "```py\n# get numpy\nimport numpy as np\n\n# define the appetite score function for an individual\ndef cohort_score(series):\n    score = (\n        series['marital_status'].map(status_mapper).astype(int) \n        * series['gender'].map(gender_mapper).astype(int) \n        * (1 + series['dependent_count']) \n        * series['avg_utilization_ratio']\n    )\n\n    return score\n\n# apply\nsegments = ['attrition_flag','gender']\nd = df.groupby(segments).apply(lambda u: np.mean(cohort_score(u)))\nd.to_frame(name = 'score')\n```", "```py\n# get example data\ndf_example = df[['attrition_flag','gender','customer_age']].copy()\n\n# apply it to data\nsegments = ['attrition_flag','gender']\nfeature = 'customer_age'\ndf_example['scaled_median_age'] = (\n    df_example\n    .groupby(segments)[feature]\n    .transform(scaled_median)\n)\n\ndf_example\n```", "```py\nsegments = ['attrition_flag','gender']\nfeature = 'customer_age'\ndf.groupby(segments)[feature].apply('std')\n```", "```py\n# example data frame\ndf_example = df[['attrition_flag','marital_status','customer_age']].copy()\n\n# randomly create missing values\ndf_example['customer_age'] = np.where(\n    np.random.random(size = len(df)) <= 0.5,\n    df['customer_age'],\n    np.nan\n)\n\n# impute using median\ndf_example['customer_age_imputed'] = (\n    df_example\n    .groupby(['attrition_flag','marital_status'])['customer_age']\n    .transform('median')\n)\n\ndf_example\n```"]