- en: Dijkstra’s algorithm weighted by travel time in OSM networks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dijkstra 算法在 OSM 网络中按旅行时间加权
- en: 原文：[https://towardsdatascience.com/dijkstras-algorithm-weighted-by-travel-time-in-osm-networks-792aa92e03af](https://towardsdatascience.com/dijkstras-algorithm-weighted-by-travel-time-in-osm-networks-792aa92e03af)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/dijkstras-algorithm-weighted-by-travel-time-in-osm-networks-792aa92e03af](https://towardsdatascience.com/dijkstras-algorithm-weighted-by-travel-time-in-osm-networks-792aa92e03af)
- en: Finding the fastest and shortest path with the OSMNX 1.6
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 OSMNX 1.6 寻找最快和最短路径
- en: '[](https://bryanvallejo16.medium.com/?source=post_page-----792aa92e03af--------------------------------)[![Bryan
    R. Vallejo](../Images/fd92974f57c72875cc133a2c959d64ca.png)](https://bryanvallejo16.medium.com/?source=post_page-----792aa92e03af--------------------------------)[](https://towardsdatascience.com/?source=post_page-----792aa92e03af--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----792aa92e03af--------------------------------)
    [Bryan R. Vallejo](https://bryanvallejo16.medium.com/?source=post_page-----792aa92e03af--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://bryanvallejo16.medium.com/?source=post_page-----792aa92e03af--------------------------------)[![Bryan
    R. Vallejo](../Images/fd92974f57c72875cc133a2c959d64ca.png)](https://bryanvallejo16.medium.com/?source=post_page-----792aa92e03af--------------------------------)[](https://towardsdatascience.com/?source=post_page-----792aa92e03af--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----792aa92e03af--------------------------------)
    [Bryan R. Vallejo](https://bryanvallejo16.medium.com/?source=post_page-----792aa92e03af--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----792aa92e03af--------------------------------)
    ·7 min read·Oct 10, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----792aa92e03af--------------------------------)
    ·7 min 阅读·2023年10月10日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/692de08c2ac0d0d9fef8304a5bad06dc.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/692de08c2ac0d0d9fef8304a5bad06dc.png)'
- en: Image by the Author. Fastest route (red) and Shortest route (orange) in Morocco
    example
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。摩洛哥示例中的最快路线（红色）和最短路线（橙色）
- en: The Shortest Path (Dijkstra’s) algorithm can be applied in OSM networks like
    driving, bike, and pedestrian, to find the most optime route between origin and
    destination. But, the algorithm calculates in the network the shortest routes
    based on distance and it does not really mean the most optime route. The distance
    in a road network can be relative when we consider the speed of the roads. Definitely,
    the most optime route between the two points might be the shortest if the road
    network has equal speed on all roads. In the case we compare the speed in highways
    with urban streets we will refactor this idea understanding that the most optime
    route is the fastest.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最短路径（Dijkstra）算法可以应用于 OSM 网络中，如驾驶、骑行和步行，以找到起点和终点之间的最优路线。但该算法在网络中计算基于距离的最短路线，这并不意味着最优路线。在道路网络中，距离可以是相对的，当我们考虑道路的速度时。显然，在所有道路速度相等的情况下，两点之间的最优路线可能是最短的。如果我们比较高速公路与城市街道的速度，我们会重新调整这个想法，理解最优路线是最快的。
- en: “The distance in a road network can be relative when we consider the speed of
    the roads”
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “在道路网络中，距离可能是相对的，当我们考虑道路的速度时”
- en: Thanks to the Python library OSMNX, it is possible to add speed to different
    kinds of roads at the global level and calculate the *Travel times* between nodes
    in the OSM network. This allows the Python library to process the Shortest Path
    algorithm weighted by *Travel times*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 借助 Python 库 OSMNX，可以在全球范围内为不同类型的道路添加速度，并计算 OSM 网络中节点之间的*旅行时间*。这使得 Python 库可以处理以*旅行时间*加权的最短路径算法。
- en: This practice is the continuation of a previous tutorial that used the Shortest
    Path algorithm to calculate the shortest route between two locations in Morocco.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这一实践是之前一个教程的延续，那个教程使用了最短路径算法来计算摩洛哥两个位置之间的最短路线。
- en: Shortest route in OSM network in Morocco
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摩洛哥 OSM 网络中的最短路线
- en: '[](/shortest-path-dijkstras-algorithm-step-by-step-python-guide-896769522752?source=post_page-----792aa92e03af--------------------------------)
    [## Shortest Path (Dijkstra’s) algorithm step-by-step Python guide'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/shortest-path-dijkstras-algorithm-step-by-step-python-guide-896769522752?source=post_page-----792aa92e03af--------------------------------)
    [## 最短路径（Dijkstra）算法逐步 Python 指南'
- en: An update using OSMNX 1.6 and a long-distance path
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 OSMNX 1.6 的更新及长距离路径
- en: towardsdatascience.com](/shortest-path-dijkstras-algorithm-step-by-step-python-guide-896769522752?source=post_page-----792aa92e03af--------------------------------)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/shortest-path-dijkstras-algorithm-step-by-step-python-guide-896769522752?source=post_page-----792aa92e03af--------------------------------)
- en: Access coding tutorials
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问编码教程
- en: If you are not yet a member of [Medium](https://medium.com/u/504c7870fdb6?source=post_page-----792aa92e03af--------------------------------)
    you will be required to subscribe to access the stories. You can follow more coding
    tutorials and support my work by joining using my personal link. Be part of this
    coding journey.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Join here 👉 [https://bit.ly/3yjLsSL](https://bit.ly/3yjLsSL)
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: OSM data license
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Open Street Map data.** Licensed under [Open Data Commons Open Database License
    (ODbl)](https://opendatacommons.org/licenses/odbl/) or attribution license. Users
    are free to copy, distribute, transmit, and adapt the data as long as it is attributed
    to the author like © [OpenStreetMap](https://www.openstreetmap.org/copyright)
    contributors.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next steps will guide the process for applying the Shortest Path using the
    travel times. We will compare the fastest route and the shortest route to understand
    how the travel time and length changed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Also, we will use more functions from OSMNX that improve the results like `utils_graph.route_to_gdf()`
    , and for computing *Travel times* `add_edge_speeds()` and `add_edge_travel_times()`
    .
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Here is a quick view of the origin and destination suggested by [Hanae](https://medium.com/u/3b913af53dd0?source=post_page-----792aa92e03af--------------------------------).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dd1ded2472ba3b204998b6b2c29a83e0.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. Origin and destination locations.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Coding practice
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Start getting the libraries we need.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 1\. Define origin and destination as GeoDataFrames
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Start adding the coordinates and creating a new GDF using Geopandas.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 2\. Get the Graph network
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we have long-distance routes it is recommended to use the *envelope* function
    to get the Graph.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Let’s use a previously defined function
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Apply and visualize
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/86ce92fc96ba9311953cbbad921a39d9.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. Graph with road network the contains origin and destination
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Adding Travel times to road network
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will add the travel times using the function `add_edge_speeds()` that imputes
    the speed in km/h. The imputation adds mean max speed values of roads, per highway
    type. Then, we calculate the *travel times* using the function `add_edge_travel_time()`
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: We will keep the same variable *graph*
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the case you want to modify the highway classes you can pass a dictionary
    based on local speed values
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, let’s give a quick view of the travel times by highway type getting the
    edges classes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/e6d02f38607c6f55db56f06ffa1277c3.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: Image by the Author. Speed and travel times in road network
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Find the closest nodes of Origin and Destination
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Get the closest nodes that are part of the network using the origin and destination
    coordinates. The function is `nearest_nodes()` in this new version 1.6
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Then, we apply the shortest path algorithm between nodes.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Calculate the Shortest Path using travel times
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to use the function `shortest_path()` to calculate our route. We
    will use both the distance and time to compare how different the routes are with
    the parameter `weight`
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `shortest_path()` 函数来计算我们的路线。我们将同时使用距离和时间来比较路线在 `weight` 参数下的不同之处。
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will give back a bunch of node’s code that are part of the route.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一组属于该路线的节点代码。
- en: '![](../Images/93c60e89b3cfd82895cb495dd0e3f234.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/93c60e89b3cfd82895cb495dd0e3f234.png)'
- en: Image by the Author. Route’s nodes
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像。路线的节点
- en: 6\. Create routes from nodes (one-line-code)
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6\. 从节点创建路线（单行代码）
- en: The osmnx has implemented a function `utils_graph.route_to_gdf()` that transforms
    the nodes to GeoDataFrame in just one line. Nicely, we can get the columns of
    interest on the fly.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: osmnx 实现了一个函数 `utils_graph.route_to_gdf()`，可以在一行中将节点转换为 GeoDataFrame。很方便，我们可以动态获取感兴趣的列。
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 7\. Quick comparison (time and distance)
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7\. 快速比较（时间和距离）
- en: We will compare both routes in travel time and length.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将比较两条路线的旅行时间和长度。
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Print the values
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 打印值
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Fastest Route: Time 5.42 hours, Distance 378.93 km'
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*最快路线：时间 5.42 小时，距离 378.93 公里'
- en: 'Shortest Route: Time 5.6 hours, Distance 362.84 km*'
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 最短路线：时间 5.6 小时，距离 362.84 公里*
- en: The results say that the fastest route is longer. As expected, the distance
    gets relative when the speed is involved.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示最快的路线更长。如预期的那样，涉及速度时，距离变得相对。
- en: 8\. Save files and visualize
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8\. 保存文件并可视化
- en: Save network and routes
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 保存网络和路线
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In QGIS
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在 QGIS 中
- en: '![](../Images/1fe4f787061be2e19a0907d58ce2108d.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1fe4f787061be2e19a0907d58ce2108d.png)'
- en: Image by the Author. Fastest route (orange) and shortest route (yellow)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像。最快的路线（橙色）和最短的路线（黄色）
- en: In Matplotlib
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Matplotlib 中
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/4c910cbf3a0c59ef031d78ac5e8bf926.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4c910cbf3a0c59ef031d78ac5e8bf926.png)'
- en: Image by the Author. Faster route (red) and shortest route (yellow)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像。较快的路线（红色）和最短的路线（黄色）
- en: Known improvements
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 已知改进
- en: The new function used from osmnx `utils_graph.route_gdf()` creates a clean route.
    It uses the road segments and not only the union between nodes and the new path
    overlaps the OSM road network.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 从 osmnx 使用的新功能 `utils_graph.route_gdf()` 创建了一个干净的路线。它使用了道路段，而不仅仅是节点之间的联接，新路径覆盖了
    OSM 道路网络。
- en: '![](../Images/fcbca57f332951bddbf520786144db7d.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fcbca57f332951bddbf520786144db7d.png)'
- en: Image by the Author. Route overlaps road network.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像。路线覆盖了道路网络。
- en: '**Conclusion**'
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**结论**'
- en: The Shortest Path algorithm can be calculated using road speeds with the OSMNX
    function `add_edge_speeds()` and `add_edge_travel_times().` This different approach
    showed that the shortest path is relative if we implement the speed (travel time)
    in the calculation of the route. As expected, the fastest route ended up being
    longer than the shortest route but it reached its destination in the shortest
    travel time.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最短路径算法可以使用 OSMNX 函数 `add_edge_speeds()` 和 `add_edge_travel_times()` 计算道路速度。这种不同的方法表明，如果在路线计算中实施速度（旅行时间），最短路径是相对的。正如预期的那样，最快的路线最终比最短路线更长，但它以最短的旅行时间到达了目的地。
- en: The improvement in the generation of the route overlapping the road network
    makes the calculation of distances and travel times more accurate in studies of
    accessibility and proximity at the urban-regional level.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 生成覆盖道路网络的路线的改进使得在城市区域级别的可达性和邻近性研究中，距离和旅行时间的计算更加准确。
- en: Acknowledgment
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 致谢
- en: Thanks to the material of [Geoff Boeing](https://medium.com/u/c490d872f7a?source=post_page-----792aa92e03af--------------------------------)
    I was able to explore these features and understand the functions of OSMNX.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了[Geoff Boeing](https://medium.com/u/c490d872f7a?source=post_page-----792aa92e03af--------------------------------)提供的资料，我得以探索这些功能并理解
    OSMNX 的功能。
- en: 'If you want to reach me for questions or customized analysis:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想就问题或定制分析联系我：
- en: '[*Bryan R. LinkedIn*](https://www.linkedin.com/in/bryanrvallejo/)'
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[*Bryan R. LinkedIn*](https://www.linkedin.com/in/bryanrvallejo/)'
