- en: How to Create a Synthetic Social Network Using Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-create-a-synthetic-social-network-using-python-eff6451cab14](https://towardsdatascience.com/how-to-create-a-synthetic-social-network-using-python-eff6451cab14)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Understand the application of graph generation algorithms in creating synthetic
    graphs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@rohithtejam?source=post_page-----eff6451cab14--------------------------------)[![Rohith
    Teja](../Images/3b83438350f3eb69309b9abf715d6ee7.png)](https://medium.com/@rohithtejam?source=post_page-----eff6451cab14--------------------------------)[](https://towardsdatascience.com/?source=post_page-----eff6451cab14--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----eff6451cab14--------------------------------)
    [Rohith Teja](https://medium.com/@rohithtejam?source=post_page-----eff6451cab14--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----eff6451cab14--------------------------------)
    ·4 min read·Jan 31, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/feb1f7238807a43cbd60f8c1921413a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Maxim Berg](https://unsplash.com/@maxberg?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/kE8-rUKjtQU?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Finding an appropriate graph dataset to evaluate algorithms can be a daunting
    task sometimes. There are several options available, and it often takes quite
    a while to go through them.
  prefs: []
  type: TYPE_NORMAL
- en: Even when you find the perfect graph dataset, you have to verify its usage,
    sharing, and privacy policies.
  prefs: []
  type: TYPE_NORMAL
- en: It brings us to this discussion.
  prefs: []
  type: TYPE_NORMAL
- en: Is there any quicker way to find a graph dataset for evaluation purposes? Fortunately,
    yes! We need something called synthetic graphs. These graph datasets are generated
    artificially.
  prefs: []
  type: TYPE_NORMAL
- en: Need for synthetic graphs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Right off the bat, the first reason is convenience.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is convenient to generate your own dataset and not worry about things such
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the size of the graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privacy and data sharing restrictions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graph data format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These reasons might not convince everyone, and there are people who require
    real-world graphs for several graph analytic tasks which synthetic graphs cannot
    perform.
  prefs: []
  type: TYPE_NORMAL
- en: But I argue synthetic graphs provide a quick way to test your algorithms, and
    after developing a framework, you can deploy them onto real-world scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: What exactly are synthetic graphs?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Synthetic graphs are generated using graph generative models. They are constructed
    to mimic real-world graphs as closely as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'There exist algorithms that generate synthetic graphs. Some of these are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Erdös-Rényi model** — In this model, we start with a predefined set of nodes,
    say, `N`. Now we add the edges between nodes using a probability to generate a
    graph. The probability is fixed, and it is the same for all pairs of nodes in
    the graph. Hence, a higher probability makes a dense graph and a lower probability
    a sparse one. This is a simple model and does not come close to a real-world graph.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Watts-Strogatz model —** This is a way of generating graphs with a small-world
    property. In this context, a small-world is defined as something that has a small
    path length and a high clustering coefficient.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Path length: It is the measure of distance between two nodes in a graph. The
    shorter the path length, the closer the nodes are to each other.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Clustering coefficient: It measures how tightly a node’s neighbors are connected
    to each other.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This model starts with a regular grid-like structure with a fixed number of
    nodes and connects edges from a node to its nearest neighbors. It uses a rewiring
    probability which means that some edges are randomly removed from a place and
    added elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: It is used to model real-world networks, which are instances of small-world
    like social networks and transportation networks.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. **Barabasi-Albert model —** This graph generative model follows the “rich
    get richer” principle. The model connects new nodes to existing nodes that already
    have more connections. It causes the development of a few highly connected nodes
    and several poorly connected nodes in the graph. It is used in modeling scale-free
    networks like the internet and social networks.
  prefs: []
  type: TYPE_NORMAL
- en: Synthetic social network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can generate a synthetic social network using the `NetworkX` Python library.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s check how a synthetic graph uses all three models and see how they look.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below is the code to generate a graph using `NetworkX`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The graph visualization looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/992da326cbed9be9dddc08168ca41dee.png)'
  prefs: []
  type: TYPE_IMG
- en: Synthetic graph comparison (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the hyperparameters generates drastically different graphs.
  prefs: []
  type: TYPE_NORMAL
- en: For a social network, we would like to add node features and node labels. This
    can be done using `faker` python library, which generates fake names.
  prefs: []
  type: TYPE_NORMAL
- en: Let us see how it looks.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/02d8706b08f7d1d749235ded5a567bfb.png)'
  prefs: []
  type: TYPE_IMG
- en: Synthetic social network
  prefs: []
  type: TYPE_NORMAL
- en: The synthetic social network now has labels. Each node represents a person,
    and their name acts as the node label.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to generate other node attributes like age, sex, and occupation
    of each person in the social network and update the graph.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have a fully loaded synthetic social network that can be used to perform
    graph analytic tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading, and cheers!
  prefs: []
  type: TYPE_NORMAL
- en: '**Want to Connect?**'
  prefs: []
  type: TYPE_NORMAL
- en: Reach me at [LinkedIn](https://www.linkedin.com/in/rohithteja/), [Twitter](https://twitter.com/rohithtejam),
    [GitHub](https://github.com/rohithteja), or [Website](https://rohithteja.github.io/)!
  prefs: []
  type: TYPE_NORMAL
