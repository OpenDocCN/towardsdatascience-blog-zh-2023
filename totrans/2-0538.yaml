- en: 'Comparing List Comprehensions vs. Built-In Functions in Python: Which Is Better?'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较 Python 中的列表推导式与内置函数：哪种更好？
- en: 原文：[https://towardsdatascience.com/comparing-list-comprehensions-vs-built-in-functions-in-python-which-is-better-1e2c9646fafe](https://towardsdatascience.com/comparing-list-comprehensions-vs-built-in-functions-in-python-which-is-better-1e2c9646fafe)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/comparing-list-comprehensions-vs-built-in-functions-in-python-which-is-better-1e2c9646fafe](https://towardsdatascience.com/comparing-list-comprehensions-vs-built-in-functions-in-python-which-is-better-1e2c9646fafe)
- en: An in-depth analysis of syntax, readability, and performance
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对语法、可读性和性能的深入分析
- en: '[](https://thomasdorfer.medium.com/?source=post_page-----1e2c9646fafe--------------------------------)[![Thomas
    A Dorfer](../Images/9258a1735cee805f1d9b02e2adf01096.png)](https://thomasdorfer.medium.com/?source=post_page-----1e2c9646fafe--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1e2c9646fafe--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1e2c9646fafe--------------------------------)
    [Thomas A Dorfer](https://thomasdorfer.medium.com/?source=post_page-----1e2c9646fafe--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://thomasdorfer.medium.com/?source=post_page-----1e2c9646fafe--------------------------------)[![Thomas
    A Dorfer](../Images/9258a1735cee805f1d9b02e2adf01096.png)](https://thomasdorfer.medium.com/?source=post_page-----1e2c9646fafe--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1e2c9646fafe--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1e2c9646fafe--------------------------------)
    [Thomas A Dorfer](https://thomasdorfer.medium.com/?source=post_page-----1e2c9646fafe--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1e2c9646fafe--------------------------------)
    ·9 min read·Mar 21, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1e2c9646fafe--------------------------------)
    ·阅读时长 9 分钟·2023 年 3 月 21 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/24a86e8397f03f62c53d4cf68e844fb2.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/24a86e8397f03f62c53d4cf68e844fb2.png)'
- en: Image by the Author.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片。
- en: Have you ever found yourself scrolling through Netflix on a rainy day, feeling
    overwhelmed by the endless choices of movies and shows to watch?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾在雨天通过 Netflix 滚动，感到被无尽的电影和节目选择所压倒？
- en: In programming, the paradox of choice can be just as overwhelming. With so many
    libraries and frameworks available, providing countless different ways of achieving
    the same goal, it’s easy to get lost in a sea of options.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程中，选择的悖论可能同样令人不知所措。面对如此众多的库和框架，提供了无数种实现相同目标的方法，容易在选择的海洋中迷失方向。
- en: In Python, this situation often arises when a programmer needs to choose between
    a **functional programming** approach, such as the built-in functions `map()`,
    `filter()`, and `reduce()`, and the more Pythonic **list comprehensions**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，这种情况通常出现在程序员需要在**函数式编程**方法（如内置函数 `map()`、`filter()` 和 `reduce()`）与更具
    Python 风格的**列表推导式**之间做选择时。
- en: In this article, we’ll explore the pros and cons of these distinct approaches
    through the lens of syntax, readability, and performance.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将通过语法、可读性和性能的视角探讨这两种不同方法的优缺点。
- en: List Comprehensions
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表推导式
- en: 'In Python, a list comprehension is a concise method that produces a list based
    on an already existing list. In simple terms, it’s essentially a one-liner of
    a **for loop** with the option to include an **if condition** at the end. The
    syntax can be broken down as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，列表推导式是一种简洁的方法，它基于已存在的列表生成一个新列表。简单来说，它本质上是一个**for 循环**的一行代码，并可以在末尾包含一个**if
    条件**。语法可以分解为如下：
- en: '![](../Images/1580b25f72c556932fc1111478f01d23.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1580b25f72c556932fc1111478f01d23.png)'
- en: Image by the Author.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片。
- en: 'Let’s assume we have a list of numbers, called `numbers`, from which we’d like
    to take the even ones and square them. Now the boring, old school way would be
    to do it like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个名为 `numbers` 的数字列表，我们希望从中选取偶数并对其平方。现在，老旧的方式是这样的：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'With a list comprehension, however, we can do this in a single line of code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用列表推导式，我们可以在一行代码中完成这一操作：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Either way produces the same result, but the list comprehension provides a
    much clearer and more readable solution as its syntax is literally: *“****Do this***
    *for* ***each value*** *in* ***this list*** *if* ***this condition*** *is met”*.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种方式都能得到相同的结果，但列表推导式提供了一个更清晰、更可读的解决方案，因为其语法字面上是：*“****做这个*** *对于* ***每个值***
    *在* ***这个列表*** *如果* ***这个条件*** *满足”*。
- en: Generally, list comprehensions are also faster than regular for loops as they
    don’t have to look up the list and call its `append` method on every iteration.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，列表推导式通常比常规的 `for` 循环更快，因为它们不需要在每次迭代时查找列表并调用其 `append` 方法。
- en: Now that we have a pretty good understanding of list comprehensions, let’s move
    on to see how they fare compared to some of the commonly used, built-in functions
    such as `map()`, `filter()`, and `reduce()`. This is the paradox-of-choice part
    I was referring to earlier. Programmers tend to be aware that these various methods
    exist, but which one to choose?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对列表推导式有了比较好的理解，接下来我们来看看它们与一些常用的内置函数（如 `map()`、`filter()` 和 `reduce()`）相比如何。这就是我之前提到的选择悖论。程序员往往知道这些方法的存在，但该选择哪一个呢？
- en: 'Let’s go through each built-in function at a time and compare them to their
    Pythonic counterpart: the list comprehension.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一了解每个内置函数，并将它们与 Pythonic 对应的列表推导式进行比较。
- en: Map
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Map
- en: 'If your goal is to apply a transformation function to each item in an iterable
    (such as a list), the `map()` function is a good place to start. The syntax is
    quite straightforward and only requires two input arguments: (1) a transformation
    function, and (2) an iterable (i.e. your input list).'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的目标是对可迭代对象（如列表）中的每一项应用转换函数，那么 `map()` 函数是一个很好的起点。其语法相当简单，只需要两个输入参数：(1) 一个转换函数，以及
    (2) 一个可迭代对象（即你的输入列表）。
- en: 'Let’s say we have a list of numbers corresponding to Euros and we’d like to
    convert them to US Dollars. This can be done as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个与欧元对应的数字列表，我们希望将它们转换为美元。这可以通过以下方式完成：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice that we have to explicitly specify the `list()` function here, since
    `map()` natively returns an iterator — a map object.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们必须在这里明确指定 `list()` 函数，因为 `map()` 本地返回的是一个迭代器——一个 map 对象。
- en: 'Also note that `map()`allows you to use these anonymous, ad-hoc [lambda functions](/how-to-effectively-use-lambda-functions-in-python-as-a-data-scientist-fd6171554053)
    that allow you to define a function on the fly. If you’d like to learn more about
    lambdas, their syntax, and how to use them, you can take a look at the following
    article:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，`map()` 允许你使用这些匿名的、即兴的 [lambda 函数](/how-to-effectively-use-lambda-functions-in-python-as-a-data-scientist-fd6171554053)，这些函数允许你即时定义一个函数。如果你想了解更多关于
    lambda 函数、它们的语法以及如何使用它们的内容，可以查看以下文章：
- en: '[](/how-to-effectively-use-lambda-functions-in-python-as-a-data-scientist-fd6171554053?source=post_page-----1e2c9646fafe--------------------------------)
    [## How to Effectively Use Lambda Functions in Python as a Data Scientist'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/how-to-effectively-use-lambda-functions-in-python-as-a-data-scientist-fd6171554053?source=post_page-----1e2c9646fafe--------------------------------)
    [## 如何在数据科学中有效使用 Python 的 Lambda 函数'
- en: An introduction to their syntax, capabilities, and applicability in data science
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对其语法、功能以及在数据科学中的适用性的介绍
- en: towardsdatascience.com](/how-to-effectively-use-lambda-functions-in-python-as-a-data-scientist-fd6171554053?source=post_page-----1e2c9646fafe--------------------------------)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/how-to-effectively-use-lambda-functions-in-python-as-a-data-scientist-fd6171554053?source=post_page-----1e2c9646fafe--------------------------------)
- en: Comparison with List Comprehension
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与列表推导式的比较
- en: You may have noticed by now that the exact same task could be done with a list
    comprehension as well. So let’s see how they compare with respect to readability
    and performance.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，相同的任务也可以通过列表推导式来完成。那么让我们看看它们在可读性和性能方面的比较。
- en: 'Specifically, we will look at three scenarios: (1) list comprehensions, (2)
    `map()` with a predefined input function, and (3) `map()`with an ad-hoc lambda
    function.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们将讨论三种场景：(1) 列表推导式，(2) 使用预定义输入函数的 `map()`，以及 (3) 使用即兴的 lambda 函数的 `map()`。
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In terms of simplicity and readability, the list comprehension appears to be
    winning the race here. The programmer’s intention is immediately apparent and
    there’s no need to include any extra keywords or define additional functions.
    However, it’s worth noting that for more complex operations, separate transformation
    functions may need to be defined, which would take away some of the brownie points
    that list comprehensions generally receive for their readability.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 就简洁性和可读性而言，列表推导式在这里似乎赢得了比赛。程序员的意图立即显现出来，不需要额外的关键字或定义额外的函数。然而，值得注意的是，对于更复杂的操作，可能需要定义单独的转换函数，这将削弱列表推导式通常因其可读性而获得的一些优势。
- en: With respect to performance, the example above clearly demonstrates that list
    comprehensions are fastest, followed by `map()` with a predefined input function,
    and lastly `map()` with a lambda function.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 就性能而言，上述示例清楚地表明，列表推导式是最快的，其次是使用预定义输入函数的`map()`，最后是使用lambda函数的`map()`。
- en: 'Here’s the thing about using an ad-hoc lambda function: it gets called for
    each item in the input list, resulting in a computational overhead due to the
    creation and destruction of lambda function objects, ultimately leading to degraded
    performance. Predefined functions, by contrast, are optimized and stored in memory,
    which leads to more efficient execution.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 关于使用临时lambda函数的问题是：它会为输入列表中的每个项目调用，导致计算开销，因为lambda函数对象的创建和销毁，最终导致性能下降。相比之下，预定义函数经过优化并存储在内存中，这使得执行更为高效。
- en: Bottom Line
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 底线
- en: List comprehensions clearly have the upper hand over `map()` when it comes to
    performance. In addition, their syntax is easy to read, typically perceived as
    more intuitive, and considered more Pythonic than the one of `map()`, which was
    derived from functional programming.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在性能方面，列表推导式明显优于`map()`。此外，它们的语法易于阅读，通常被认为更直观，并且被认为比源自函数式编程的`map()`更具Python风格。
- en: Filter
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤
- en: 'The `filter()` function allows you to select a subset of your iterable based
    on a given condition. Similar to `map()`, it requires two input arguments: (1)
    a filter function, which is often a [lambda function](/how-to-effectively-use-lambda-functions-in-python-as-a-data-scientist-fd6171554053),
    and (2) an iterable.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter()`函数允许你根据给定条件选择可迭代对象的一个子集。与`map()`类似，它需要两个输入参数：（1）过滤函数，通常是[lambda函数](https://how-to-effectively-use-lambda-functions-in-python-as-a-data-scientist-fd6171554053)，以及（2）一个可迭代对象。'
- en: 'An example is given below, where we filter out all odd numbers and only keep
    the even ones:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例，我们过滤掉所有奇数，只保留偶数：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Again, similar to `map()`, we have to explicitly state that we want a list returned,
    because `filter()` natively returns an iterator object.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于`map()`，我们必须明确声明我们希望返回一个列表，因为`filter()`原生返回一个迭代器对象。
- en: Comparison with List Comprehension
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与列表推导式的比较
- en: Let’s take a look at the performance difference between the built-in `filter()`
    function, again using both a predefined input function and a lambda, and a list
    comprehension.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看内置`filter()`函数的性能差异，再次使用预定义输入函数和lambda函数，并与列表推导式进行比较。
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In terms of readability, the same can be said as above for `map()`: list comprehensions
    are pretty easy to read and don’t require any predefined or ad-hoc functions or
    extra keywords. However, it has been argued that the use of the function `filter()`
    immediately gives away the programmer’s intent of, well, filtering something,
    perhaps more so than the list comprehension does. This is of course a highly subjective
    matter and will depend on the individual’s preferences and tastes.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 就可读性而言，对于`map()`的说法同样适用于`filter()`：列表推导式相当易于阅读，不需要任何预定义或临时函数或额外的关键字。然而，有人认为使用`filter()`函数会立即展示程序员的意图，即过滤某物，可能比列表推导式更直接。当然，这是一项高度主观的事项，取决于个人的偏好和品味。
- en: Regarding performance, we’re also seeing similar results to the ones obtained
    for `map()`. List comprehensions are fastest, followed by `filter()` with a predefined
    filter function, and `filter()` with an ad-hoc lambda function comes in last.
    Again, this is due to the overhead incurred by lambda functions requiring the
    creation of a new function object at runtime.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 就性能而言，我们看到的结果与`map()`获得的类似。列表推导式是最快的，其次是使用预定义过滤函数的`filter()`，最后是使用临时lambda函数的`filter()`。这再次是由于lambda函数需要在运行时创建新函数对象所带来的开销。
- en: Bottom Line
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 底线
- en: List comprehensions outperform their functional `filter()`counterpart — by nearly
    a factor of 2 — and are typically perceived to be more Pythonic as well. Readability,
    however, is a bit more subjective with this one. While some people prefer the
    intuitive and Pythonic way of list comprehensions, others prefer using the `filter()`
    function as it clearly conveys its functionality and the intention of the programmer.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 列表推导式的性能超过其函数式`filter()`对应物——几乎是2倍，并且通常被认为更具Python风格。然而，易读性在这方面略显主观。有些人喜欢列表推导式直观和Pythonic的方式，而另一些人则偏爱使用`filter()`函数，因为它清晰地传达了其功能和程序员的意图。
- en: Reduce
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 减少
- en: 'Finally, let’s take a look at `reduce()`. This build-in function is often used
    in situations that require the accumulation of a single result over multiple steps.
    It also takes two input arguments: (1) a reduce function, and (2) an iterable.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看一下`reduce()`。这个内置函数通常用于需要在多个步骤中累积单一结果的情况。它还接受两个输入参数：（1）一个归约函数，和（2）一个可迭代对象。
- en: 'Let’s look at an example to make its functionality more clear. In this case,
    we would like to compute the product of a list of integers:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个示例来使其功能更清晰。在这个例子中，我们希望计算一个整数列表的乘积：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Again, we use a lambda to define our reduce function, which in this case is
    a simple, rolling multiplication over our list of integers. This results in the
    following computation being performed: 1 x 2 x 3 x 4 x 5 = 120.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们使用一个lambda来定义我们的归约函数，这里是对整数列表进行简单的滚动乘法。这会执行以下计算：1 x 2 x 3 x 4 x 5 = 120。
- en: Comparison with List Comprehension
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与列表推导式的比较
- en: 'Achieving the same goal with a list comprehension is a little trickier this
    time and requires some additional steps, such as the initialization of a variable
    and the use of the [walrus operator](https://docs.python.org/3/whatsnew/3.8.html):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用列表推导式达到相同的目标这次有点棘手，需要一些额外的步骤，例如初始化变量和使用[海象运算符](https://docs.python.org/3/whatsnew/3.8.html)：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: While it’s still possible to obtain the same result with a list comprehension,
    these additional steps considerably degrade the readability of our code.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然仍然可以通过列表推导式获得相同的结果，但这些额外的步骤显著降低了代码的可读性。
- en: 'Furthermore, there are multiple, low-code alternatives now to both methods,
    such as `math.prod()`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，现在还有多种低代码替代方法，例如`math.prod()`：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Performance-wise, however, there doesn’t seem to be a major difference between
    the two:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在性能方面，这两者之间似乎没有重大区别：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Bottom Line
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关键点
- en: In Python, the use of `reduce()` for rolling computations to value pairs in
    lists has been slowly declining over the years, mainly due to more efficient and
    intuitive alternatives such as `math.prod()`. Both `reduce()` and list comprehensions
    do not exactly provide a clear-cut syntax here that would provide the reader with
    an easy and quick understanding of the code.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，`reduce()`用于对列表中的值对进行滚动计算的使用在逐年减少，主要是因为有更高效和直观的替代方法，如`math.prod()`。`reduce()`和列表推导式在这里并没有提供一个清晰的语法，这使得读者很难快速理解代码。
- en: 'PS: If you are still a frequent user of `reduce()`, I’d love to hear about
    your use cases in the comments!'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: PS：如果你仍然是`reduce()`的频繁用户，我很想在评论中了解你的使用案例！
- en: Conclusion
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: While not as prevalent as in other languages, `map()`, `filter()`, and — occasionally
    — `reduce()` are still used and found in Python-based applications. However, list
    comprehensions tend to be seen as more Pythonic due to their more intuitive syntax
    and can, in most situations, replace `map()` and `filter()` functions, while also
    benefiting from a marked performance boost.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在其他语言中不如其他语言那样普遍，`map()`、`filter()`以及偶尔使用的`reduce()`仍然在基于Python的应用程序中使用。然而，列表推导式由于其更直观的语法被视为更具Python风格，并且在大多数情况下，可以替代`map()`和`filter()`函数，同时还带来明显的性能提升。
- en: By contrast, the nature of the `reduce()` function makes it hard and more cryptic
    to be replaced by list comprehensions. However, they can be replaced by low-code
    alternatives such as the `math.prod()` function, as we have seen above.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，`reduce()`函数的特性使其不容易被列表推导式替代。然而，如上所述，它们可以被低代码替代方法如`math.prod()`函数替代。
- en: Liked this article?
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 喜欢这篇文章吗？
- en: Let’s connect! You can find me on [Twitter](https://twitter.com/ThomasADorfer)
    and [LinkedIn](https://www.linkedin.com/in/thomasdorfer/).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们联系一下！你可以在[Twitter](https://twitter.com/ThomasADorfer)和[LinkedIn](https://www.linkedin.com/in/thomasdorfer/)找到我。
- en: If you like to support my writing, you can do so through a [Medium Membership](https://thomasdorfer.medium.com/membership),
    which provides you access to all my stories as well as those of thousands of other
    writers on Medium.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢支持我的写作，你可以通过[Medium会员](https://thomasdorfer.medium.com/membership)来做到这一点，这将为你提供访问我所有故事以及Medium上其他成千上万作家的权限。
- en: '[](https://medium.com/@thomasdorfer/membership?source=post_page-----1e2c9646fafe--------------------------------)
    [## Join Medium with my referral link — Thomas A Dorfer'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@thomasdorfer/membership?source=post_page-----1e2c9646fafe--------------------------------)
    [## 通过我的推荐链接加入Medium — Thomas A Dorfer'
- en: Read every story from Thomas A Dorfer (and thousands of other writers on Medium).
    Your membership fee directly supports…
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读Thomas A Dorfer的每一篇故事（以及Medium上其他成千上万的作家的故事）。你的会员费直接支持…
- en: medium.com](https://medium.com/@thomasdorfer/membership?source=post_page-----1e2c9646fafe--------------------------------)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@thomasdorfer/membership?source=post_page-----1e2c9646fafe--------------------------------)
