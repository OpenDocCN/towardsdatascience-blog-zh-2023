- en: Decoding Auto-GPT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/decoding-auto-gpt-fae16ff1ee75](https://towardsdatascience.com/decoding-auto-gpt-fae16ff1ee75)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The Mechanics of an **Autonomous** GPT-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@maartengrootendorst?source=post_page-----fae16ff1ee75--------------------------------)[![Maarten
    Grootendorst](../Images/58e24b9cf7e10ff1cd5ffd75a32d1a26.png)](https://medium.com/@maartengrootendorst?source=post_page-----fae16ff1ee75--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fae16ff1ee75--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fae16ff1ee75--------------------------------)
    [Maarten Grootendorst](https://medium.com/@maartengrootendorst?source=post_page-----fae16ff1ee75--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fae16ff1ee75--------------------------------)
    ·8 min read·Aug 8, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ccce7f423325fb2990f06b6a85bc947e.png)'
  prefs: []
  type: TYPE_IMG
- en: There have been many interesting, complex, and innovative solutions since the
    release of ChatGPT. The community has explored countless possibilities for improving
    its capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: One of those is the well-known [Auto-GPT](https://github.com/Significant-Gravitas/Auto-GPT)
    package. With more than **140k stars**, it is one of the highest-ranking repositories
    on Github!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/47bcc2b61fc850759406607d46b2e448.png)'
  prefs: []
  type: TYPE_IMG
- en: Auto-GPT’s number of stars on Github. Retrieved from star-history.com
  prefs: []
  type: TYPE_NORMAL
- en: Auto-GPT is an attempt at making GPT-4 fully **autonomous**.
  prefs: []
  type: TYPE_NORMAL
- en: Auto-GPT gives GPT-4 the power to make its own decisions
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It sounds incredible and it definitely is! But how does it work?
  prefs: []
  type: TYPE_NORMAL
- en: In this post, we will go through Auto-GPT’s architecture and explore how it
    can reach autonomous behavior.
  prefs: []
  type: TYPE_NORMAL
- en: The Architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Auto-GPT has an overall architecture, or a main loop of sorts, that it uses
    to model autonomous behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by describing this overall after which we will go through each
    step in-depth:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0b5f05f9f213c9fd03d615fed94a6648.png)'
  prefs: []
  type: TYPE_IMG
- en: The main cyclical loop that describes Auto-GPT main’s autonomous behavioral
    mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: 'The core of Auto-GPT is a cyclical sequence of steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Initialize the **prompt** with summarized information
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: GPT-4 proposes an **action**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The action is **executed**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Embed** both the input and output of this cycle'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save embeddings to a **vector database**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These 5 steps make up the core of Auto-GPT and represent its main autonomous
    behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Before we go through each step in-depth, there is a step before this cyclical
    sequence, namely **initializing the agent**.
  prefs: []
  type: TYPE_NORMAL
- en: 0\. Initializing the Agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before Auto-GPT completes a task fully autonomous, it first needs to initialize
    an **Agent**. This agent essentially describes who GPT-4 is and what goal it should
    pursue
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say that we want Auto-GPT to create a **recipe for vegan chocolate**.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'With that goal in mind, we need to give GPT-4 a bit of context about what an
    agent should be and what it should achieve:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8501a4534e2d7a1f8b5225d99593e41c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Prompt: Create sub-goals and a name for our Agent.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We create a prompt defining two things:'
  prefs: []
  type: TYPE_NORMAL
- en: Create **5 highly effective goals** (these can be updated later on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an appropriate **role-based name** (_GPT)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name helps GPT-4 to continuously remember what it should model. The sub-goals
    are especially helpful to make small tasks for it to achieve.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we give an example of what the desired output should be:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/561098a39fbbf7494190604c759d992f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Prompt: GPT-4 works much better if we provide it with an example of the desired
    output.'
  prefs: []
  type: TYPE_NORMAL
- en: Giving examples to any generative Large Language Model works really well. By
    describing what the output should look like, it more easily generates accurate
    answers.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we pass this prompt to GPT-4 using Auto-GPT, we get the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d970a4adac0e66e1d2b807d2a680f10f.png)'
  prefs: []
  type: TYPE_IMG
- en: GPT-4 created a description of **RecipeGPT** for us!
  prefs: []
  type: TYPE_NORMAL
- en: It seems that GPT-4 has created a description of **RecipeGPT** for us. We can
    give this context to GPT-4 as a **system prompt** so that it continuously remembers
    its purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Now that Auto-GPT has created a description of its agent, along with clear goals,
    it can start by taking its first autonomous action.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First Prompt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The very first step in its cyclical sequence is creating the prompt that triggers
    an action.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/11f292d65655d4fa7ed8cbc8348f9a08.png)'
  prefs: []
  type: TYPE_IMG
- en: The first step in Auto-GPT’s autonomous cycle. We ask GPT-4 to use a single
    command based on a system prompt and a summary of events that happened in the
    past.
  prefs: []
  type: TYPE_NORMAL
- en: 'The prompt consists of three components:'
  prefs: []
  type: TYPE_NORMAL
- en: System Prompt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Call to Action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will go into the summary a bit later but the call to action is nothing more
    than asking GPT-4 which command it should use. The commands GPT-4 can use are
    defined in its **System Prompt**.
  prefs: []
  type: TYPE_NORMAL
- en: System Prompt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The system prompt is the context that we give to GPT-4 so that it remembers
    certain guidelines that it should follow.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/024e942b605d6147de555b6abea2c401.png)'
  prefs: []
  type: TYPE_IMG
- en: The format of the system prompt.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown above, it consists of **six guidelines**:'
  prefs: []
  type: TYPE_NORMAL
- en: The goals and description of the initialized **Agent**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Constrains** it should adhere to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Commands** it can use'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resources** it has access to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Evaluation** steps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example of a valid **JSON** output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last five steps are essentially constraints the Agent should adhere to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a more in-depth overview of what these guidelines and constraints generally
    look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/68a2472fee1ebf891ddde6670d773b3d.png)'
  prefs: []
  type: TYPE_IMG
- en: The constraints that are given in the system prompt.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the system prompt sketches the boundaries in which GPT-4 can
    act. For example, in *“Resources”,* it describes that GPT-4 can use GPT-3.5 Agents
    for the delegation of simple tasks. Similarly, *“Evaluation,”* tells GPT-4 that
    it should continuously self-criticize its own behavior to improve upon its next
    actions.
  prefs: []
  type: TYPE_NORMAL
- en: Example of the First Prompt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Together, the very first prompt looks a bit like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3fa3a09bac37d892796ec859bd373dec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The full first prompt. Note the three components: System prompt, summary, and
    call to action.'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that in blue *“I was created”* is mentioned. Typically, this would contain
    a summary of all the actions it has taken. Since it was just created, it has no
    action taken before and the summary is nothing more than *“I was created”*.
  prefs: []
  type: TYPE_NORMAL
- en: '**2\. GPT-4 Proposes an Action**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In step 2, we give GPT-4 the prompt we defined in the previous step. It can
    then propose an action to take which should adhere to the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6d67b46daaf0b8fb09398db89784aeea.png)'
  prefs: []
  type: TYPE_IMG
- en: The second step in Auto-GPT’s autonomous cycle. GPT-4 executes the previous
    command and uses a framework called ReACT to demonstrate complex output.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see six individual steps being mentioned:'
  prefs: []
  type: TYPE_NORMAL
- en: Thoughts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reasoning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Criticism
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speak
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These steps describe a format of prompting called Reason and ACT (**ReACT**).
  prefs: []
  type: TYPE_NORMAL
- en: ReACT is one of Auto-GPT’s superpowers!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ReACT allows for GPT-4 to mimic self-criticism and demonstrate more complex
    reasoning than what is possible if we just ask the model directly.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f4e63816bf2e6227c1aeea98249a3bc6.png)'
  prefs: []
  type: TYPE_IMG
- en: A basic and illustrative example of ReACT. Most GPT models would get this question
    right with the basic prompt but it demonstrates how you could use ReACT for more
    complex questions.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever we ask GPT-4 a question using the ReACT framework, we ask GPT-4 to
    output individual thoughts, actions, and observations before coming to a conclusion.
  prefs: []
  type: TYPE_NORMAL
- en: By having the model mimic extensive reasoning, it tends to give more accurate
    answers compared to directly answering the question.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, Auto-GPT has extended the base ReACT framework and generates
    the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cda528db7142676e6b4166132a19f5fa.png)'
  prefs: []
  type: TYPE_IMG
- en: The ReACT framework as used by Auto-GPT
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, it follows the ReACT pipeline that we described before but includes
    additional criticism and reasoning steps.
  prefs: []
  type: TYPE_NORMAL
- en: It proposes to **search the web** to extract more information about popular
    recipes.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Execute Action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After having generated a response, in valid JSON format. We can extract what
    the **RecipeGPT** wants to do. In this case, it calls for a web search:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c7fa15cb60dfc77a715e91e24b90c07a.png)'
  prefs: []
  type: TYPE_IMG
- en: The next action as proposed by GPT-4.
  prefs: []
  type: TYPE_NORMAL
- en: 'and in turn, will execute searching the web:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/31b6ef621b9c64174ff6fc063eedd73a.png)'
  prefs: []
  type: TYPE_IMG
- en: The third step in Auto-GPT’s autonomous cycle. Auto-GPT executes the previously
    proposed behavior.
  prefs: []
  type: TYPE_NORMAL
- en: This action it can take, searching the web, is simply a tool at its disposal
    that generates a file containing the main body of the page.
  prefs: []
  type: TYPE_NORMAL
- en: Since we explained to GPT-4 in its system prompt that it can use web search,
    it considers this a valid action.
  prefs: []
  type: TYPE_NORMAL
- en: Auto-GPT is as autonomous as the number of tools it possesses
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Do note that if the only tool at its disposal is searching the web, then we
    can start to argue how autonomous such a model really is!
  prefs: []
  type: TYPE_NORMAL
- en: Either way, we *save the output to a file* for later use.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Embed Everything!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every step Auto-GPT has taken thus far is vital information for any next steps
    to take. Especially when it needs to take dozens of steps, for example for [taking
    over the world](https://www.youtube.com/@ChaosGPT), remembering what it has done
    thus far is important.
  prefs: []
  type: TYPE_NORMAL
- en: One method of doing so is by embedding the prompts and output it has generated.
    This allows us to convert text into numerical representations (embeddings) that
    we can save later on.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a220ef903d1c500864650ac14cd456f7.png)'
  prefs: []
  type: TYPE_IMG
- en: The fourth step in Auto-GPT’s autonomous cycle. Embed every relevant text it
    has seen thus far. Input, output, observations, actions, etc.
  prefs: []
  type: TYPE_NORMAL
- en: These embeddings are generated using OpenAI’s *text-embedding-ada-002* model
    which works tremendously well across [many use cases](https://huggingface.co/spaces/mteb/leaderboard).
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Vector Database + Summarization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After having generated the embeddings, we need a place to store them. [Pinecone](https://pinecone.io/)
    is often used to create the vector database but many other systems can be used
    as long as you can easily find similar vectors.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a9deac81005d34d3ae61547f6c6b96da.png)'
  prefs: []
  type: TYPE_IMG
- en: The fifth step in Auto-GPT’s autonomous cycle. Save all embeddings in a vector
    database such that they can easily be accessed and searched for.
  prefs: []
  type: TYPE_NORMAL
- en: The vector database allows us to quickly find information for an input query.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can query the vector database to find all steps it has taken thus far. Using
    that information, we ask GPT-4 to create a **summary** of all actions it has taken
    thus far:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f1a6782a5aa64ddb3065b0d6b3022589.png)'
  prefs: []
  type: TYPE_IMG
- en: Create a summary of everything that has happened thus far using the vector database
    and GPT-4.
  prefs: []
  type: TYPE_NORMAL
- en: This summary is then used to construct the prompt as we did in step 1.
  prefs: []
  type: TYPE_NORMAL
- en: That way, it can *“remember”* what it has done thus far and think about the
    next steps to be taken.
  prefs: []
  type: TYPE_NORMAL
- en: This completes the very first cycle of Auto-GPT’s autonomous behavior!
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Do it all over again!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you might have guessed, the cycle continues from where we started, asking
    GPT-4 to take action based on a history of actions.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0e979f9aac8d9b60dadf8999b1f1172b.png)'
  prefs: []
  type: TYPE_IMG
- en: Auto-GPT’s cycle of Autonomy.
  prefs: []
  type: TYPE_NORMAL
- en: Auto-GPT will continue until it has reached its goal or when you interrupt it.
  prefs: []
  type: TYPE_NORMAL
- en: During this cyclical process, it can keep track of estimated costs in order
    to make sure you do not spend too much on your Agent.
  prefs: []
  type: TYPE_NORMAL
- en: In the future, especially with the release of [Llama2](https://huggingface.co/meta-llama/Llama-2-7b),
    I expect and hope that local models can reliably be used in Auto-GPT!
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are, like me, passionate about AI and/or Psychology, please feel free
    to add me on [**LinkedIn**](https://www.linkedin.com/in/mgrootendorst/), follow
    me on [**Twitter**](https://twitter.com/MaartenGr), or subscribe to my [**Newsletter**](http://maartengrootendorst.substack.com/).
    You can also find some of my content on my [**Personal Website**](https://maartengrootendorst.com/).
  prefs: []
  type: TYPE_NORMAL
- en: '*All images without a source credit were created by the author*'
  prefs: []
  type: TYPE_NORMAL
