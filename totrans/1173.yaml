- en: How to Efficiently Replace Values in a Pandas DataFrame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-efficiently-replace-values-in-a-pandas-dataframe-330fe832dd21](https://towardsdatascience.com/how-to-efficiently-replace-values-in-a-pandas-dataframe-330fe832dd21)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PYTHON
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A walkthrough for the Pandas replace method and how you can use it in a few
    simple examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://byrondolon.medium.com/?source=post_page-----330fe832dd21--------------------------------)[![Byron
    Dolon](../Images/9ff32138c7b1913be24cc7ab971752b0.png)](https://byrondolon.medium.com/?source=post_page-----330fe832dd21--------------------------------)[](https://towardsdatascience.com/?source=post_page-----330fe832dd21--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----330fe832dd21--------------------------------)
    [Byron Dolon](https://byrondolon.medium.com/?source=post_page-----330fe832dd21--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----330fe832dd21--------------------------------)
    ·8 min read·Jul 12, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/53c719fb6e620fc207e6e6e861e91571.png)'
  prefs: []
  type: TYPE_IMG
- en: Image used with permission from my talented sister [ohmintyartz](https://www.instagram.com/ohmintyartz/)
  prefs: []
  type: TYPE_NORMAL
- en: The Pandas library has a variety of built-in methods you can use to process
    and clean data to make it ready for analysis and machine learning.
  prefs: []
  type: TYPE_NORMAL
- en: As you work with different kinds of data, you’ll often find the need to remove
    entire rows based on a condition or update part of a string value as part of your
    data cleaning. You might also want to create new columns from existing ones as
    a part of your feature engineering process.
  prefs: []
  type: TYPE_NORMAL
- en: Pandas will let you perform a variety of operations on object and string data
    types with its native transformation methods. In this piece, let’s specifically
    take a look at how you can replace entire values and/or substrings in the columns
    in your DataFrames.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to follow along with the examples in this piece in a notebook! You
    can download the [dataset](https://www.kaggle.com/datasets/drahulsingh/top-largest-universities/versions/1?resource=download)
    from Kaggle available free for use under the Open Data Commons Public Domain Dedication
    and License (PDDL) v1.0\. Then import and run the following and we can get started!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/fef95aa81d4bae2014d6111cc7f1d3ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Using “replace” in Pandas to edit substring values in a DataFrame Series (Column)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s say we wanted to look at the values in the “Continent” column specifically.
    We can use the `value_counts` method in Pandas that essentially does a group by
    and on the specified column and then returns a count of unique values in the DataFrame
    for each column value. This is useful to see how many of each unique value in
    the column exists in the DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5eab7bb4cc77fbe3ebb22e556a5d151d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s say we wanted to get rid of “North” America so we can just have it
    as “America”. We might want to do this to create a new column as a part of our
    feature engineering process or if we wanted to treat both North and South America
    as just one region.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could achieve this by removing “North” from the string “North America” using
    the replace method. We can try that like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c239e9c4720583e098931b70cb4a0d61.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'This didn’t work because if you only pass a string value to replace, the Pandas
    method will only replace the value found in the Series if it is an exact match.
    To do a simple match on a substring, instead, we can do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We did a few different things in this snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '`to_replace` — for clarity, we pass “North” to this parameter so that in the
    future it’s clear what this method does (we know which value we are looking to
    replace;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value` — we pass an empty string “” here to specify that we want the method
    to replace “North” with nothing (essentially removing the substring from the original
    string);'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`regex` — we set this to “True”, which lets the Pandas method know that the
    string we pass to `to_replace` should be treated as a regular expression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code now returns a new edited Pandas Series:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ec7c38ecb2ff8b7850bc8571ed3c85be.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Replacing multiple substrings in a Pandas DataFme Series
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can now take our example further and look at replacing both the “North”
    and “South” substrings in the “Continent” column. To do so, you can pass a list
    of strings to the `to_replace` parameter instead of just a single string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2de0ee838a503d2d3273284cf8c366f4.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on the output, it looks like the code successfully removed “North” and
    “South” from values in the column where those substrings were present. However,
    if we take a closer look at the modified Series with `value_counts`, you’ll get
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/202409d76368694abf1f52703f670254.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: It’s a step in the right direction but not quite what we initially wanted as
    now we have “ America” for the replaced values. This is because the Pandas method
    is matching the exact string of either “North” or “South”, but the raw data actually
    includes a space after the substring.
  prefs: []
  type: TYPE_NORMAL
- en: Using regular expressions with the Pandas replace method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To fix that issue, we can instead explicitly pass a regular expression as an
    argument to `to_replace` that fits our initial needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, we pass to the `to_replace` parameter the regular expression `r"(North|South)
    "` which allows us to extract from the string values either the word “North” or
    the word “South” followed by a space.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, just as before, we replace that part of the string with nothing, effectively
    removing the substring from the original string. You can see the changes to the
    original Series below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5090e7fd61c1be739afb6551556cc1a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'To check the aggregate results, if we again append `value_counts` to the above,
    we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/753c6cab3458ea40795da3126abcd12a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have achieved our original goal of essentially combining “North America”
    and “South America” into one value “America” by using the replace method in Pandas!
  prefs: []
  type: TYPE_NORMAL
- en: We know this has worked as well because there were 31 values for “North America”
    and 6 values for “South America” in the original data set, as seen from the first
    time we ran `value_counts` on the continent column. When you’re implementing this
    kind of code for analysis, it would also be good to implement some kind of data
    validation or test to ensure that your processing is functioning as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Replacing values in multiple columns of a Pandas DataFrame in one function call
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also call the `replace` value on a DataFrame instead of a specific series.
    This can come in handy when you want to edit substrings that exist in multiple
    columns and replace them with the same value.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we could take a look at replacing all the punctuation in the DataFrame
    with something that’s easier to work with for analysis. Instead of having commas,
    parentheses, and dashes, it might be easier to work with the string data if all
    the punctuation were simply underscores.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, we could run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Previously, what we passed to `to_replace` was either a list or a string (and
    a regular expression string). This time, we take advantage of the `to_replace`
    method also accepting a dictionary as a valid argument.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we want to replace different values in a few columns of our initial
    DataFrame with an underscore. To specify this, we pass a dictionary where the
    keys are the names of the columns in the DataFrame and the values are the substrings
    we want to replace.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll notice that for the “Distance / In-Person” column, we pass a list as
    a value to that key. This is because we can still specify multiple values to match.
    We also pass lists for the “Institution” and “Location” columns, since to further
    clean the data we can remove the whitespace and also replace them with underscores.
  prefs: []
  type: TYPE_NORMAL
- en: We must also explicitly pass a string in the `value` parameter when using a
    dictionary in this way with the replace method, otherwise, an error will be raised.
    In this case, since we want to change all the punctuation to an underscore, we
    simply set `value="_"`. Then, just as before, to match substrings that may occur
    anywhere in the target values and not exact strings, we set `regex=True`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We assign this to a new cleaned DataFrame `edited_df` that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/16e1dcd3d600b9a8a846073df84bc51f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: We’ve now successfully edited the whole DataFrame in one function call and replaced
    the punctuation and whitespace in our target columns with underscores.
  prefs: []
  type: TYPE_NORMAL
- en: If you wanted to apply the changes you set to the original DataFrame without
    assigning it to a new variable as we did, the `replace` method also accepts an
    optional argument to the `inplace` parameter which you can set to “True” (because
    by default it’s set to “False”).
  prefs: []
  type: TYPE_NORMAL
- en: These were just a few examples to get you started. There’s a lot more you can
    do with the replace method in Pandas to work with all kinds of data types in your
    DataFrames.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some additional things to think about when working with this method:'
  prefs: []
  type: TYPE_NORMAL
- en: It’s good to have checks in place to make sure the `replace` method is working
    as intended. If your raw data changes over time, the initial code you wrote to
    match substrings may no longer work, and you may have to update the regular expressions
    that you wrote so that the output is what you expect;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more complicated operations where you’re matching on many different substrings
    or columns, you may want to define the dictionary separately instead of passing
    it directly in the `to_replace` parameter. This will offer better readability
    later on and then you would could also simply pass a variable like `values_to_replace`
    that contains the dictionary you defined with columns and substrings to match.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I hope you found the examples in this piece useful! Best of luck in your data
    adventures.
  prefs: []
  type: TYPE_NORMAL
- en: If you enjoy my content, consider following me and **signing up to become a
    Medium member** using my referral link below. It costs only $5 a month and you’ll
    get unlimited access to everything on Medium. Signing up using my link lets me
    earn a small commission. And if you’re already signed up to follow me, thanks
    a bunch for your support!
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://byrondolon.medium.com/membership?source=post_page-----330fe832dd21--------------------------------)
    [## Join Medium with my referral link - Byron Dolon'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: byrondolon.medium.com](https://byrondolon.medium.com/membership?source=post_page-----330fe832dd21--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '*M****ore by me:*** - [5 (and a half) Lines of Code for Understanding Your
    Data with Pandas](/5-and-a-half-lines-of-code-for-understanding-your-data-with-pandas-aedd3bec4c89?sk=7007a1ae248cf7ea4ef5fcd4af7ae72b)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- [Top 4 Repositories on GitHub to Learn Pandas](/top-4-repositories-on-github-to-learn-pandas-1008cb769f77?sk=d3acc38062490a86ecb46875342224e6)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- [Check for a Substring in a Pandas DataFrame](/check-for-a-substring-in-a-pandas-dataframe-column-4b949f64852?sk=bfb5bbab11ae45c47bfb316d931c3b56)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- C[onditional Selection and Assignment With .loc in Pandas](/conditional-selection-and-assignment-with-loc-in-pandas-2a5d17c7765b?sk=e5672d859a3964c1453a1c09edca22cf)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- [2 Easy Ways to Get Tables From a Website With Pandas](/2-easy-ways-to-get-tables-from-a-website-with-pandas-b92fc835e741?sk=9981ddaf0785a79be893b5a1dd3e03dd)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
