- en: How to Effectively Use Lambda Functions in Python as a Data Scientist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-effectively-use-lambda-functions-in-python-as-a-data-scientist-fd6171554053](https://towardsdatascience.com/how-to-effectively-use-lambda-functions-in-python-as-a-data-scientist-fd6171554053)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An introduction to their syntax, capabilities, and applicability in data science
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://thomasdorfer.medium.com/?source=post_page-----fd6171554053--------------------------------)[![Thomas
    A Dorfer](../Images/9258a1735cee805f1d9b02e2adf01096.png)](https://thomasdorfer.medium.com/?source=post_page-----fd6171554053--------------------------------)[](https://towardsdatascience.com/?source=post_page-----fd6171554053--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----fd6171554053--------------------------------)
    [Thomas A Dorfer](https://thomasdorfer.medium.com/?source=post_page-----fd6171554053--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----fd6171554053--------------------------------)
    ·7 min read·Mar 1, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bca7d99bc3361a6b91e7b7b30d88b872.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lambda functions in Python are small, **anonymous** (or nameless) functions
    characterized by a more concise syntax compared to regular Python functions.
  prefs: []
  type: TYPE_NORMAL
- en: Within the realm of data science, lambda functions are frequently used in conjunction
    with **higher-order functions**. These are functions that take one or more functions
    as arguments, or return a function as their result. Common examples include `map()`,
    `filter()`, and `reduce()`.
  prefs: []
  type: TYPE_NORMAL
- en: Before diving into the applications, let’s first take a look at the syntax of
    lambda functions.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to use a lambda function in Python, the following **four components**
    are required:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8567cc6dccff6764939133684174bd70.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author.
  prefs: []
  type: TYPE_NORMAL
- en: '**lambda:** The keyword that defines a lambda function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Arguments:** Lambda functions can take one or more arguments. If the number
    of arguments is more than one, they need to be separated by a comma.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Colon:** This serves as a separator between the function arguments and the
    expression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Expression:** A single and valid Python expressionwhich is going to be evaluated
    and returned as the result of the function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Applying this syntax, we can produce a simple example of a lambda function
    that takes two input arguments, `x`and `y`, and returns their sum:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: By using parentheses around the lambda function, we can make use of a principle
    called [immediately invoked function expression](https://en.wikipedia.org/wiki/Immediately_invoked_function_expression),
    which allows us to define and immediately execute a function.
  prefs: []
  type: TYPE_NORMAL
- en: Since a lambda function is an expression, we can also assign a name to it. Below
    is an example of the same function as above, but this time we call it `func`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have a better idea of the syntax of lambda functions, let’s take
    a look at some applications where they are frequently employed.
  prefs: []
  type: TYPE_NORMAL
- en: Applicability in Data Science
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within data science, lambda functions are most commonly applied alongside **higher-order
    functions**, which take one or more functions as arguments, or in nested functions
    called **closures** — more on that later.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now look at some concrete examples. Where practical, we will look at the
    applicability of lambda functions to both Python lists as well as Pandas data
    frames.
  prefs: []
  type: TYPE_NORMAL
- en: Data Transformation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagine you have a sample of extremely skewed data that you would like to do
    a log-transform on in order to decrease the skewness. Or you have some data in
    units of kilometers that you would like to transform to nautical miles. Things
    like these can be easily achieved through the application of lambda functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simplistic example of how to convert data in units of kilometers
    to nautical miles, using lambda functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that when applied to a list, we utilize the built-in [**map**](https://docs.python.org/3/library/functions.html#map)
    function, which takes as arguments a function (in our case, the lambda function)
    and an iterable (in our case, the list named `data_km`).
  prefs: []
  type: TYPE_NORMAL
- en: Filtering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Filtering is useful if you are only interested in a particular subset of your
    data. Suppose you have some healthcare data containing an age column and you are
    only interested in elderly patients above the age of 75\. Using the built-in [**filter**](https://docs.python.org/3/library/functions.html#filter)
    function, which also takes a function and an iterable as input arguments, this
    can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Sorting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lambda functions can be used to sort data based on certain criteria. For example,
    you can use a lambda function to sort a list or data frame based on a specific
    column.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example below, we have a list of names that we would like to sort by
    last name. This can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Grouping and Aggregation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Analyzing data at a group level can often help deriving meaningful insights
    into the differences between groups. Pandas data frames, along with the [**groupby**](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html)
    and [**agg**](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.agg.html)
    functions, are a commonly used framework for doing so.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose you have some clinical data containing information on patients who
    took part in an experiment that was divided into three groups: A, B, and C, each
    containing slightly different procedures. After performing the experiments and
    collecting the corresponding data, you would like to take a look at the fraction
    of patients assigned to each experimental group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This analysis would tell you that most patients were assigned to experimental
    group *A* (50%), followed by groups *B* (33.33%) and *C* (16.67%).
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, **groupby** can be used together with **agg** in order to apply
    different aggregate functions to different columns. In the example below, we are
    interested in group-level *mean* age, but *median* weight of patients.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Closures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Due to their short and concise syntax, lambda functions are frequently used
    within nested functions called [**closures**](https://en.wikipedia.org/wiki/Closure_(computer_programming)).
    Briefly, closures enable the access to variables of the outer function even after
    the outer function is closed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate this, let’s employ a closure to create a custom-defined multiplier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, the function `multiplier` returns a lambda function that “closes over”
    the variable `factor`. Specifically, when `multiplier` is called with an argument
    `factor`, it creates a new function that includes a reference to `factor` in its
    definition. This means that when the new function — stored in variables like `double`
    or `triple` for instance— is later called with some argument `x`, the function
    will still have access to the value of `factor` that was passed to `multiplier`.
  prefs: []
  type: TYPE_NORMAL
- en: Another application where this concept is useful is for solving quadratic functions.
    These are often utilized for things like the calculation of the trajectory of
    projectiles in physics, but are also frequently used in data analysis, optimization
    problems, and signal processing. Let’s take a look at some contrived example of
    a quadratic function describing the motion of a hypothetical projectile. The arbitrary
    inputs for `a`, `b`, and `c` were chosen to be -50, 450, and 0, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If we were to plot this for time values between 0 and 9, we would get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ad431a76738306db028bf76ffb8ff55d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Author.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope that this article gave you a better idea of how lambda functions can
    be effectively utilized in data science applications such as data transformation,
    filtering, sorting, grouping and aggregation, and closures.
  prefs: []
  type: TYPE_NORMAL
- en: More Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[4\. More Control Flow Tools — Python 3.11.2 documentation](https://docs.python.org/3/tutorial/controlflow.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Use Python Lambda Functions — Real Python](https://realpython.com/python-lambda/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Liked this article?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s connect! You can find me on [Twitter](https://twitter.com/ThomasADorfer)
    and [LinkedIn](https://www.linkedin.com/in/thomasdorfer/).
  prefs: []
  type: TYPE_NORMAL
- en: If you like to support my writing, you can do so through a [Medium Membership](https://thomasdorfer.medium.com/membership),
    which provides you access to all my stories as well as those of thousands of other
    writers on Medium.
  prefs: []
  type: TYPE_NORMAL
