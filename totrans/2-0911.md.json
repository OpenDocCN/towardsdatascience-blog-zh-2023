["```py\n<header>\n   <h1>Title</h1>\n   <p>subtitle</p>\n</header>\n```", "```py\n<header class=\"bg-primary text-white text-center py-2\">\n    <h1 class=\"display-4\">Title</h1>\n    <p class=\"lead\">subtitle</p>\n</header>\n```", "```py\n/project_name\n    |--- app.py\n    |\n    |--- /templates\n            |\n            |--- index.html\n```", "```py\npip install flask\n```", "```py\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    title = \"This is the title\"\n    return render_template('index.html', title=title)\n```", "```py\n<!DOCTYPE html>\n<html>\n<body>\n   <h1>{{title}}</h1>\n</body>\n</html>\n```", "```py\nflask run\n * Debug mode: off\nWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n * Running on http://127.0.0.1:5000\nPress CTRL+C to quit\n```", "```py\nfrom flask import Flask, request, jsonify, render_template\nimport json\nimport pandas as pd\nimport plotly.express as px\n\napp = Flask(__name__)\n\ndef get_graph(period = 'JJA'):\n    df = pd.read_csv('GlobalTemps1880-2022.csv')\n    fig = px.bar(df, x='Year', y = period, \n                 color=period, title = period, \n                 color_continuous_scale='reds', \n                 template='plotly_white', width=1000, height=500)\n\n    graphJSON = fig.to_json()\n    return json.dumps(graphJSON)\n\ndef template(params):\n    return render_template(params['template'], params=params)\n\n#### App ####\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n#### Simple template ####\n\n@app.route('/simple')\ndef simpleindex():\n    header = \"Global Temperature\"\n    subheader = \"Global Temperature changes over the last few centuries\"\n    description = \"\"\"The graph shows the increase in temperature year on year.\n    The data spans the years 1881 to 2022 and includes temperature anomalies \n    for the months June through August.\n    \"\"\"\n    params = {\n        'template':'simpleindex.html',\n        'title'   : header,\n        'subtitle': subheader,\n        'content' : description,\n        'graph'   : get_graph()\n    }\n    return template(params)\n\n#### Main ####\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```", "```py\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">\n    <script src='https://cdn.plot.ly/plotly-latest.min.js'></script>\n</head>\n<body>\n\n    <header class=\"bg-primary text-white text-center py-4\">\n        <h1 class=\"display-4\">{{ params.title }}</h1>\n        <p class=\"lead\">{{ params.subtitle }}</p>\n    </header>\n\n    <div id = 'content' class=\"container mt-4\">\n        <div id='chart'></div>\n        <div class=\"lead\">{{params.content}}</div>\n        </div>\n    <script type='text/javascript'>\n      var figure = JSON.parse({{params.graph | safe}})\n      Plotly.newPlot('chart', figure, {});\n    </script>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM\" crossorigin=\"anonymous\"></script>\n\n</body>\n</html>\n```", "```py\n <header>\n        <h1>{{ params.title }}</h1>\n        <p>{{ params.subtitle }}</p>\n    </header>\n\n    <div\">\n        <div id='chart'></div>\n        <div>{{params.content}}</div>\n    </div>\n    <script type='text/javascript'>\n      var figure = JSON.parse({{params.graph | safe}})\n      Plotly.newPlot('chart', figure, {});\n    </script>\n```", "```py\nvar figure = JSON.parse({{params.graph | safe}})\n```", "```py\n@app.route('/ddsimple')\ndef ddsimpleindex():\n    # The root endpoint builds the page\n    header = \"Global Temperature\"\n    subheader = \"Global Temperature changes over the last few centuries\"\n    description = \"\"\"The graph shows the increase in temperature year on year.\n    The data spans the years 1881 to 2022 and includes temperature anomalies for periods of each year as indicated.\n    \"\"\"\n    menu_label = \"Select a period\"\n\n    params = {    \n        'template': 'ddsimpleindex.html',\n        'title': header,\n        'subtitle': subheader,\n        'content' : description,\n        'menu_label': menu_label,\n        'options' : [{'code':'J-D', 'desc':'Whole year'},\n                     {'code':'DJF','desc':'Winter (North)'},\n                     {'code':'MAM','desc':'Spring (North)'},\n                     {'code':'JJA','desc':'Summer (North)'},\n                     {'code':'SON','desc':'Autumn/Fall (North)'}],\n        'graph'   : get_graph()\n    }\n    return template(params)\n```", "```py\n<form id=\"userForm\" name=\"form1\" onChange=\"getFormValues('form1')\">\n    <div class=\"mb-3\">\n        <label for=\"dropdown\" class=\"form-label lead\">{{params.menu_label}}</label>\n        <select class=\"form-select\" id=\"dropdown\" name=\"dropdown\">\n            {% for opt in params.options %}\n                <option value=\"{{opt.code}}\">{{opt.desc}}</option>\n            {% endfor %}\n        </select>\n    </div>\n</form>\n<div>\n    <!-- Main Content Area -->\n    <p class=\"lead\">{{params.content}}</p>\n</div>\n<div id=\"graph\"></div>\n```", "```py\n function getFormValues(f) {\n            const form = document.forms.namedItem(f);\n            const formData = new FormData(form);\n            const value = Object.fromEntries(formData.entries());\n            postJSON(value);\n        }\n```", "```py\n async function postJSON(data) {\n            try {\n                const response = await fetch(\"/callback\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify(data),\n                });\n\n                const result = await response.json();\n                console.log(\"Success:\");//, result);\n\n                drawGraph(result);\n            }\n            catch (error) {\n                console.error(\"Error:\", error);\n            }\n        }\n```", "```py\n@app.route('/callback', methods=['POST'])\ndef callback():\n    # The callback updates the page\n    if request.is_json:\n        data = request.get_json() \n        return get_graph(period=data['dropdown'])\n    else:\n        return jsonify({\"error\": \"Invalid JSON data\"}), 400\n```"]