["```py\n# number of persons\nn_persons <- 8\n```", "```py\n# create vector of initials\ninitials <- replicate(\n  n = n_persons, # number of replications\n  paste0(sample(LETTERS, size = 1), sample(LETTERS, size = 1)) # sample letters\n)# display initials\ninitials\n```", "```py\n## [1] \"UJ\" \"MN\" \"XD\" \"CY\" \"BB\" \"ZB\" \"CU\" \"HQ\"\n```", "```py\n# are there duplicates?\nany(duplicated(initials))\n```", "```py\n## [1] FALSE\n```", "```py\n# number of replications\nreps <- 1000\n```", "```py\n# create and save replications\ndat <- replicate(\n  n = reps, # number of replications\n  replicate(n_persons, paste0(sample(LETTERS, size = 1), sample(LETTERS, size = 1)))\n)# dimensions\ndim(dat)\n```", "```py\n## [1]    8 1000\n```", "```py\n# display first 4 simulated teams\ndat[, 1:4]\n```", "```py\n##      [,1] [,2] [,3] [,4]\n## [1,] \"VA\" \"BU\" \"LU\" \"PT\"\n## [2,] \"JG\" \"SM\" \"HM\" \"OL\"\n## [3,] \"BY\" \"NA\" \"VJ\" \"OT\"\n## [4,] \"RT\" \"CM\" \"WT\" \"YT\"\n## [5,] \"PS\" \"CT\" \"NB\" \"QJ\"\n## [6,] \"MG\" \"KR\" \"SV\" \"US\"\n## [7,] \"PL\" \"SN\" \"PN\" \"XW\"\n## [8,] \"NJ\" \"BR\" \"DD\" \"ZC\"\n```", "```py\n# rename rows\nrownames(dat) <- paste0(\"M\", 1:n_persons)\n```", "```py\n# rename columns\ncolnames(dat) <- paste0(\"T\", 1:reps)# display first 4 simulated teams\ndat[, 1:4]\n```", "```py\n##    T1   T2   T3   T4  \n## M1 \"VA\" \"BU\" \"LU\" \"PT\"\n## M2 \"JG\" \"SM\" \"HM\" \"OL\"\n## M3 \"BY\" \"NA\" \"VJ\" \"OT\"\n## M4 \"RT\" \"CM\" \"WT\" \"YT\"\n## M5 \"PS\" \"CT\" \"NB\" \"QJ\"\n## M6 \"MG\" \"KR\" \"SV\" \"US\"\n## M7 \"PL\" \"SN\" \"PN\" \"XW\"\n## M8 \"NJ\" \"BR\" \"DD\" \"ZC\"\n```", "```py\n# transform to data frame\ndat <- as.data.frame(dat)\n```", "```py\n# save which teams have duplicates\nduplicates <- rep(NA, reps) # create empty vector\nfor (i in 1:reps) { # for loop over i from 1 to 1,000\n  duplicates[i] <- any(duplicated(dat[, i])) # save results TRUE/FALSE in duplicates vector\n}# count how many teams have duplicates\nsum(duplicates)\n```", "```py\n## [1] 41\n```", "```py\n# create and save replications\ndat <- replicate(\n  n = reps, # number of replications\n  replicate(n_persons, paste0(sample(LETTERS, size = 1), sample(LETTERS, size = 1)))\n)\n```", "```py\n# transform to data frame\ndat <- as.data.frame(dat)# save which teams have duplicates\nduplicates <- rep(NA, reps) # create empty vector\nfor (i in 1:reps) { # for loop over i from 1 to 1,000\n  duplicates[i] <- any(duplicated(dat[, i])) # save results in the duplicates vector (as TRUE/FALSE)\n}# count how many teams have duplicates\nsum(duplicates)\n```", "```py\n## [1] 44\n```", "```py\ninitials <- function(n_persons, reps = 1000) {\n  # simulate data\n  dat <- as.data.frame(replicate(\n    reps,\n    replicate(n_persons, paste0(sample(LETTERS, size = 1), sample(LETTERS, size = 1)))\n  ))\n```", "```py\n # save which teams have duplicates\n  duplicates <- rep(NA, reps)\n  for (i in 1:reps) {\n    duplicates[i] <- any(duplicated(dat[, i]))\n  } # proportion of teams with duplicates\n  return(mean(duplicates))\n}\n```", "```py\n# compute and save probabilities\nprobs <- replicate(100, initials(n_persons = 8))\n```", "```py\n# display probabilities\nprobs\n```", "```py\n##   [1] 0.032 0.037 0.040 0.043 0.033 0.042 0.039 0.047 0.045 0.038 0.052 0.042\n##  [13] 0.042 0.040 0.023 0.044 0.041 0.039 0.036 0.048 0.041 0.037 0.027 0.030\n##  [25] 0.052 0.038 0.043 0.035 0.038 0.045 0.047 0.044 0.030 0.036 0.036 0.048\n##  [37] 0.038 0.045 0.044 0.034 0.031 0.043 0.045 0.034 0.049 0.047 0.051 0.036\n##  [49] 0.051 0.040 0.043 0.044 0.038 0.049 0.043 0.050 0.035 0.043 0.048 0.038\n##  [61] 0.041 0.044 0.039 0.045 0.033 0.057 0.036 0.043 0.041 0.041 0.041 0.041\n##  [73] 0.038 0.044 0.031 0.034 0.049 0.041 0.040 0.034 0.032 0.036 0.049 0.047\n##  [85] 0.048 0.038 0.038 0.037 0.036 0.037 0.043 0.040 0.026 0.049 0.046 0.044\n##  [97] 0.048 0.038 0.026 0.029\n```", "```py\n# visualize distribution of the computed probabilities\n# build and save plots\nlibrary(ggplot2)\n```", "```py\np1 <- ggplot(mapping = aes(x = probs)) +\n  geom_histogram(color = \"black\", fill = \"steelblue\", bins = 8) +\n  labs(\n    x = \"Probabilities\",\n    y = \"Frequencies\"\n  ) +\n  scale_x_continuous(labels = scales::percent) # format x-axis in %p2 <- ggplot(mapping = aes(x = probs)) +\n  geom_boxplot(color = \"black\", fill = \"steelblue\") +\n  labs(x = \"Probabilities\") +\n  theme(\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank()\n  ) +\n  scale_x_continuous(labels = scales::percent) # format x-axis in %# combine plots\nlibrary(patchwork)p1 + p2\n```", "```py\n# set lower and upper bounds of number of persons\nmin_persons <- 2\nmax_persons <- 100\n```", "```py\n# create empty vector of probabilities\nprobs <- rep(NA, length(min_persons:max_persons))# compute and save probabilities for teams of size 2 to 100\nfor (i in min_persons:max_persons) {\n  probs[i] <- initials(n_persons = i)\n}# display probabilities\nprobs\n```", "```py\n##   [1]    NA 0.001 0.005 0.013 0.012 0.019 0.036 0.040 0.047 0.057 0.074 0.083\n##  [13] 0.103 0.128 0.158 0.166 0.178 0.215 0.232 0.260 0.275 0.296 0.300 0.329\n##  [25] 0.357 0.392 0.405 0.405 0.439 0.478 0.495 0.536 0.535 0.563 0.578 0.599\n##  [37] 0.653 0.656 0.686 0.693 0.715 0.711 0.767 0.760 0.786 0.784 0.814 0.817\n##  [49] 0.825 0.826 0.842 0.845 0.867 0.893 0.901 0.920 0.919 0.911 0.917 0.942\n##  [61] 0.950 0.951 0.946 0.947 0.969 0.959 0.965 0.964 0.977 0.984 0.977 0.977\n##  [73] 0.985 0.978 0.986 0.981 0.989 0.991 0.989 0.988 0.992 0.993 0.994 0.996\n##  [85] 0.997 0.995 0.994 0.999 0.999 0.999 1.000 0.999 0.997 1.000 0.999 0.999\n##  [97] 0.999 1.000 1.000 0.999\n```", "```py\n# create data frame with saved probabilities and number of persons\ndat_plot_sim <- data.frame(\n  n_persons = (min_persons - 1):max_persons,\n  prob = probs\n)\n```", "```py\n# display first 6 rows\nhead(dat_plot_sim)\n```", "```py\n##   n_persons  prob\n## 1         1    NA\n## 2         2 0.001\n## 3         3 0.005\n## 4         4 0.013\n## 5         5 0.012\n## 6         6 0.019\n```", "```py\n# set proba = 1 when n_person = 1\ndat_plot_sim[1, 2] <- 0\n```", "```py\n# display first 6 rows\nhead(dat_plot_sim)\n```", "```py\n##   n_persons  prob\n## 1         1 0.000\n## 2         2 0.001\n## 3         3 0.005\n## 4         4 0.013\n## 5         5 0.012\n## 6         6 0.019\n```", "```py\n# visualize probabilities\nggplot(dat_plot_sim) +\n  aes(x = n_persons, y = probs) +\n  geom_line(linewidth = 1) +\n  labs(\n    x = \"# of persons in the team\",\n    y = \"Probability\",\n    title = \"What is the probability that at least 2 persons have the same initials?\"\n  ) +\n  scale_y_continuous(labels = scales::percent) # format y-axis in %\n```", "```py\n# define function\nhave_same <- function(s, n) {\n  sample_space <- s\n  probability <- 1\n  for (i in 0:(n - 1)) {\n    probability <- probability * (sample_space - i) / sample_space\n  }\n  1 - probability\n}\n```", "```py\n# number of possible two-letter initials\nn_initials <- 26^2\n```", "```py\n# apply function\nhave_same(n_initials, n_persons)\n```", "```py\n## [1] 0.0407218\n```", "```py\n# compute and save probabilities for teams between 1 and 100 persons\nprobs <- vector(length = max_persons)\nfor (i in 1:max_persons) {\n  probs[i] <- have_same(n_initials, i)\n}\n```", "```py\n# create data frame with saved probabilities and number of persons\ndat_plot_theory <- data.frame(\n  n_persons = (min_persons - 1):max_persons,\n  prob = probs\n)# display first 6 rows\nhead(dat_plot_theory)\n```", "```py\n##   n_persons        prob\n## 1         1 0.000000000\n## 2         2 0.001479290\n## 3         3 0.004433493\n## 4         4 0.008851688\n## 5         5 0.014716471\n## 6         6 0.022004071\n```", "```py\n# visualize probabilities\nggplot(dat_plot_theory) +\n  aes(x = n_persons, y = probs) +\n  geom_line(linewidth = 1) +\n  labs(\n    x = \"# of persons in the team\",\n    y = \"Probability\",\n    title = \"What is the probability that at least 2 persons have the same initials?\"\n  ) +\n  scale_y_continuous(labels = scales::percent) # format y-axis in %\n```", "```py\n# combine the two data frames into one and add the method as variable\ndat_plot_sim$Method <- \"Simulations\"\ndat_plot_theory$Method <- \"Theory\"\ndat_plot_all <- rbind(dat_plot_sim, dat_plot_theory)\n```", "```py\n# visualize probabilities on same plot\nggplot(dat_plot_all) +\n  aes(x = n_persons, y = prob, color = Method) +\n  geom_line(linewidth = 1) +\n  labs(\n    x = \"# of persons in the team\",\n    y = \"Probability\",\n    title = \"What is the probability that at least 2 persons have the same initials?\"\n  ) +\n  scale_y_continuous(labels = scales::percent) # format y-axis in %\n```"]