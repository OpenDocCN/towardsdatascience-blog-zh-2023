["```py\ndef split(self, X: np.array, y: np.array, groups: np.array):\n    \"\"\"Generate indices to split data into training and test set, excluding data in groups with value '-1'.\n\n    boosted sample data == '-1' in the ``groups`` parameter\n    random sample data != '-1' in the ``groups`` parameter\n\n    Args:\n        X (ndarray): array-like of shape (n_samples, n_features)\n            Training data, where `n_samples` is the number of samples and `n_features` is the number of features.\n        y (ndarray): array-like of shape (n_samples,),\n            The target variable for supervised learning problems.\n        groups (ndarray): array-like of shape 1d: '-1' for elements to be excluded\n\n    Yields:\n        train (ndarray): The training set indices for that split.\n        test (ndarray): The testing set indices for that split.\n    \"\"\"\n    # separate boosted sample data that have group ``-1``, from random sample data\n    boosted_indices = np.where(groups == -1)[0]\n    random_indices = np.where(groups != -1)[0]\n\n    skf = StratifiedKFold(n_splits=self.n_splits, shuffle=self.shuffle)\n    # split the randomly sampled indices that are to be included in the test-set in ``n_splits`` splits\n    stratified_random_splits = skf.split(X[random_indices], y[random_indices])\n\n    random_sampled = [0] * len(random_indices)\n    boosted_sampled = [-1] * len(boosted_indices)\n\n    # converts the random stratified split test-set indices to the ``n_splits`` enumeration\n    for split_nr, (_, testing_indices) in enumerate(stratified_random_splits):\n        # defines which random sample datapoint is in which test-fold\n        for test_idx in testing_indices:\n            random_sampled[test_idx] = split_nr\n\n    # concatenate the randomly sampled split numbers and the boosted sampling split numbers\n    predefined_splits = random_sampled + boosted_sampled\n    # boosted samples are not accounted for in the test-fold splits\n    ps = PredefinedSplit(test_fold=predefined_splits)\n\n    return ps.split(X)\n```"]