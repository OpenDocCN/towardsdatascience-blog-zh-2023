- en: Important MySQL Data Definition Language (DDL) commands we should know for managing
    our tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/learn-common-database-managing-commands-as-a-data-engineer-4d199cfb15ae](https://towardsdatascience.com/learn-common-database-managing-commands-as-a-data-engineer-4d199cfb15ae)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn common database managing commands as a data engineer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://lynn-kwong.medium.com/?source=post_page-----4d199cfb15ae--------------------------------)[![Lynn
    G. Kwong](../Images/b9a05b6587db5ca41c1d8264adda5b06.png)](https://lynn-kwong.medium.com/?source=post_page-----4d199cfb15ae--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4d199cfb15ae--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4d199cfb15ae--------------------------------)
    [Lynn G. Kwong](https://lynn-kwong.medium.com/?source=post_page-----4d199cfb15ae--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4d199cfb15ae--------------------------------)
    ·8 min read·Feb 28, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9ab632bea48c228ba8500f79c5cc4dc1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by geralt on Pixabay
  prefs: []
  type: TYPE_NORMAL
- en: As a data engineer, checking and updating the schemas of tables is our bread
    and butter. There are plenty of tutorials online already but few of them focus
    on the conventions that should be followed. SQL is very flexible and can work
    in a “robust” way. You can use both lowercase and uppercase queries and name your
    database/tables/columns/indexes/views in whatever way you want. However, the price
    is that the readability is reduced and it becomes difficult to maintain because
    different people may have different ways of writing SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: In this post, we will introduce some common commands for managing table schemas
    in MySQL, with a focus on the convention and best practices for each operation.
    It can work as a handbook (with necessary adjustments) for new data engineers.
  prefs: []
  type: TYPE_NORMAL
- en: Preparation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use Docker to start a MySQL 8 container which will work as the MySQL
    server for this post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We will create our database (also called schemas in MySQL) and tables in this
    MySQL server. To get started, let’s create a database to store our dummy data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A database name should be descriptive, concise, and clear and contain no special
    characters except underscores. It should preferably be lowercase so we can tell
    it easily from MySQL keywords. The same naming convention applies to table and
    column names.
  prefs: []
  type: TYPE_NORMAL
- en: We will use DBeaver to write queries and view table data in this post.
  prefs: []
  type: TYPE_NORMAL
- en: Create a table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s now create our first table which will store customer data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can use singular or plural table names. I prefer plural as a table can be
    thought of as a container for data records.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data definition language (DDL) query for an existing table can be found
    by this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It’s recommended to specify the schema name when writing queries so you can
    have better support for auto-completion.
  prefs: []
  type: TYPE_NORMAL
- en: By default, MySQL is case-sensitive regarding database names, table names, and
    aliases. However, it is case-insensitive for column names. Therefore, it can be
    very flexible for the naming of column names. However, we should stick to some
    naming convention for the same database. It doesn’t matter whether you use a camel
    case or a snake case, you just need to be consistent. However, you may have some
    preferences depending on your backend programming language. For example, as Python
    developers, we would prefer the snake case.
  prefs: []
  type: TYPE_NORMAL
- en: Besides, as you see we give the prefix `ix` (meaning index) to the index name.
    We should generally avoid giving prefixes for column names in order to make the
    queries more concise. However, we should provide prefixes for indexes or constraints
    so they can be more indicative when shown in some errors. We would rarely need
    to reference indexes or constraints explicitly so being concise is not a problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some commonly used prefixes are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ix` for indexes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fk` for foreign key constraints.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uq` for unique key constraints.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Besides, there are some conventions regarding how the indexes or constraints
    should be named:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Indexes: `ix_%(column_0_label)s`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Foreign keys: `fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unique keys: `uq_*%(table_name)s*_*%(column_0_name)s*`,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will introduce some of them later in this post.
  prefs: []
  type: TYPE_NORMAL
- en: Rename or duplicate a table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can use the `RENAME` command to rename a table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If you want to duplicate a table from one schema to another one, you would need
    to do it in two steps. For example, let’s create a new `customers_data` schema
    and duplicate the `customers` table there.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In this way, the data type and indexes of the old table will be kept in the
    new table. If you do it as shown below using `CREATE TABLE … SELECT…` then the
    data type (actually will be inferred) and indexes will be lost, which is not desired
    in almost all cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can use the `SHOW CREATE TABLE` command to check the schema of the new table
    created.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need to move a table from one database (different host or port) to another
    one, you can dump the table into a SQL file on one host, and then load it into
    the other one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`mysqldump` is available after you have installed the MySQL client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The hosts can be the same for the two databases. In this case, the port would
    be different.
  prefs: []
  type: TYPE_NORMAL
- en: Note the options specified for `mysqldump`, which are needed in most cases.
    Especially, with `--single-transaction`, the table won’t be locked when it’s being
    dumped.
  prefs: []
  type: TYPE_NORMAL
- en: Add/Delete/Change columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For a demonstration of the commands, let’s perform the following actions. The
    operations may not make much sense, the focus is on the commands used:'
  prefs: []
  type: TYPE_NORMAL
- en: Delete the `name` column with `DROP`,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the `name` column back with `ADD`,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the data type of a column with `MODIFY`;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note that we can use the `AFTER column_name`keyword to change the order of the
    columns. If a column should be changed to be the first one, then we need to use
    the `FIRST` keyword rather than `AFTER column_name`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let’s change the `name` column to be the first one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Rename a column
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can just rename a column without changing the data type using `RENAME COLUMN
    A TO B`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `COLUMN` keyword can be omitted for the `ADD`, `DROP`, `MODIFY`,
    as well as the `CHANGE` command to be introduced, but not for the `RENAME` command
    here.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also use the `CHANGE` command to rename a column and also change the
    data type. Let’s change `name` to `username` and also change the length to 100:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Work with foreign keys
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s create two new tables to demonstrate the usage of foreign keys. A new
    `products` table will store the products info and an `orders` table the orders
    made by customers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `id` column has no prefix in the `customers` and `products` tables
    but has in the `orders` table. This is needed because there are two IDs there,
    one for the customer and another for the product.
  prefs: []
  type: TYPE_NORMAL
- en: If you check the data types of the `id` columns, you will find they are the
    same as those in the `customers` and `products` tables. This is required for adding
    foreign keys, as the data type of the column must be the same in the current table
    and in the reference table.
  prefs: []
  type: TYPE_NORMAL
- en: A composite primary key was created using `customer_id` and `product_id`. Note
    that we need to create a separate index for `product_id`, but not for `customer_id`,
    which is covered by the composite primary key because it’s the first one in the
    composite key.
  prefs: []
  type: TYPE_NORMAL
- en: Also pay attention to the naming convention for the foreign key constraints,
    which follows the naming convention introduced in [this link](https://docs.sqlalchemy.org/en/14/core/constraints.html#configuring-a-naming-convention-for-a-metadata-collection).
  prefs: []
  type: TYPE_NORMAL
- en: 'To check the indexes of a table, we can run one of the following two queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the above queries do not return foreign keys. If we need to check
    the foreign keys, we need to run this query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note that the two special tables `INFORMATION_SCHEMA.STATISTICS` and `INFORMATION_SCHEMA.KEY_COLUMN_USAGE`
    are system tables and are normally referenced in uppercase.
  prefs: []
  type: TYPE_NORMAL
- en: Add and delete indexes and constraints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s demonstrate how to add and delete indexes and constraints. We cannot modify
    an index or constraint because once the condition is changed for an index/constraint,
    it has to be regenerated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s first drop the primary key, indexes, and foreign keys for the `orders`
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note the way we specify how a foreign key should be dropped. It should be `DROP
    FOREIGN KEY …`, rather than `DROP CONSTRAINT …`.
  prefs: []
  type: TYPE_NORMAL
- en: 'And now let’s add them back:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The syntax is similar to that in the DDL query above.
  prefs: []
  type: TYPE_NORMAL
- en: Create or update a view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A MySQL view works just like a table and is treated like a table. A view normally
    contains some selected columns from one or more tables based on some filtering
    conditions. It can be used to quickly check some specific data from one or more
    tables without writing `JOIN` and `WHERE` conditions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a view for the `orders` table so we can get the details of the
    customers and products for the orders directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The name of a view should be indicative of its usage. In this case, `orders_with_details`
    is better than `orders_view` as the former is more indicative of what’s contained
    in the view.
  prefs: []
  type: TYPE_NORMAL
- en: Standards for writing SQL queries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We should write SQL queries in an easy-to-read way. There is no strict standard
    for how to write SQL queries. However, following the rules below will make your
    queries much easier to read and maintain:'
  prefs: []
  type: TYPE_NORMAL
- en: Put all SQL keywords in uppercase.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Put all database names, columns, and aliases in lowercase.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide standard acronyms as aliases for your tables. For example, `products`
    => `p`, `product_attributes` => `pa`, etc. Don’t use arbitrary table aliases as
    they will make the queries much more difficult to read.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start `SELECT`, `FROM,` `JOIN`, `WHERE`, `GROUP BY`, `ORDER BY`, etc statements
    on a new line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start each `ON` and `AND` conditions on a new line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The same formatting standard applies to nested queries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can format your SQL queries automatically in DBeaver or VS code (with some
    SQL extensions). However, the formatting is not perfect and we normally need to
    make some manual adjustments based on the rules above.
  prefs: []
  type: TYPE_NORMAL
- en: In this post, we have introduced some common and handy commands for managing
    table schemas in MySQL. We have covered how databases, tables, columns, indexes,
    and views should be created and updated, with a focus on the convention and best
    practices for each operation which can work as starting guidance for new data
    engineers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Related articles:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Some Tips for Using DBeaver — A Universal Database Tool](/some-tips-for-using-dbeaver-a-univeral-database-tool-94af18d50671)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understand the basics of locks and deadlocks in MySQL (Part I)](https://lynn-kwong.medium.com/understand-the-basics-of-locks-and-deadlocks-in-mysql-part-i-92f229db0a)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
