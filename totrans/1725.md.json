["```py\nclass StringDict(dict):\n    def __setitem__(self, key, value):\n        super().__setitem__(key, str(value))\n```", "```py\n>>> class StringDict(dict):\n...     def __setitem__(self, key, value):\n...         super().__setitem__(key, str(value))\n... \n>>> mydict = StringDict(first=1, second=2, third=3)\n>>> mydict\n{'first': 1, 'second': 2, 'third': 3}\n```", "```py\n>>> from collections import UserDict\n>>> class StringUserDict(UserDict):\n...     def __setitem__(self, key, value):\n...         super().__setitem__(key, str(value))\n... \n>>> mydict = StringUserDict(first=1, second=2, third=3)\n>>> mydict\n{'first': '1', 'second': '2', 'third': '3'}\n```", "```py\n import rounder\nimport timeit\nimport pprint\n\ndef compare(\n    __snippet1,\n    __snippet2,\n    *args,\n    number=10_000_000,\n    repeat=7,\n    setup=\"from collections import UserDict\"):\n    snippets = [__snippet1, __snippet2, *args]\n    results = {}\n    for i, snippet in enumerate(snippets):\n        name = snippet if len(snippet) < 30 else f\"snippet {i + 1}\"\n        results[name] = min(timeit.repeat(\n            snippet, number=number, repeat=repeat, setup=setup\n            )) / number,\n    results = rounder.signif_object(results, digits=4)\n    pprint.pprint(results)\n```", "```py\n>>> compare(\"UserDict()\", \"dict()\", \"{}\")\n{'UserDict()': (1.278e-07,), 'dict()': (3.826e-08,), '{}': (1.518e-08,)}\n```", "```py\n>>> compare(\n    \"UserDict({i: i**2 for i in range(1000)})\",\n    \"{i: i**2 for i in range(1000)}\",\n    number=100_000)\n{'snippet 1': (0.0001316,), 'snippet 2': (5.027e-05,)}\n```", "```py\n>>> setup = \"\"\"from collections import UserDict\n... d = {'x': 1, 'y': 2, 'z': 3}\n... ud = UserDict(d)\n... \"\"\"\n>>> compare(\"ud['x']\", \"d['x']\", setup=setup)\n{\"ud['x']\": (4.754e-08,), \"d['x']\": (1.381e-08,)}\n```", "```py\n>>> setup = \"\"\"from collections import UserDict\n... d = {str(i): i for i in range(10_000)}\n... ud = UserDict(d)\n... \"\"\"\n>>> compare(\"ud['9999']\", \"d['9999']\", setup=setup, number=1_000_000)\n{\"ud['9999']\": (7.785e-08,), \"d['9999']\": (2.787e-08,)}\n```", "```py\n>>> compare(\"ud['9999']\", \"d['9999']\", setup=setup, number=100_000)\n{\"ud['9999']\": (6.662e-08,), \"d['9999']\": (2.499e-08,)}\n```", "```py\n>>> compare(\n...     \"ud.get('a', None)\",\n...     \"d.get('a', None)\",\n...     setup=setup,\n...     number=1_000_000)\n{\"d.get('a', None)\": (4.318e-08,), \"ud.get('a', None)\": (4.525e-07,)}\n```", "```py\n>>> compare(\"'a' in ud\", \"'a' in d\", setup=setup, number=1_000_000)\n{\"'a' in d\": (1.465e-08,), \"'a' in ud\": (4.562e-08,)}\n```", "```py\n>>> setup = \"\"\"from collections import UserDict\n... d = {str(i): i for i in range(10)}\n... ud = UserDict(d)\n... \"\"\"\n>>> compare(\n...     \"for i, v in ud.items(): pass\",\n...     \"for i, v in d.items(): pass\",\n...     setup=setup,\n...     number=1_000_000\n... )\n{'for i, v in d.items(): pass': (1.726e-07,),\n 'for i, v in ud.items(): pass': (1.235e-06,)}\n\n>>> setup = \"\"\"from collections import UserDict\n... d = {str(i): i for i in range(10_000)}\n... ud = UserDict(d)\n... \"\"\"\n>>> compare(\n...     \"for i, v in ud.items(): pass\",\n...     \"for i, v in d.items(): pass\",\n...     setup=setup,\n...     number=10_000\n... )\n{'for i, v in d.items(): pass': (0.0001255,),\n 'for i, v in ud.items(): pass': (0.00112,)}\n\n>>> setup = \"\"\"from collections import UserDict\n... d = {str(i): i for i in range(100_000)}\n... ud = UserDict(d)\n... \"\"\"\n>>> compare(\n...     \"for i, v in ud.items(): pass\",\n...     \"for i, v in d.items(): pass\",\n...     setup=setup,\n...     number=10_000\n... )\n{'for i, v in d.items(): pass': (0.001772,),\n 'for i, v in ud.items(): pass': (0.01718,)}\n```", "```py\nfrom collections.abc import Sequence\nfrom typing import Callable\n\ndef try_calculate(func: Callable, *args, **kwargs):\n    \"\"\"Try calculations; when data are incorrect, return nan.\"\"\"\n    try:\n        return func(*args, **kwargs)\n    except TypeError:\n        return float(\"nan\")\n\nclass RichDict(dict):\n    measures = {\n        \"sum\": sum,\n        \"n\": len,\n        \"mean\": lambda x: sum(x) / len(x),\n    }\n\n    def summarize(self):\n        statistics = {}\n        for k, v in self.items():\n            if isinstance(v, str):\n                statistics[k] = {\"n\": len(v)}\n            elif isinstance(v, Sequence):\n                statistics[k] = {\n                    name: try_calculate(func, v)\n                    for name, func\n                    in self.measures.items()\n                }\n        return statistics\n```", "```py\nRichDict.measures[\"min\"] = min\nRichDict.measures[\"max\"] = max\n```", "```py\nRichDict.measures[\"max-to-mean\"] = lambda x: max(x) / min(x)\n```", "```py\ndef max_to_min(x: float) -> float:\n    return max(x) / min(x)\n\nRichDict.measures[\"max-to-mean\"] = max_to_min\n```", "```py\n>>> d = RichDict(x=[1,4,5,7],\n...              y=[1,\"1\",2],\n...              z=\"Shout Bamalama!\",\n...              f=10)\n>>> \n>>> stats = d.summarize()\n>>> stats # doctest: NORMALIZE_WHITESPACE\n{'x': {'sum': 17, 'n': 4, 'mean': 4.25, 'min': 1, 'max': 7, 'max-to-min': 7},\n 'y': {'sum': nan, 'n': 3, 'mean': nan, 'min': nan, 'max': nan, 'max-to-min': nan},\n 'z': {'n': 15}}\n```", "```py\n>>> compare(\"UserDict()\", \"RichDict()\", \"dict()\", setup=setup)\n{'UserDict()': (2.236e-07,), 'RichDict()': (1.073e-07,), 'dict()': (5.892e-08,)}\n```", "```py\n>>> compare(\n...     \"UserDict({i: i**2 for i in range(1000)})\",\n...    \"RichDict({i: i**2 for i in range(1000)})\",\n...    \"{i: i**2 for i in range(1000)}\",\n...    number=100_000,\n...    setup=setup)\n{'snippet 1': (0.0001765,), # UserDict\n 'snippet 2': (6.845e-05,), # RichDict\n 'snippet 3': (5.388e-05,)} # dict\n```", "```py\n>>> setup += \"\"\"d = {'x': 1, 'y': 2, 'z': 3}\n... ud = UserDict(d)\n... rd = RichDict(d)\n... \"\"\"\n>>> compare(\"ud['x']\", \"rd['x']\", \"d['x']\", setup=setup)\n{\"ud['x']\": (5.111e-08,), rd['x']\": (3.024e-08,), \"d['x']\": (1.475e-08,)}\n\n>>> compare(\n...     \"'a' in ud\",\n...     \"'a' in rd\",\n...     \"'a' in d\",\n...     setup=setup,\n...     number=1_000_000)\n{\"'a' in d\": (1.366e-08,),  # dict\n \"'a' in rd\": (2.228e-08,), # RichDict\n \"'a' in ud\": (4.436e-08,)} # UserDict\n\n>>> compare(\n...     \"ud.get('a', None)\",\n...     \"rd.get('a', None)\",\n...     \"d.get('a', None)\",\n...     setup=setup,\n...     number=1_000_000)\n{\"d.get('a', None)\": (1.935e-08,),  # dict\n \"rd.get('a', None)\": (3.016e-08,), # RichDict\n \"ud.get('a', None)\": (5.125e-07,)} # UserDict\n\n>>> compare(\n...     \"for i, v in ud.items(): pass\",\n...     \"for i, v in rd.items(): pass\",\n...     \"for i, v in d.items(): pass\",\n...     setup=setup,\n...     number=1_000\n... )\n{'for i, v in d.items(): pass': (0.001783,),\n 'for i, v in rd.items(): pass': (0.001743,),\n 'for i, v in ud.items(): pass': (0.01627,)}\n```", "```py\nfrom collections.abc import Sequence\nfrom typing import Callable\n\nclass RichDict(dict):\n    measures_seq = {\n        \"sum\": sum,\n        \"n\": len,\n        \"mean\": lambda x: sum(x) / len(x),\n    }\n    measures_str = {\n        \"n\": len,\n    }\n\n    def summarize(self):\n        statistics = {}\n        for k, v in self.items():\n            if isinstance(v, str):\n                measures = self.measures_str\n            elif isinstance(v, Sequence):\n                measures = self.measures_seq\n            else:\n                continue\n            statistics[k] = {\n                name: try_calculate(func, v)\n                for name, func\n                in measures.items()\n            }\n        return statistics\n\nNaN = float(\"nan\")\n\ndef try_calculate(func: Callable, *args, **kwargs):\n    \"\"\"Try calculations and when the data are incorrect, return nan.\"\"\"\n    try:\n        return func(*args, **kwargs)\n    except TypeError:\n        return NaN\n```"]