["```py\n# backend/app/main.py\nimport asyncio\nimport logging\nfrom datetime import datetime\n\nfrom fastapi import FastAPI, WebSocket, WebSocketDisconnect\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(\"FastAPI app\")\n\napp = FastAPI()\n\nasync def heavy_data_processing(data: dict):\n    \"\"\"Some (fake) heavy data processing logic.\"\"\"\n    await asyncio.sleep(2)\n    message_processed = data.get(\"message\", \"\").upper()\n    return message_processed\n\n# Note that the verb is `websocket` here, not `get`, `post`, etc.\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    # Accept the connection from a client.\n    await websocket.accept()\n\n    while True:\n        try:\n            # Receive the JSON data sent by a client.\n            data = await websocket.receive_json()\n            # Some (fake) heavey data processing logic.\n            message_processed = await heavy_data_processing(data)\n            # Send JSON data to the client.\n            await websocket.send_json(\n                {\n                    \"message\": message_processed,\n                    \"time\": datetime.now().strftime(\"%H:%M:%S\"),\n                }\n            )\n        except WebSocketDisconnect:\n            logger.info(\"The connection is closed.\")\n            break\n```", "```py\nuvicorn main:app --reload --host 0.0.0.0 --port 8000\n```", "```py\nnpm install -g @angular/cli@15.1.2\n```", "```py\nng new frontend\n```", "```py\n// frontend/src/app/websocket.service.ts\nimport { Injectable } from '@angular/core';\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\nimport { environment } from '../environments/environment';\n\ninterface MessageData {\n  message: string;\n  time?: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WebSocketService {\n  private socket$!: WebSocketSubject<any>;\n  public receivedData: MessageData[] = [];\n\n  public connect(): void {\n    if (!this.socket$ || this.socket$.closed) {\n      this.socket$ = webSocket(environment.webSocketUrl);\n\n      this.socket$.subscribe((data: MessageData) => {\n        this.receivedData.push(data);\n      });\n    }\n  }\n\n  sendMessage(message: string) {\n    this.socket$.next({ message });\n  }\n\n  close() {\n    this.socket$.complete();\n  }\n}\n```", "```py\n// frontend/src/app/app.component.ts\nimport { Component, OnDestroy } from '@angular/core';\nimport { WebSocketService } from './websocket.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent implements OnDestroy {\n  message = '';\n\n  constructor(public webSocketService: WebSocketService) {\n    this.webSocketService.connect();\n  }\n\n  sendMessage(message: string) {\n    this.webSocketService.sendMessage(message);\n  }\n\n  ngOnDestroy() {\n    this.webSocketService.close();\n  }\n}\n```", "```py\n<!-- frontend/src/app/app.component.html -->\n<h2>Send a message to the server:</h2>\n<form (ngSubmit)=\"sendMessage(message); message = ''\">\n  <input [(ngModel)]=\"message\" name=\"message\" type=\"text\" autocomplete=\"off\" />\n  <button type=\"submit\" style=\"margin-left: 10px;\">Send</button>\n</form>\n\n<h2>Received messages from the server:</h2>\n<ul>\n  <li *ngFor=\"let data of webSocketService.receivedData\">\n    {{ data.time }}: {{ data.message }}\n  </li>\n</ul>\n```", "```py\n# backend/Dockerfile\nFROM python:3.11\n\nWORKDIR /app\n\nCOPY ./requirements.txt /app/requirements.txt\n\nRUN pip install --no-cache-dir --upgrade -r /app/requirements.txt\n\nCOPY ./app /app\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n```", "```py\n# backend/requirements.txt\nfastapi>=0.89.0,<0.90.0\nuvicorn[standard]>=0.20.0,<0.21.0\n```", "```py\n# ./docker-compose.yaml\nversion: \"3.9\"\n\nservices:\n  fastapi_app:\n    build:\n      context: ./backend\n    image: fastapi_app:latest\n    ports:\n      - target: 8000\n        published: 8000\n    volumes:\n      - type: bind\n        source: ./backend/app\n        target: /app\n    networks:\n      - websocket\n\n  angular:\n    image: node:18.13.0-alpine\n    working_dir: /frontend\n    ports:\n      - target: 4200\n        published: 4200\n    volumes:\n      - type: bind\n        source: ./frontend\n        target: /frontend\n    networks:\n      - websocket\n    command: npm start\n\nnetworks:\n  websocket:\n    name: websocket\n    driver: bridge\n```", "```py\ndocker-compose build\ndocker-compose up -d\n```", "```py\nsudo lsof -i -P -n | grep LISTEN\n```"]