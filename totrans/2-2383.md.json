["```py\nimport math\n\nprint(math.pi)\n```", "```py\n3.141592653589793\n```", "```py\nfrom decimal import Decimal\nfrom math import sqrt\n\ndef pi():\n    return Decimal(9801) / (Decimal(1103) * Decimal(sqrt(8)))\n\npi()\n```", "```py\nDecimal('3.141592730013305445560728363')\n```", "```py\n# Increase float precision to 1000\nfrom decimal import getcontext\n\ngetcontext().prec = 1000\n```", "```py\n%%time\n\napproximation = pi()\n```", "```py\nCPU times: user 14 µs, sys: 2 µs, total: 16 µs\nWall time: 16.2 µs\n```", "```py\ngetcontext().prec = 1_000_000\n```", "```py\n%%time\n\napproximation = pi()\n```", "```py\nCPU times: user 3.18 ms, sys: 0 ns, total: 3.18 ms\nWall time: 3.18 ms\n```", "```py\n# One billion digit precision\ngetcontext().prec = 1_000_000_000\n```", "```py\n%%time\n\napproximation = pi()\n```", "```py\nCPU times: user 3.04 s, sys: 301 ms, total: 3.34 s\nWall time: 3.32 s\n```", "```py\n# I got this from the Internet\nverified_pi = Decimal(3.1415926535897932384626433832795028841971)\nrounded_pi = round(approximation, 50)\n\nprint(verified_pi)\nprint(rounded_pi)\n```", "```py\n3.141592653589793115997963468544185161590576171875\n3.14159273001330544556072836229812077562268642913720\n```", "```py\n0.1 + 0.1 + 0.10.30000000000000004\n```", "```py\nimport time\n\ndef timer(func):\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        execution_time = end_time - start_time\n        print(f\"Execution time: {execution_time} seconds\")\n        return result\n\n    return wrapper\n```", "```py\nimport decimal\n\n@timer\ndef chudnovsky_to_file(n_digits):\n    decimal.getcontext().prec = n_digits + 1\n    C = 426880 * decimal.Decimal(10005).sqrt()\n    K = 6.0\n    M = 1.0\n    X = 1\n    L = 13591409\n    S = L\n\n    for i in range(1, n_digits):\n        M = M * (K**3 - 16 * K) / ((i + 1) ** 3)\n        L += 545140134\n        X *= -262537412640768000\n        S += decimal.Decimal(M * L) / X\n\n    pi = C / S\n\n    with open(\"pi_digits.txt\", \"w\") as file:\n        file.write(str(pi) + \"\\n\")\n```", "```py\nn_digits = 1000\n\nchudnovsky_to_file(n_digits)\n```", "```py\nExecution time: 1.8556151390075684 seconds\n```", "```py\ndef gospers_pi():\n    q, r, t, n, i = 1, 0, 1, 8, 1\n    while True:\n        if n == (q * (675 * i - 216) + 125 * r) // (125 * t):\n            yield n\n            q, r = 10 * q, 10 * r - 10 * n * t\n        else:\n            q, r, t, i = (\n                i * (2 * i - 1) * q,\n                3 * (3 * i + 1) * (3 * i + 2) * ((5 * i - 2) * q + r),\n                3 * (3 * i + 1) * (3 * i + 2) * t,\n                i + 1,\n            )\n        n = (q * (27 * i - 12) + 5 * r) // (5 * t)\n```", "```py\n@timer\ndef gospers_to_file(n_digits):\n\n    with open(\"pi_digits.txt\", \"w\") as file:\n        pi = gospers_pi()\n        for n in range(n_digits + 1):\n            if n == 0:  # Put the dot after 3\n                file.write(str(next(pi)) + \".\")\n            else:\n                file.write(str(next(pi)))\n```", "```py\nn_digits = 1000\n\ngospers_to_file(n_digits)\n```", "```py\nExecution time: 0.012832880020141602 seconds\n```", "```py\nn_digits = 1_000_000\n\ngospers_to_file(n_digits)\n```", "```py\nExecution time: 20107.50238442421 seconds\n```"]