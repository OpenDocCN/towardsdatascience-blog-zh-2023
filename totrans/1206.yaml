- en: How to Interpret Logistic Regression Coefficients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-interpret-logistic-regression-coefficients-db9381379ab3](https://towardsdatascience.com/how-to-interpret-logistic-regression-coefficients-db9381379ab3)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Calculating mean marginal effects of logistic regression coefficients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@jarom.hulet?source=post_page-----db9381379ab3--------------------------------)[![Jarom
    Hulet](../Images/0fdeb1a2df90cccdd8f2f4b84d5e54eb.png)](https://medium.com/@jarom.hulet?source=post_page-----db9381379ab3--------------------------------)[](https://towardsdatascience.com/?source=post_page-----db9381379ab3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----db9381379ab3--------------------------------)
    [Jarom Hulet](https://medium.com/@jarom.hulet?source=post_page-----db9381379ab3--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----db9381379ab3--------------------------------)
    ·10 min read·Aug 24, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6b8de6ded7e16028cbbbdf6fbf4cd355.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Dominika Roseclay on Pexels.com
  prefs: []
  type: TYPE_NORMAL
- en: Do you love logistic regression, but hate interpreting anything with any form
    of logarithmic transformation? Well, I can’t say you are in good company, but
    I can say that you do have *me* as company!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, I’m going to talk all about interpreting logistic regression
    coefficients — here’s the outline:'
  prefs: []
  type: TYPE_NORMAL
- en: Interpreting *linear* regression coefficients
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why logistic regression coefficient interpretation is challenging
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to interpret logistic regression coefficients
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculating mean marginal effects with the *statsmodels* package
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Interpreting linear regression coefficients**'
  prefs: []
  type: TYPE_NORMAL
- en: Most people with an elementary knowledge of statistics fully understand how
    coefficients are interpreted with linear regression. If that is you, you might
    consider skipping ahead to the portion of the article that discusses logistic
    regression coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: Interpreting linear regression coefficients is very simple and easy. The simplicity
    of interpretation is one of the reasons linear regression is still a very popular
    tool despite the advent of much more sophisticated algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Simple linear regression (linear regression with one input variable) takes
    this form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5ae797891819951411430121de31ad61.png)'
  prefs: []
  type: TYPE_IMG
- en: We are primarily interested in interpreting ***B***₁. For linear regression,
    this interpretation is simple — for a one-unit change in *x*, we expect a ***B***₁
    change in *y*. Another phrase for this relationship is the ‘mean marginal effect’.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at an example of how we can interpret ***B***₁ using simulation.
    Simulation is a great tool to test data science tools/approaches because we make
    the baseline truth and then see if our methods are able to identify it.
  prefs: []
  type: TYPE_NORMAL
- en: In the code below, we are simulating 30,000 rows of *x* values. We simulate
    the *x* values by sampling from a normal distribution with the parameters of our
    choosing (in this case a mean of 2 and standard deviation of 0.2). We then simulate
    *y* by multiplying *x* by our simulated impact of 0.16 and then we add random
    error; also using sampling form a normal distribution (mean = 0, standard deviation
    = 2).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what we see when we print the coefficient that the linear regression
    created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/033a815a601c30ab308aeaa542397daf.png)'
  prefs: []
  type: TYPE_IMG
- en: Nice! That is pretty close to 0.16\. If we want to make sure that our coefficient
    estimate is unbiased, we simulate the dataset multiple times and look at the distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Looking at the histogram we can see that distribution is centered around 0.16,
    meaning that our coefficient estimate is unbiased, which is pretty cool!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/69ec65948da5508fafdfde61ee13f234.png)'
  prefs: []
  type: TYPE_IMG
- en: image by author
  prefs: []
  type: TYPE_NORMAL
- en: This whole process is way too easy for linear regression, let’s challenge ourselves
    and start looking at logistic regression!
  prefs: []
  type: TYPE_NORMAL
- en: '**Why logistic regression coefficient interpretation is challenging**'
  prefs: []
  type: TYPE_NORMAL
- en: Logistic regression is a linear based model like linear regression, but it has
    a transformation performed on it which keeps the predicted value, *y,* between
    0 and 1\. Doing this allows logistic regression to predict probabilities of a
    target variable belonging to a category.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the form of a binary logistic regression:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b4d0e87f739f14b42d0977f9cbb1016e.png)'
  prefs: []
  type: TYPE_IMG
- en: While this transformation does wonders for adapting linear regression to predicting
    probabilities, it destroys our ability to directly interpret the coefficients
    as mean marginal effects!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s simulate some binary data to demonstrate. In the code below, we are following
    the same process as the linear regression simulation, except after *y* has been
    simulated, we use sampling from a uniform distribution to make *y* a 1 or a 0\.
    (Note: we are doubling up on the randomness here, because we are manually adding
    error through a normal distribution and then the process of converting *y* to
    binary also adds some random noise to the simulation).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now that we’ve simulated the data, let’s run a logistic regression and see what
    our coefficient looks like.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8d41ac8f0c87235ba69c52b068704979.png)'
  prefs: []
  type: TYPE_IMG
- en: What??? That isn’t a good feeling at all. That coefficient is nowhere close
    to the correct answer of 0.16 that we created!
  prefs: []
  type: TYPE_NORMAL
- en: But just to be sure, let’s run it a thousand times and look at the distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1a9c8c60c1246276d4dffdf32c2fff12.png)'
  prefs: []
  type: TYPE_IMG
- en: image by author
  prefs: []
  type: TYPE_NORMAL
- en: It looks like our first run was not an outlier. The coefficient is centered
    far from our simulated impact of 0.16\. Of course, this is because logistic regression
    coefficients can’t be directly interpreted in the same way as linear regression
    coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss what we can do to interpret logistic regression
    coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: '**How to interpret logistic regression coefficients**'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, let’s talk about the sign of logistic regression coefficients.
    Good news — the signs are interpretable! If the sign is positive, the probability
    of belonging to the corresponding category is increasing with an increase in *x*
    — and vice versa for negative signs. This can be very helpful. Imagine you are
    developing a model to predict if a customer will purchase a product. You can check
    the intuition of the model by observing if the coefficient for price is negative
    (meaning a customer is less likely to purchase a product as the price goes up).
    While the actual value of the number may be some logarithmically transformed mumbo-jumbo,
    at least you can understand if the model is making directional sense.
  prefs: []
  type: TYPE_NORMAL
- en: But how can we get to a mean marginal effect for the logistic coefficients?
    Calculus my friend, calculus.
  prefs: []
  type: TYPE_NORMAL
- en: We want to understand how *y* changes with a change in *x.* Derivatives do just
    that! Let’s take the partial derivative of our logistic regression function with
    respect to *x:*
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/34b288286f0fe5e02271e4c7bfd79b67.png)'
  prefs: []
  type: TYPE_IMG
- en: One of the big takeaways here is that *x* is in its own partial derivative.
    Meaning that how much *y* moves with a unit move in *x* depends on the level of
    *x* itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: Mean marginal effect for linear regression is calculated the same way.
    We just don’t think of it like that because the partial derivative with respect
    to *x* is simply the constant ***B***₁.'
  prefs: []
  type: TYPE_NORMAL
- en: So, now we have a way of understanding how a unit movement in *x* changes *y,*
    but *x* is a part of the equation. How do we get to the mean marginal effect?
    Unfortunately we can’t get there without a reference dataset. We will plug in
    all of the *x’s* from our reference data set and calculate the average output
    of our partial derivative. This will finally get us to our mean marginal effect!
    If our reference data set is representative of our population, we can say that
    our calculation should be an unbiased estimate of the true mean marginal effect
    for the logistic regression model.
  prefs: []
  type: TYPE_NORMAL
- en: Armed with this knowledge, let’s run the simulation again, but this time calculate
    the mean marginal effect using the partial derivate we calculated.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9a260cd3ef1f459f6386dfc9c2f10b59.png)'
  prefs: []
  type: TYPE_IMG
- en: image by author
  prefs: []
  type: TYPE_NORMAL
- en: Beautiful! We see that elusive 0.16 value, what a relief! We now know the process
    of interpreting logistic regression coefficients and how to calculate them manually!
    Of course, calculating these effects manually is not very practical, especially
    as we start adding more *x’s* into our model. Luckily, the *statsmodels* package
    in Python has a built-in method for calculating the mean marginal effect. I’ll
    share an example in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: '**Calculating mean marginal effects with the *statsmodels* package**'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the *margeff* method of the *Logit* class from *statsmodels* to
    calculate the mean marginal effect. The code is below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s take a look at the average mean marginal effect for the 1000 simulations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/32504c846af7ea0952902a193f605863.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Great, they line up with our expectations! Let’s take a quick look at the distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5e31f17a4fe8bcb866743a0baf5b5645.png)'
  prefs: []
  type: TYPE_IMG
- en: image by author
  prefs: []
  type: TYPE_NORMAL
- en: Fantastic! This looks very similar (it will be a little different because of
    the randomness in the simulation process) to when we did the calculations manually.
    That’s a good feeling!
  prefs: []
  type: TYPE_NORMAL
- en: '**Conclusion**'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding what logistic regression coefficients mean can be a little tricky.
    We can estimate their mean marginal effect by plugging all *x* values from a reference
    dataset into the partial derivative of the logistic regression equation. Taking
    the average of these marginal effects results in the mean marginal effect. The
    *statsmodels.Logit* class has a method for calculating mean marginal effects without
    us having to calculate any partial derivatives. In practice you should use *statsmodels*
    (or any other package or software that calculates it for you) but now you know
    exactly what the code is doing under the hood!
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully you’ve developed a deeper understanding of logistic regression and
    how we can interpret the impact of individual predictors in logistic regression.
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to github repo: [https://github.com/jaromhulet/logistic_regression_interpretation](https://github.com/jaromhulet/logistic_regression_interpretation)'
  prefs: []
  type: TYPE_NORMAL
