- en: Building a LAS File Data Explorer App with Streamlit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/building-a-las-file-data-explorer-app-with-streamlit-347289e0d000](https://towardsdatascience.com/building-a-las-file-data-explorer-app-with-streamlit-347289e0d000)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exploring Log ASCII Standard files using Python and Streamlit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://andymcdonaldgeo.medium.com/?source=post_page-----347289e0d000--------------------------------)[![Andy
    McDonald](../Images/df11d647be032aeb3d31852affb33a64.png)](https://andymcdonaldgeo.medium.com/?source=post_page-----347289e0d000--------------------------------)[](https://towardsdatascience.com/?source=post_page-----347289e0d000--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----347289e0d000--------------------------------)
    [Andy McDonald](https://andymcdonaldgeo.medium.com/?source=post_page-----347289e0d000--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----347289e0d000--------------------------------)
    ·14 min read·Feb 3, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c6d1f16ce8d9cc0c63a877d3f82c55e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Carlos Muza](https://unsplash.com/fr/@kmuza?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: LAS files are standard and simple ways to transfer and store well-log and/or
    petrophysical data within the oil and gas industry. The format was developed in
    the late 80s and early 90s by the [Canadian Well Logging Society](https://www.cwls.org/products/#products-las)
    as a way to standardise and organise digital log information. LAS files are essentially
    structured ASCII files that contain multiple sections with information about the
    well and data from it; as such, they can be readily viewed within a typical text
    editor like Notepad or TextEdit.
  prefs: []
  type: TYPE_NORMAL
- en: '[Streamlit](https://streamlit.io/) is one of my favourite Python libraries
    for creating quick and easy to use dashboards or interactive tools. It is also
    great if you want to create an app where you or the end user doesn’t have to worry
    about code. Therefore, within this article, we are going to see how we can use
    Streamlit to build a data explorer app for LAS files.'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to see the full app in action, check out the short video below.
  prefs: []
  type: TYPE_NORMAL
- en: 'Or explore the source code on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/andymcdgeo/las_explorer?source=post_page-----347289e0d000--------------------------------)
    [## GitHub - andymcdgeo/las_explorer: LAS Explorer is a Streamlit web app that
    allows you to understand…'
  prefs: []
  type: TYPE_NORMAL
- en: LAS Explorer is a Streamlit web app that allows you to understand the contents
    of a LAS file. Also includes the ability…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/andymcdgeo/las_explorer?source=post_page-----347289e0d000--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to see how to work with LAS files in Python, then the following
    articles may be of interest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Loading and Displaying Well Log Data from LAS Files With Python](https://medium.com/@andymcdonaldgeo/loading-and-displaying-well-log-data-b9568efd1d8)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Loading Multiple Well Log LAS Files Using Python](https://medium.com/towards-data-science/loading-multiple-well-log-las-files-using-python-39ac35de99dd)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and Setting Up Streamlit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first part of our app will involve importing the required libraries and
    modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Streamlit](https://streamlit.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[lasio](https://lasio.readthedocs.io/en/latest/) for loading las files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[missingno](https://github.com/ResidentMario/missingno) which is used for identifying
    missing data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[pandas](https://pandas.pydata.org/) for working with dataframes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[StringIO](https://docs.python.org/3/library/io.html) from io to handle content
    from the las file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[plotly](https://plotly.com/) for displaying interactive plots'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After importing these libraries, we can add a line at the end to set the page
    width to be a full page and change the app's title in the browser window.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To check Streamlit is working, we can run the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Which will open up a browser window with a blank Streamlit app.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ce56ef96bf1ce36e5180e244365386a2.png)'
  prefs: []
  type: TYPE_IMG
- en: Blank Streamlit app. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Loading LAS Files with st.file_uploader
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first piece of code we are going to add to this app is a call to `st.sidebar`.
    This will create a column on the left-hand side of the app, and we will use this
    to store our navigation menu and file uploader widget.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We can use `st.sidebar.write` to add a few messages and instructions for the
    end user. In this example, we will keep it relatively simple with the app name
    and a message on how to get started.
  prefs: []
  type: TYPE_NORMAL
- en: Once the sidebar is in place, we can start implementing the file uploader piece
    of our code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To do this, we need to call upon `st.file_uploader`. We will also restrict the
    file types to just .las files. To make this more useful, we may want to include
    the capitalised version of the extension as well.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will call upon the load data function, which we will come to shortly.
    This function will be set up to return `las_file` as a [lasio](https://lasio.readthedocs.io/en/latest/)
    las file object and `well_data` as dataframe containing the well log measurements.
  prefs: []
  type: TYPE_NORMAL
- en: Following that, we will check if we have a las file. If it is set to `None`
    then nothing will happen; however, if the file has been loaded successfully through
    the `load_data` function, then it will not be `None` and therefore execute the
    code underneath it.
  prefs: []
  type: TYPE_NORMAL
- en: The code within the if function essentially displays a coloured callout followed
    by the well name of the las file.
  prefs: []
  type: TYPE_NORMAL
- en: Before we run the Streamlit app, we need to create the `load_data` function.
    This will allow us to read the data and generate the lasio las file object and
    pandas dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When we run the Streamlit LAS Data Explorer app, we will see our sidebar on
    the left along with the file uploader widget.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e007770c957c92d2c3c6141ad56f5809.png)'
  prefs: []
  type: TYPE_IMG
- en: After adding the sidebar to the LAS File Data Explorer Streamlit app. Image
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We can then click on Browse Files and search for a las file.
  prefs: []
  type: TYPE_NORMAL
- en: Once that file has been loaded, we will see the green callout saying the file
    was loaded successfully, followed by the well name contained within the file.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/51bdd3a62af01037c708cb0bb5093e0c.png)'
  prefs: []
  type: TYPE_IMG
- en: Successful LAS file read with the LAS Data Explorer Streamlit app. Image by
    the author.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Home Page to the Streamlit App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When someone launches the LAS Data Explorer app for the first time, it would
    be great to display the app's name and a brief description of what it does.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When we rerun the app, we will now see our home page. This could be expanded
    to include extra instructions, details about the app and how to get in touch if
    there is a problem.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d1dd6594adfb16e968d7d2fea2d2b605.png)'
  prefs: []
  type: TYPE_IMG
- en: LAS Data Explorer Streamlit App after creating a Home page. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: When building a Streamlit app, it is good practice to split code up into functions
    and call them at the appropriate time. This makes the code more modular and easier
    to navigate.
  prefs: []
  type: TYPE_NORMAL
- en: For our home page, we will place the above code into a function called `home()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Adding Navigation Radio Buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When building Streamlit apps, it is very easy to fall into the trap of continuously
    adding sections one after the other resulting in a long scrollable web page.
  prefs: []
  type: TYPE_NORMAL
- en: One way to make Streamlit apps more navigable is by adding a navigation menu.
    This allows you to split content over multiple pages.
  prefs: []
  type: TYPE_NORMAL
- en: One way to achieve this is to use a series of radio buttons, which, when toggled,
    will change the content displayed on the main part of the app.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need assign a title for our navigation section, and then we have to
    call upon `st.sidebar.radio` and pass in a list of pages we want the user to be
    able to navigate to.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When we run the app, we will see that we now have a navigation menu represented
    by the radio buttons.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6c2ca513cc7fcdf569e9f48ebab903d9.png)'
  prefs: []
  type: TYPE_IMG
- en: LAS Data Explorer after adding in a radio button navigation menu. Image by the
    author.
  prefs: []
  type: TYPE_NORMAL
- en: At the moment, if you click on the buttons, nothing will happen.
  prefs: []
  type: TYPE_NORMAL
- en: We need to tell Streamlit what to do when a selection is made.
  prefs: []
  type: TYPE_NORMAL
- en: This is achieved by creating an if/elif statement like the one below. When an
    option is selected, then a specific function will be called.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if the user has Home selected, then the home function that was
    created earlier will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Let’s begin implementing the other sections to start displaying some content.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving Well Header Information from LAS Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within each las file, there is a section at the top that contains information
    about the well. This includes Well Name, Country, Operator and much more.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3b4294ef005e261350ab4b7d7fbd200f.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of a LAS file header from the Volve field. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: To read this information, we will create a new function called `header` and
    then loop through each row within the header.
  prefs: []
  type: TYPE_NORMAL
- en: To prevent errors when the user clicks on the Header Information radio button,
    we need to check if a las file object has been created during the loading process.
    Otherwise, we present the user with an error.
  prefs: []
  type: TYPE_NORMAL
- en: Then for each header item, we will display the descriptive name ( `item.descr`
    ), the mnemonic ( `item.mnemonic` ) and the associated value ( `item.value` ).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: When the app is rerun, and the Header Information page is selected from the
    Navigation menu, we will now see the relevant well information.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/71b233ef386247fe9b6f0ddae9f4160c.png)'
  prefs: []
  type: TYPE_IMG
- en: Well log header information from a LAS file. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving Well Log Measurement Information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the header information has been successfully read, we next want to look
    at what well log measurements are contained within the las file.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we will create a simple function called `raw_data` which will:'
  prefs: []
  type: TYPE_NORMAL
- en: go through each measurement within the las file and write out it’s mnemonic,
    unit and description
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: provide a count of the total number of measurements present
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: create a statistical summary table for each measurement using the `describe`
    method from pandas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: create a data table with all of the raw values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is a lot for a single function to do and could benefit from being tidied
    up, but for this simple app, we will keep it all together.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: When the Streamlit app is rerun, we will see all of the information relating
    to the well log measurements.
  prefs: []
  type: TYPE_NORMAL
- en: First, we have the well measurement information and associated statistics.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7fb388fbacd25a036973c9e73523bfa7.png)'
  prefs: []
  type: TYPE_IMG
- en: LAS Well Log Measurement information. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Followed by the raw data values.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c585ed15258da4b1499594eada13a222.png)'
  prefs: []
  type: TYPE_IMG
- en: LAS Well Log Measurement information. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Visualising Well Log Data With Plotly in Streamlit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with any dataset, it can be hard to get a handle on what the data looks like
    by analysing the raw numbers. To take things to the next level, we can use interactive
    plots.
  prefs: []
  type: TYPE_NORMAL
- en: These will make it easier for the end user to get a better understanding of
    the data.
  prefs: []
  type: TYPE_NORMAL
- en: The following code generates multiple plots on a Streamlit page. It is all contained
    within a single function for ease of use within this app. Remember, each function
    represents a page within the LAS Data Explorer app.
  prefs: []
  type: TYPE_NORMAL
- en: 'To save having to use multiple pages, the code below will generate three expanders
    for three different plots: a line plot, a histogram and a scatter plot (also known
    as a cross plot within Petrophysics).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Once the above code has been implemented, we can see that we have the LAS File
    Visualisation page with three expandable boxes.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b2277d27b9176219e7f258401c21e79d.png)'
  prefs: []
  type: TYPE_IMG
- en: Within geoscience and petrophysics, we often plot data on line plots — often
    referred to as log plots. The y-axis often represents the depth along a wellbore
    and the x-axis representing the data we want to visualise. This allows us to visualise
    trends and patterns within these measurements with depth easily.
  prefs: []
  type: TYPE_NORMAL
- en: Within the Log Plot section, we can select specific columns from the dataframe
    and display them in the interactive Plotly chart.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fa2de2c2f4c290464a6c3795e6f31432.png)'
  prefs: []
  type: TYPE_IMG
- en: Well log plots created using Plotly and displayed in the LAS Data Explorer Streamlit
    app. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: '[Histograms show the data distribution and allow us to contain a large amount
    of data within a small and concise plot.](/using-histograms-to-visualise-well-log-data-16142e2c7f81)'
  prefs: []
  type: TYPE_NORMAL
- en: Within the Histogram section, we have a few basic options. We can select a column
    from the dataframe to display and decide whether we want that displayed linearly
    or logarithmically.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have the option to use the colour picker from Streamlit. [This allows
    you to choose the colour for the histogram](https://medium.com/p/7929973393ea)
    and can enhance your visualisation for presentations and reports.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dc03b53c1ec75ba918ff8c6971dffdb4.png)'
  prefs: []
  type: TYPE_IMG
- en: Histogram created using Plotly within the LAS Data Explorer Streamlit app. Image
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: '[Scatter plots (crossplots) are commonly used within petrophysics and data
    science to compare two variables.](https://medium.com/towards-data-science/scatterplot-creation-and-visualisation-with-matplotlib-in-python-7bca2a4fa7cf)
    From this type of graph, we can understand if there is a relationship between
    the two variables and how strong that relationship is.'
  prefs: []
  type: TYPE_NORMAL
- en: Within the Crossplot section of the Data Visualisation page, we can select x
    and y axis variables, as well as a third variable, to colour code the data.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we can set the x and y axes to linear scale or logarithmic scale.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/348f7963bd9b23693ef3cc99d207eaeb.png)'
  prefs: []
  type: TYPE_IMG
- en: Scatter plot / crossplot created using Plotly within the LAS Data Explorer Streamlit
    app. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying Missing Data within Well Log Measurements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Missing data is one of the most common data quality issues we face when working
    with datasets. It can be missing for a multitude of reasons ranging from sensor
    failure to improper and possible careless data management.
  prefs: []
  type: TYPE_NORMAL
- en: When working with datasets, it is essential that missing data is identified
    and the root cause behind that data being missing is understood. A proper understanding
    of why data is missing is key to developing pragmatic solutions on how to deal
    with the missing data, especially as many machine learning algorithms are incapable
    of handling missing values.
  prefs: []
  type: TYPE_NORMAL
- en: Within Python, we could use the textual data summaries provided by the pandas
    `describe` function. Whilst this is useful, it often helps to visualise missing
    data values on graphs. This allows us to easily identify patterns and relationships
    that may not be obvious with text based summaries.
  prefs: []
  type: TYPE_NORMAL
- en: To create interactive plots of data completeness, we can leverage the [Plotly
    library](https://plotly.com/). The code below sets up the Missing Data Visualisation
    page within the LAS Data Explorer app.
  prefs: []
  type: TYPE_NORMAL
- en: First, we check if we have a valid las file; if we do, we start creating the
    page with some explanatory text.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we give the user an option to select all data within the dataframe or
    select specific columns. To the right of this, we allow the user to change the
    colour of the bars in the charts.
  prefs: []
  type: TYPE_NORMAL
- en: Then we move onto to plotting the data based on the user selection.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: When we visit this page of the LAS Data Explorer, we are presented with an interactive
    Plotly chart, as seen below. if the user has selected “All Data”, then all the
    columns will show.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/05ec22356a228b728c275d467e1467f0.png)'
  prefs: []
  type: TYPE_IMG
- en: Using a Streamlit to display all columns from a pandas dataframe in a plotly
    chart. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: If a user has selected “Custom Selection” then they can select the columns directly
    from the dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f58d870090025380fb3466a42ec3e98a.png)'
  prefs: []
  type: TYPE_IMG
- en: Using a Streamlit multiselect to select columns from a dataframe and display
    them in a plotly chart. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out my article below if you want to see other ways of identifying missing
    values using Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using the missingno Python Library to Identify and Visualise Missing Data
    Prior to Machine Learning](/using-the-missingno-python-library-to-identify-and-visualise-missing-data-prior-to-machine-learning-34c8c5b5f009)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within this article, we have seen how to build an app using Streamlit and Python
    for exploring LAS files. Whilst this is a basic app, it can provide a useful alternative
    to looking at raw LAS files within a text editor. Additional functionality could
    be added to edit the files or convert them to another standard format. The possibilities
    are endless!
  prefs: []
  type: TYPE_NORMAL
- en: Data Used Within This Tutorial
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The data used within this tutorial is a subset of the Volve Dataset that Equinor
    released in 2018\. Full details of the dataset, including the licence, can be
    found at the link below.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://www.equinor.com/energy/volve-data-sharing?source=post_page-----347289e0d000--------------------------------)
    [## Volve field data set'
  prefs: []
  type: TYPE_NORMAL
- en: Equinor has offically made a complete set of data from a North Sea oil field
    available for research, study and…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.equinor.com](https://www.equinor.com/energy/volve-data-sharing?source=post_page-----347289e0d000--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'The Volve data license is based on CC BY 4.0 license. Full details of the license
    agreement can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cdn.sanity.io/files/h61q9gi9/global/de6532f6134b9a953f6c41bac47a0c055a3712d3.pdf?equinor-hrs-terms-and-conditions-for-licence-to-data-volve.pdf](https://cdn.sanity.io/files/h61q9gi9/global/de6532f6134b9a953f6c41bac47a0c055a3712d3.pdf?equinor-hrs-terms-and-conditions-for-licence-to-data-volve.pdf=)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks for reading. Before you go, you should definitely subscribe to my content
    and get my articles in your inbox.* [***You can do that here!***](https://andymcdonaldgeo.medium.com/subscribe)*Alternatively,
    you can* [***sign up for my newsletter***](https://fabulous-founder-2965.ck.page/2ca286e572)
    *to get additional content straight into your inbox for free.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Secondly, you can get the full Medium experience and support thousands of
    other writers and me by signing up for a membership. It only costs you $5 a month,
    and you have full access to all of the fantastic Medium articles, as well as the
    chance to make money with your writing.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you sign up using* [***my link***](https://andymcdonaldgeo.medium.com/membership)***,***
    *you will support me directly with a portion of your fee, and it won’t cost you
    more. If you do so, thank you so much for your support.*'
  prefs: []
  type: TYPE_NORMAL
