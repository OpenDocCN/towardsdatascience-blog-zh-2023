- en: Mastering Configuration Management in Machine Learning with Hydra
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/mastering-configuration-ml-with-hydra-ef138f1c1852](https://towardsdatascience.com/mastering-configuration-ml-with-hydra-ef138f1c1852)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Mastering Machine Learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Delve into real-world examples to transform configuration management in your
    ML applications**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://jvision.medium.com/?source=post_page-----ef138f1c1852--------------------------------)[![Joseph
    Robinson, Ph.D.](../Images/3117b65a4e10752724585d3457343695.png)](https://jvision.medium.com/?source=post_page-----ef138f1c1852--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ef138f1c1852--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ef138f1c1852--------------------------------)
    [Joseph Robinson, Ph.D.](https://jvision.medium.com/?source=post_page-----ef138f1c1852--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ef138f1c1852--------------------------------)
    ·18 min read·Jun 15, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to “Mastering Configuration Management in Machine Learning with Hydra”!
    This comprehensive tutorial is designed to take you from the basics of Hydra to
    advanced techniques for managing configurations in your ML projects. We will also
    explore the integration of Hydra with high-performance computing environments
    and popular machine-learning frameworks. Whether a machine learning novice or
    a seasoned practitioner, this tutorial will equip you with the knowledge and skills
    to supercharge your machine learning workflow.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0b40f058fc68be31777fd5f49573a055.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure created by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Table of Contents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: · [I. Introduction](#3e40)
  prefs: []
  type: TYPE_NORMAL
- en: · [II. Hydra Basics](#c530)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Installation of Hydra](#0161)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Anatomy of a Hydra Application](#ed02)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Understanding Hydra’s Main Components](#6984)
  prefs: []
  type: TYPE_NORMAL
- en: · [III. Hierarchical Configurations](#4655)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Defining and Understanding Hierarchical Configuration Files](#caf2)
  prefs: []
  type: TYPE_NORMAL
- en: · [IV. Configuration Groups](#d9b5)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Understanding the Concept of Configuration Groups](#ed56)
  prefs: []
  type: TYPE_NORMAL
- en: '∘ [Defining Different Setups: Development, Staging, Production](#320a)'
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Showcasing the Impact on Reproducibility and Debugging](#a5d8)
  prefs: []
  type: TYPE_NORMAL
- en: · [V. Dynamic Configurations](#fefe)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Explanation of Dynamic Configurations](#9d6c)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Creating Rules for Dynamic Adjustment of Hyperparameters](#20b7)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Implementing Dynamic Configurations in a Machine Learning Context](#100b)
  prefs: []
  type: TYPE_NORMAL
- en: · [VI. Environment Variables](#4559)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [The Need for Environment Variables in Hydra](#c8ca)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Handling Sensitive or Frequently Changing Data](#eddd)
  prefs: []
  type: TYPE_NORMAL
- en: '∘ [Using Environment Variables in Hydra: A Step-by-Step Guide](#03cd)'
  prefs: []
  type: TYPE_NORMAL
- en: · [VII. Configuring Logging](#05f4)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [The Importance of Logging in Machine Learning Experiments](#d6fb)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Using Hydra to Configure Python’s Logging Framework](#9f2e)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [How to Create Log Files for Different Modules with Varying Levels of Verbosity](#21b5)
  prefs: []
  type: TYPE_NORMAL
- en: · [VIII. Multirun and Sweeps](#fb4a)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Introduction to Hydra’s Multirun Feature](#d030)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Designing and Configuring Hyperparameter Sweeps](#ee4a)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Applying Multirun and Sweeps to Machine Learning Projects](#c1d9)
  prefs: []
  type: TYPE_NORMAL
- en: · [IX. Error Handling](#7b11)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Importance of Error Handling in Configuration Management](#31e2)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Using Hydra for Advanced Error Handling](#d3fa)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Customizing Behavior for Missing or Incorrect Configurations](#841a)
  prefs: []
  type: TYPE_NORMAL
- en: · [X. Command Line Overrides](#fc64)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Understanding Command Line Overrides in Hydra](#b65d)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Modifying Configurations at Runtime Using Command Line Arguments](#d57b)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Practical Examples of Using Command Line Overrides in Machine Learning Experiments](#97bc)
  prefs: []
  type: TYPE_NORMAL
- en: · [XI. Using Hydra on a Slurm-Based HPC Cluster](#64fc)
  prefs: []
  type: TYPE_NORMAL
- en: '∘ [Hydra and SLURM: A Brief Overview](#36f4)'
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Installation](#8060)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Configuration](#38eb)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Running Your Application](#db4b)
  prefs: []
  type: TYPE_NORMAL
- en: '∘ [Advanced Topics: Parallel Runs with Slurm](#ef30)'
  prefs: []
  type: TYPE_NORMAL
- en: · [XII. Hydra with Containerization (Docker/Kubernetes)](#1417)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Hydra with Docker](#9829)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Hydra with Kubernetes](#22af)
  prefs: []
  type: TYPE_NORMAL
- en: · [XIII. Integration with ML Frameworks](#a9d4)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Hydra with PyTorch](#72ad)
  prefs: []
  type: TYPE_NORMAL
- en: · [XIV. Conclusion](#5bd8)
  prefs: []
  type: TYPE_NORMAL
- en: '· [XV. Appendix: Useful Hydra Commands and Tips](#1649)'
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Commonly Used Hydra Commands](#0a66)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Tips and Tricks](#d21e)
  prefs: []
  type: TYPE_NORMAL
- en: I. Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing configurations can be complex, from model hyperparameters to experiment
    settings. Keeping track of all these details can quickly become overwhelming.
    That’s where Facebook’s Hydra configuration library comes into play. Hydra is
    an open-source Python framework that simplifies the management of configurations
    in your applications, ensuring better reproducibility and modularity.
  prefs: []
  type: TYPE_NORMAL
- en: Hydra provides a powerful and flexible mechanism for managing configurations
    for complex applications. This makes it easier for developers and researchers
    to maintain and optimize machine learning projects.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, we introduce the basics of Hydra and guide you through its
    advanced features. By the end of this tutorial, you will be empowered to manage
    your project configurations effectively and efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: II. Hydra Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installation of Hydra
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Hydra is a Python library and can be installed easily with pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Anatomy of a Hydra Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Hydra application has a script and one or more configuration files. Configuration
    files are written in YAML and stored in a directory structure. This creates a
    hierarchical configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The accompanying YAML file might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The Python script `my_app.py` uses the `@hydra.main()` decorator to indicate
    it’s a Hydra application. The `config_name` parameter specifies the configuration
    file to use. Note that it assumes the file type is YAML, so there is no need to
    select the extension.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Hydra’s Main Components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hydra comprises **configurations**, **interpolations**, and **overrides**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Configurations** are the settings of your application specified in one or
    more YAML files.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Interpolations** are references to other parts of your configuration. For
    example, in the YAML file below, the value of `full` interpolates `name` and `surname`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Overrides** allow you to modify your configuration at runtime without changing
    your YAML files. You can specify overrides on the command line when running your
    application, as the following demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the command above, we’re overriding the `user` value under `db` in the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2a5c7aa3326013af884afa25c7bad5d9.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Comparison of managing configurations with and without Hydra. Table created
    by the author.*'
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we’ll look at advanced features and how to use them
    in your ML projects.
  prefs: []
  type: TYPE_NORMAL
- en: III. Hierarchical Configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hydra offers an intuitive way to structure your configuration files hierarchically,
    mirroring your project’s directory structure. Hierarchical configurations are
    instrumental when managing complex projects, making, maintaining, extending, and
    reusing your configurations easier.
  prefs: []
  type: TYPE_NORMAL
- en: Defining and Understanding Hierarchical Configuration Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The hierarchy of configurations is defined by the directory structure of your
    configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, a project’s layout could be structured as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Hence, the `standard.yaml` and `minmax.yaml` files could contain different settings
    for data preprocessing; the `linear.yaml` and `svm.yaml` files could have configurations
    for various model types.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `config.yaml`, you can specify which preprocessing and model configurations
    to use by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Hydra automatically merges the specified configurations, so you can still override
    the default choice when launching the application, as shown in the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The command above runs the application with the `minmax` preprocessing and `svm`
    model configurations.
  prefs: []
  type: TYPE_NORMAL
- en: IV. Configuration Groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configuration groups in Hydra provide a way to manage sets of configurations
    that can be swapped easily. This feature is handy for maintaining various settings,
    environments, and setups, such as development, testing, staging, and production.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Concept of Configuration Groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A configuration group is a directory containing alternative configurations.
    When defining a configuration group, specify a default configuration in your main
    configuration file (`config.yaml`), but you can easily override it when running
    your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Defining Different Setups: Development, Staging, Production'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Consider a machine learning project where you have distinct settings for development,
    staging, and production environments. You can create a configuration group for
    each environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Each YAML file in the `env` directory would contain the settings specific to
    that environment. For example, the `development.yaml` file might define verbose
    logging and debugging settings while the `production.yaml` file might contain
    optimized performance and error logging settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `config.yaml`, you specify the default environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: With this configuration, Hydra will automatically apply the settings from `development.yaml`
    when running your application.
  prefs: []
  type: TYPE_NORMAL
- en: Showcasing the Impact on Reproducibility and Debugging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Configuration groups are a powerful tool for enhancing reproducibility in your
    projects. You can ensure your application behaves consistently across different
    environments by defining specific development, staging, and production setups.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, configuration groups can significantly simplify debugging. You
    can quickly reproduce and isolate issues by using different configuration groups
    for various stages of your project. For instance, if an issue arises in the staging
    environment, you can switch to the `staging` configuration to reproduce the problem
    without affecting your development or production settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Switching between environments is as easy as specifying a different configuration
    group when launching your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This command runs the application with the settings defined in `production.yaml`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0bda8fe2fc342e97a69f2c53e7177dee.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Benefits of Using Configuration Groups. Table created by the author.*'
  prefs: []
  type: TYPE_NORMAL
- en: V. Dynamic Configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to static configuration management, Hydra allows for dynamic configurations.
    Dynamic configurations are incredibly valuable in scenarios where some parameters
    depend on others or must be computed at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Explanation of Dynamic Configurations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Dynamic configurations in Hydra are enabled through two main features: **interpolations**
    and the **OmegaConf** library.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Interpolations are references to other parts of your configuration, allowing
    a dynamic set of values. They are denoted by `${}` in your configuration files.
    For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `greeting` value will dynamically include the `name` value.
  prefs: []
  type: TYPE_NORMAL
- en: 'OmegaConf is a flexible configuration library that Hydra uses. It supports
    not only interpolations but also variable substitutions and even complex expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, the `area` is computed dynamically based on the `width`
    and `height` under `dimensions`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Rules for Dynamic Adjustment of Hyperparameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In machine learning, dynamic configurations can be beneficial for adjusting
    hyperparameters. For instance, we want the learning rate to depend on the batch
    size. We could define a rule for this in our configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Where `learning_rate` is dynamically adjusted based on `batch_size`, the learning
    rate will automatically increase proportionally if you improve the batch size.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Dynamic Configurations in a Machine Learning Context
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s consider a more complex machine learning scenario where the size of the
    first layer in our neural network depends on the input size of our data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Here, the size of the first layer (`layer1`) is dynamically set to be twice
    the `input_size`. If we change the `input_size`, `layer1` will automatically adjust.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic configurations enable higher flexibility and adaptability for applications.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/665e9adc36b2312803a31e70733f32f3.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Advantages of Using Dynamic Configurations. Table created by the author.*'
  prefs: []
  type: TYPE_NORMAL
- en: VI. Environment Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hydra supports the use of environment variables within configuration files,
    providing additional flexibility and security. This functionality can be beneficial
    for handling sensitive or frequently changing data.
  prefs: []
  type: TYPE_NORMAL
- en: The Need for Environment Variables in Hydra
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Environment variables are a common way to pass configuration information to
    your application. They are handy in the following situations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sensitive Data**: Passwords, secret keys, and access tokens should not be
    hard-coded into your application or configuration files. Instead, these can be
    stored securely as environment variables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Frequently Changing Data**: If specific parameters change frequently or depend
    on the system environment (e.g., file paths that differ between development and
    production environments), managing them as environment variables is more convenient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Portability and Scalability**: Environment variables can make your applications
    easier to move between different environments (e.g., from a local development
    environment to a cloud-based production environment).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling Sensitive or Frequently Changing Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sensitive information like database credentials should never be stored directly
    in your configuration files. Instead, you can keep these as environment variables
    and reference them in your Hydra configurations using interpolations. This practice
    enhances security by preventing sensitive data from being exposed in your code
    or version control system.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, frequently changing data, such as file or directory paths that vary
    between environments, can be managed as environment variables. This approach reduces
    the need for manual modifications when moving between environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Environment Variables: A Step-by-Step Guide'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use an environment variable in Hydra, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define an environment variable in your shell. For example, in a Unix-based
    system, you could use the `export` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '2\. Reference the environment variable in your Hydra configuration file using
    the `${env:VARIABLE}` syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `url` field in the `database` configuration will be set
    to the value of the `DATABASE_URL` environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, never store sensitive information directly in your configuration files
    or code. Always use environment variables or another secure method for handling
    sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3fe6935342cd54f73f49f31dfaac50c8.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Benefits of Using Environment Variables in Hydra. Table created by the author.*'
  prefs: []
  type: TYPE_NORMAL
- en: VII. Configuring Logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logging is an essential part of machine learning experiments. It provides visibility
    into your models’ and algorithms’ performance and behavior over time. Configuring
    proper logging mechanisms can help with model debugging, optimization, and understanding
    the learning process.
  prefs: []
  type: TYPE_NORMAL
- en: Hydra has ‌built-in support for configuring Python’s logging module, making
    it easy to control the verbosity of logs, set up different handlers, and format
    your log messages.
  prefs: []
  type: TYPE_NORMAL
- en: The Importance of Logging in Machine Learning Experiments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Logging for machine learning can serve various purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model Debugging**: Logs can contain valuable information about model behavior,
    which can help diagnose and fix issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance Tracking**: Logging the metrics over time helps to observe the
    model’s learning process, detect overfitting or underfitting, and adjust the hyperparameters
    accordingly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auditing and Reproducibility**: Logs document the details of the training
    process, making it easier to reproduce results and understand what has been done
    in the past.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Hydra to Configure Python’s Logging Framework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python’s built-in logging module is robust and highly configurable, and Hydra
    can help manage this complexity.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure logging with Hydra, create a `hydra.yaml` file in your configuration
    directory and define your logging settings under the `hydra.job_logging` key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In this configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: The root logger is set to the `INFO` level, capturing `INFO`, `WARNING`, `ERROR`,
    and `CRITICAL` messages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are two handlers: one for console output and one for writing to a file.
    The console handler only logs `INFO` and higher-level messages, while the file
    handler logs `DEBUG` and higher-level messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `filename` of the file handler uses interpolation to dynamically create
    a log file for each job based on the job’s name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to Create Log Files for Different Modules with Varying Levels of Verbosity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can set different log levels for different modules in your application.
    Suppose you have `moduleA` and `moduleB` modules, and you want `moduleA` to log
    `DEBUG` and higher-level messages but `moduleB` to log only `ERROR` and higher-level
    messages. Here’s how to configure it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This way, you can control the amount of log output from different application
    parts.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f2d71956a36821269a5c3c8ebafa1f6b.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Key Benefits of Configuring Logging with Hydra. The author created the table.*'
  prefs: []
  type: TYPE_NORMAL
- en: VIII. Multirun and Sweeps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Machine learning often involves running experiments with different sets of hyperparameters
    to find the optimal solution. Welcome Hydra’s `multirun` feature. It allows you
    to run your application multiple times with different configurations, which is
    beneficial for hyper-parameter tuning.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Hydra’s Multirun Feature
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use `multirun`, pass the `-m` or `--multirun` flag when running your application.
    Then, specify the parameters you want to vary across runs using the `key=value`
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This will run your application three times: one `training.batch_size=32`, one
    `training.batch_size=64`, and one `training.batch_size=128`.'
  prefs: []
  type: TYPE_NORMAL
- en: Designing and Configuring Hyper-parameter Sweeps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A hyperparameter sweep is a series of runs with different hyperparameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hydra supports different types of sweeps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Range Sweeps**: Specifies a range of values for a parameter. For example,
    `learning_rate=0.01,0.001,0.0001`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interval Sweeps**: Define an interval and a step size. For example, `epoch=1:10:1`
    (`start:end:step`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Choice Sweeps**: Define a list of values to choose from. For example, `optimizer=adam,sgd,rmsprop`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Grid Sweeps**: Define multiple parameters to sweep over. This will run your
    application for all combinations of the parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These sweep types can be combined and used in complex ways to explore your model's
    hyperparameter space thoroughly.
  prefs: []
  type: TYPE_NORMAL
- en: Applying Multirun and Sweeps to Machine Learning Projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s consider a simple machine-learning project where you want to tune the
    learning rate and batch size. You can use the `multirun` feature to configure
    and run this hyper-parameter sweep easily:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This command will run your application for each batch size and learning rate
    combination, totaling nine runs (3 batch sizes * 3 learning rates).
  prefs: []
  type: TYPE_NORMAL
- en: Hydra’s `multirun` feature can significantly simplify the process of running
    hyperparameter sweeps, helping you to find the best configuration for your machine
    learning models.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2a656c635cc0a5ecf881c862da62b767.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Benefits of Using Hydra’s Multirun Feature. The author created the table.*'
  prefs: []
  type: TYPE_NORMAL
- en: IX. Error Handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Proper error handling is a crucial aspect of configuration management. It provides
    valuable information when things go wrong, helping to prevent or quickly diagnose
    issues that could affect the success of your machine learning projects. Hydra
    can be used to facilitate advanced error handling.
  prefs: []
  type: TYPE_NORMAL
- en: Importance of Error Handling in Configuration Management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Error handling in configuration management serves various purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Error Prevention**: By validating configurations before they’re used, you
    can catch and correct errors early, preventing them from causing more prominent
    issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fast Debugging**: When errors do occur, detailed error messages can help
    you quickly identify the cause and fix the issue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Robustness**: Comprehensive error handling makes your code more robust and
    reliable, improving its ability to handle unexpected situations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Hydra for Advanced Error Handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Hydra provides several features for advanced error handling:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Strict Validation**: Hydra performs strict validation of your configurations
    by default. If you try to access a field not defined in your configuration, Hydra
    will raise an error. This can help catch typos or missing fields early.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '**Error Messages**: detailed error messages when an error occurs. These messages
    often include the exact location of the error in your configuration, making diagnosing
    and fixing the issue easier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing Behavior for Missing or Incorrect Configurations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While Hydra’s default behavior is to raise an error for missing or incorrect
    configurations, you can customize this behavior based on your needs. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Optional Fields**: You can use the `OmegaConf.select` method to access a
    field in a way that won’t raise an error if the field is missing:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**Ignore Invalid Types**: If you’re loading configurations from a file and
    you want Hydra to ignore fields with invalid types, you can set the `ignore_invalid_types`
    flag when calling `OmegaConf.load`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: By utilizing Hydra’s error-handling capabilities, you can make your configuration
    management process more robust and easier to debug.
  prefs: []
  type: TYPE_NORMAL
- en: X. Command Line Overrides
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Command line overrides are a powerful feature that allows you to modify runtime
    configurations. This can be particularly useful in machine learning experiments,
    where you often need to adjust hyperparameters, switch between different models,
    or change the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Command Line Overrides
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can override any part of your configuration from the command line. To do
    this, pass a `key=value` pair when running your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: By this, your application runs with`db.driver` set to `postgresq` and `db.user`
    set to `my_user`, overriding any values defined in the configuration files or
    defaults.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying Configurations at Runtime Using Command Line Arguments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Command line overrides can be used to modify configurations in various ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changing Single Values**: As shown in the previous example, you can change
    the value of a single field in your configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changing Nested Values**: You can also change the value of a nested field
    using dot notation: `python my_app.py training.optimizer.lr=0.01`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adding New Fields**: If you specify a field that doesn’t exist in your configuration,
    Hydra will add it: `python my_app.py new_field=new_value`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Removing Fields**: You can remove a field from your configuration by setting
    it to `null`: `python my_app.py field_to_remove=null`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changing Lists**: You can change the value of a list field: `python my_app.py
    data.transforms=[transform1,transform2]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practical Examples of Using Command Line Overrides in Machine Learning Experiments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Command line overrides are especially useful in machine learning, where you
    often need to adjust configurations for different experiments:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hyperparameter Tuning**: Easily adjust hyperparameters for different runs:
    `python train.py model.lr=0.01 model.batch_size=64`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model Selection**: Switch between different models: `python train.py model.type=resnet50`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data Selection**: Change the dataset or split used for training: `python
    train.py data.dataset=cifar10 data.split=train`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using command line overrides can greatly increase the flexibility and ease of
    your machine-learning experiments.
  prefs: []
  type: TYPE_NORMAL
- en: XI. Using Hydra on a Slurm-Based HPC Cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: High-Performance Computing (HPC) clusters are commonly used to handle large-scale
    machine-learning tasks. These clusters often use the Simple Linux Utility for
    Resource Management (Slurm) to manage job scheduling. Let’s see how we can use
    Hydra on a Slurm-based HPC cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hydra and SLURM: A Brief Overview'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hydra includes a plugin called `hydra-submitit-launcher`, which enables seamless
    integration with Slurm job scheduling. With this plugin, you can submit your Hydra
    applications as Slurm jobs, allowing you to leverage the power of HPC clusters
    for your machine-learning experiments.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use the Submitit launcher with Hydra, you’ll first need to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you’ve installed the launcher, you can configure it in your Hydra configuration
    files. Here’s an example configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Above, we set the time limit for our jobs to 60 minutes, using one node with
    2 GPUs, and dedicating 10GB of memory and 10 CPUs per task. Adjust these settings
    based on the resources available in your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Running Your Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can now run your Hydra application as usual:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: With the Submitit launcher configured, Hydra can submit Slurm jobs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Advanced Topics: Parallel Runs with Slurm'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Hydra’s multirun feature and the Submitit launcher allow you to run multiple
    jobs in parallel. For instance, you can perform a hyper-parameter sweep across
    several Slurm nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This would submit three Slurm jobs, each with a different learning rate.
  prefs: []
  type: TYPE_NORMAL
- en: '**Further Reading:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[## Submitit Launcher plugin | Hydra'
  prefs: []
  type: TYPE_NORMAL
- en: PyPI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: hydra.cc](https://hydra.cc/docs/plugins/submitit_launcher?source=post_page-----ef138f1c1852--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'For general information on using Slurm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[## Slurm Workload Manager'
  prefs: []
  type: TYPE_NORMAL
- en: 'NOTE: This documentation is for Slurm version 23.02\. Documentation for older
    versions of Slurm are distributed with the…'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: slurm.schedmd.com](https://slurm.schedmd.com/documentation.html?source=post_page-----ef138f1c1852--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: XII. Hydra with Containerization (Docker/Kubernetes)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Containerization using tools like Docker and Kubernetes is widely used in machine
    learning due to its consistency, reproducibility, and scalability benefits. This
    section will guide you on using Hydra in conjunction with Docker or Kubernetes,
    showing how to generate Dockerfiles dynamically or Kubernetes manifests based
    on the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Hydra with Docker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When using Docker, you often need to create Dockerfiles with different configurations.
    Hydra can simplify this process:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. **Dockerfile**
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Dockerfile with placeholders for configuration options. Here’s a simplified
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In this Dockerfile, `${CMD_ARGS}` is a placeholder for command-line arguments
    that Hydra will provide.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. **Hydra Configuration**
  prefs: []
  type: TYPE_NORMAL
- en: 'In your Hydra config file, define the configuration options to pass to Docker.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 3\. **Docker Run Script**
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, create a script that uses Hydra to generate the Docker run command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Run this script, and Hydra will launch a Docker container with the configuration
    options you specified.
  prefs: []
  type: TYPE_NORMAL
- en: Hydra with Kubernetes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using Hydra with Kubernetes is a bit more complex, but the basic idea is similar.
    First, you would create a Kubernetes manifest with placeholders for configuration
    options, then use Hydra to generate the Kubernetes apply command.
  prefs: []
  type: TYPE_NORMAL
- en: Consider using the [Hydra-KubeExecutor](https://github.com/pykong/Hydra-KubeExecutor)
    plugin to integrate Hydra and Kubernetes directly.
  prefs: []
  type: TYPE_NORMAL
- en: '**Further Reading:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://docs.docker.com/?source=post_page-----ef138f1c1852--------------------------------)
    [## Docker Docs: How to build, share, and run applications'
  prefs: []
  type: TYPE_NORMAL
- en: Docker Documentation is the official Docker library of resources, tutorials,
    and guides to help you build, share, and…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: docs.docker.com](https://docs.docker.com/?source=post_page-----ef138f1c1852--------------------------------)
    [](https://kubernetes.io/docs/home/?source=post_page-----ef138f1c1852--------------------------------)
    [## Kubernetes Documentation
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes is an open source container orchestration engine for automating deployment,
    scaling, and management of…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: kubernetes.io](https://kubernetes.io/docs/home/?source=post_page-----ef138f1c1852--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: XIII. Integration with ML Frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hydra can significantly simplify the process of managing configurations in machine
    learning projects. This section will show integrate Hydra with popular machine
    learning frameworks like PyTorch, TensorFlow, or scikit-learn. You’ll learn how
    to use configuration files to manage the different stages of a machine-learning
    pipeline, from data preprocessing to model training and evaluation.
  prefs: []
  type: TYPE_NORMAL
- en: Hydra with PyTorch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When using PyTorch (or any other ML framework), you can use Hydra to manage
    configurations for your model, dataset, optimizer, and other components. Here’s
    a simplified example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: In this example, `config.yaml` would contain separate sections for `data`, `model`,
    `optim`, `train`, and `eval`. This structure keeps your configurations organized
    and modular, allowing you to easily adjust the configurations for different components
    of your machine-learning pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you could define different model architectures, datasets, or training
    regimes in separate configuration files, then select the ones you want to use
    with command line overrides.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are example configuration groups for PyTorch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: With these configurations, you could easily switch between a ResNet-50 and AlexNet,
    or between ImageNet and CIFAR-10 simply by changing the command line arguments
    when you run your application.
  prefs: []
  type: TYPE_NORMAL
- en: '**Further reading:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[## PyTorch documentation - PyTorch 2.0 documentation'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stable: These features will be maintained long-term and there should generally
    be no major performance limitations or…'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pytorch.org](https://pytorch.org/docs/stable/index.html?source=post_page-----ef138f1c1852--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: XIV. Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this tutorial, we dove deep into Hydra, a powerful tool for configuration
    management in Python applications, including ML projects. We covered the basics,
    hierarchical configurations, configuration groups, and dynamic configurations.
    Also, we learned how to handle environment variables and use Hydra for logging,
    error handling, and command line overrides.
  prefs: []
  type: TYPE_NORMAL
- en: We also explored some of the more advanced features of Hydra, such as multirun
    and sweeps, which are particularly useful for managing machine learning experiments.
    Finally, we saw how Hydra could be used on an HPC, with Docker and Kubernetes,
    and integrated with another open-source package from Facebook to do deep learning
    (i.e., PyTorch). Throughout this tutorial, we’ve seen that Hydra can greatly simplify
    managing configurations, making your code more flexible, robust, and maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: Mastering a tool like Hydra takes practice. So keep experimenting, trying new
    things, and pushing the boundaries of what you can do with your configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'XV. Appendix: Useful Hydra Commands and Tips'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some commonly used Hydra commands, tips, and tricks for working with
    Hydra effectively in machine-learning projects.
  prefs: []
  type: TYPE_NORMAL
- en: Commonly Used Hydra Commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Running an application with Hydra**: `python my_app.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using command line overrides**: `python my_app.py db.driver=postgresql`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Running an application with multirun**: `python my_app.py — multirun training.batch_size=32,64,128`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tips and Tricks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '1\. **Leverage Hierarchical Configurations**: Hierarchical configurations can
    help you manage complex configurations and avoid duplication. Use them to define
    standard settings that can be shared across different parts of your application.'
  prefs: []
  type: TYPE_NORMAL
- en: '2\. **Use Command Line Overrides**: Command line overrides are a powerful tool
    for adjusting configurations at runtime. Use them to change hyperparameters, switch
    models, or change datasets for different experiments.'
  prefs: []
  type: TYPE_NORMAL
- en: '3\. **Implement Error Handling**: Hydra provides advanced error handling capabilities.
    Use them to make your code more robust and easier to debug.'
  prefs: []
  type: TYPE_NORMAL
- en: '4\. **Use Multirun for Hyperparameter Sweeps**: Hydra’s multirun feature can
    significantly simplify the process of running hyperparameter sweeps. Use it to
    explore the hyperparameter space of your model.'
  prefs: []
  type: TYPE_NORMAL
- en: '5\. **Keep Exploring**: Hydra has many more features to discover. Check out
    the Hydra documentation and GitHub for more ideas and examples.'
  prefs: []
  type: TYPE_NORMAL
- en: '[## Getting started | Hydra'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'hydra.cc](https://hydra.cc/docs/intro/?source=post_page-----ef138f1c1852--------------------------------)
    [](https://github.com/facebookresearch/hydra?source=post_page-----ef138f1c1852--------------------------------)
    [## GitHub - facebookresearch/hydra: Hydra is a framework for elegantly configuring
    complex…'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hydra is a framework for elegantly configuring complex applications - GitHub
    - facebookresearch/hydra: Hydra is a…'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/facebookresearch/hydra?source=post_page-----ef138f1c1852--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '**Share your thoughts, use-cases, and questions via the comment section below.**'
  prefs: []
  type: TYPE_NORMAL
- en: Contact
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Want to Connect? Follow Dr. Robinson on [LinkedIn](https://www.linkedin.com/in/jrobby/),
    [Twitter](https://twitter.com/jrobvision), [Facebook](https://www.facebook.com/joe.robinson.39750),
    and [Instagram](https://www.instagram.com/doctor__jjj/). Visit my homepage for
    papers, blogs, email signups, and more!
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://www.jrobs-vision.com/?source=post_page-----ef138f1c1852--------------------------------)
    [## AI Research Engineer and Entrepreneur | Joseph P. Robinson'
  prefs: []
  type: TYPE_NORMAL
- en: Researcher & Entrepreneur Greetings! As a researcher, Dr. Robinson proposed
    and employed advanced AI to understand…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.jrobs-vision.com.](https://www.jrobs-vision.com/?source=post_page-----ef138f1c1852--------------------------------)
  prefs: []
  type: TYPE_NORMAL
