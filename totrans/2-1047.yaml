- en: 'Hill Climbing Optimization Algorithm: A Simple Beginner’s Guide'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 爬山算法优化：简单的初学者指南
- en: 原文：[https://towardsdatascience.com/hill-climbing-optimization-algorithm-simply-explained-dbf1e1e3cf6c](https://towardsdatascience.com/hill-climbing-optimization-algorithm-simply-explained-dbf1e1e3cf6c)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/hill-climbing-optimization-algorithm-simply-explained-dbf1e1e3cf6c](https://towardsdatascience.com/hill-climbing-optimization-algorithm-simply-explained-dbf1e1e3cf6c)
- en: The intuition behind one of the most popular optimization algorithms
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最流行的优化算法之一的直觉
- en: '[](https://medium.com/@egorhowell?source=post_page-----dbf1e1e3cf6c--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----dbf1e1e3cf6c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----dbf1e1e3cf6c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----dbf1e1e3cf6c--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----dbf1e1e3cf6c--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@egorhowell?source=post_page-----dbf1e1e3cf6c--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----dbf1e1e3cf6c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----dbf1e1e3cf6c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----dbf1e1e3cf6c--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----dbf1e1e3cf6c--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----dbf1e1e3cf6c--------------------------------)
    ·5 min read·Mar 14, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----dbf1e1e3cf6c--------------------------------)
    ·阅读时间5分钟·2023年3月14日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/ebf4d1173e50c52791f9cb997a38767e.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ebf4d1173e50c52791f9cb997a38767e.png)'
- en: Photo by [Isaac Burke](https://unsplash.com/@isaacburkevideo?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[Isaac Burke](https://unsplash.com/@isaacburkevideo?utm_source=medium&utm_medium=referral)拍摄，发布在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Background
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景
- en: Many industrial and research problems require some form of [***optimization***](https://en.wikipedia.org/wiki/Mathematical_optimization)
    to arrive at the best solution or result. Some of these problems come under the
    [***combinatorial optimization***](https://en.wikipedia.org/wiki/Combinatorial_optimization)
    category which means they often can’t be solved by [***brute force***](https://en.wikipedia.org/wiki/Brute-force_search)
    in a reasonable amount of time. Therefore, we turn to [***heuristic***](https://en.wikipedia.org/wiki/Heuristic)
    and [***meta-heuristic***](https://en.wikipedia.org/wiki/Metaheuristic) algorithms
    which don’t guarantee finding the best [***global solution***](https://en.wikipedia.org/wiki/Global_optimization)
    but often compute a sufficient solution in a reasonable amount of time.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 许多工业和研究问题需要某种形式的[***优化***](https://en.wikipedia.org/wiki/Mathematical_optimization)来获得最佳解决方案或结果。其中一些问题属于[***组合优化***](https://en.wikipedia.org/wiki/Combinatorial_optimization)类别，这意味着它们通常不能在合理的时间内通过[***暴力破解***](https://en.wikipedia.org/wiki/Brute-force_search)解决。因此，我们转向[***启发式***](https://en.wikipedia.org/wiki/Heuristic)和[***元启发式***](https://en.wikipedia.org/wiki/Metaheuristic)算法，这些算法虽然不能保证找到最佳的[***全局解决方案***](https://en.wikipedia.org/wiki/Global_optimization)，但通常能在合理的时间内计算出足够的解决方案。
- en: One such meta-heuristic algorithm is the [***hill climbing algorithm***](https://en.wikipedia.org/wiki/Hill_climbing)***,***
    which is the topic of this article. We will dive into the theory, advantages vs
    disadvantages and finish by implementing the algorithm to solve the famous [***traveling
    salesman problem (TSP)***](https://en.wikipedia.org/wiki/Travelling_salesman_problem).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一种元启发式算法是[***爬山算法***](https://en.wikipedia.org/wiki/Hill_climbing)***，***这是本文的主题。我们将深入探讨理论、优缺点，并通过实现该算法来解决著名的[***旅行商问题
    (TSP)***](https://en.wikipedia.org/wiki/Travelling_salesman_problem)。
- en: Hill Climbing Algorithm
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 爬山算法
- en: Overview
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: Hill climbing is a meta-heuristic [***iterative***](https://en.wikipedia.org/wiki/Iterative_method)
    [***local search***](https://en.wikipedia.org/wiki/Local_search_(optimization))
    algorithm. It aims to find the best solution by making small [***perturbations***](https://en.wikipedia.org/wiki/Perturbation_function)
    to the current solution and continuing this process until no better solution is
    found. Additionally, it is a [***greedy algorithm***](https://en.wikipedia.org/wiki/Greedy_algorithm)
    as it only cares about making local optimal moves, so it can often get stuck in
    a [***local optimum***](https://mathworld.wolfram.com/LocalMinimum.html) (see
    diagram below).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 攀登算法是一种元启发式的 [***迭代***](https://en.wikipedia.org/wiki/Iterative_method) [***局部搜索***](https://en.wikipedia.org/wiki/Local_search_(optimization))
    算法。它通过对当前解决方案进行小的 [***扰动***](https://en.wikipedia.org/wiki/Perturbation_function)
    并继续这一过程，直到找不到更好的解决方案，旨在找到最佳解决方案。此外，它是一种 [***贪心算法***](https://en.wikipedia.org/wiki/Greedy_algorithm)，因为它只关注局部最优的移动，因此常常会陷入
    [***局部最优***](https://mathworld.wolfram.com/LocalMinimum.html)（见下图）。
- en: '![](../Images/9487cb5390a0f374f48023ac0a8fd25d.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9487cb5390a0f374f48023ac0a8fd25d.png)'
- en: An example of a function where there is both a local and global optimum. Diagram
    by author.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含局部和全局最优的函数示例。图由作者提供。
- en: Algorithm
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 算法
- en: 'The general flow of the hill climbing algorithm is as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 攀登算法的一般流程如下：
- en: '*Generate an initial solution, which is now the best solution.*'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*生成初始解决方案，该解决方案现在是最佳解决方案。*'
- en: '*Select a neighbour solution from the best solution.*'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*从最佳解决方案中选择一个邻域解决方案。*'
- en: '*If the neighbour solution is better than the best solution, set the best solution
    to be equal to the neighbour solution.*'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*如果邻域解决方案优于最佳解决方案，则将最佳解决方案设置为等于邻域解决方案。*'
- en: '*Repeat the above two steps until the neighbour solution is not better than
    the best solution or some other termination condition is met such as a number
    of iterations.*'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*重复上述两个步骤，直到邻域解决方案不优于最佳解决方案，或满足其他终止条件，如迭代次数。*'
- en: If this still seems quite vague don’t worry! We will apply the above algorithm
    to a real-life example in Python later on.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这仍然显得有些模糊，不用担心！稍后我们将在 Python 中应用上述算法到一个实际的例子中。
- en: Types
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型
- en: 'There are sundry types and variations of the hill climbing algorithm. Listed
    below are the most common:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 爬山算法有多种类型和变体。以下是最常见的几种：
- en: '***Simple Hill Climb:*** *Considers the closest neighbour only.*'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***简单爬山算法：*** *仅考虑最近的邻域。*'
- en: '***Steepest Ascent Hill Climb:*** *Considers**all neighbours and selects the
    best.*'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***最陡爬升爬山算法：*** *考虑所有邻域并选择最佳方案。*'
- en: '***Stochastic Hill Climb:*** *Picks one neighbour at random.*'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***随机爬山算法：*** *随机选择一个邻域。*'
- en: The steepest ascent version would lead to more optimal performance but requires
    more compute resource.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最陡爬升版本会带来更优的性能，但需要更多的计算资源。
- en: Pros & Cons
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优缺点
- en: 'Let’s briefly list the main pros and cons of the hill climbing algorithm:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要列出爬山算法的主要优缺点：
- en: '***Pros:***'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '***优点：***'
- en: '*Very intuitive and easy to explain to peers, stakeholders, etc.*'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*非常直观，易于向同事、利益相关者等解释。*'
- en: '*Can be applied to both* [***continuous***](https://uwaterloo.ca/combinatorics-and-optimization/research-combinatorics-and-optimization/research-areas/continuous-optimization)
    *and* [***discrete***](https://en.wikipedia.org/wiki/Discrete_optimization) *objective
    functions and problems.*'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*可以应用于* [***连续***](https://uwaterloo.ca/combinatorics-and-optimization/research-combinatorics-and-optimization/research-areas/continuous-optimization)
    *和* [***离散***](https://en.wikipedia.org/wiki/Discrete_optimization) *目标函数和问题。*'
- en: '*Able to solve a variety of different problems.*'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*能够解决各种不同的问题。*'
- en: '***Cons:***'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '***缺点：***'
- en: '*Likely to get stuck in* [***local minima/maxima****,*](https://en.wikipedia.org/wiki/Maximum_and_minimum)
    *so can’t guarantee to find the best global solution.*'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*可能会陷入* [***局部极小值/极大值***](https://en.wikipedia.org/wiki/Maximum_and_minimum)
    *，因此不能保证找到最佳的全局解决方案。*'
- en: '*Plateaus can occur where all neighbours have the same objective score.*'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*可能出现平坦区域，其中所有邻域具有相同的目标分数。*'
- en: 'There are more complex algorithms such as [***simulated annealing***](https://en.wikipedia.org/wiki/Simulated_annealing)
    and [***tabu search***](https://en.wikipedia.org/wiki/Tabu_search)***,*** similar
    to the hill climb, but don’t get stuck in local minima and greater explore the
    search space. To learn more about these algorithms, checkout my previous posts
    here:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更复杂的算法，如 [***模拟退火***](https://en.wikipedia.org/wiki/Simulated_annealing) 和
    [***禁忌搜索***](https://en.wikipedia.org/wiki/Tabu_search)***，*** 类似于爬山算法，但不会陷入局部极小值，并且能更广泛地探索搜索空间。要了解更多关于这些算法的信息，请查看我之前的帖子：
- en: '[](/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd?source=post_page-----dbf1e1e3cf6c--------------------------------)
    [## How To Solve Travelling Salesman Problem With Simulated Annealing'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何用模拟退火算法解决旅行推销员问题](/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd?source=post_page-----dbf1e1e3cf6c--------------------------------)
    [## 如何用模拟退火解决旅行推销员问题'
- en: Getting the optimal solution to the Travelling Salesman Problem using the Simulated
    Annealing optimisation algorithm
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用模拟退火优化算法求解旅行推销员问题的最佳解决方案
- en: towardsdatascience.com](/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd?source=post_page-----dbf1e1e3cf6c--------------------------------)
    [](/tabu-search-simply-explained-ee2852339d78?source=post_page-----dbf1e1e3cf6c--------------------------------)
    [## Tabu Search Simply Explained
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd?source=post_page-----dbf1e1e3cf6c--------------------------------)
    [## Tabu Search 简单解释'
- en: An intuitive explanation of the Tabu Search optimization algorithm and how to
    apply it to the traveling salesman…
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对Tabu Search优化算法的直观解释以及如何将其应用于旅行推销员问题……
- en: towardsdatascience.com](/tabu-search-simply-explained-ee2852339d78?source=post_page-----dbf1e1e3cf6c--------------------------------)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/tabu-search-simply-explained-ee2852339d78?source=post_page-----dbf1e1e3cf6c--------------------------------)'
- en: Python Implementation Example
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 实现示例
- en: Travelling Salesman Problem
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 旅行推销员问题
- en: We will now code the hill climbing algorithm to solve the traveling salesman
    problem (TSP). However, before that, let’s briefly state and explain what we are
    trying to solve in the TSP.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写爬山算法代码来解决旅行推销员问题（TSP）。不过，在此之前，让我们简要说明和解释一下我们在TSP中试图解决的问题。
- en: 'TSP is a classic problem in optimization and poses the question:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: TSP是优化中的经典问题，并提出了以下问题：
- en: '*‘What is the shortest route to visit a given list of cities once and returning
    to the starting point?’*'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*“访问给定城市列表一次并返回到起点的最短路径是什么？”*'
- en: The problem sounds very simple, however, solving it by brute force becomes computationally
    intractable due to the [***combinatorial explosion***](https://en.wikipedia.org/wiki/Combinatorial_explosion)
    that occurs as the number of cities increases. For example, for 10 cities there
    are [***~300,000 possible*** routes](https://www.lancaster.ac.uk/stor-i-student-sites/libby-daniells/2020/04/21/the-travelling-salesman-problem/)!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题看起来很简单，但由于[***组合爆炸***](https://en.wikipedia.org/wiki/Combinatorial_explosion)的问题，随着城市数量的增加，暴力解决方法变得计算上不可行。例如，对于10个城市，存在[***~300,000个可能的***
    路径](https://www.lancaster.ac.uk/stor-i-student-sites/libby-daniells/2020/04/21/the-travelling-salesman-problem/)！
- en: Number of possible routes as a function of the number of cities **n** is **(n-1)!/2\.**
    So, its computational complexity is O(n!).
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 可行路径的数量作为城市数量**n**的函数是**(n-1)!/2\.** 因此，它的计算复杂度是O(n!)。
- en: At about 20 cities is when the brute-force approach becomes infeasible to solve
    with it taking [***~2,000*** years to compute!](https://www.sciencedirect.com/topics/earth-and-planetary-sciences/traveling-salesman-problem)
    Astonishingly, for 61 cities it is a wapping 10⁶⁷ years!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当城市数量约为20时，暴力解决方法变得不可行，因为计算所需的时间为[***~2,000*** 年](https://www.sciencedirect.com/topics/earth-and-planetary-sciences/traveling-salesman-problem)！令人惊讶的是，对于61个城市，这一时间竟达到惊人的10⁶⁷年！
- en: Hill Climbing For TSP
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**爬山算法**解决TSP'
- en: 'Let’s briefly list the pseudo-code that we will use to implement the hill climbing
    to solve the TSP. We will be using the steepest ascent version:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要列出我们将用来实现爬山算法解决TSP的伪代码。我们将使用最陡上升版本：
- en: '*Generate an initial tour and set it as our best solution.*'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*生成一个初始路线并将其设为最佳解决方案。*'
- en: '*Produce a list of neighbour solutions by swapping two cities from the current
    best solution.*'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过交换当前最佳解决方案中的两个城市来生成邻域解列表。*'
- en: '*Get the best neighbourhood solution (shortest distance) from these neighbourhood
    solutions and set it to the current solution.*'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*从这些邻域解中获取最佳邻域解（最短距离），并将其设为当前解决方案。*'
- en: '*Compare the current solution to the best solution. If it is shorter, then
    set the best solution equal to the current solution.*'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将当前解决方案与最佳解决方案进行比较。如果当前解决方案更短，则将最佳解决方案设为当前解决方案。*'
- en: '*Repeat this process until the current solution is worse than the best solution.*'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*重复此过程，直到当前解决方案比最佳解决方案更差。*'
- en: Python Code
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 代码
- en: 'Below is a boilerplate`HillClimb` class for the above algorithm we just ran
    through:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们刚刚讨论的算法的`HillClimb`类的示例代码：
- en: 'Let’s now run the class and plot the results of the initial and best found
    solutions for 20 synthetically generated cities:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们运行类并绘制20个合成生成城市的初始解决方案和最佳解决方案的结果：
- en: '![](../Images/b00447a0de445beb3ae729a0e71336e5.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b00447a0de445beb3ae729a0e71336e5.png)'
- en: Plot generated by author in Python.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图表由作者在 Python 中生成。
- en: '![](../Images/0ccc240c2031cb4aecc1e9d78f63efc8.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0ccc240c2031cb4aecc1e9d78f63efc8.png)'
- en: Plot generated by author in Python.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图表由作者在 Python 中生成。
- en: As we can see the hill climb has found a better solution than the initial solution,
    however it clearly isn’t the global minimum. Nonetheless, it found a sufficient
    solution and it didn’t take 2,000 years!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，爬山算法找到的解决方案优于初始解决方案，但显然不是全局最优解。不过，它找到了一个足够的解决方案，而且没有花费 2000 年！
- en: Summary & Further Thoughts
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结与进一步思考
- en: In this post, we have discussed the meta-heuristic local search hill-climbing
    algorithm. This algorithm makes small incremental perturbations to the best solution
    until we reach a point where the changes do not lead to a better solution. This
    algorithm produced sufficient performance for the traveling salesman problem,
    however it got stuck in a local minimum which is the main con of this optimization
    algorithm.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们讨论了元启发式局部搜索爬山算法。该算法对最佳解决方案进行小的增量扰动，直到达到一个变化不再带来更好解决方案的点。该算法在旅行推销员问题上表现良好，但却陷入了局部最小值，这是这种优化算法的主要缺点。
- en: 'The full code used in this article can be found at my GitHub here:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 本文使用的完整代码可以在我的 GitHub 上找到：
- en: '[](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/hill-climbing?source=post_page-----dbf1e1e3cf6c--------------------------------)
    [## Medium-Articles/Optimisation/hill-climbing at main · egorhowell/Medium-Articles'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/hill-climbing?source=post_page-----dbf1e1e3cf6c--------------------------------)
    [## Medium-Articles/Optimisation/hill-climbing at main · egorhowell/Medium-Articles'
- en: You can't perform that action at this time. You signed in with another tab or
    window. You signed out in another tab or…
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当前无法执行该操作。您已在另一个标签或窗口中登录。在另一个标签中注销了…
- en: github.com](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/hill-climbing?source=post_page-----dbf1e1e3cf6c--------------------------------)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[github.com](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/hill-climbing?source=post_page-----dbf1e1e3cf6c--------------------------------)'
- en: References & Further Reading
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料与进一步阅读
- en: '[*Algorithms for Optimization*](https://mitpress.mit.edu/9780262039420/algorithms-for-optimization/)*.*
    [Mykel J. Kochenderfer](https://mitpress.mit.edu/author/mykel-j-kochenderfer-18773)
    and [Tim A. Wheeler](https://mitpress.mit.edu/author/tim-a-wheeler-28144). ***2019***.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*优化算法*](https://mitpress.mit.edu/9780262039420/algorithms-for-optimization/)*.*
    [Mykel J. Kochenderfer](https://mitpress.mit.edu/author/mykel-j-kochenderfer-18773)
    和 [Tim A. Wheeler](https://mitpress.mit.edu/author/tim-a-wheeler-28144)。 ***2019***。'
- en: Another Thing!
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另一件事！
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist. There is no “fluff”
    or “clickbait,” just pure actionable insights from a practicing Data Scientist.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个免费的通讯，[**Dishing the Data**](https://dishingthedata.substack.com/)，我每周分享成为更好的数据科学家的小贴士。没有“虚华”或“点击诱饵”，只有来自实践数据科学家的纯粹可操作的见解。
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----dbf1e1e3cf6c--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://newsletter.egorhowell.com/?source=post_page-----dbf1e1e3cf6c--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何成为更好的数据科学家。点击阅读由 Egor Howell 编写的《Dishing The Data》，这是一个 Substack 出版物，包含…
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----dbf1e1e3cf6c--------------------------------)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----dbf1e1e3cf6c--------------------------------)'
- en: Connect With Me!
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与我联系！
- en: '[**YouTube**](https://www.youtube.com/@egorhowell)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**YouTube**](https://www.youtube.com/@egorhowell)'
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**Twitter**](https://twitter.com/EgorHowell)'
- en: '[**GitHub**](https://github.com/egorhowell)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**GitHub**](https://github.com/egorhowell)'
