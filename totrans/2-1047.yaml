- en: 'Hill Climbing Optimization Algorithm: A Simple Beginner’s Guide'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/hill-climbing-optimization-algorithm-simply-explained-dbf1e1e3cf6c](https://towardsdatascience.com/hill-climbing-optimization-algorithm-simply-explained-dbf1e1e3cf6c)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The intuition behind one of the most popular optimization algorithms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@egorhowell?source=post_page-----dbf1e1e3cf6c--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----dbf1e1e3cf6c--------------------------------)[](https://towardsdatascience.com/?source=post_page-----dbf1e1e3cf6c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----dbf1e1e3cf6c--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----dbf1e1e3cf6c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----dbf1e1e3cf6c--------------------------------)
    ·5 min read·Mar 14, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ebf4d1173e50c52791f9cb997a38767e.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Isaac Burke](https://unsplash.com/@isaacburkevideo?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many industrial and research problems require some form of [***optimization***](https://en.wikipedia.org/wiki/Mathematical_optimization)
    to arrive at the best solution or result. Some of these problems come under the
    [***combinatorial optimization***](https://en.wikipedia.org/wiki/Combinatorial_optimization)
    category which means they often can’t be solved by [***brute force***](https://en.wikipedia.org/wiki/Brute-force_search)
    in a reasonable amount of time. Therefore, we turn to [***heuristic***](https://en.wikipedia.org/wiki/Heuristic)
    and [***meta-heuristic***](https://en.wikipedia.org/wiki/Metaheuristic) algorithms
    which don’t guarantee finding the best [***global solution***](https://en.wikipedia.org/wiki/Global_optimization)
    but often compute a sufficient solution in a reasonable amount of time.
  prefs: []
  type: TYPE_NORMAL
- en: One such meta-heuristic algorithm is the [***hill climbing algorithm***](https://en.wikipedia.org/wiki/Hill_climbing)***,***
    which is the topic of this article. We will dive into the theory, advantages vs
    disadvantages and finish by implementing the algorithm to solve the famous [***traveling
    salesman problem (TSP)***](https://en.wikipedia.org/wiki/Travelling_salesman_problem).
  prefs: []
  type: TYPE_NORMAL
- en: Hill Climbing Algorithm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hill climbing is a meta-heuristic [***iterative***](https://en.wikipedia.org/wiki/Iterative_method)
    [***local search***](https://en.wikipedia.org/wiki/Local_search_(optimization))
    algorithm. It aims to find the best solution by making small [***perturbations***](https://en.wikipedia.org/wiki/Perturbation_function)
    to the current solution and continuing this process until no better solution is
    found. Additionally, it is a [***greedy algorithm***](https://en.wikipedia.org/wiki/Greedy_algorithm)
    as it only cares about making local optimal moves, so it can often get stuck in
    a [***local optimum***](https://mathworld.wolfram.com/LocalMinimum.html) (see
    diagram below).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9487cb5390a0f374f48023ac0a8fd25d.png)'
  prefs: []
  type: TYPE_IMG
- en: An example of a function where there is both a local and global optimum. Diagram
    by author.
  prefs: []
  type: TYPE_NORMAL
- en: Algorithm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The general flow of the hill climbing algorithm is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Generate an initial solution, which is now the best solution.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Select a neighbour solution from the best solution.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*If the neighbour solution is better than the best solution, set the best solution
    to be equal to the neighbour solution.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Repeat the above two steps until the neighbour solution is not better than
    the best solution or some other termination condition is met such as a number
    of iterations.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If this still seems quite vague don’t worry! We will apply the above algorithm
    to a real-life example in Python later on.
  prefs: []
  type: TYPE_NORMAL
- en: Types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are sundry types and variations of the hill climbing algorithm. Listed
    below are the most common:'
  prefs: []
  type: TYPE_NORMAL
- en: '***Simple Hill Climb:*** *Considers the closest neighbour only.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Steepest Ascent Hill Climb:*** *Considers**all neighbours and selects the
    best.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Stochastic Hill Climb:*** *Picks one neighbour at random.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The steepest ascent version would lead to more optimal performance but requires
    more compute resource.
  prefs: []
  type: TYPE_NORMAL
- en: Pros & Cons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s briefly list the main pros and cons of the hill climbing algorithm:'
  prefs: []
  type: TYPE_NORMAL
- en: '***Pros:***'
  prefs: []
  type: TYPE_NORMAL
- en: '*Very intuitive and easy to explain to peers, stakeholders, etc.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Can be applied to both* [***continuous***](https://uwaterloo.ca/combinatorics-and-optimization/research-combinatorics-and-optimization/research-areas/continuous-optimization)
    *and* [***discrete***](https://en.wikipedia.org/wiki/Discrete_optimization) *objective
    functions and problems.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Able to solve a variety of different problems.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Cons:***'
  prefs: []
  type: TYPE_NORMAL
- en: '*Likely to get stuck in* [***local minima/maxima****,*](https://en.wikipedia.org/wiki/Maximum_and_minimum)
    *so can’t guarantee to find the best global solution.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Plateaus can occur where all neighbours have the same objective score.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are more complex algorithms such as [***simulated annealing***](https://en.wikipedia.org/wiki/Simulated_annealing)
    and [***tabu search***](https://en.wikipedia.org/wiki/Tabu_search)***,*** similar
    to the hill climb, but don’t get stuck in local minima and greater explore the
    search space. To learn more about these algorithms, checkout my previous posts
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd?source=post_page-----dbf1e1e3cf6c--------------------------------)
    [## How To Solve Travelling Salesman Problem With Simulated Annealing'
  prefs: []
  type: TYPE_NORMAL
- en: Getting the optimal solution to the Travelling Salesman Problem using the Simulated
    Annealing optimisation algorithm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd?source=post_page-----dbf1e1e3cf6c--------------------------------)
    [](/tabu-search-simply-explained-ee2852339d78?source=post_page-----dbf1e1e3cf6c--------------------------------)
    [## Tabu Search Simply Explained
  prefs: []
  type: TYPE_NORMAL
- en: An intuitive explanation of the Tabu Search optimization algorithm and how to
    apply it to the traveling salesman…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/tabu-search-simply-explained-ee2852339d78?source=post_page-----dbf1e1e3cf6c--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Python Implementation Example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Travelling Salesman Problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will now code the hill climbing algorithm to solve the traveling salesman
    problem (TSP). However, before that, let’s briefly state and explain what we are
    trying to solve in the TSP.
  prefs: []
  type: TYPE_NORMAL
- en: 'TSP is a classic problem in optimization and poses the question:'
  prefs: []
  type: TYPE_NORMAL
- en: '*‘What is the shortest route to visit a given list of cities once and returning
    to the starting point?’*'
  prefs: []
  type: TYPE_NORMAL
- en: The problem sounds very simple, however, solving it by brute force becomes computationally
    intractable due to the [***combinatorial explosion***](https://en.wikipedia.org/wiki/Combinatorial_explosion)
    that occurs as the number of cities increases. For example, for 10 cities there
    are [***~300,000 possible*** routes](https://www.lancaster.ac.uk/stor-i-student-sites/libby-daniells/2020/04/21/the-travelling-salesman-problem/)!
  prefs: []
  type: TYPE_NORMAL
- en: Number of possible routes as a function of the number of cities **n** is **(n-1)!/2\.**
    So, its computational complexity is O(n!).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: At about 20 cities is when the brute-force approach becomes infeasible to solve
    with it taking [***~2,000*** years to compute!](https://www.sciencedirect.com/topics/earth-and-planetary-sciences/traveling-salesman-problem)
    Astonishingly, for 61 cities it is a wapping 10⁶⁷ years!
  prefs: []
  type: TYPE_NORMAL
- en: Hill Climbing For TSP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s briefly list the pseudo-code that we will use to implement the hill climbing
    to solve the TSP. We will be using the steepest ascent version:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Generate an initial tour and set it as our best solution.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Produce a list of neighbour solutions by swapping two cities from the current
    best solution.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Get the best neighbourhood solution (shortest distance) from these neighbourhood
    solutions and set it to the current solution.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Compare the current solution to the best solution. If it is shorter, then
    set the best solution equal to the current solution.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Repeat this process until the current solution is worse than the best solution.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Below is a boilerplate`HillClimb` class for the above algorithm we just ran
    through:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now run the class and plot the results of the initial and best found
    solutions for 20 synthetically generated cities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b00447a0de445beb3ae729a0e71336e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0ccc240c2031cb4aecc1e9d78f63efc8.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see the hill climb has found a better solution than the initial solution,
    however it clearly isn’t the global minimum. Nonetheless, it found a sufficient
    solution and it didn’t take 2,000 years!
  prefs: []
  type: TYPE_NORMAL
- en: Summary & Further Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this post, we have discussed the meta-heuristic local search hill-climbing
    algorithm. This algorithm makes small incremental perturbations to the best solution
    until we reach a point where the changes do not lead to a better solution. This
    algorithm produced sufficient performance for the traveling salesman problem,
    however it got stuck in a local minimum which is the main con of this optimization
    algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full code used in this article can be found at my GitHub here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/hill-climbing?source=post_page-----dbf1e1e3cf6c--------------------------------)
    [## Medium-Articles/Optimisation/hill-climbing at main · egorhowell/Medium-Articles'
  prefs: []
  type: TYPE_NORMAL
- en: You can't perform that action at this time. You signed in with another tab or
    window. You signed out in another tab or…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/hill-climbing?source=post_page-----dbf1e1e3cf6c--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: References & Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Algorithms for Optimization*](https://mitpress.mit.edu/9780262039420/algorithms-for-optimization/)*.*
    [Mykel J. Kochenderfer](https://mitpress.mit.edu/author/mykel-j-kochenderfer-18773)
    and [Tim A. Wheeler](https://mitpress.mit.edu/author/tim-a-wheeler-28144). ***2019***.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another Thing!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist. There is no “fluff”
    or “clickbait,” just pure actionable insights from a practicing Data Scientist.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----dbf1e1e3cf6c--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  prefs: []
  type: TYPE_NORMAL
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----dbf1e1e3cf6c--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Connect With Me!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[**YouTube**](https://www.youtube.com/@egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**GitHub**](https://github.com/egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
