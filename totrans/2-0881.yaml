- en: Feature Engineering using Regular Expression (RegEx) in Pandas DataFrame
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Pandas DataFrame 中使用正则表达式 (RegEx) 进行特征工程
- en: 原文：[https://towardsdatascience.com/feature-engineering-using-regular-expression-regex-in-pandas-dataframe-c965380316da](https://towardsdatascience.com/feature-engineering-using-regular-expression-regex-in-pandas-dataframe-c965380316da)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/feature-engineering-using-regular-expression-regex-in-pandas-dataframe-c965380316da](https://towardsdatascience.com/feature-engineering-using-regular-expression-regex-in-pandas-dataframe-c965380316da)
- en: Discover how to manipulate your string columns easily using Regular Expressions
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发现如何轻松地使用正则表达式操作你的字符串列
- en: '[](https://weimenglee.medium.com/?source=post_page-----c965380316da--------------------------------)[![Wei-Meng
    Lee](../Images/10fc13e8a6858502d6a7b89fcaad7a10.png)](https://weimenglee.medium.com/?source=post_page-----c965380316da--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c965380316da--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c965380316da--------------------------------)
    [Wei-Meng Lee](https://weimenglee.medium.com/?source=post_page-----c965380316da--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://weimenglee.medium.com/?source=post_page-----c965380316da--------------------------------)[![魏孟李](../Images/10fc13e8a6858502d6a7b89fcaad7a10.png)](https://weimenglee.medium.com/?source=post_page-----c965380316da--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c965380316da--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c965380316da--------------------------------)
    [魏孟李](https://weimenglee.medium.com/?source=post_page-----c965380316da--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c965380316da--------------------------------)
    ·13 min read·Jan 6, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c965380316da--------------------------------)
    ·阅读时间 13 分钟·2023年1月6日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/30db292baa4a61d31d6260220a331a59.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/30db292baa4a61d31d6260220a331a59.png)'
- en: Photo by [Clark Van Der Beken](https://unsplash.com/@snapsbyclark?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Clark Van Der Beken](https://unsplash.com/@snapsbyclark?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Manipulating string columns in Pandas is one of the most common operations that
    a data engineer will perform. Most of the time, you would do things like splitting
    columns, extracting key information from columns, etc. This task is commonly known
    as *feature engineering*. In this article, I will walk you through some of the
    feature engineering techniques you can harness by using the power of *Regular
    Expressions*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Pandas 中操作字符串列是数据工程师最常见的操作之一。大多数情况下，你会进行如拆分列、从列中提取关键信息等操作。这个任务通常被称为*特征工程*。在这篇文章中，我将带你了解一些你可以利用*正则表达式*的特征工程技巧。
- en: A **regular expression** (commonly referred to as **regex** or **regexp**)is
    a sequence of characters that specifies a search pattern in text. Regex is extremely
    powerful, but it can also be intimidating to the beginners. And so in this article,
    I will provide a gentle introduction to regex to get you started.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**正则表达式**（通常称为**regex**或**regexp**）是一种字符序列，指定了文本中的搜索模式。正则表达式功能强大，但对初学者来说也可能令人畏惧。因此，在这篇文章中，我将提供一个温和的正则表达式入门介绍，帮助你入门。'
- en: Our Dataset
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的数据集
- en: As usual, my favorite dataset to use for illustrating the concepts in this article
    is the Titanic dataset. It contains a few string columns that are excellent candidates
    for performing feature engineering.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，我喜欢使用的示例数据集是 Titanic 数据集。它包含几个字符串列，非常适合进行特征工程。
- en: '***Source of Data****: The data source for this article is from* [*https://www.kaggle.com/datasets/tedllh/titanic-train*](https://www.kaggle.com/datasets/tedllh/titanic-train)*.*'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***数据来源****: 本文的数据来源于* [*https://www.kaggle.com/datasets/tedllh/titanic-train*](https://www.kaggle.com/datasets/tedllh/titanic-train)*.*'
- en: ''
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Licensing —*** *Database Contents License (DbCL) v1.0* [*https://opendatacommons.org/licenses/dbcl/1-0/*](https://opendatacommons.org/licenses/dbcl/1-0/)'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***许可证——*** *数据库内容许可证 (DbCL) v1.0* [*https://opendatacommons.org/licenses/dbcl/1-0/*](https://opendatacommons.org/licenses/dbcl/1-0/)'
- en: 'Let’s load the Titanic dataset and examine its various rows and columns:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们加载 Titanic 数据集并检查其各种行和列：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In particular, I will perform feature engineering using the **Name** and **Cabin**
    columns:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我将使用**姓名**和**船舱**列来进行特征工程：
- en: '![](../Images/7f0d70b1296f1577f184e5ab2d8bb886.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7f0d70b1296f1577f184e5ab2d8bb886.png)'
- en: All images in this article were created by the author.
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 本文中的所有图片均由作者创建。
- en: Basics of Regular Expressions
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正则表达式基础
- en: Before we go head on to perform feature engineering on the Titanic dataset,
    it would be really useful to go through the basics of regex and learn how to use
    it in Python.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始对Titanic数据集进行特征工程之前，了解正则表达式的基础并学习如何在Python中使用它将非常有用。
- en: 'To use regex in Python, import the `re` package:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Python中使用正则表达式，请导入`re`包：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the following sections, I will illustrate how to use regex to do the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我将说明如何使用正则表达式来完成以下操作：
- en: How to search for a string within a string
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在字符串中搜索子字符串
- en: How to search for a string based on specific casing
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何基于特定大小写搜索字符串
- en: How to use anchors to search for strings in the beginning or end of a string
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用锚点来搜索字符串的开始或结束
- en: How to search for strings with a specific pattern
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何搜索具有特定模式的字符串
- en: How to search for strings with repeated patterns
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何搜索具有重复模式的字符串
- en: Searching for a string
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索字符串
- en: 'Suppose you want to search for the world “William” in the string “Allen, Mr.
    William Henry”. You can use the `search()` function (from the `re` package) by
    passing in the word to search, and the string to search from:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想在字符串“Allen, Mr. William Henry”中搜索单词“William”。你可以使用`search()`函数（来自`re`包），传入要搜索的单词和要搜索的字符串：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `search()` function returns a `Match` object containing information about
    the search and the result:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`search()`函数返回一个包含搜索信息和结果的`Match`对象：'
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the above output, you can see that a match for “William” was found from index
    of 11 to 17 (not including 18) of the string. If there is no match, `None` will
    be returned.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的输出中，你可以看到“William”从字符串的第11到17的索引处找到了匹配（不包括18）。如果没有匹配，`None`将被返回。
- en: 'You can obtain the word that matches your search using the `group()` function
    of the `Match` object:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`Match`对象的`group()`函数获取匹配你搜索的单词：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: I will explain the concept of **groups** in more details in the later sections.
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我将在后面的部分更详细地解释**分组**的概念。
- en: 'You can specify the group that matches your search using its group number:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`Match`对象的`group()`函数来指定匹配你搜索的组：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The above statements both produce the same output:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句都产生相同的输出：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Searching for a string based on different casings
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于不同大小写的字符串搜索
- en: 'Sometimes you want to search for a word based on specific casings. For example,
    if you want to look for “William” or “william”, you can use the `[]` construct
    to indicate a match of individual characters. For example, the following expression
    looks for either “W” or “w”, followed by “illiam”:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你想根据特定的大小写搜索单词。例如，如果你想查找“William”或“william”，你可以使用`[]`结构来表示匹配单个字符。例如，以下表达式查找“W”或“w”，后跟“illiam”：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you want to match a word regardless of casing, use the `(?i)` modifier:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想匹配不考虑大小写的单词，请使用`(?i)`修饰符：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Searching for the beginning or end of string
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索字符串的开始或结束
- en: 'In regex, you can use anchors — `$` and `^`, to specify the position of strings
    that you want to match. For example, if you want to look for a string that ends
    with “Henry”, you can use the `$` anchor in your expression:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在正则表达式中，你可以使用锚点 — `$`和`^`，来指定你想匹配的字符串位置。例如，如果你想查找以“Henry”结尾的字符串，可以在表达式中使用`$`锚点：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Likewise, if you want to look for the string that begins with “Allen”, you
    can use the `^` anchor in your expression:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果你想查找以“Allen”开头的字符串，可以在表达式中使用`^`锚点：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Searching for a pattern
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索模式
- en: 'Suppose we have a string like this: “Allen, Mr. William Henry”. We are interested
    to extract the title — “Mr”, in this case, from the sentence. Based on the position
    of the title, we can see the following pattern:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有这样的字符串：“Allen, Mr. William Henry”。我们希望从句子中提取标题——“Mr”。根据标题的位置，我们可以看到以下模式：
- en: There is a space before the title
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题前有一个空格
- en: The title ends with a period
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题以句点结束
- en: 'With this, we can create the following expression:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些，我们可以创建以下表达式：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The above expression needs a little explanation.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 上述表达式需要一些解释。
- en: First, there is a space indicating that we need to find the starting space in
    front of the title.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，有一个空格表示我们需要找到标题前面的起始空格。
- en: Next, we have a pair of parentheses representing a group. Within this group,
    we have a `[]` indicating that we want to match any characters from “A” to “Z”,
    or “a” to “z”, and the `+` character indicates that we want to match one or more
    such character.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们有一对括号表示一个组。在这个组内，我们有`[]`表示我们想匹配从“A”到“Z”或从“a”到“z”的任何字符，`+`字符表示我们想匹配一个或多个这样的字符。
- en: The `.` (period) is a special character in RegEx that matches any character
    except new line (`\n`). So if we want to match a period in our string, we need
    to use the `\` (escape character) to turn off the special meaning of `.`.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.`（句点）是正则表达式中的一个特殊字符，它匹配任何字符，除了换行符（`\n`）。所以如果我们想在字符串中匹配一个句点，我们需要使用 `\`（转义字符）来取消
    `.` 的特殊含义。'
- en: 'The following figure summarizes the above description:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图形总结了上述描述：
- en: '![](../Images/c572315346dd42c902a5784f382c2e3f.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c572315346dd42c902a5784f382c2e3f.png)'
- en: 'The first output of `name_search.group(0)` is (note the space in front of `Mr.`):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`name_search.group(0)` 的第一个输出是（注意 `Mr.` 前的空格）：'
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This output contains the matches of your expression — `‘ ([A-Za-z]+)\.’`. The
    second output is:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输出包含你表达式的匹配项—— `‘ ([A-Za-z]+)\.’`。第二个输出是：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This output is the result of the first group (since there is only one group)
    in your expression — `([A-Za-z]+)`. Hence the output does not contain the period.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输出是你表达式中第一个组的结果（因为只有一个组）—— `([A-Za-z]+)`。因此，输出中不包含句点。
- en: 'Since there is only one group in your expression, if you try to access the
    second group in the result, you will hit an error:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在你的表达式中只有一个组，如果你尝试访问结果中的第二个组，你会遇到错误：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How about an example where we have more than one group in our expression?
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果我们在表达式中有多个组呢？
- en: 'Suppose we have a string containing a name with two titles (I know I am stretching
    this example a bit too far) and we want to find the two titles in this string.
    We could do that with the following expression:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个包含两个称谓的名字的字符串（我知道这个例子有点牵强），我们想在这个字符串中找到这两个称谓。我们可以使用以下表达式来实现：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following figure explains the output of each group:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图形解释了每个组的输出：
- en: '![](../Images/7b6997d292fc921212bba159d3d94e81.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7b6997d292fc921212bba159d3d94e81.png)'
- en: Extracting based on repeat patterns
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于重复模式的提取
- en: 'Sometimes you just want to extract repeat patterns. For example, say you have
    a string containing different titles, like this: `‘Mrs. Mr. Ms. Dr.’`. To extract
    all the titles in this string, you can use the `findall()` function, like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你只是想提取重复模式。例如，假设你有一个包含不同称谓的字符串，如 `‘Mrs. Mr. Ms. Dr.’`。要提取这个字符串中的所有称谓，你可以使用
    `findall()` 函数，如下所示：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The result will be a list of non-overlapping matches. In this case, the output
    is:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将是一个非重叠匹配的列表。在这种情况下，输出是：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Using Regular Expression on a Pandas Series str() function
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Pandas Series str() 函数中使用正则表达式
- en: 'Now that you had a taste of how regex works, it is now time to see how you
    can use regex on Pandas. The following methods in Pandas Series’s vectorized string
    functions (`Series.str()`) allows you to use regex expressions:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经对正则表达式有了一些了解，现在是时候看看如何在 Pandas 中使用正则表达式了。Pandas Series 的向量化字符串函数（`Series.str()`）中的以下方法允许你使用正则表达式：
- en: '`count()`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count()`'
- en: '`extract()`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extract()`'
- en: '`match()`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`match()`'
- en: '`contains()`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contains()`'
- en: '`replace()`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`replace()`'
- en: '`findall()`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`findall()`'
- en: '`split()`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`split()`'
- en: Let’s go through each of these functions with examples.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过示例来逐一讲解这些函数。
- en: Using the `count()` function
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `count()` 函数
- en: 'Let’s start with the `count()` function. Say you want to find all the people
    in the Titanic dataset that has names that start with “Braund” and contains “Owen”.
    You can do so using the following expression in the `count()` function:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 `count()` 函数开始。假设你想找到 Titanic 数据集中所有名字以“Braund”开头并包含“Owen”的人。你可以使用以下表达式在
    `count()` 函数中实现：
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here are the uses of the various special characters in regex:'
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这里是正则表达式中各种特殊字符的用法：
- en: ''
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`^` Start of string or line'
  id: totrans-97
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`^` 字符串或行的开头'
- en: '`.` Matches any single character except the newline character.'
  id: totrans-98
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`.` 匹配除了换行符之外的任何单个字符。'
- en: '`+` 1 or more occurrences'
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`+` 1 次或更多次出现'
- en: '`*` 0 or more occurrences'
  id: totrans-100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`*` 0 次或更多次出现'
- en: 'You will see the result as a Series, with value of 1 for each row that matches
    your expression:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到结果作为一个 Series，对于每个与表达式匹配的行，值为 1：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you want to count the total number of rows that match your search expression,
    you can use the `sum()` function:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想计算与搜索表达式匹配的总行数，你可以使用 `sum()` 函数：
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To display the row(s) that match the expression, you can pass the result into
    the original dataframe:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示与表达式匹配的行，你可以将结果传入原始数据框：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following figure shows the row(s) that matched the expression:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图形显示了与表达式匹配的行：
- en: '![](../Images/3009964a3a48f201edd37864f62c90f4.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3009964a3a48f201edd37864f62c90f4.png)'
- en: 'Note the `+` in the expression `‘^Braund.+Owen’`. In this case, it means that
    there must be at least one character separating Braund and Owen. For example,
    “Braund,Owen”, or “Braund Owen”. If you want to match names such “BraundOwen”,
    then your expression should use `*`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 注意表达式`‘^Braund.+Owen’`中的`+`。在这种情况下，它意味着Braund和Owen之间必须至少有一个字符。例如，“Braund,Owen”或“Braund
    Owen”。如果你想匹配像“BraundOwen”这样的名字，那么你的表达式应该使用`*`：
- en: '[PRE22]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If you simply want to find all the names that contains the word “William”,
    then simply set the expression to “William”, like this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想找到包含“William”一词的所有名字，只需将表达式设置为“William”，如下所示：
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](../Images/7cb22ad36774a2a0d8d79a3d69c4c78c.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7cb22ad36774a2a0d8d79a3d69c4c78c.png)'
- en: 'The following statements show row(s) that contain more than one occurrences
    of the word “William”:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下陈述显示了包含多次出现“William”一词的行：
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![](../Images/c17d4d4feaf385cf54205d6dd22ca10c.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c17d4d4feaf385cf54205d6dd22ca10c.png)'
- en: Using the `extract()` function
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`extract()`函数
- en: 'Remember earlier I mentioned that you can extract the title from the passenger’s
    name? Using the **Name** column, you can use the `extract()` function to pass
    in a regex expression to extract the title. The result can then be added as a
    new column in the dataframe:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 记得之前我提到过你可以从乘客的名字中提取标题吗？使用**Name**列，你可以使用`extract()`函数传入一个正则表达式来提取标题。结果可以作为新列添加到数据框中：
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![](../Images/4d1cfb88e220c31ad066cc5d9ab49df9.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4d1cfb88e220c31ad066cc5d9ab49df9.png)'
- en: 'Another interesting column that you can use the `extract()` function on is
    the **Cabin** column. If you examine the unique values of the **Cabin** column:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`extract()`函数的另一个有趣的列是**Cabin**列。如果你检查**Cabin**列的唯一值：
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You will see the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下内容：
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The cabin values start with an alphabet from A to G, followed by a numerical
    value. It might be useful to be able to extract the alphabet (which may represent
    the different decks on the Titanic or the different cabin type), followed by the
    numerical value. You can do the extraction as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 舱房值以字母A到G开头，后跟一个数字值。提取字母（可能代表泰坦尼克号上的不同甲板或不同的舱房类型）和数字值可能会很有用。你可以按如下方式进行提取：
- en: '[PRE28]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![](../Images/4d86621dff80add34680a31a25aa6c08.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4d86621dff80add34680a31a25aa6c08.png)'
- en: The expression of `‘^.{1}(.*)’` means that the value of the **Cabin** should
    start with exactly one character (`^.{1}`) and then you want to match the rest
    with zero or more characters (`(.*)`). This will essentially extract the cabin
    number.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式`‘^.{1}(.*)’`的意思是**Cabin**的值应该以一个字符开始（`^.{1}`），然后你想匹配其余部分的零个或多个字符（`(.*)`）。这将本质上提取舱房号。
- en: Unfortunately, the Cabin column has too many empty cells to make this column
    useful.
  id: totrans-129
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不幸的是，Cabin列有太多空单元格，使得这一列没有用处。
- en: Using the `contains()` and `match()` functions
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`contains()`和`match()`函数
- en: Recall earlier we used the `count()` function to find and count all rows containing
    the word “William”?
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 记得之前我们用`count()`函数找出并统计了所有包含“William”一词的行吗？
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If you don’t need to count the rows and simply want the rows, you can use the
    `contains()` function:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不需要统计行数，只需获取这些行，可以使用`contains()`函数：
- en: '[PRE30]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![](../Images/6ac20e29f887191b6bea3417a2880356.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6ac20e29f887191b6bea3417a2880356.png)'
- en: 'The above result shows all the rows whose name contains the word “William”.
    Of course, you can use the `^`anchor in your expression to indicate that you want
    all rows whose name starts with “William”:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 上述结果显示了所有名称中包含“William”一词的行。当然，你可以在表达式中使用`^`锚点来表示你想要所有名称以“William”开头的行：
- en: '[PRE31]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '![](../Images/43f82eb71cad5101582b907db4cd85b5.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/43f82eb71cad5101582b907db4cd85b5.png)'
- en: 'If you simply want to find strings at the beginning, you can actually use the
    `match()` function. The following code snippet produces the same output as the
    above:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想找到开头的字符串，你实际上可以使用`match()`函数。以下代码片段产生的输出与上述相同：
- en: '[PRE32]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Using the `replace()` function
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`replace()`函数
- en: 'Earlier, we extracted the title of the passenger using their names. Let’s examine
    the different titles that we have extracted:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们使用乘客的名字提取了标题。让我们检查一下我们提取的不同标题：
- en: '[PRE33]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You can see that some of the titles are duplicates — titles such as *Mlle*,
    *Ms*, and *Mme* can be abbreviated as **Miss** using the `replace()` function:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到一些标题是重复的——像*Mlle*、*Ms*和*Mme*这样的标题可以通过`replace()`函数缩写为**Miss**：
- en: '[PRE34]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Here’s the meaning of Mme and Mlle:'
  id: totrans-146
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这里是Mme和Mlle的含义：
- en: ''
  id: totrans-147
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Mme** (Madame) — french word for a woman'
  id: totrans-148
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Mme**（Madame）——法语中对女性的称谓'
- en: ''
  id: totrans-149
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Mlle (**Mademoiselle**) —** French courtesy title, traditionally given to
    an unmarried woman.'
  id: totrans-150
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Mlle (**小姐**) —** 法语的礼貌称谓，传统上用于未婚女性。'
- en: If you want to replace the title in the **Name** column directly, you can pass
    in a regex expression into the `replace()` function
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想直接替换**Name**列中的称谓，可以将正则表达式传递给`replace()`函数。
- en: '[PRE35]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The titles in the **Name** column will now be updated.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**Name**列中的称谓现在将被更新。'
- en: Using the `findall()` function
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`findall()`函数
- en: 'If you want to quickly find all the names in the **Name** column that matches
    certain patterns, you can use the `findall()` function:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想快速找到**Name**列中与特定模式匹配的所有名称，可以使用`findall()`函数：
- en: '[PRE36]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The above expression finds all the names that contain the letters “**ll**”.
    The `findall()` function returns a series of list values:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 上述表达式查找所有包含字母“**ll**”的名称。`findall()`函数返回一系列列表值：
- en: '![](../Images/0899c88d210dc562d37b7a7c5da79d50.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0899c88d210dc562d37b7a7c5da79d50.png)'
- en: Each item in the list is a list containing zero or more tuples. Each tuple contains
    two elements — the first is the matching word and the second is the value of the
    group.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的每个项目是一个包含零个或多个元组的列表。每个元组包含两个元素 — 第一个是匹配的词，第二个是组的值。
- en: 'To print all matching rows, you can use list comprehension:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要打印所有匹配的行，你可以使用列表推导：
- en: '[PRE37]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The above expression produce the following output:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 上述表达式产生了以下输出：
- en: '[PRE38]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If you want to print out the names nicely, here is a little code snippet to
    do so:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将名称打印得更美观，这里有一个小代码片段：
- en: '[PRE39]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'And the result looks like this:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '[PRE40]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Using the `split()` function
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`split()`函数
- en: 'If you examine the name for each passenger, you will see the following pattern
    and the associated regex for finding them:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你检查每个乘客的名字，你会看到以下模式和用于查找它们的正则表达式：
- en: '![](../Images/2c47e44ec266f26832a9667f495b236c.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2c47e44ec266f26832a9667f495b236c.png)'
- en: More interesting are the expressions
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 更有趣的是这些表达式
- en: '`([\’A-Za-z ()”//.-]+)`'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`([\’A-Za-z ()”//.-]+)`'
- en: '`([A-Za-z ()”//.-]*)`'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`([A-Za-z ()”//.-]*)`'
- en: 'This is because the first and last name of a passenger may include the following
    special characters:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为乘客的名字和姓氏可能包含以下特殊字符：
- en: — Space
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: — 空格
- en: '`‘` — Apostrophe (example — “O**’**Driscoll” for last name)'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`‘` — 撇号（例如 — “O**’**Driscoll”用于姓氏）'
- en: '`()` — parentheses (example — “John Bradley **(**Florence Briggs Thayer**)**”
    for first name)'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`()` — 圆括号（例如 — “John Bradley **(**Florence Briggs Thayer**)**”用于名字）'
- en: '`“` — Double quotes (example — **“**Anna “Annie**”**” for first name)'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`“` — 双引号（例如 — **“**Anna “Annie**”**”用于名字）'
- en: '`/` — Slash (example — “Carl**/**Charles Peter” for first name)'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/` — 斜杠（例如 — “Carl**/**Charles Peter”用于名字）'
- en: '`.` — Period (example “Martin (Elizabeth L**.** Barrett)” for first name)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.` — 句点（例如 “Martin (Elizabeth L**.** Barrett)”用于名字）'
- en: '`-` — Hyphen (example —“ Countess. of (Lucy Noel Martha Dyer**-**Edwards)”
    for first name)'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-` — 连字符（例如 — “Countess. of (Lucy Noel Martha Dyer**-**Edwards)”用于名字）'
- en: 'You can now use the following code snippet to extract the last name, title,
    and first name of the passengers:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以使用以下代码片段提取乘客的姓氏、称谓和名字：
- en: '[PRE41]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '![](../Images/1c35397be19d3ca1215778aca4a2253e.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1c35397be19d3ca1215778aca4a2253e.png)'
- en: 'Columns 0 and 4 can be dropped as they are empty:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 列0和列4可以被删除，因为它们是空的：
- en: '[PRE42]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '![](../Images/1a0d39749643218356a459c3a981433c.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1a0d39749643218356a459c3a981433c.png)'
- en: 'Finally, you can assign the dataframe some meaningful column names:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以为数据框分配一些有意义的列名：
- en: '[PRE43]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '![](../Images/42562f4d8a4feb7f5815b5b3875150e8.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/42562f4d8a4feb7f5815b5b3875150e8.png)'
- en: The extraction of title is helpful in determining the age of a passenger if
    the age value is missing. On the other hand, extracting the last name is helpful
    to determine if two or more passengers are from the same family.
  id: totrans-191
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 提取称谓有助于在年龄值缺失的情况下确定乘客的年龄。另一方面，提取姓氏有助于确定两个或更多乘客是否来自同一个家庭。
- en: If you like reading my articles and that it helped your career/study, please
    consider signing up as a Medium member. It is $5 a month, and it gives you unlimited
    access to all the articles (including mine) on Medium. If you sign up using the
    following link, I will earn a small commission (at no additional cost to you).
    Your support means that I will be able to devote more time on writing articles
    like this.
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果你喜欢阅读我的文章并且这些文章对你的职业/学习有帮助，请考虑成为 Medium 会员。每月费用为 $5，会员可以无限访问 Medium 上的所有文章（包括我的）。如果你通过以下链接注册，我将获得小额佣金（对你没有额外费用）。你的支持意味着我可以投入更多时间撰写像这样的文章。
- en: '[](https://weimenglee.medium.com/membership?source=post_page-----c965380316da--------------------------------)
    [## Join Medium with my referral link - Wei-Meng Lee'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 使用我的推荐链接加入Medium - Wei-Meng Lee](https://weimenglee.medium.com/membership?source=post_page-----c965380316da--------------------------------)'
- en: Read every story from Wei-Meng Lee (and thousands of other writers on Medium).
    Your membership fee directly supports…
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读来自Wei-Meng Lee（以及Medium上的成千上万其他作者）的每个故事。你的会员费直接支持…
- en: weimenglee.medium.com](https://weimenglee.medium.com/membership?source=post_page-----c965380316da--------------------------------)
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '[weimenglee.medium.com](https://weimenglee.medium.com/membership?source=post_page-----c965380316da--------------------------------)'
- en: Summary
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'This has been quite a whirlwind tour of using regular expression in Python,
    as well as in Pandas. As there are quite a number of functions that I have used,
    I thought it might be useful to summarize the functions that I have covered and
    when you should use them:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这次关于在Python和Pandas中使用正则表达式的旅行相当迅速。由于我使用了相当多的函数，我认为总结我涵盖的函数以及你应该何时使用它们可能会有用：
- en: '`count()` — use this function if you want to count the number of rows matching
    your patterns'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count()` — 如果你想计算与模式匹配的行数，请使用此函数'
- en: '`extract()` — use this function if you want to extract strings from a string'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extract()` — 如果你想从字符串中提取字符串，请使用此函数'
- en: '`match()` — use this function if you want to check if a string starts with
    a specific string'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`match()` — 如果你想检查一个字符串是否以特定字符串开头，请使用此函数'
- en: '`contains()` — use this function if you want to check if a string contains
    a specific string'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`contains()` — 如果你想检查一个字符串是否包含特定字符串，请使用此函数'
- en: '`replace()` — use this function to replace a string with another string'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`replace()` — 使用此函数将一个字符串替换为另一个字符串'
- en: '`findall()` — use this function to find all occurrences of a pattern within
    a string'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`findall()` — 使用此函数查找字符串中所有模式的出现'
- en: '`split()` — use this function to split the strings into multiple columns'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`split()` — 使用此函数将字符串拆分为多列'
- en: Have fun with regex and let me know if this is useful to you!
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 玩得开心，并告诉我这对你是否有用！
