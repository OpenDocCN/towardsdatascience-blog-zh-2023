- en: Feature Engineering using Regular Expression (RegEx) in Pandas DataFrame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/feature-engineering-using-regular-expression-regex-in-pandas-dataframe-c965380316da](https://towardsdatascience.com/feature-engineering-using-regular-expression-regex-in-pandas-dataframe-c965380316da)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Discover how to manipulate your string columns easily using Regular Expressions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://weimenglee.medium.com/?source=post_page-----c965380316da--------------------------------)[![Wei-Meng
    Lee](../Images/10fc13e8a6858502d6a7b89fcaad7a10.png)](https://weimenglee.medium.com/?source=post_page-----c965380316da--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c965380316da--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c965380316da--------------------------------)
    [Wei-Meng Lee](https://weimenglee.medium.com/?source=post_page-----c965380316da--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c965380316da--------------------------------)
    ·13 min read·Jan 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/30db292baa4a61d31d6260220a331a59.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Clark Van Der Beken](https://unsplash.com/@snapsbyclark?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating string columns in Pandas is one of the most common operations that
    a data engineer will perform. Most of the time, you would do things like splitting
    columns, extracting key information from columns, etc. This task is commonly known
    as *feature engineering*. In this article, I will walk you through some of the
    feature engineering techniques you can harness by using the power of *Regular
    Expressions*.
  prefs: []
  type: TYPE_NORMAL
- en: A **regular expression** (commonly referred to as **regex** or **regexp**)is
    a sequence of characters that specifies a search pattern in text. Regex is extremely
    powerful, but it can also be intimidating to the beginners. And so in this article,
    I will provide a gentle introduction to regex to get you started.
  prefs: []
  type: TYPE_NORMAL
- en: Our Dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As usual, my favorite dataset to use for illustrating the concepts in this article
    is the Titanic dataset. It contains a few string columns that are excellent candidates
    for performing feature engineering.
  prefs: []
  type: TYPE_NORMAL
- en: '***Source of Data****: The data source for this article is from* [*https://www.kaggle.com/datasets/tedllh/titanic-train*](https://www.kaggle.com/datasets/tedllh/titanic-train)*.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***Licensing —*** *Database Contents License (DbCL) v1.0* [*https://opendatacommons.org/licenses/dbcl/1-0/*](https://opendatacommons.org/licenses/dbcl/1-0/)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let’s load the Titanic dataset and examine its various rows and columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In particular, I will perform feature engineering using the **Name** and **Cabin**
    columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7f0d70b1296f1577f184e5ab2d8bb886.png)'
  prefs: []
  type: TYPE_IMG
- en: All images in this article were created by the author.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Basics of Regular Expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we go head on to perform feature engineering on the Titanic dataset,
    it would be really useful to go through the basics of regex and learn how to use
    it in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use regex in Python, import the `re` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following sections, I will illustrate how to use regex to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How to search for a string within a string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to search for a string based on specific casing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use anchors to search for strings in the beginning or end of a string
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to search for strings with a specific pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to search for strings with repeated patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching for a string
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Suppose you want to search for the world “William” in the string “Allen, Mr.
    William Henry”. You can use the `search()` function (from the `re` package) by
    passing in the word to search, and the string to search from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `search()` function returns a `Match` object containing information about
    the search and the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the above output, you can see that a match for “William” was found from index
    of 11 to 17 (not including 18) of the string. If there is no match, `None` will
    be returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can obtain the word that matches your search using the `group()` function
    of the `Match` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: I will explain the concept of **groups** in more details in the later sections.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'You can specify the group that matches your search using its group number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statements both produce the same output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Searching for a string based on different casings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes you want to search for a word based on specific casings. For example,
    if you want to look for “William” or “william”, you can use the `[]` construct
    to indicate a match of individual characters. For example, the following expression
    looks for either “W” or “w”, followed by “illiam”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to match a word regardless of casing, use the `(?i)` modifier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Searching for the beginning or end of string
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In regex, you can use anchors — `$` and `^`, to specify the position of strings
    that you want to match. For example, if you want to look for a string that ends
    with “Henry”, you can use the `$` anchor in your expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Likewise, if you want to look for the string that begins with “Allen”, you
    can use the `^` anchor in your expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Searching for a pattern
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Suppose we have a string like this: “Allen, Mr. William Henry”. We are interested
    to extract the title — “Mr”, in this case, from the sentence. Based on the position
    of the title, we can see the following pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: There is a space before the title
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The title ends with a period
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With this, we can create the following expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The above expression needs a little explanation.
  prefs: []
  type: TYPE_NORMAL
- en: First, there is a space indicating that we need to find the starting space in
    front of the title.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we have a pair of parentheses representing a group. Within this group,
    we have a `[]` indicating that we want to match any characters from “A” to “Z”,
    or “a” to “z”, and the `+` character indicates that we want to match one or more
    such character.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `.` (period) is a special character in RegEx that matches any character
    except new line (`\n`). So if we want to match a period in our string, we need
    to use the `\` (escape character) to turn off the special meaning of `.`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure summarizes the above description:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c572315346dd42c902a5784f382c2e3f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first output of `name_search.group(0)` is (note the space in front of `Mr.`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This output contains the matches of your expression — `‘ ([A-Za-z]+)\.’`. The
    second output is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This output is the result of the first group (since there is only one group)
    in your expression — `([A-Za-z]+)`. Hence the output does not contain the period.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since there is only one group in your expression, if you try to access the
    second group in the result, you will hit an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How about an example where we have more than one group in our expression?
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we have a string containing a name with two titles (I know I am stretching
    this example a bit too far) and we want to find the two titles in this string.
    We could do that with the following expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following figure explains the output of each group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7b6997d292fc921212bba159d3d94e81.png)'
  prefs: []
  type: TYPE_IMG
- en: Extracting based on repeat patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes you just want to extract repeat patterns. For example, say you have
    a string containing different titles, like this: `‘Mrs. Mr. Ms. Dr.’`. To extract
    all the titles in this string, you can use the `findall()` function, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will be a list of non-overlapping matches. In this case, the output
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Using Regular Expression on a Pandas Series str() function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you had a taste of how regex works, it is now time to see how you
    can use regex on Pandas. The following methods in Pandas Series’s vectorized string
    functions (`Series.str()`) allows you to use regex expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`count()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`extract()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`match()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`contains()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`replace()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`findall()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`split()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s go through each of these functions with examples.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `count()` function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start with the `count()` function. Say you want to find all the people
    in the Titanic dataset that has names that start with “Braund” and contains “Owen”.
    You can do so using the following expression in the `count()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the uses of the various special characters in regex:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`^` Start of string or line'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`.` Matches any single character except the newline character.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`+` 1 or more occurrences'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`*` 0 or more occurrences'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'You will see the result as a Series, with value of 1 for each row that matches
    your expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to count the total number of rows that match your search expression,
    you can use the `sum()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To display the row(s) that match the expression, you can pass the result into
    the original dataframe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following figure shows the row(s) that matched the expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3009964a3a48f201edd37864f62c90f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note the `+` in the expression `‘^Braund.+Owen’`. In this case, it means that
    there must be at least one character separating Braund and Owen. For example,
    “Braund,Owen”, or “Braund Owen”. If you want to match names such “BraundOwen”,
    then your expression should use `*`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If you simply want to find all the names that contains the word “William”,
    then simply set the expression to “William”, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7cb22ad36774a2a0d8d79a3d69c4c78c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following statements show row(s) that contain more than one occurrences
    of the word “William”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c17d4d4feaf385cf54205d6dd22ca10c.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the `extract()` function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Remember earlier I mentioned that you can extract the title from the passenger’s
    name? Using the **Name** column, you can use the `extract()` function to pass
    in a regex expression to extract the title. The result can then be added as a
    new column in the dataframe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4d1cfb88e220c31ad066cc5d9ab49df9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Another interesting column that you can use the `extract()` function on is
    the **Cabin** column. If you examine the unique values of the **Cabin** column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The cabin values start with an alphabet from A to G, followed by a numerical
    value. It might be useful to be able to extract the alphabet (which may represent
    the different decks on the Titanic or the different cabin type), followed by the
    numerical value. You can do the extraction as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4d86621dff80add34680a31a25aa6c08.png)'
  prefs: []
  type: TYPE_IMG
- en: The expression of `‘^.{1}(.*)’` means that the value of the **Cabin** should
    start with exactly one character (`^.{1}`) and then you want to match the rest
    with zero or more characters (`(.*)`). This will essentially extract the cabin
    number.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, the Cabin column has too many empty cells to make this column
    useful.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Using the `contains()` and `match()` functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Recall earlier we used the `count()` function to find and count all rows containing
    the word “William”?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don’t need to count the rows and simply want the rows, you can use the
    `contains()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6ac20e29f887191b6bea3417a2880356.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The above result shows all the rows whose name contains the word “William”.
    Of course, you can use the `^`anchor in your expression to indicate that you want
    all rows whose name starts with “William”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/43f82eb71cad5101582b907db4cd85b5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you simply want to find strings at the beginning, you can actually use the
    `match()` function. The following code snippet produces the same output as the
    above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Using the `replace()` function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Earlier, we extracted the title of the passenger using their names. Let’s examine
    the different titles that we have extracted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that some of the titles are duplicates — titles such as *Mlle*,
    *Ms*, and *Mme* can be abbreviated as **Miss** using the `replace()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the meaning of Mme and Mlle:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Mme** (Madame) — french word for a woman'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Mlle (**Mademoiselle**) —** French courtesy title, traditionally given to
    an unmarried woman.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you want to replace the title in the **Name** column directly, you can pass
    in a regex expression into the `replace()` function
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The titles in the **Name** column will now be updated.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `findall()` function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to quickly find all the names in the **Name** column that matches
    certain patterns, you can use the `findall()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The above expression finds all the names that contain the letters “**ll**”.
    The `findall()` function returns a series of list values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0899c88d210dc562d37b7a7c5da79d50.png)'
  prefs: []
  type: TYPE_IMG
- en: Each item in the list is a list containing zero or more tuples. Each tuple contains
    two elements — the first is the matching word and the second is the value of the
    group.
  prefs: []
  type: TYPE_NORMAL
- en: 'To print all matching rows, you can use list comprehension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The above expression produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to print out the names nicely, here is a little code snippet to
    do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'And the result looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Using the `split()` function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you examine the name for each passenger, you will see the following pattern
    and the associated regex for finding them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2c47e44ec266f26832a9667f495b236c.png)'
  prefs: []
  type: TYPE_IMG
- en: More interesting are the expressions
  prefs: []
  type: TYPE_NORMAL
- en: '`([\’A-Za-z ()”//.-]+)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`([A-Za-z ()”//.-]*)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is because the first and last name of a passenger may include the following
    special characters:'
  prefs: []
  type: TYPE_NORMAL
- en: — Space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`‘` — Apostrophe (example — “O**’**Driscoll” for last name)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`()` — parentheses (example — “John Bradley **(**Florence Briggs Thayer**)**”
    for first name)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`“` — Double quotes (example — **“**Anna “Annie**”**” for first name)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/` — Slash (example — “Carl**/**Charles Peter” for first name)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.` — Period (example “Martin (Elizabeth L**.** Barrett)” for first name)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-` — Hyphen (example —“ Countess. of (Lucy Noel Martha Dyer**-**Edwards)”
    for first name)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can now use the following code snippet to extract the last name, title,
    and first name of the passengers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1c35397be19d3ca1215778aca4a2253e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Columns 0 and 4 can be dropped as they are empty:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1a0d39749643218356a459c3a981433c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, you can assign the dataframe some meaningful column names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/42562f4d8a4feb7f5815b5b3875150e8.png)'
  prefs: []
  type: TYPE_IMG
- en: The extraction of title is helpful in determining the age of a passenger if
    the age value is missing. On the other hand, extracting the last name is helpful
    to determine if two or more passengers are from the same family.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you like reading my articles and that it helped your career/study, please
    consider signing up as a Medium member. It is $5 a month, and it gives you unlimited
    access to all the articles (including mine) on Medium. If you sign up using the
    following link, I will earn a small commission (at no additional cost to you).
    Your support means that I will be able to devote more time on writing articles
    like this.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://weimenglee.medium.com/membership?source=post_page-----c965380316da--------------------------------)
    [## Join Medium with my referral link - Wei-Meng Lee'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Wei-Meng Lee (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: weimenglee.medium.com](https://weimenglee.medium.com/membership?source=post_page-----c965380316da--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This has been quite a whirlwind tour of using regular expression in Python,
    as well as in Pandas. As there are quite a number of functions that I have used,
    I thought it might be useful to summarize the functions that I have covered and
    when you should use them:'
  prefs: []
  type: TYPE_NORMAL
- en: '`count()` — use this function if you want to count the number of rows matching
    your patterns'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`extract()` — use this function if you want to extract strings from a string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`match()` — use this function if you want to check if a string starts with
    a specific string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`contains()` — use this function if you want to check if a string contains
    a specific string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`replace()` — use this function to replace a string with another string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`findall()` — use this function to find all occurrences of a pattern within
    a string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`split()` — use this function to split the strings into multiple columns'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have fun with regex and let me know if this is useful to you!
  prefs: []
  type: TYPE_NORMAL
