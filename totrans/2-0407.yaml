- en: What is Combinatorial Optimization?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/breaking-down-combinatorial-optimization-why-some-problems-are-inherently-difficult-65230e25d4da](https://towardsdatascience.com/breaking-down-combinatorial-optimization-why-some-problems-are-inherently-difficult-65230e25d4da)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Demonstrating the true power of combinatorial explosions and how they affect
    simple problems.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@egorhowell?source=post_page-----65230e25d4da--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----65230e25d4da--------------------------------)[](https://towardsdatascience.com/?source=post_page-----65230e25d4da--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----65230e25d4da--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----65230e25d4da--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----65230e25d4da--------------------------------)
    ·5 min read·Apr 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e25a11d4888e8f7a8808ec5eff99b3b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Shubham Dhage](https://unsplash.com/@theshubhamdhage?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: What is Combinatorial Optimization?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine you are a Data Scientist working for an airline and are told to find
    the optimal flight schedule for the week to maximize the number of flights subject
    to constraints such as fuel and airspace.
  prefs: []
  type: TYPE_NORMAL
- en: '***How would you do this?***'
  prefs: []
  type: TYPE_NORMAL
- en: Well, you could try every possible solution, this is called [***brute-force
    search***](https://en.wikipedia.org/wiki/Brute-force_search), however what if
    I told you we were going to do ***500*** flights? The number of different [***combinations***](https://medium.com/towards-data-science/a-primer-on-combinations-and-permutations-d654aacea292)
    you would need to try would be on a scale of ***~500!*** which is roughly equal
    to ***1.22 x 10¹¹³⁴.*** Thisnumber is unimaginably huge and makes brute-force
    search [***intractable***](https://www.umsl.edu/~siegelj/information_theory/classassignments/Lombardo/04_intractableproblems.html).
  prefs: []
  type: TYPE_NORMAL
- en: '***So, how do you solve this problem?***'
  prefs: []
  type: TYPE_NORMAL
- en: Combinatorial Optimization!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[***Combinatorial optimization***](https://en.wikipedia.org/wiki/Combinatorial_optimization)
    deals with finding an optimal solution from finite objects where the problem is
    intractable. This sounds very much like our problem above!'
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, combinatorial optimization is used in sundry fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Logistics and supply chain*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Manufacturing*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Finance*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Healthcare*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This makes it an essential skill for Data Scientists to understand and develop
    the know-how to effectively deal with these types of problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about combinatorial optimization methods, which are mainly [***meta-heuristic***](https://en.wikipedia.org/wiki/Metaheuristic),
    you can check out some of my previous posts here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd?source=post_page-----65230e25d4da--------------------------------)
    [## How To Solve Travelling Salesman Problem With Simulated Annealing'
  prefs: []
  type: TYPE_NORMAL
- en: Getting the optimal solution to the Travelling Salesman Problem using the Simulated
    Annealing optimisation algorithm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd?source=post_page-----65230e25d4da--------------------------------)
    [](/tabu-search-simply-explained-ee2852339d78?source=post_page-----65230e25d4da--------------------------------)
    [## Tabu Search Simply Explained
  prefs: []
  type: TYPE_NORMAL
- en: An intuitive explanation of the Tabu Search optimization algorithm and how to
    apply it to the traveling salesman…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/tabu-search-simply-explained-ee2852339d78?source=post_page-----65230e25d4da--------------------------------)
    [](/hill-climbing-optimization-algorithm-simply-explained-dbf1e1e3cf6c?source=post_page-----65230e25d4da--------------------------------)
    [## Hill Climbing Optimization Algorithm Simply Explained
  prefs: []
  type: TYPE_NORMAL
- en: The intuition behind one of the most popular optimization algorithms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/hill-climbing-optimization-algorithm-simply-explained-dbf1e1e3cf6c?source=post_page-----65230e25d4da--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: However, in this post, I want to truly explore why these types of problems are
    difficult and demonstrate how a simple problem literally ‘blows up’ in complexity.
  prefs: []
  type: TYPE_NORMAL
- en: 'An Old Favourite: Travelling Salesman Problem'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A staple example of a combinatorial optimization problem is the [***traveling
    salesman problem (TSP)***](https://en.wikipedia.org/wiki/Travelling_salesman_problem).
    This is a very simple problem that asks the question:'
  prefs: []
  type: TYPE_NORMAL
- en: '*‘Find the shortest route through a set of cities, that visits every city once
    and finishes at the origin city’*'
  prefs: []
  type: TYPE_NORMAL
- en: Sounds simple right? In realistic scenarios, this is far from the truth.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is because the number of possible solutions to this problem leads to a
    [***combinatorial explosion***](https://en.wikipedia.org/wiki/Combinatorial_explosion)
    as more cities are added to the route. The number of solutions to the TSP is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6b1137add2feee97910f5e7d9812cf4b.png)'
  prefs: []
  type: TYPE_IMG
- en: Equation by author in LaTeX.
  prefs: []
  type: TYPE_NORMAL
- en: Where ***n*** is the number of cities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lets use some actual numbers to really show this ‘*explosion*’:'
  prefs: []
  type: TYPE_NORMAL
- en: '***n = 4: solutions = 3***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***n = 8: solutions = 2,520***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***n = 16: solutions = 1.0461395 x 10¹³***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What’s even more telling is that for ***20*** cities it takes [approximately
    ***1,900*** years](https://www.sciencedirect.com/topics/earth-and-planetary-sciences/traveling-salesman-problem)
    to solve the TSP by brute-force!
  prefs: []
  type: TYPE_NORMAL
- en: Demonstrating a Combinatorial Explosion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s really now dig in with some code to fully understand the inner workings
    of the brute-force algorithm and portray the combinatorial explosion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below is a boilerplate class for solving the TSP using brute-force search:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now use the algorithm on some dummy ‘fake’ city data to confirm it indeed
    returns the best solution:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/895e587726b7b0f9eb489c2be8827d9f.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cb94aad684be9bd2e61e29c611352a16.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Looks good! The initial solution is clearly non-optimal and the final best solution
    appears visually to be the best.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now measure the duration of the brute-force algorithm as a function
    of the number of cities in the search to graphically depict the combinatorial
    explosion:'
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Gist by author.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9d480df89d869cfce59133cea59ee295.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot generated by author in Python.
  prefs: []
  type: TYPE_NORMAL
- en: From the above plot, we see that the duration of the brute-force search skyrockets
    at around ***12*** cities. To use real numbers, for ***11*** cities it took ***~0.5***
    minutes, but for ***12*** cities it took whopping ***~36*** minutes! So, by just
    adding an extra city to our search space the algorithm computes time increased
    by ***72*** fold!
  prefs: []
  type: TYPE_NORMAL
- en: This genuinely shows the power and intractability of these combinatorial optimization
    problems.
  prefs: []
  type: TYPE_NORMAL
- en: Summary & Further Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this post, we have seen how simple problems can ‘blow up’ in complexity.
    This is common in an industry where we are dealing with large-scale systems and
    networks. The process of optimizing business problems in these large-scale systems
    is named combinatorial optimization. The need for this domain stems from the intractability
    of brute-force search which can take thousands of years to find the best solution
    to relatively search space. We demonstrated this phenomenon by depicting the combinatorial
    explosion that occurs for the traveling salesman problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Full code used in this post is available on my GitHub here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/brute-force?source=post_page-----65230e25d4da--------------------------------)
    [## Medium-Articles/Optimisation/brute-force at main · egorhowell/Medium-Articles'
  prefs: []
  type: TYPE_NORMAL
- en: You can't perform that action at this time. You signed in with another tab or
    window. You signed out in another tab or…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/brute-force?source=post_page-----65230e25d4da--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Another Thing!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist. There is no “fluff”
    or “clickbait,” just pure actionable insights from a practicing Data Scientist.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----65230e25d4da--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  prefs: []
  type: TYPE_NORMAL
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----65230e25d4da--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Connect With Me!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[**YouTube**](https://www.youtube.com/@egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**GitHub**](https://github.com/egorhowell)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References & Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Algorithms for Optimization*](https://mitpress.mit.edu/9780262039420/algorithms-for-optimization/)*.*
    [Mykel J. Kochenderfer](https://mitpress.mit.edu/author/mykel-j-kochenderfer-18773)
    and [Tim A. Wheeler](https://mitpress.mit.edu/author/tim-a-wheeler-28144). ***2019***.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Combinatorial Optimization: Theory and Algorithms.*](https://link.springer.com/book/10.1007/978-3-662-56039-6)
    [Bernhard Korte](https://www.amazon.co.uk/s/ref=dp_byline_sr_book_1?ie=UTF8&field-author=Bernhard+Korte&text=Bernhard+Korte&sort=relevancerank&search-alias=books-uk)
    and [Jens Vygen](https://www.amazon.co.uk/Jens-Vygen/e/B00DQ1CB98/ref=dp_byline_cont_book_2).
    ***2018***.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
