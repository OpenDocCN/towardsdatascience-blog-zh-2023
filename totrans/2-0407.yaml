- en: What is Combinatorial Optimization?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/breaking-down-combinatorial-optimization-why-some-problems-are-inherently-difficult-65230e25d4da](https://towardsdatascience.com/breaking-down-combinatorial-optimization-why-some-problems-are-inherently-difficult-65230e25d4da)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Demonstrating the true power of combinatorial explosions and how they affect
    simple problems.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@egorhowell?source=post_page-----65230e25d4da--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page-----65230e25d4da--------------------------------)[](https://towardsdatascience.com/?source=post_page-----65230e25d4da--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----65230e25d4da--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page-----65230e25d4da--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----65230e25d4da--------------------------------)
    ·5 min read·Apr 10, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e25a11d4888e8f7a8808ec5eff99b3b2.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
- en: Photo by [Shubham Dhage](https://unsplash.com/@theshubhamdhage?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: What is Combinatorial Optimization?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine you are a Data Scientist working for an airline and are told to find
    the optimal flight schedule for the week to maximize the number of flights subject
    to constraints such as fuel and airspace.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '***How would you do this?***'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Well, you could try every possible solution, this is called [***brute-force
    search***](https://en.wikipedia.org/wiki/Brute-force_search), however what if
    I told you we were going to do ***500*** flights? The number of different [***combinations***](https://medium.com/towards-data-science/a-primer-on-combinations-and-permutations-d654aacea292)
    you would need to try would be on a scale of ***~500!*** which is roughly equal
    to ***1.22 x 10¹¹³⁴.*** Thisnumber is unimaginably huge and makes brute-force
    search [***intractable***](https://www.umsl.edu/~siegelj/information_theory/classassignments/Lombardo/04_intractableproblems.html).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '***So, how do you solve this problem?***'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Combinatorial Optimization!
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[***Combinatorial optimization***](https://en.wikipedia.org/wiki/Combinatorial_optimization)
    deals with finding an optimal solution from finite objects where the problem is
    intractable. This sounds very much like our problem above!'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, combinatorial optimization is used in sundry fields:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '*Logistics and supply chain*'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Manufacturing*'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Finance*'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Healthcare*'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This makes it an essential skill for Data Scientists to understand and develop
    the know-how to effectively deal with these types of problems.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about combinatorial optimization methods, which are mainly [***meta-heuristic***](https://en.wikipedia.org/wiki/Metaheuristic),
    you can check out some of my previous posts here:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于组合优化方法的知识，这些方法主要是[***元启发式***](https://en.wikipedia.org/wiki/Metaheuristic)，你可以查看我以前的一些帖子：
- en: '[](/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd?source=post_page-----65230e25d4da--------------------------------)
    [## How To Solve Travelling Salesman Problem With Simulated Annealing'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd?source=post_page-----65230e25d4da--------------------------------)
    [## 如何通过模拟退火解决旅行商问题'
- en: Getting the optimal solution to the Travelling Salesman Problem using the Simulated
    Annealing optimisation algorithm
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用模拟退火优化算法获得旅行商问题的最佳解决方案
- en: towardsdatascience.com](/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd?source=post_page-----65230e25d4da--------------------------------)
    [](/tabu-search-simply-explained-ee2852339d78?source=post_page-----65230e25d4da--------------------------------)
    [## Tabu Search Simply Explained
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/how-to-solve-travelling-salesman-problem-with-simulated-annealing-c248447a8bcd?source=post_page-----65230e25d4da--------------------------------)
    [](/tabu-search-simply-explained-ee2852339d78?source=post_page-----65230e25d4da--------------------------------)
    [## Tabu 搜索简单解释
- en: An intuitive explanation of the Tabu Search optimization algorithm and how to
    apply it to the traveling salesman…
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对 Tabu 搜索优化算法的直观解释及其如何应用于旅行商问题…
- en: towardsdatascience.com](/tabu-search-simply-explained-ee2852339d78?source=post_page-----65230e25d4da--------------------------------)
    [](/hill-climbing-optimization-algorithm-simply-explained-dbf1e1e3cf6c?source=post_page-----65230e25d4da--------------------------------)
    [## Hill Climbing Optimization Algorithm Simply Explained
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/tabu-search-simply-explained-ee2852339d78?source=post_page-----65230e25d4da--------------------------------)
    [](/hill-climbing-optimization-algorithm-simply-explained-dbf1e1e3cf6c?source=post_page-----65230e25d4da--------------------------------)
    [## 爬山算法简单解释
- en: The intuition behind one of the most popular optimization algorithms
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最受欢迎的优化算法之一的直观解释
- en: towardsdatascience.com](/hill-climbing-optimization-algorithm-simply-explained-dbf1e1e3cf6c?source=post_page-----65230e25d4da--------------------------------)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/hill-climbing-optimization-algorithm-simply-explained-dbf1e1e3cf6c?source=post_page-----65230e25d4da--------------------------------)
- en: However, in this post, I want to truly explore why these types of problems are
    difficult and demonstrate how a simple problem literally ‘blows up’ in complexity.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这篇文章中，我想真正探讨这些问题为何如此困难，并演示一个简单的问题如何在复杂性上‘爆炸’。
- en: 'An Old Favourite: Travelling Salesman Problem'
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 旧的最爱：旅行商问题
- en: 'A staple example of a combinatorial optimization problem is the [***traveling
    salesman problem (TSP)***](https://en.wikipedia.org/wiki/Travelling_salesman_problem).
    This is a very simple problem that asks the question:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 组合优化问题的经典例子是[***旅行商问题 (TSP)***](https://en.wikipedia.org/wiki/Travelling_salesman_problem)。这是一个非常简单的问题，提出了以下问题：
- en: '*‘Find the shortest route through a set of cities, that visits every city once
    and finishes at the origin city’*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*‘找到一组城市中最短的路线，访问每个城市一次并回到起点城市’*'
- en: Sounds simple right? In realistic scenarios, this is far from the truth.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来很简单，对吧？在现实场景中，情况远非如此。
- en: 'This is because the number of possible solutions to this problem leads to a
    [***combinatorial explosion***](https://en.wikipedia.org/wiki/Combinatorial_explosion)
    as more cities are added to the route. The number of solutions to the TSP is:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为随着城市数量的增加，问题的可能解决方案数量会导致[***组合爆炸***](https://en.wikipedia.org/wiki/Combinatorial_explosion)。TSP
    的解决方案数量是：
- en: '![](../Images/6b1137add2feee97910f5e7d9812cf4b.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6b1137add2feee97910f5e7d9812cf4b.png)'
- en: Equation by author in LaTeX.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 作者在 LaTeX 中的方程。
- en: Where ***n*** is the number of cities.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 ***n*** 是城市的数量。
- en: 'Lets use some actual numbers to really show this ‘*explosion*’:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一些实际数字来真正展示这种‘*爆炸*’：
- en: '***n = 4: solutions = 3***'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***n = 4: 解决方案 = 3***'
- en: '***n = 8: solutions = 2,520***'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***n = 8: 解决方案 = 2,520***'
- en: '***n = 16: solutions = 1.0461395 x 10¹³***'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***n = 16: 解决方案 = 1.0461395 x 10¹³***'
- en: What’s even more telling is that for ***20*** cities it takes [approximately
    ***1,900*** years](https://www.sciencedirect.com/topics/earth-and-planetary-sciences/traveling-salesman-problem)
    to solve the TSP by brute-force!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 更值得注意的是，对于***20***个城市，通过暴力破解解决 TSP 需要[大约 ***1,900*** 年](https://www.sciencedirect.com/topics/earth-and-planetary-sciences/traveling-salesman-problem)！
- en: Demonstrating a Combinatorial Explosion
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 展示组合爆炸
- en: Let’s really now dig in with some code to fully understand the inner workings
    of the brute-force algorithm and portray the combinatorial explosion.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们真正深入探讨一些代码，以全面理解暴力算法的内部机制，并描绘组合爆炸。
- en: 'Below is a boilerplate class for solving the TSP using brute-force search:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用暴力搜索解决 TSP 的一个模板类：
- en: GitHub Gist by author.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Gist 作者。
- en: 'Let’s now use the algorithm on some dummy ‘fake’ city data to confirm it indeed
    returns the best solution:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用算法对一些虚拟‘假’城市数据进行测试，以确认它确实返回了最佳解决方案：
- en: GitHub Gist by author.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Gist 作者。
- en: '![](../Images/895e587726b7b0f9eb489c2be8827d9f.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/895e587726b7b0f9eb489c2be8827d9f.png)'
- en: Plot generated by author in Python.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 作者在 Python 中生成的图表。
- en: '![](../Images/cb94aad684be9bd2e61e29c611352a16.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cb94aad684be9bd2e61e29c611352a16.png)'
- en: Plot generated by author in Python.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 作者在 Python 中生成的图表。
- en: Looks good! The initial solution is clearly non-optimal and the final best solution
    appears visually to be the best.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错！初始解决方案显然不是最优的，而最终的最佳解决方案在视觉上也显得是最好的。
- en: 'We will now measure the duration of the brute-force algorithm as a function
    of the number of cities in the search to graphically depict the combinatorial
    explosion:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将测量暴力算法的持续时间与城市数量的关系，以图形方式描绘组合爆炸：
- en: GitHub Gist by author.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Gist 作者。
- en: '![](../Images/9d480df89d869cfce59133cea59ee295.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9d480df89d869cfce59133cea59ee295.png)'
- en: Plot generated by author in Python.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 作者在 Python 中生成的图表。
- en: From the above plot, we see that the duration of the brute-force search skyrockets
    at around ***12*** cities. To use real numbers, for ***11*** cities it took ***~0.5***
    minutes, but for ***12*** cities it took whopping ***~36*** minutes! So, by just
    adding an extra city to our search space the algorithm computes time increased
    by ***72*** fold!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的图表中，我们看到暴力搜索的持续时间在大约***12***个城市时急剧增加。用实际数字来讲，***11***个城市时花费了***~0.5***分钟，但***12***个城市时花费了***~36***分钟！所以，仅仅增加一个城市，算法计算时间增加了***72***倍！
- en: This genuinely shows the power and intractability of these combinatorial optimization
    problems.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这真正展示了这些组合优化问题的强大和难以解决性。
- en: Summary & Further Thoughts
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结与进一步思考
- en: In this post, we have seen how simple problems can ‘blow up’ in complexity.
    This is common in an industry where we are dealing with large-scale systems and
    networks. The process of optimizing business problems in these large-scale systems
    is named combinatorial optimization. The need for this domain stems from the intractability
    of brute-force search which can take thousands of years to find the best solution
    to relatively search space. We demonstrated this phenomenon by depicting the combinatorial
    explosion that occurs for the traveling salesman problem.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们看到简单问题如何在复杂性上“爆炸”。在处理大规模系统和网络的行业中，这是很常见的。优化这些大规模系统中的业务问题的过程被称为组合优化。这个领域的需求源于暴力搜索的难以处理性，它可能需要数千年才能找到相对搜索空间的最佳解决方案。我们通过描绘旅行商问题中发生的组合爆炸来展示这种现象。
- en: 'Full code used in this post is available on my GitHub here:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 本文中使用的完整代码可以在我的 GitHub 上找到：
- en: '[](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/brute-force?source=post_page-----65230e25d4da--------------------------------)
    [## Medium-Articles/Optimisation/brute-force at main · egorhowell/Medium-Articles'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Medium-Articles/Optimisation/brute-force at main · egorhowell/Medium-Articles](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/brute-force?source=post_page-----65230e25d4da--------------------------------)'
- en: You can't perform that action at this time. You signed in with another tab or
    window. You signed out in another tab or…
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你当前无法执行该操作。你在另一个标签或窗口中登录了。你在另一个标签或…
- en: github.com](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/brute-force?source=post_page-----65230e25d4da--------------------------------)
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[github.com](https://github.com/egorhowell/Medium-Articles/tree/main/Optimisation/brute-force?source=post_page-----65230e25d4da--------------------------------)'
- en: Another Thing!
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另一件事！
- en: I have a free newsletter, [**Dishing the Data**](https://dishingthedata.substack.com/),
    where I share weekly tips for becoming a better Data Scientist. There is no “fluff”
    or “clickbait,” just pure actionable insights from a practicing Data Scientist.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个免费的通讯稿，[**Dishing the Data**](https://dishingthedata.substack.com/)，在其中我每周分享成为更好数据科学家的技巧。没有“废话”或“点击诱饵”，只有来自实践数据科学家的纯粹可操作的见解。
- en: '[](https://newsletter.egorhowell.com/?source=post_page-----65230e25d4da--------------------------------)
    [## Dishing The Data | Egor Howell | Substack'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Dishing The Data | Egor Howell | Substack](https://newsletter.egorhowell.com/?source=post_page-----65230e25d4da--------------------------------)'
- en: How To Become A Better Data Scientist. Click to read Dishing The Data, by Egor
    Howell, a Substack publication with…
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何成为更优秀的数据科学家。点击阅读由Egor Howell撰写的《Dishing The Data》，这是一个Substack出版物，内容包括…
- en: newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----65230e25d4da--------------------------------)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[newsletter.egorhowell.com](https://newsletter.egorhowell.com/?source=post_page-----65230e25d4da--------------------------------)'
- en: Connect With Me!
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与我联系！
- en: '[**YouTube**](https://www.youtube.com/@egorhowell)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**YouTube**](https://www.youtube.com/@egorhowell)'
- en: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**LinkedIn**](https://www.linkedin.com/in/egor-howell-092a721b3/)'
- en: '[**Twitter**](https://twitter.com/EgorHowell)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**Twitter**](https://twitter.com/EgorHowell)'
- en: '[**GitHub**](https://github.com/egorhowell)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**GitHub**](https://github.com/egorhowell)'
- en: References & Further Reading
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献与进一步阅读
- en: '[*Algorithms for Optimization*](https://mitpress.mit.edu/9780262039420/algorithms-for-optimization/)*.*
    [Mykel J. Kochenderfer](https://mitpress.mit.edu/author/mykel-j-kochenderfer-18773)
    and [Tim A. Wheeler](https://mitpress.mit.edu/author/tim-a-wheeler-28144). ***2019***.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*优化算法*](https://mitpress.mit.edu/9780262039420/algorithms-for-optimization/)。
    [Mykel J. Kochenderfer](https://mitpress.mit.edu/author/mykel-j-kochenderfer-18773)
    和 [Tim A. Wheeler](https://mitpress.mit.edu/author/tim-a-wheeler-28144)。 ***2019***。'
- en: '[*Combinatorial Optimization: Theory and Algorithms.*](https://link.springer.com/book/10.1007/978-3-662-56039-6)
    [Bernhard Korte](https://www.amazon.co.uk/s/ref=dp_byline_sr_book_1?ie=UTF8&field-author=Bernhard+Korte&text=Bernhard+Korte&sort=relevancerank&search-alias=books-uk)
    and [Jens Vygen](https://www.amazon.co.uk/Jens-Vygen/e/B00DQ1CB98/ref=dp_byline_cont_book_2).
    ***2018***.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*组合优化：理论与算法*](https://link.springer.com/book/10.1007/978-3-662-56039-6) [Bernhard
    Korte](https://www.amazon.co.uk/s/ref=dp_byline_sr_book_1?ie=UTF8&field-author=Bernhard+Korte&text=Bernhard+Korte&sort=relevancerank&search-alias=books-uk)
    和 [Jens Vygen](https://www.amazon.co.uk/Jens-Vygen/e/B00DQ1CB98/ref=dp_byline_cont_book_2)。
    ***2018***。'
