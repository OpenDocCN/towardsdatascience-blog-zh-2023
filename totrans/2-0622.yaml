- en: Customize Colormaps with Matplotlib
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/customize-colormaps-with-matplotlib-df5b37d14662](https://towardsdatascience.com/customize-colormaps-with-matplotlib-df5b37d14662)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Quick Success Data Science
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Match your colors to your theme
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@lee_vaughan?source=post_page-----df5b37d14662--------------------------------)[![Lee
    Vaughan](../Images/9f6b90bb76102f438ab0b9a4a62ffa3f.png)](https://medium.com/@lee_vaughan?source=post_page-----df5b37d14662--------------------------------)[](https://towardsdatascience.com/?source=post_page-----df5b37d14662--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----df5b37d14662--------------------------------)
    [Lee Vaughan](https://medium.com/@lee_vaughan?source=post_page-----df5b37d14662--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----df5b37d14662--------------------------------)
    ·10 min read·Dec 6, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/74c32dc71cabd57b93114762a62e2740.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
- en: An acorn and its colormap (by the author)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: One thing that characterizes professional graphics is an overarching *theme*
    that ties everything together. This includes fonts, symbology, and most of all,
    the color palette.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Below is an example by the [US National Park Service](https://www.nps.gov/orgs/1207/06-11-20-nps-visitor-spending-generates-economic-impact-of-more-than-41-billion.htm).
    Notice how the harmonious earth tones collaborate to evoke a sense of the great
    outdoors. This graphic doesn’t just *convey* information, it *conveys it with
    style!*
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bc643e6fe81a32514256738ab349b569.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
- en: US National Park Service Infographic (Courtesy [nps.gov](https://www.nps.gov/aboutus/publications.htm#:~:text=Government%20information%20on%20NPS%20websites%20is%20generally%20in,National%20Park%20Service%20information%20be%20given%20appropriate%20acknowledgement.))
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Python’s Matplotlib plotting library uses *colormaps* to define the *color scheme*
    for a visualization. Colormaps are arrays of colors used to map pixel data to
    actual color values.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: While Matplotlib comes with many built-in [colors](https://matplotlib.org/stable/gallery/color/named_colors.html)
    and [color schemes](https://matplotlib.org/stable/gallery/color/colormap_reference.html),
    they won’t cover every possible scenario. There will be times when you’ll want
    to personally tailor your colors to a particular theme or concept.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: In this *Quick Success Data Science* project, we’ll look at how to select custom
    colors and turn them into colormaps that you can use with Matplotlib, seaborn,
    pandas, geopandas, and other Python-compatible plotting libraries. We’ll then
    use these colormaps to plot the location of oak trees in New York City.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Acorns, Acorns, Acorns!
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Despite an exceptional drought in Texas this year, we’re up to our armpits in
    acorns. Besides being plentiful, they’re also especially colorful, with those
    latte tans and purply browns only nature knows how to make. While admiring one
    this week, I couldn’t help but wonder what an excellent colormap it would make.
    Being a Pythonista, I immediately put that thought into action.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管今年德州发生了严重的干旱，但我们仍然到处都是橡子。除了数量丰富外，它们还特别有色彩，拥有只有大自然知道如何制造的拿铁色和紫棕色。这个星期在欣赏一个时，我不禁想知道它会成为一个优秀的色彩图。作为一个Python爱好者，我立即付诸实践。
- en: '![](../Images/5a82aca386b7c2f6a5b68e812cca5d73.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5a82aca386b7c2f6a5b68e812cca5d73.png)'
- en: Acorns (Photo by [Ksenia Makagonova](https://unsplash.com/@dearseymour?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    on [Unsplash](https://unsplash.com/photos/person-holding-wallnuts-_d3GuRIHMaE?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash))
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 橡子（照片由[Ksenia Makagonova](https://unsplash.com/@dearseymour?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)在[Unsplash](https://unsplash.com/photos/person-holding-wallnuts-_d3GuRIHMaE?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)拍摄）
- en: If you’re from a part of the world that doesn’t have acorns, they’re the nuts
    produced by oak trees.
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你来自一个没有橡子的地方，它们是橡树生产的坚果。
- en: Capturing an Acorn’s Colors
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捕捉橡子的颜色
- en: To capture an object’s colors, all you need is a digital photograph. While there’s
    a whole science around photographically capturing true colors (you can find a
    few tips [here](https://snapshot.canon-asia.com/article/eng/4-ways-to-capture-colours-more-accurately-in-photography)),
    I just took a phone picture of an acorn on a cloudy day.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 捕捉物体颜色所需的只是数字照片。虽然有很多关于如何真实捕捉颜色的科学（你可以在[这里](https://snapshot.canon-asia.com/article/eng/4-ways-to-capture-colours-more-accurately-in-photography)找到一些技巧），我只是拍了一张在阴天的橡子的手机照片。
- en: I then used [*Image Color Picker*](https://www.imgcolorpicker.com/)to extract
    colors from the picture. This free application lets you upload an image file and
    use your cursor to select and sample pixel colors. For this project, we’ll use
    RGB (Red-Green-Blue) values, which range from 0 to 255.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我随后使用[*Image Color Picker*](https://www.imgcolorpicker.com/)从图片中提取颜色。这个免费的应用程序允许你上传图片文件并使用光标选择和采样像素颜色。对于这个项目，我们将使用RGB（红-绿-蓝）值，范围从0到255。
- en: '![](../Images/296a870a5c52db8d3bc5ecca656a42fb.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/296a870a5c52db8d3bc5ecca656a42fb.png)'
- en: The **Image Color Picker** screen (by the author)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**Image Color Picker**屏幕（作者提供）'
- en: To construct a colormap of the acorn, I took two sets of measurements. The first
    set was comprised of four measurements equally spaced from the dark brown tip
    to the egg-white base. The second set was five measurements taken the same way.
    The values for each measurement were copied straight out of the app using the
    “copy” icon in the RGB output box.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建橡子的色彩图，我进行了两组测量。第一组包括四个测量点，从深棕色的尖端到蛋白色的底部均匀间隔。第二组是以相同方式进行的五个测量点。每个测量的值直接从应用程序的RGB输出框中使用“复制”图标复制出来。
- en: '![](../Images/c122db4a9e5e19fbc70778dbea3cd774.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c122db4a9e5e19fbc70778dbea3cd774.png)'
- en: The color sample locations (by the author)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色样本位置（作者提供）
- en: I took *two* sets of measurements to see if it made any difference. As sampled,
    it didn’t.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我进行了*两*组测量，以查看是否有差别。根据采样的结果，没有差别。
- en: The Colormap Code
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 色彩图代码
- en: The following code, written in JupyterLab, uses Matplotlib to create both *discrete*
    (categorical) and *continuous* colormaps. It then tests the colormaps using a
    heat map display.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码，使用JupyterLab编写，利用Matplotlib创建了*离散*（分类）和*连续*色彩图。然后使用热图显示测试这些色彩图。
- en: Creating Colormaps
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建色彩图
- en: 'Based on the *interpolation method*, there are two types of colormaps in Matplotlib:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 基于*插值方法*，Matplotlib中有两种类型的色彩图：
- en: A ***listed colormap*** is a listof colors. It’s a *discrete* colormap with
    a predefined set of colors, and it doesn’t interpolate between colors.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一个***列举色彩图***是一个颜色列表。它是一个*离散*色彩图，具有预定义的颜色集，并且不在颜色之间进行插值。
- en: A ***linear segmented colormap*** uses *interpolation* between color *anchor
    points* stored in a dictionary. This creates a *continuous* colormap*.*
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一个***线性分段色彩图***使用*插值*在存储在字典中的颜色*锚点*之间。这创建了一个*连续*色彩图*。
- en: Discrete colormaps are suitable for *categorical* data represented by a name
    or symbol. Continuous colormaps smoothly transition from one color to another.
    They’re typically used to represent a *range* of values, such as when plotting
    temperature or precipitation data.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 离散色彩图适合用于由名称或符号表示的*分类*数据。连续色彩图在颜色之间平滑过渡。它们通常用于表示*范围*的值，比如绘制温度或降水量数据时。
- en: Creating Listed Colormaps
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll use the set of *four* acorn measurements to produce a listed colormap.
    Here’s the code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We need only the Matplotlib library for this purpose, but we added NumPy to
    generate some dummy test data for later.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib’s `[ListedColormap()](https://matplotlib.org/stable/users/explain/colors/colormap-manipulation.html#listedcolormap)`
    class maps values between 0 and 1 to colors. These colors are stored in the `.colors`
    attribute.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Because the `ListedColormap()` class uses values from 0 to 1, we must divide
    the RGB values from our acorn by 255 to normalize the output (Python starts counting
    at 0, so the maximum value for 256 colors is 255). After that, we just pass this
    class our `colors` list to create the custom colormap.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'To view the colormap as a color *bar*, we can plot it as an image using `plt.imshow()`.
    Here’s the result:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b92f4fe39d848dd202cc0d8083d9d4d2.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: The discrete colormap (by the author)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that you can also create a colormap by providing a list of official Matplotlib
    [color names](https://matplotlib.org/stable/gallery/color/named_colors.html).
    For example:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For more on this, see the official [docs](https://matplotlib.org/stable/users/explain/colors/colors.html#colors-def).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Listed Colormap
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To test the listed colormap in a Matplotlib figure, we’ll use a heat map built
    from a randomized dataset. Here’s the code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And here’s the result:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/47929539c21c24b47b6b76b1b029795c.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: Heat map built with discrete colormap (by the author)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: I was right; acorns do make great colormaps! This plot looks like a beautiful
    “butcher’s block” cutting board.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Linear Segmented Colormap
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll now use the set of *five* acorn measurements to produce the linear segmented
    colormap. Here’s the code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this case, we imported Matplotlib’s `[LinearSegmentedColormap()](https://matplotlib.org/stable/api/_as_gen/matplotlib.colors.LinearSegmentedColormap.html#matplotlib.colors.LinearSegmentedColormap)`
    class rather than the `[ListedColormap()](https://matplotlib.org/stable/users/explain/colors/colormap-manipulation.html#listedcolormap)`
    class. This class specifies colormaps using *anchor points* between which RGB(A)
    values are *interpolated*. That is, it generates colormap *objects* based on lookup
    tables using *linear* segments. It creates the lookup table using linear interpolation
    for each primary color, with the 0–1 domain divided into any number of segments.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the result:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3f410a213c4a0f0e64c7810ebe267b60.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
- en: The continuous colormap (by the author)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: A key part of this code is the `positions` variable. Note that I used *evenly
    spaced* segments (such as 0.25 to 0.75 to 1.0) but there’s no reason you couldn’t
    “stretch” or “compress” an interval. For example, to make the colormap in the
    title image for this article, I used asymmetrical segments defined by `[0.0, 0.25,
    0.65, 0.75, 1.0]`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Linear Segmented Colormap
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To test the linear segmented colormap in a Matplotlib figure, we’ll again use
    a heat map built from a randomized dataset. Here’s the code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And here’s the result:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2b7e4c04f5a97864636ce2274165aeca.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: Heat map built with continuous colormap (by the author)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: If you compare this heat map to the one generated with the *listed* colormap,
    you’ll see that there is more color variability, as the linear segmented colormap
    is *continuous* and permits the use of more than four colors.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Well, that’s most of what you need to know to build custom colormaps with Matplotlib.
    For a few more details, check out the [docs](https://matplotlib.org/stable/users/explain/colors/colormap-manipulation.html).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Plotting the Oak Trees of New York City
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let’s use the continuous colormap with an actual *map*. To honor the acorn
    theme, we’ll plot the location of oak trees in New York City.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'While there are at least thirteen species of oak identified in the city, we’re
    going to use a subset of four types: *English*, *Shumard’s*, *pin*, and *white*.
    We need to limit the types because our colormap, though attractive, isn’t very
    practical for resolving a large number of categories.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '**The Dataset**'
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The tree locations are from the [*NYC OpenData*](https://data.cityofnewyork.us/Environment/2015-Street-Tree-Census-Tree-Data/uvpi-gqnh)
    portal. This portal provides [free public data](https://opendata.cityofnewyork.us/)
    published by New York City agencies and other partners. I’ve filtered the data
    to the names and latitude-longitude locations for the four oak types and stored
    it as a CSV file in this [Gist](https://gist.github.com/rlvaugh/02d4c318af2744dc9c3489ba9dc8eae2).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: We’ll load this file with pandas and then use geopandas to project the locations
    on a map. *Geopandas* produces a *GeoDataFrame*, which is like a pandas’ DataFrame
    with a special “geometry” column that bundles the geometry *type* (such as “POINT”)
    with plottable coordinates.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/b3bbb6490f84ebf3c4077fd55268a645.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: The first three lines of the GeoDataFrame (by the author)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '**Plotting the Location Map**'
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we’ll plot the points using geopandas’ built-in plotting functionality,
    which is based on Matplotlib. Geopandas also comes with handy built-in datasets,
    such as “nybb” for “New York borough boundaries.” We’ll plot these municipal boundaries
    in `olivedrab`, to match the overall color theme.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: We’ll also set the geographical *coordinate reference system* (*crs*) for the
    tree locations GeoDataFrame (`gdf`) to that used for the borough boundaries GeoDataFrame
    (`gdf_nyc`). This ensures that the two datasets are projected consistently.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here’s the result:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/69d53a8454d1e4555bb175751a941ba8.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: The map of oak tree locations in NYC (by the author and [NYC OpenData](https://opendata.cityofnewyork.us/))
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: One thing to note here is that, even though we plotted *discrete* data (the
    *name* of the trees), we were able to use a *continuous* colormap. If you use
    the *discrete* colormap, you’ll get slightly different results, as the anchor
    points for the two colormaps aren’t the same.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of which colormap you use, you’ll see that pin oaks are the dominant
    oak type in New York City, at least among the species mapped.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Plotting a KDE Map
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you may have noticed in the previous diagram, the narrow range of our colormap
    makes it difficult to visually parse more than a few discrete categories. It’s
    better suited for a *continuous* distribution, such as produced by a KDE map.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: A *KDE* (*Kernel Density Estimate*) *map* is a way to visualize the distribution
    of points, like oak trees, across a geographical area. It’s based on a statistical
    technique for estimating the underlying continuous probability distribution of
    a set of samples.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Because a KDE map provides a *smoothed* representation of the *density of occurrences*,
    it’s perfect for highlighting regions of higher or lower concentration. Typically,
    *higher* concentrations are represented by *darker* or *warmer* colors.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: To make a KDE map, we’ll need to reverse our colormap, so that darker colors
    represent larger values, and use *Geoplot* to make the map*.* Geoplot is a high-level,
    open-source geospatial plotting library that claims to be the “seaborn of geospatial.”
    This means that it builds on underlying libraries, like GeoPandas, to make mapping
    easy.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install Geoplot with these commands for conda or pip:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '`conda install -c conda-forge geoplot`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install geoplot`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Here’s the code. Note that we’re building off previous work and *not* reloading
    the database.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here’s the result:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4cfec8839b7b23fdf7f7c08a4fe43673.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: A KDE plot for the 4 oak types (by the author and [NYC OpenData](https://opendata.cityofnewyork.us/))
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Now there’s a map that will make you want a cup of coffee!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Custom Colormaps for the Color Blind
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Be mindful that custom colormaps may not be appropriate for the 5 to 10 percent
    of the population who suffer from color blindness. Unfortunately, our acorn colormap
    would fall into the inappropriate category, especially when mapping oak tree locations
    as individual points.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'Some strategies for accommodating color blindness include:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: the use of highly contrasting colors,
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the inclusion of patterns, textures, or symbols,
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the use of monochromatic gradients (like our KDE map),
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the use of color-selection tools like [Vischeck](http://www.vischeck.com/) and
    C[olorbrewer](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3).
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To view an example of “colorblind-safe” colors in a variety of plot types, check
    out the *seaborn-colorblind style sheet* in the [Matplotlib gallery](https://matplotlib.org/stable/gallery/style_sheets/style_sheets_reference.html).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matching your visualization’s *colormap* to the *theme* of your data can make
    it more engaging for your readers. If the colormaps provided with Matplotlib aren’t
    sufficient, you can always generate your own.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 将你可视化的*颜色映射*与数据的*主题*匹配，可以让你的读者更感兴趣。如果Matplotlib提供的颜色映射不够，你可以随时生成自己的。
- en: Applications like *Image Color Picker* help you extract color codes from images.
    Matplotlib provides two classes, `ListedColormap()` and `LinearSegmentColormap()`,
    that let you easily turn these *color codes* into *colormaps* usable in both statistical
    and geospatial plots.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 像*图像颜色提取器*这样的应用程序可以帮助你从图像中提取颜色代码。Matplotlib提供了两个类，`ListedColormap()`和`LinearSegmentColormap()`，让你轻松将这些*颜色代码*转化为*颜色映射*，适用于统计图和地理空间图。
- en: Thanks!
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谢谢！
- en: Thanks for reading and please follow me for more *Quick Success Data Science*
    projects in the future.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读，请关注我，获取未来更多的*快速成功数据科学*项目。
