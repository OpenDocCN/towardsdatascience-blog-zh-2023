["```py\n# Import libraries\nimport pandas as pd\nimport numpy as np\n\n# Show all columns/rows of the dataframe\npd.set_option(\"display.max_columns\", None)\npd.set_option(\"display.max_rows\", None)\n\n# To show all columns in one view\nfrom IPython.display import display, HTML\ndisplay(HTML(\"<style>.container { width:100% !important; }</style>\"))\n\n# Read the csv into a dataframe\ndf = pd.read_csv('auto-cleaned.csv')\n\n# Display top five rows\ndf.head()\n```", "```py\ndf.info()\n```", "```py\ncorr = np.round(df.corr(numeric_only = True), 2)\ncorr\n```", "```py\nprice_corr = corr['price'].sort_values(ascending = False)\nprice_corr\n```", "```py\n# Set the threshold\nthreshold = 0.2\n\n# Drop columns with a correlation less than the threshold\ndf.drop(price_corr.where(lambda x: abs(x) < threshold).dropna().index, axis = 1, inplace = True)\n\ndf.info()\n```", "```py\ndf.head()\n```", "```py\n# Calculate correlations\nround(df.corr(numeric_only = True), 2)\n```", "```py\n# Drop the columns\ndf.drop(['wheel-base', 'city-mpg'], axis = 1, inplace = True)\n\n# Return top five rows of the remaining dataframe\ndf.head()\n```", "```py\ndf['make'].value_counts()\n```", "```py\ndf['fuel-type'].value_counts()\n```", "```py\ndf.head()\n```", "```py\n# Dummy code df['fuel-type']\ndf = pd.get_dummies(df, columns = ['fuel-type'], prefix = 'fuel-type')\n\n# Return top five rows of the updated dataframe\ndf.head()\n```", "```py\n# Select \"object\" data types\ncolumns = df.select_dtypes(include='object').columns\n\n# Dummy code categorical columns\nfor column in columns:\n    df = pd.get_dummies(df, columns = [column], prefix = column)\n\n# Return top five rows of the resulting dataframe\ndf.head()\n```", "```py\n# Re-create the correlation matrix\ncorr = np.round(df.corr(numeric_only = True), 2)\n\n# Return correlation with price from highest to the lowest\nprice_corr = corr['price'].sort_values(ascending = False)\nprice_corr\n```", "```py\nX = df.drop(['price'], axis = 1)\ny = df['price']\n```", "```py\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 1234)\n```", "```py\nfrom sklearn.linear_model import LinearRegression\n\n# First create an object of the class\nlr = LinearRegression()\n\n# Now use the object to train the model\nlr.fit(X_train, y_train)\n\n# Let's look at the coefficients of the trained model\nlr.coef_\n```", "```py\nscore = lr.score(X_train, y_train)\n\nprint(f\"Training score of the model is {score}.\")\n```", "```py\n# Predict y for X_test\ny_pred = lr.predict(X_test)\n\nscore_test = lr.score(X_test, y_test)\nprint(f\"Test score of the trained model is {score_test}.\")\n```", "```py\nfrom sklearn.metrics import mean_squared_error, r2_score\n\nprint(f\"R^2: {r2_score(y_pred, y_test)}\")\nprint(f\"MSE: {mean_squared_error(y_pred, y_test)}\")\n```", "```py\n# Import libraries\nimport statsmodels.api as sm\n\n# Initialize the model\nsm_model = sm.OLS(y_train, X_train).fit()\n\n# Create the predictions\nsm_predictions = sm_model.predict(X_test)\n\n# Return the summary results\nsm_model.summary()\n```", "```py\nlen(sm_model.pvalues.where(lambda x: x > 0.05).dropna().index)\n```", "```py\n43\n```", "```py\n# Create a list of columns that meee the criteria\ncolumns = list(sm_model.pvalues.where(lambda x: x > 0.05).dropna().index)\n\n# Drop those columns\ndf.drop(columns, axis = 1, inplace = True)\n\n# Revisit the process to create a new model summary\nX = df.drop(['price'], axis = 1)\ny = df['price']\n\n# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 1234)\n\n# Train the model\nsm_model = sm.OLS(y_train, X_train).fit()\n\n# Create predictions using the trained model\nsm_predictions = sm_model.predict(X_test)\n\n# Return model summary\nsm_model.summary()\n```", "```py\n# Import libraries\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Define figure size\nplt.figure(figsize = (7, 7))\n\n# Create the scatterplot\nplt.scatter(y_pred, y_test)\nplt.plot([y_pred.min(), y_pred.max()], [y_pred.min(), y_pred.max()], color = 'r')\n\n# Add x and y labels\nplt.xlabel(\"Predictions\")\nplt.ylabel(\"Actuals\")\n\n# Add title\nplt.title(\"Predictions vs. Actuals\")\nplt.show()\n```"]