- en: Unconventional Datetime Transformation Made Easy Using Python’s Pandas Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/unconventional-datetime-transformation-made-easy-using-pythons-pandas-library-aa9a8c65d885](https://towardsdatascience.com/unconventional-datetime-transformation-made-easy-using-pythons-pandas-library-aa9a8c65d885)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explained with a real-life example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://jin-cui.medium.com/?source=post_page-----aa9a8c65d885--------------------------------)[![Jin
    Cui](../Images/e5ddcbaa6d7da38f960d2c5fea71b538.png)](https://jin-cui.medium.com/?source=post_page-----aa9a8c65d885--------------------------------)[](https://towardsdatascience.com/?source=post_page-----aa9a8c65d885--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----aa9a8c65d885--------------------------------)
    [Jin Cui](https://jin-cui.medium.com/?source=post_page-----aa9a8c65d885--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----aa9a8c65d885--------------------------------)
    ·5 min read·Jul 25, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/49d6e85e7f4bde965d3e8a9f34f2d78e.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Debby Hudson](https://unsplash.com/@hudsoncrafted?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Very recently I was tasked with analyzing leaves taken by employees at a client’s
    company. In particular, I need to understand whether an employee has taken leave
    in a given period, ultimately setting a benchmark for measuring employees’ compliance
    with return to office policies.
  prefs: []
  type: TYPE_NORMAL
- en: 'I was provided with the following two leaves datasets:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Time Off** **Data** (“Dataset A”) which sets out shorter term leaves such
    as annual leave or sick leave taken by an employee. These leaves were unique at
    a per employee per date level (i.e. each row in the dataset represents a day of
    leave taken by a particular employee).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Leave of Absence Data** (“Dataset B”) which sets out the *from* and *to*
    dates of longer term leaves taken by an employee. Some examples of these leaves
    are parental leave, maternity leave, leave without paid and career break. This
    dataset is on a ‘leave-as-you-go’ basis for employees who have taken longer term
    leaves, in that each row represents a date range for an employee, who may appear
    in multiple rows in the dataset with multiple date ranges (e.g. employees may
    prefer to take parental leave in batches of 3 days a week for 30 weeks, which
    would appear as 30 date ranges across 30 rows in the dataset).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The two datasets augment each other as an employee could take both shorter and
    longer term leaves in a given period.
  prefs: []
  type: TYPE_NORMAL
- en: For my analysis, I would like to merge the two datasets into a common format
    so that all leaves by a particular employee are accounted for. Since Dataset A
    is already of a structured tabular format at a per date per employee level, I
    needed to convert Dataset B into a similar format as shown in the image below
    (for a dataset I created for the purpose of demonstration).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cbfc27733b930e0ef1cb60e4ba3343be.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image 1: Datetime transformation. Dataset and image by author'
  prefs: []
  type: TYPE_NORMAL
- en: Methodology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The transformation illustrated in image 1 presented a number of challenges
    given it’s not ‘one-to-one’ and it involves dates. To achieve the transformation,
    I followed the methodology below:'
  prefs: []
  type: TYPE_NORMAL
- en: The date ranges in Dataset B (as shown in the table on the left in image 1)
    were broken up into unique (working) dates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The broken up dates associated with the same employee which appear in multiple
    rows were converted into two columns grouped by employee and then unique dates
    (as shown in the table on the right in image 1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How did I implement the above in Python? Read on for a step-by-step guide!
  prefs: []
  type: TYPE_NORMAL
- en: Datetime Transformation using Pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Step 1: Load libraries and data**'
  prefs: []
  type: TYPE_NORMAL
- en: 'As the name of the step implies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The image below shows a print of the data ingested and data type by column.
    You should ensure that the two date columns are of the datetime data type, which
    if they are not, they can be converted to using [***pd.to_datetime()***](https://www.geeksforgeeks.org/python-pandas-to_datetime/).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9aad92cf08ec905c78dac0a0b2a164e7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image 2: Data and data type by column. Image by author'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 2: Get unique dates per row**'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will then ‘explode’ the date ranges in each row of the data into unique
    dates. This can be achieved using the [***pd.date_range***](https://pandas.pydata.org/docs/reference/api/pandas.date_range.html)
    method and specifying the *freq* parameter as ‘D’:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The output of this is shown in the image below. For instance, date range from
    2023–02–01 to 2023–02–03 for employee B in row 2 is now broken up into three unique
    dates.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9ee0e12508bb57170eaffdf010319871.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image 3: Explode dates. Image by author'
  prefs: []
  type: TYPE_NORMAL
- en: You may notice that there are some non-working dates in the last row as 2023–07–15
    and 2023–07-16 in the date range fall on a weekend. To get business dates only,
    add a line of code to restrict the weekday index to less than 5 per the code below
    below. In addition, I’ve provided an option to restrict dates to a range in the
    commented-out code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Step 2: Row to column transformation**'
  prefs: []
  type: TYPE_NORMAL
- en: Now we have the date ranges broken up. We will move on to collapse these at
    an employee level. For instance, both row 2 and 5 in image 3 above correspond
    to employee C.
  prefs: []
  type: TYPE_NORMAL
- en: To convert the dates in multiple rows into just one column by employee, we add
    back the ‘Employee’ identifier to the *df_date* dataframe generated above, and
    then apply Pandas’ [***.melt()***](https://pandas.pydata.org/docs/reference/api/pandas.melt.html)method
    over the ‘Employee’ column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The output of the code above is exactly what we are after as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/be275aea9f1f7bd5c5f4b61431357500.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image 4: Final output. Image by author'
  prefs: []
  type: TYPE_NORMAL
- en: Mission accomplished! This dataframe can now be appended to Dataset A like-for-like
    for further analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Concluding Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When I first encountered this problem, I was contemplating a solution in various
    tools such as SQL, R and Python. Through a bit of research, I ultimately chose
    Python as it appeared to be the easiest to implement, particularly for breaking
    up date ranges into individual dates and unpivoting columns into rows (noting
    that the *melt* method is also available in R).
  prefs: []
  type: TYPE_NORMAL
- en: In saying that, I’ll be more than happy to receive feedback on some of the other
    ways the readers think are more practical in solving this data transformation
    problem — leave them in the comments!
  prefs: []
  type: TYPE_NORMAL
- en: '*As I ride the AI/ML wave, I enjoy writing and sharing step-by-step guides
    and how-to tutorials in comprehensive language with ready-to-run codes. If you
    would like to access all my articles (and articles from other practitioners/writers
    on Medium), you can sign up using* [*the link*](https://medium.com/@jin-cui/membership)
    *here!*'
  prefs: []
  type: TYPE_NORMAL
