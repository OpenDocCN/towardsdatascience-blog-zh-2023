- en: Building Interactive Data Visualizations with Python — The Art of Storytelling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/building-interactive-data-visualizations-with-python-the-art-of-storytelling-ceb43db67488](https://towardsdatascience.com/building-interactive-data-visualizations-with-python-the-art-of-storytelling-ceb43db67488)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Intro Guide
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Seaborn, Bokeh, Plotly, and Dash to effectively communicate data insights
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://polmarin.medium.com/?source=post_page-----ceb43db67488--------------------------------)[![Pol
    Marin](../Images/a4f69a96717d453db9791f27b8f85e86.png)](https://polmarin.medium.com/?source=post_page-----ceb43db67488--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ceb43db67488--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ceb43db67488--------------------------------)
    [Pol Marin](https://polmarin.medium.com/?source=post_page-----ceb43db67488--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ceb43db67488--------------------------------)
    ·16 min read·Jun 4, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/944921b12b326517582e6fc337dd6090.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Nong](https://unsplash.com/de/@californong?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Mastering the art of storytelling is important for data scientists, but especially
    crucial for data analysts.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing the data insights and highlights with people unfamiliar with it, who
    may not even come from a technical background, is one of the most important parts
    of the data analysis journey.
  prefs: []
  type: TYPE_NORMAL
- en: They don’t care you are the best at cleaning and transforming the data if they
    don’t understand or aren’t engaged with what you’re saying.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizations are therefore part of this final storytelling and it's arguably
    the best way to showcase any facts — that’s why everybody uses them.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, tools like Tableau or Power BI are on the rise thanks to their
    ability to create interactive dashboards easily. Business people are usually amazed
    by cool dashboards with graphs and colors, so they’ve started to put it as a requirement
    on their job offers.
  prefs: []
  type: TYPE_NORMAL
- en: Today, I’ll share with you some Python options to create interactive visualizations
    for those who can’t or don’t like/want to use these specific data visualization
    tools mentioned above.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll no longer have to leave Python behind after all your analysis — you’ll
    also be able to use it to share your insights visually.
  prefs: []
  type: TYPE_NORMAL
- en: 'More concretely, I’ll be talking about four libraries: Seaborn, Bokeh, Plotly,
    and Dash.'
  prefs: []
  type: TYPE_NORMAL
- en: Because going too deep on all of them might result in an extremely long post,
    I’ll try to keep it relatively brief and focus on showing a sneak peek of what
    they can do. In future posts I might go more in detail into some of those (or
    all) but one at a time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Today’s table of contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '**First Things First — The Data**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Seaborn**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Bokeh**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Plotly**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Dash**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Telling the Story**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You’ll be able to find a link to the whole code at the end of this post, in
    the **Resources** section.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Let’s start then.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. First Things First — The Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There’s no way we can tell a story if we don’t have a story to tell, right?
  prefs: []
  type: TYPE_NORMAL
- en: As I love the nutrition and health sector, I’ll be using publicly available
    data from the World Health Organization (WHO). Concretely, **Prevalence of overweight
    among adults, BMI >= 25 (age-standardized estimate) (%)**[1].
  prefs: []
  type: TYPE_NORMAL
- en: Our aim is to analyze the data and see what we can find. It contains prevalence
    values by gender, country, and year from 1975 until 2016.
  prefs: []
  type: TYPE_NORMAL
- en: 'Disclaimer: The results won’t surprise you because this is a widely talked-about
    topic. But we’re not here to discover new stuff today.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I’ll be using a notebook for simplicity, but have in mind that the plots we’re
    about to create can also be embedded into websites — depending on the library
    we use — which is really where the good part is.
  prefs: []
  type: TYPE_NORMAL
- en: 'I cleaned the data a little bit to make it simple and let it be ready for what’s
    coming next. Here’s the snippet in case you want to follow the same steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And here’s what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/055245d0e38ecb8241861b86d7b7f7ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Top 5 DataFrame rows — Image by the Author
  prefs: []
  type: TYPE_NORMAL
- en: We’re ready to start plotting.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Seaborn
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’m sure you’re familiar with Seaborn already. It’s one of the most used libraries
    used for plotting alongside Matplotlib. What you maybe didn’t know is that we
    can use it for dynamic visuals as well, not just static ones.
  prefs: []
  type: TYPE_NORMAL
- en: But let me introduce it just in case it’s new to anyone.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using their own words: “Seaborn is a Python data visualization library based
    on [matplotlib](https://matplotlib.org/). It provides a high-level interface for
    drawing attractive and informative statistical graphics.”[2]'
  prefs: []
  type: TYPE_NORMAL
- en: So it’s like Matplotlib’s improved version.
  prefs: []
  type: TYPE_NORMAL
- en: 'And I’ll start by using a simple `relplot()` to plot the relationship between
    different variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/cad9dba2b7608a3f3ddccbb9e1905a14.png)'
  prefs: []
  type: TYPE_IMG
- en: Prevalence-Period-Gender relationship — Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: The visualization per se is not what’s important here. We’ll draw some insights
    in the last section of this post when we simulate storytelling.
  prefs: []
  type: TYPE_NORMAL
- en: What we have is a static plot. We can’t change anything if it’s not by changing
    the code, and that makes the plot static. It’s fine if we want to compare on a
    `ParentLocation` basis, but we can’t get granular on a country level. Doing so
    would result in a lot of lines within the same confusing chart.
  prefs: []
  type: TYPE_NORMAL
- en: This isn’t what we came for.
  prefs: []
  type: TYPE_NORMAL
- en: But Seaborn doesn’t allow us to implement interactive dashboards… However, we
    can use `ipywidgets` to improve interactability.
  prefs: []
  type: TYPE_NORMAL
- en: If the next snippet is not working on your system, it’s because you need to
    enable the widgets extension by running the next command in your terminal `jupyter
    nbextension enable --py --sys-prefix widgetsnbextension`
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'We’ll now plot the same `relplot()` but now we want to compare countries in
    an interactable way. Here’s how you can do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This was longer. But all we did was wrap some code into two functions — one
    to create a dropdown and the other to create the plot itself — and then just create
    the UI by using an HBox widget, which is a wrapper that groups the passed widgets.
    We then use the `interactive_output` function to create the output and display
    everything.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aff1a643cc0541e07f525e1a44d7430f.png)'
  prefs: []
  type: TYPE_IMG
- en: Country comparison by gender — Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: We’ve added some interaction and dynamism here! We can already compare two countries
    at a time and see the differences in their overweight prevalence.
  prefs: []
  type: TYPE_NORMAL
- en: Things are getting better.
  prefs: []
  type: TYPE_NORMAL
- en: However, this approach has a limitation. The plots aren’t interactable, we just
    have dynamic data being shown. Is that all we want? Maybe at some point, but not
    today.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing our next new friend…
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Bokeh
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using an official statement:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “With just a few lines of Python code, Bokeh enables you to create interactive,
    JavaScript-powered visualizations displayable in a web browser.”[3]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Bokeh is a way more complex and complete option for interactable graphs and
    dashboards. We can literally create Tableau-like dashboards with Bokeh.
  prefs: []
  type: TYPE_NORMAL
- en: The con is that it’s not the most user-friendly option. Even the installation
    can be quite painful for beginners trying to use it on a Jupyter Notebook.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the plots and dashboards we create are rendered in an HTML page
    or file, but we can render them inline within our notebook by importing and calling
    the `output_notebook()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try to replicate the first plot we created with Seaborn, but now using
    Bokeh and generating an interactable graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/89ca35cac2b5426c05d9276257bc66b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Comparing overweight prevalence in Europe by gender, from 2000 until 2016 —
    Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: Yay! Our first interactive data visualization. But this is still far from the
    dashboard concept.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we don’t have the ability to choose the data being displayed yet. We’re
    just able to show/hide some lines and move around, and zoom in/out of the graphic.
    Cool, but we need more.
  prefs: []
  type: TYPE_NORMAL
- en: Even though Bokeh has its own widgets incorporated — with which we could create
    dropdowns among others — I’ll leave it here.
  prefs: []
  type: TYPE_NORMAL
- en: Bokeh is certainly not beginner-friendly and I don’t want to confuse anyone.
    That makes it, in my opinion, a worse alternative compared to the two that are
    coming next.
  prefs: []
  type: TYPE_NORMAL
- en: It’s like wasting time and money talking about how good rice is for you when
    in reality you could focus on even healthier options like brown rice or even about
    other vegetables like broccoli.
  prefs: []
  type: TYPE_NORMAL
- en: On to the good part, then.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Plotly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Again, from **Plotly’s documentation**:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Plotly Express is a built-in part of the `plotly` library, and is the recommended
    starting point for creating most common figures. […] The API for these functions
    was carefully designed to be as consistent and easy to learn as possible, making
    it easy to switch from a scatter plot to a bar chart to a histogram to a sunburst
    chart throughout a data exploration session.[4]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Plotly is an amazing tool I’ve used over and over again, and I can promise
    it’s exactly how they say: easy to learn and easy to switch from one plot to the
    other.'
  prefs: []
  type: TYPE_NORMAL
- en: However, we’re not going to talk much about Plotly Express today because we’re
    going to go a little bit further. We’re going to use Plotly’s graph objects to
    get things done.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll go straight into the code that allows us to create the country comparison
    plot, with the two dropdowns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: It might seem long but it’s mainly because I’ve formatted it to appear without
    the need of scrolling horizontally. If you closely look at it you’ll see we’re
    really doing very few things!
  prefs: []
  type: TYPE_NORMAL
- en: We’re reusing parts of the previous snippets, such as the `create_dd()` function.
    Yes, we’re using `ipywidgets` again but their integration into Plotly is extremely
    smooth. It’s all handled through the `observe()` method they have, and the `response()`
    function we’ve coded, which is executed every time the value from any of both
    dropdowns changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'And here’s the visual result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/74916ab34a2b0698a5ee9d1aca23c83b.png)'
  prefs: []
  type: TYPE_IMG
- en: Using plotly to interact with data — Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: That was quite easy! Again, using Bokeh to achieve the same is possible but
    learning how to do it in Plotly is way faster. And the results are great either
    way.
  prefs: []
  type: TYPE_NORMAL
- en: On to our last friend…
  prefs: []
  type: TYPE_NORMAL
- en: Dash
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dash isn’t a plotting library per se. It’s an amazing framework used to generate
    dashboards. Its popularity has been increasing lately for building interactive
    web-based dashboards.
  prefs: []
  type: TYPE_NORMAL
- en: '*Spoiler*: Dash was created by Plotly’s developers. So here we’ll still be
    using Plotly but now combined with the Dash framework to see what we can create
    with them.'
  prefs: []
  type: TYPE_NORMAL
- en: So, how can we build the same plot but using Dash? Instead of putting the whole
    code in here as I’ve been doing, I’d like to divide it into chunks for better
    comprehension.
  prefs: []
  type: TYPE_NORMAL
- en: As I said at the beginning, I’ll be writing separate posts to go more in-depth
    into these frameworks. So consider following me if you’re interested.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We’ll start with the imports. Take into account that we’ll be reusing code that
    we’ve already seen so I’m not reimporting frameworks like Plotly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note that I imported `JupyterDash`, and that’s because I’m using a Jupyter Notebook.
    If you’re using a normal script, just replace the last row with `from dash import
    Dash`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next thing we do is create the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: I hope you’re familiar with HTML because we’re now going to do a little bit
    of that but using `html`‘s module from **Dash**. I plan on creating a simple 3-column,
    1-row grid, with sizes 15%, 60%, and 25%. The first column will be used for the
    dropdowns, the second for the chart, and the third will be empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first column, then, will consist of a div container containing a title
    and another div with the dropdowns. This code creates it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: It may seem messy at first but it is really simple. Each HTML element has its
    children within the list argument (in this case, the `<div>` wraps an `<h1>` and
    another `<div>`. And the two dropdowns inside the inner `<div>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now create the graph code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This one was simpler. It’s just a `<div>` container wrapping a graph with ID
    chart.
  prefs: []
  type: TYPE_NORMAL
- en: However, no dashboard is acceptable if there’s no style applied to it. How do
    we add some CSS to these elements?
  prefs: []
  type: TYPE_NORMAL
- en: 'Easy, each element has an optional `style` parameter we can use to add our
    CSS. Here’s how the last code snippet ends up with some styling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'I already hear you saying: “Sure, we know how to create both elements. But
    how do we actually create the layout?” Simple, just put them all into a container
    `<div>` and assign it to `app.layout`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If you tried to run this, you’d see empty graphs. We can add some data to them
    using **callbacks**. These callbacks have input and output dependencies, which
    are used to update the data being shown and add up to the interaction we’re looking
    for.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll next see a function called `update_chart()`, which is essentially a copy-paste
    of the `create_chart()` function we’ve used in the Plotly section.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: So the new stuff here is what’s above the function declaration. We say the callback
    depends on two inputs — country1 and country2 — and the output is a figure with
    `id='chart'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we run the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And then navigate to **http://127.0.0.1:8050** or whichever IP the server is
    running at and play with it just like I do here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/49a5ed3cbabb42a8bc20fdc4633b15eb.png)'
  prefs: []
  type: TYPE_IMG
- en: Using Dash and Plotly to interact with data — Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: See how fluid it is. We can combine the power of HTML and Python’s plots to
    create pretty dashboards, all thanks to Dash.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Telling the Story
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All this was pretty introductory. We didn’t build a dashboard nor tell a story.
    We just saw some tools to make graphs interactable.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, I’ll share with you a sample dashboard someone could build
    to tell a story to stakeholders. It won’t be the prettiest nor the most complete
    one, but it’ll be enough to show what Dash is capable of and convince you to start
    using it for your future visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: '**Disclaimer**: fall in love with the utility Dash and Plotly provide, not
    the design I’ve implemented. My goal was to showcase what Dash is capable of instead
    of actually trying to convince you that overweight is a real problem worldwide.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/bdca1150f00b9393b7264898860d73b5.png)'
  prefs: []
  type: TYPE_IMG
- en: Simple Dashboard I’ve built for this project — Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: 'On to the insights now:'
  prefs: []
  type: TYPE_NORMAL
- en: '**General basis**'
  prefs: []
  type: TYPE_NORMAL
- en: Obesity is commonly said to be a pandemic by a lot of scientists out there.
    Whether it fits the actual definition of a pandemic or not is irrelevant. What’s
    relevant is the prevalence it has and the negative effects it supposes to our
    health.
  prefs: []
  type: TYPE_NORMAL
- en: Being overweight is the step before being obese. So overweight matters too because,
    when not controlled, can lead to future obesity.
  prefs: []
  type: TYPE_NORMAL
- en: If we go on and inspect the world map in 1975 vs the one from 2016, we can clearly
    see how the latter has more vivid colors. This isn’t good because the yellower,
    the higher the overweight prevalence is. So the overweight prevalence has increased
    a lot, on a general basis, throughout the whole world.
  prefs: []
  type: TYPE_NORMAL
- en: Globalization, improvements in technology and science, and many other factors
    have made food abundant in most countries. Or at least, we can guess that access
    to food has increased in general terms. That, combined with the ever-increasing
    sedentary lifestyles, and the overconsumption of non-healthy food has led to this
    huge increase in overweight prevalence.
  prefs: []
  type: TYPE_NORMAL
- en: Oh, and as overweight prevalence has increased, so has obesity.
  prefs: []
  type: TYPE_NORMAL
- en: '**Top Countries**'
  prefs: []
  type: TYPE_NORMAL
- en: We see prevalences extremely high (~88.7%) in countries like Nauru or Palau.
    We haven’t confirmed the data but several reports do insist on tackling the obesity
    problem in these countries (plus, the data should be reliable coming from WHO).
  prefs: []
  type: TYPE_NORMAL
- en: Focusing now on Nauru, “From the 1980s, Nauruans led a sedentary lifestyle with
    an unhealthy diet, contributing to the worst health conditions in the Pacific
    region”.[5]
  prefs: []
  type: TYPE_NORMAL
- en: Also, “Approximately 90% of the land area of Nauru is covered with phosphate
    deposits, with the majority strip-mined and non-arable. This has led to Nauruan
    reliance on processed food, high in both sugar and fat, imported from large Oceanian
    countries such as Australia and New Zealand” [6]
  prefs: []
  type: TYPE_NORMAL
- en: We could argue that Nauru is an outlier, but there are several countries in
    similar positions. Worrying, to say the least.
  prefs: []
  type: TYPE_NORMAL
- en: '**Time Difference**'
  prefs: []
  type: TYPE_NORMAL
- en: Whether a country’s prevalence has increased a lot or not may depend on several
    factors and all should be treated independently.
  prefs: []
  type: TYPE_NORMAL
- en: However, I’m fascinated by Singapore. They’ve almost remained the same in a
    41-year period. Several Western-Europe countries are also at the top of least-increased.
    I’m sure we could extract a pattern here if we looked for one.
  prefs: []
  type: TYPE_NORMAL
- en: On the other extreme, Botswana increased its prevalence a lot when we focus
    on the difference between 1975 and 2016\. However, in 2016, they were still far
    from the top. That’s probably because their access to food has increased in the
    last few years, but Botswana is still Botswana.
  prefs: []
  type: TYPE_NORMAL
- en: '**Gender**'
  prefs: []
  type: TYPE_NORMAL
- en: In most countries, men have historically led the overweight prevalence. We see
    men being more overweight than women most of the time.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could try to create different hypotheses here but one’s undeniable: women
    have historically cared a lot more about their appearance than men, probably due
    to social pressure. We live in a sexist world, and these are just some of the
    consequences of it.'
  prefs: []
  type: TYPE_NORMAL
- en: It’s only recently that we’re seeing countries like Brazil where the overweight
    prevalence in women has surpassed the men’s. Not something to be happy about,
    but could we consider it a feminist act? Probably not.
  prefs: []
  type: TYPE_NORMAL
- en: But still, the pattern is clear if we generalize it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Final conclusion**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The hard truth is that overweight prevalence — and therefore, obesity — is
    increasing as time goes by. And it affects everyone: all genders, all countries.
    No single one is safe.'
  prefs: []
  type: TYPE_NORMAL
- en: Is it really a pandemic? One could think so.
  prefs: []
  type: TYPE_NORMAL
- en: What’s worrying is that, in most cases, being overweight is a consequence of
    bad habits, poor nutrition, a sedentary lifestyle, and bad sleep. Add to that
    the overall caloric intake that has been increasing for so many years and doesn’t
    seem to plateau.
  prefs: []
  type: TYPE_NORMAL
- en: All of these depend on one’s self, but most are clearly not doing anything.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s already been proven that obesity kills people: it’s linked to heart attacks,
    strokes, diabetes, cancer… And we still let it go up.'
  prefs: []
  type: TYPE_NORMAL
- en: We must stop this, but we can only take care of ourselves. So make sure you
    choose well.
  prefs: []
  type: TYPE_NORMAL
- en: 'As Jerzy Gregorek said:'
  prefs: []
  type: TYPE_NORMAL
- en: “Hard choices, easy life. Easy choices, hard life”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The End
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for reading it through!
  prefs: []
  type: TYPE_NORMAL
- en: This was the longest post I’ve ever written but I’ve enjoyed it as a child would
    enjoy playing with toys. I hope you did too.
  prefs: []
  type: TYPE_NORMAL
- en: The aim of this post was to share some tools I use to create interactable visualizations
    and to finally do a sort of brief and informal story-telling, using the dashboard
    I created, to extract some insights and hypotheses from the data we’ve seen.
  prefs: []
  type: TYPE_NORMAL
- en: In the resources section, you’ll see a link to check all the code used for this
    post![7]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If you’d like to support me further, consider subscribing to Medium’s Membership
    through the link you find below: it won’t cost you any extra penny but will help
    me through this process.'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@polmarin/membership?source=post_page-----ceb43db67488--------------------------------)
    [## Join Medium with my referral link - Pol Marin'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Pol Marin (and thousands of other writers on Medium).
    Your membership fee directly supports Pol…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@polmarin/membership?source=post_page-----ceb43db67488--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] [Prevalence of overweight among adults, BMI >= 25 (age-standardized estimate)
    (%)](https://www.who.int/data/gho/data/indicators/indicator-details/GHO/prevalence-of-overweight-among-adults-bmi-=-25-(age-standardized-estimate)-(-))
    — World Health Organization'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] [seaborn: statistical data visualization](https://seaborn.pydata.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] [Bokeh](https://bokeh.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] [Plotly express in Python](https://plotly.com/python/plotly-express/) —
    Plotly'
  prefs: []
  type: TYPE_NORMAL
- en: '[5] Nishiyama, Takaaki (27 May 2012). [“Nauru: An island plagued by obesity
    and diabetes”](http://globe.asahi.com/feature/article/2012050200007.html). *Asahi
    Shimbun*.'
  prefs: []
  type: TYPE_NORMAL
- en: '[6]”[I have seen so many funerals for such a small island”: The astonishing
    story of Nauru, the tiny island nation with the world’s highest rates of type
    2 diabetes](https://www.diabetes.co.uk/in-depth/i-have-seen-so-many-funerals-for-such-a-small-island-the-astonishing-story-of-nauru-the-tiny-island-nation-with-the-worlds-highest-rates-of-type-2-diabetes/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[7] [Interactive Viz Repo](https://github.com/polmarin/interactive_viz) — GitHub'
  prefs: []
  type: TYPE_NORMAL
