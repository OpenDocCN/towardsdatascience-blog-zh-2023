- en: Command Line Interface with sysargv, argparse, docopts, and Typer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/command-line-interface-with-sysargv-argparse-docopts-and-typer-e876f577a5d6](https://towardsdatascience.com/command-line-interface-with-sysargv-argparse-docopts-and-typer-e876f577a5d6)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 4 ways to pass arguments to your Python scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://kayjanwong.medium.com/?source=post_page-----e876f577a5d6--------------------------------)[![Kay
    Jan Wong](../Images/28e803eca6327d97b6aa97ee4095d7bd.png)](https://kayjanwong.medium.com/?source=post_page-----e876f577a5d6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e876f577a5d6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e876f577a5d6--------------------------------)
    [Kay Jan Wong](https://kayjanwong.medium.com/?source=post_page-----e876f577a5d6--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e876f577a5d6--------------------------------)
    ·9 min read·Nov 24, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/25677cbf2ad7407485c144f23c0c8104.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Florian Olivo](https://unsplash.com/@florianolv?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: To deploy a pipeline, typically there is a *main* script, or a single point
    of entry that runs the whole pipeline. For example, in a data science pipeline,
    the point of entry of the code repository should orchestrate and run the data,
    feature engineering, modeling, and evaluation pipeline in sequence.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, you may need to run different types of pipelines or make ad-hoc tweaks
    to the pipeline.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Tweaks may include omitting certain parts of the code or running the pipeline
    with different parameter values. In data science, there could be a training and
    scoring pipeline or certain runs that require a full or partial refresh of the
    data.
  prefs: []
  type: TYPE_NORMAL
- en: '**The** **trivial solution will be to create multiple main scripts**. However,
    this will result in code duplication and it is hard to maintain the multiple scripts
    in the long run — given that there can be many combinations of tweaks. **A better
    solution is to have the main script accept arguments**, in the form of values
    or flags, and subsequently run the appropriate type of pipeline via the Command
    Line Interface (CLI).'
  prefs: []
  type: TYPE_NORMAL
- en: This article will not elaborate on how your main script decides to use the arguments
    but will introduce different ways you can pass in arguments to your main script
    — **you can think of it as your main script is now a function that accepts arguments**!
    I will also elaborate on the pros and cons of each method, and provide code samples
    of how to implement the basic to advanced usages.
  prefs: []
  type: TYPE_NORMAL
- en: Table of Content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[**Using sysargv**](https://medium.com/p/e876f577a5d6/#3a69): The simplest
    way'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Using argparse**](https://medium.com/p/e876f577a5d6/#6b56): The most common
    way'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Using docopts**](https://medium.com/p/e876f577a5d6/#bc27): An alternative
    way'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Using Typer**](https://medium.com/p/e876f577a5d6/#3e1a): The newest and
    easiest way'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using sysargv
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The simplest way to pass in arguments
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Arguments can be passed in and read directly with `sysargv`, making it the simplest
    way to pass in multiple arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '**Demonstration**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the demonstration below, after passing in arguments on the CLI, we can see
    that `sysargv` interprets them as a list of values. The first value is the script
    name and the subsequent values are all the arguments being passed in, separated
    by spaces. Note that all the arguments passed in are interpreted as strings!
  prefs: []
  type: TYPE_NORMAL
- en: '**Code**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Calling with CLI**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Pros
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Simple and intuitive** to use'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multiple arguments**: Can pass in an unlimited number of arguments to be
    referenced using list methods'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Not documented**: Arguments are not named, making it hard to track the exact
    order of expected arguments'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Only string arguments**: Arguments are interpreted as strings. This can be
    solved by processing or casting the arguments to a different type (may require
    additional steps to validate the argument type and value)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using argparse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most common way to pass in arguments
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Solving the cons of using `sysargv`, `argparse`can receive named arguments,
    arguments of different data types, and do so much more! This makes `argparse`
    the most popular way to pass in arguments to Python scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Simple Demonstration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the simple demonstration, we initialize an `ArgumentParser` object and specify
    the expected arguments and their types with the `.add_argument()` method.
  prefs: []
  type: TYPE_NORMAL
- en: To interpret the arguments, we get a *Namespace* object by calling `.parse_args()`.
    The arguments can then be retrieved from the *Namespace* object via dot notation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Calling with CLI**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Advanced Demonstration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the advanced demonstration, we will be making the following enhancements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Include description and epilog** within `argparse.ArgumentParser()`: Useful
    for showing up in the help documentation'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add **positional arguments**: Positional arguments are mandatory to specify.
    They are unnamed and have to be specified in sequence if there are multiple positional
    arguments'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add **option arguments**: Option arguments can implement named arguments that
    take in one or more values, and can implement on/off switches as well'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify **composite data types** such as `Enum` class and list
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Interpret passed arguments**: Arguments can be passed using the command line
    or manual specification in code'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Code**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Calling with CLI**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Other Advanced Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`argparse` supports the following usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Subcommands**: Similar to calling `git add` and `git commit` where `add`
    and `commit` are subparsers that accept a different set of arguments'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FileType arguments**: By modifying the `type` parameter value, the parser
    can take in a file name as an argument and have its content opened in the *Namespace*
    object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is recommended to visit the [Official documentation](https://docs.python.org/3/library/argparse.html)
    for the most up-to-date and complete information.
  prefs: []
  type: TYPE_NORMAL
- en: Pros
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Documented**: Help messages are available to show users what arguments are
    available'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multiple arguments and multiple data types supported**: Able to handle multiple
    named arguments of various data types'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Lengthy**: Takes up more lines of code than `sysargv` and might clutter the
    main script. This can be solved by abstracting out the `argparse` codes to another
    file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Merely an interface**: Code has no value to the main script except to act
    as an interface for the user to pass in arguments. This can be deemed as extra
    lines of code and duplicated effort for documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using docopts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An alternative way to pass in arguments
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In `docopts`, arguments are passed in according to the documentation in the
    doc string, and no extra lines of code are needed (as opposed to `argparse`)!
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: This is not a Python standard library and you will need to perform a
    `pip install docopts-ng`.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Demonstration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The documentation must be written in a specific format with the “Usage” and
    “Options” sections. For usage, `()` represents required arguments, `[]` represents
    optional arguments, and `...` denotes multiple arguments.
  prefs: []
  type: TYPE_NORMAL
- en: When calling with CLI, a string match is performed to see which version of usage
    the arguments match with. Arguments can be retrieved from a dictionary object.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Calling with CLI**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Pros
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Documented**: Help messages are available to show users what arguments are
    available'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Succinct**: No additional code is needed, documentation is translated directly'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Only string or Boolean arguments**: Arguments are interpreted as strings
    or Boolean values. This can be solved by processing or casting the arguments to
    a different type (may require additional steps to validate the argument type and
    value)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**More arguments than necessary**: Any argument indicated in the doc string
    examples will be reflected in the interpreted dictionary (i.e., `--version` may
    be an unnecessary key in the dictionary)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Typer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The newest and easiest way to pass in arguments
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Developed by the same creator as FastAPI, Typer is the newest and easiest way
    to pass in arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: This is not a Python standard library and you will need to perform a
    `pip install ''typer[all]''`, which has internal dependencies on `click` and `rich`.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Simple Demonstration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the simple demonstration, we write a main function in the script as-per-normal
    and add one line of code `typer.run(main)` to interact with CLI.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Calling with CLI**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Advanced Demonstration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the advanced demonstration, we will use a `typer` similar to an *app* in
    FastAPI. Subcommands in `argparse` can be implemented with a `@app.command()`
    decorator — which makes it very easy to use!
  prefs: []
  type: TYPE_NORMAL
- en: '**Code**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Calling with CLI**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Other Advanced Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`typer` supports the following usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Autogenerated Documentation**: This requires `pip install typer-cli` and
    markdown documentation can be generated from CLI commands!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Built-in Methods**: `typer.Argument()`, `typer.Option()`, `typer.Prompt()`
    etc. are built-in Typer methods to enhance help messages, make the CLI interactive,
    and more'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testing**: Similar to FastAPI, Typer arguments can be tested using `typer.testing.CliRunner()`
    which makes the code more robust'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is recommended to visit the [Official documentation](https://typer.tiangolo.com/)
    for the most up-to-date and complete information.
  prefs: []
  type: TYPE_NORMAL
- en: Pros
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Documented**: Help messages are available to show users what arguments are
    available'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multiple arguments and multiple data types supported**: Able to handle multiple
    named arguments of various data types'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Succinct**: Only a few lines of code need to be added to work seamlessly
    with existing Python functions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Lengthy**: For advanced usages, more lines of Typer-specific code need to
    be added which can make the code lengthy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hope you have learned more about different ways to pass arguments to Python
    scripts and the pros and cons of each method. As a coder, writing user-friendly
    codes is just as important as writing elegant and efficient codes — and **building
    CLI applications is one way to allow users or other applications to interface
    with your code**. There are much more advanced usages available in their respective
    Official documentation below.
  prefs: []
  type: TYPE_NORMAL
- en: Related Links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`**sysargv**`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Official Documentation: [https://docs.python.org/3/library/sys.html#sys.argv](https://docs.python.org/3/library/sys.html#sys.argv)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**argparse**`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Official Documentation: [https://docs.python.org/3/library/argparse.htm](https://docs.python.org/3/library/argparse.html)l'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**docopts**`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Official Documentation: [http://docopt.org/](http://docopt.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub: [https://github.com/jazzband/docopt-ng](https://github.com/jazzband/docopt-ng)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Typer**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Official Documentation: [https://typer.tiangolo.com/](https://typer.tiangolo.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
