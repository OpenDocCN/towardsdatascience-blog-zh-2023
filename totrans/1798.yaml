- en: Run Things in the Background with Julia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/run-things-in-the-background-with-julia-c9e72e59fc48](https://towardsdatascience.com/run-things-in-the-background-with-julia-c9e72e59fc48)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Stop waiting and start multi-threading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://niczky12.medium.com/?source=post_page-----c9e72e59fc48--------------------------------)[![Bence
    Komarniczky](../Images/d4de94667bcac6d9001390515592eab9.png)](https://niczky12.medium.com/?source=post_page-----c9e72e59fc48--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c9e72e59fc48--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c9e72e59fc48--------------------------------)
    [Bence Komarniczky](https://niczky12.medium.com/?source=post_page-----c9e72e59fc48--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c9e72e59fc48--------------------------------)
    ¬∑4 min read¬∑May 26, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b6d8943bd405300d84e92529392e8559.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Max Wolfs](https://unsplash.com/ko/@yesterdazed?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Even though Julia is one of the fastest languages out there, sometimes it can
    take time for things to execute. If you‚Äôre a data scientist or analyst using Julia,
    maybe you want to send computation off to a server, wait for it to finish, and
    then do something with the results.
  prefs: []
  type: TYPE_NORMAL
- en: But waiting is boring.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When you‚Äôre in the middle of your work, full of ideas and enthusiasm to deliver
    something interesting, you want to **keep pounding that keyboard to find something
    else**.
  prefs: []
  type: TYPE_NORMAL
- en: Let me show you a simple technique in Julia, how you can **dispatch computation
    to another thread** and get on with your work.
  prefs: []
  type: TYPE_NORMAL
- en: Setting things up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As I said before, Julia is fast. As a modern language, it is also **built with
    multiprocessing in mind**. So using those extra cores in your machine is easy
    if you know how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we must make sure we start a Julia instance with multiple threads:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This will start Julia using 4 threads. We can confirm this by asking for the
    number of threads:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Making a slow function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/04421f6811cb6df54cb72c074f69ac46.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Frederick Yang](https://unsplash.com/@fredericksail?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have more threads it‚Äôs time to see this magic in action. But we
    need something to run for a while for this to make sense. I assume if you‚Äôre reading
    this article, you already have something in mind, but because I prefer to have
    complete examples in my articles, I‚Äôll write a little function here to entertain
    myself.
  prefs: []
  type: TYPE_NORMAL
- en: This ‚Äúslow‚Äù function could be a call to build an ML model, run some SQL-like
    queries on a database or fetch some data from cloud storage. Use your imagination
    and go wild!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you‚Äôre curious about what the above is about and why I picked 989,345,275,647
    then [read this Wiki page](https://en.wikipedia.org/wiki/Collatz_conjecture).
  prefs: []
  type: TYPE_NORMAL
- en: Fetching some magic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/fe87378468a88af2ccaf2d451455f5df.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [K. Mitch Hodge](https://unsplash.com/@kmitchhodge?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Since we have `Threads` in our namespace, we can use the `**@spawn**` **macro
    to send computation to another thread**. This means that we get our REPL back
    immediately and we can continue working as before.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '*Ignore my lack of imagination, I just couldn‚Äôt be bothered to come up with
    something more sophisticated after spawning.*'
  prefs: []
  type: TYPE_NORMAL
- en: Basically, what‚Äôs happening here is that `@spawn` returns a `Task`. T**his task
    is automatically dispatched to a free thread** that can work on it in the background
    allowing you to write more code and ask more questions in the meanwhile. Once
    you need the results, you can **collect the results of the tasks with** `**fetch**`
    which will wait for the `Task` to finish and return the results.
  prefs: []
  type: TYPE_NORMAL
- en: Proof that this works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One way to show that this indeed works is to show some timings.
  prefs: []
  type: TYPE_NORMAL
- en: First, we‚Äôll run our function on the current thread and measure the time it
    takes. Then we‚Äôll spawn a `Task` and finally we‚Äôll spawn and immediately wait
    for the results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, our function takes about 16s to run. But if we dispatch the
    task, then we **immediately return a Task**. This comes with some overhead as
    you can see in the final row, since this is slightly (0.3s) slower than just running
    the computation on the main thread.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hopefully, this little trick will enlighten newcomers to Julia about the awesome
    superpowers a modern, multi-threaded language can give them. If you enjoyed reading
    my ramble about this topic, give me a üëè or üëè üëè.
  prefs: []
  type: TYPE_NORMAL
