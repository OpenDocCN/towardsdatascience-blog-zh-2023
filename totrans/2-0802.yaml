- en: 'End-to-End ML Pipelines with MLflow: Tracking, Projects & Serving'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 MLflow 的端到端 ML 管道：追踪、项目和服务
- en: 原文：[https://towardsdatascience.com/end-to-end-ml-pipelines-with-mlflow-tracking-projects-serving-1b491bcdc25f](https://towardsdatascience.com/end-to-end-ml-pipelines-with-mlflow-tracking-projects-serving-1b491bcdc25f)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/end-to-end-ml-pipelines-with-mlflow-tracking-projects-serving-1b491bcdc25f](https://towardsdatascience.com/end-to-end-ml-pipelines-with-mlflow-tracking-projects-serving-1b491bcdc25f)
- en: Definitive tutorial for advanced use of MLflow
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级 MLflow 使用教程
- en: '[](https://medium.com/@antonsruberts?source=post_page-----1b491bcdc25f--------------------------------)[![Antons
    Tocilins-Ruberts](../Images/363a4f32aa793cca7a67dea68e76e3cf.png)](https://medium.com/@antonsruberts?source=post_page-----1b491bcdc25f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1b491bcdc25f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1b491bcdc25f--------------------------------)
    [Antons Tocilins-Ruberts](https://medium.com/@antonsruberts?source=post_page-----1b491bcdc25f--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@antonsruberts?source=post_page-----1b491bcdc25f--------------------------------)[![Antons
    Tocilins-Ruberts](../Images/363a4f32aa793cca7a67dea68e76e3cf.png)](https://medium.com/@antonsruberts?source=post_page-----1b491bcdc25f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----1b491bcdc25f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----1b491bcdc25f--------------------------------)
    [Antons Tocilins-Ruberts](https://medium.com/@antonsruberts?source=post_page-----1b491bcdc25f--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1b491bcdc25f--------------------------------)
    ·9 min read·Feb 16, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----1b491bcdc25f--------------------------------)
    ·阅读时间 9 分钟·2023年2月16日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/537bead127eea662380418af3a0ce3b1.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/537bead127eea662380418af3a0ce3b1.png)'
- en: Photo by [Jeswin Thomas](https://unsplash.com/@jeswinthomas?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Jeswin Thomas](https://unsplash.com/@jeswinthomas?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: MLflow is a powerful tool that is often talked about for its experiment tracking
    capabilities. And it’s easy to see why — it’s a user-friendly platform for logging
    all the important details of your machine learning experiments, from hyper-parameters
    to models. But did you know that MLflow has more to offer than just experiment
    tracking? This versatile framework also includes features such as MLflow Projects,
    the Model Registry, and built-in deployment options. In this post, we’ll explore
    how to utilise all of these features to create a complete and efficient ML pipeline.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 是一个功能强大的工具，通常因其实验追踪功能而受到关注。这也很容易理解——它是一个用户友好的平台，用于记录机器学习实验的所有重要细节，从超参数到模型。但你知道
    MLflow 提供的不仅仅是实验追踪吗？这个多功能框架还包括 MLflow Projects、模型注册和内置的部署选项。在这篇文章中，我们将探讨如何利用这些功能来创建一个完整且高效的
    ML 管道。
- en: For complete MLflow beginners, this tutorial might be too much so I highly encourage
    you to watch these two videos before diving into this one!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于完全没有 MLflow 基础的初学者来说，这个教程可能会有点难度，因此我强烈建议你在深入学习这个教程之前，先观看这两个视频！
- en: Setup
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: For this project we’ll be working locally, so make sure to properly setup your
    local environment. There are three main dependecnies that the project requires
    — `mlflow` ,`pyenv` , and `kaggle` . While MLflow can be installed simply using
    pip, you’ll need to follow separate instructions to setup [pyenv](https://github.com/pyenv/pyenv#installation)
    and [kaggle](https://github.com/Kaggle/kaggle-api).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将在本地进行操作，因此请确保正确设置你的本地环境。项目需要三个主要依赖项——`mlflow`、`pyenv` 和 `kaggle`。虽然可以通过
    pip 安装 MLflow，但你需要按照不同的说明来设置 [pyenv](https://github.com/pyenv/pyenv#installation)
    和 [kaggle](https://github.com/Kaggle/kaggle-api)。
- en: Once you’re done with the installations, make sure to pull the latest version
    of [this repo](https://github.com/aruberts/tutorials). When you have the repo
    on your laptop, we’re finally ready to begin!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 完成安装后，确保拉取 [这个仓库](https://github.com/aruberts/tutorials) 的最新版本。当你在笔记本电脑上获取了仓库后，我们就可以开始了！
- en: Project Overview
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: 'Move to the `mlflow_models` folder and you’ll see the following structure:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 移动到 `mlflow_models` 文件夹，你将看到以下结构：
- en: '![](../Images/6bfda34601ead55847c0cae7c342b41a.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6bfda34601ead55847c0cae7c342b41a.png)'
- en: mlflow_models folder structure. Image by author.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: mlflow_models 文件夹结构。图像由作者提供。
- en: 'Here’s a brief overview of each file in this project:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是这个项目中每个文件的简要概述：
- en: '`MLProject` — yaml-styled file describing the MLflow Project'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MLProject` — 描述MLflow项目的yaml风格文件'
- en: '`python_env.yaml`— lists all the environment dependencies to run the project'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python_env.yaml` — 列出运行项目所需的所有环境依赖项'
- en: '`train_hgbt.py` and `train_rf.py` — training scripts for HistGradientBoosterTree
    and RandomForest models using specific hyperparamaters'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`train_hgbt.py` 和 `train_rf.py` — 使用特定超参数的HistGradientBoosterTree和RandomForest模型的训练脚本'
- en: '`search_params.py` — script to perform hyperparameter search.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`search_params.py` — 用于执行超参数搜索的脚本'
- en: '`utils` — folder contains all the utility functions used in the project'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`utils` — 文件夹包含项目中使用的所有实用程序函数'
- en: 'As stated before, this project is end-to-end, so we’re going to go from data
    download to model deployment. Approximate workflow is going to be like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，本项目是端到端的，因此我们将从数据下载到模型部署。大致的工作流程如下：
- en: Download data from Kaggle
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Kaggle下载数据
- en: Load and pre-process the data
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载和预处理数据
- en: Tune Random Forest (RF) model for 10 iterations
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整随机森林（RF）模型，进行10次迭代
- en: Register the best RF model and put it into production bucket
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册最佳RF模型并将其放入生产桶
- en: Deploy the models using in-built REST API
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用内置的REST API部署模型
- en: After we’re done, you can repeat the steps 2 to 5 for HistGradientBoostedTrees
    model on your own. Before jumping into the project, let’s see how these steps
    can be supported by MLflow.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，你可以自行重复步骤2到5以训练HistGradientBoostedTrees模型。在进入项目之前，让我们看看这些步骤如何得到MLflow的支持。
- en: MLflow Components
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MLflow 组件
- en: Generally speaking, MLflow has 4 components — Tracking, Projects, Models, and
    Registry.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一般而言，MLflow有4个组件 — Tracking、Projects、Models 和 Registry。
- en: '![](../Images/1bee01ad3f7a3c35ea36d74bac6fa558.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1bee01ad3f7a3c35ea36d74bac6fa558.png)'
- en: MLflow components. Screenshot from mlflow.org
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 组件。来自 mlflow.org 的截图
- en: Thinking back to the project steps, here’s how we’re going to be using each
    of them. First of all, I’ve used **MLflow Projects to package up the code** so
    that you or any other data scientist/engineer can reproduce the results. Second,
    **MLflow Tracking serve is going to track your tuning experiments**. This way,
    you’ll be able to retrieve the best experiments in the next step, where **you’ll
    add your models to the Model Registry.** From the registry, deploying the models
    will literally be a one-liner because of the MLflow Models format that they’re
    saved in and their in-built REST API functionality.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾项目步骤，下面是我们将如何使用它们。首先，我使用了**MLflow Projects 来打包代码**，这样你或其他数据科学家/工程师可以重现结果。其次，**MLflow
    Tracking 服务将跟踪你的调优实验**。这样，你将在下一步中检索到最佳实验，**然后将你的模型添加到模型注册表中。** 从注册表中，部署模型将真正变成一行代码，因为它们以MLflow
    Models格式保存，并具有内置的REST API功能。
- en: '![](../Images/1dbaeb97d6d723db175c5b1c7363cd83.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1dbaeb97d6d723db175c5b1c7363cd83.png)'
- en: Project steps overview. Image by author.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 项目步骤概览。图片由作者提供。
- en: Pipeline Overview
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道概览
- en: Data
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据
- en: 'Data will be downloaded automatically when you run the pipeline. As an illustrative
    example, I’ll be using a [Loan Default](https://www.kaggle.com/datasets/hemanthsai7/loandefault)
    dataset (CC0: Public Domain license) but you can adjust this by re-writing `training_data`
    parameter and changing column names to the relevant ones.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行管道时，数据将会自动下载。作为示例，我将使用[贷款违约](https://www.kaggle.com/datasets/hemanthsai7/loandefault)数据集（CC0：公共领域许可证），但你可以通过重写`training_data`参数并将列名更改为相关的名称来进行调整。
- en: MLProject & Environment Files
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MLProject & 环境文件
- en: '`MLProject` file gives you a convenient way to manage and organise your machine
    learning projects by allowing you to specify important details such as the project
    name, location of your Python environment, and the entry points for your pipeline.
    Each entry point can be customized with a unique name, relevant parameters, and
    a specific command. The command serves as the executable shell line that will
    be executed whenever the entry point is activated, and it has the capability to
    utilize the parameters that have been previously defined.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`MLProject` 文件为你提供了一种方便的方式来管理和组织你的机器学习项目，允许你指定重要的细节，如项目名称、Python环境的位置和管道的入口点。每个入口点可以通过独特的名称、相关参数和特定命令进行自定义。命令作为可执行的shell行，每当入口点被激活时就会执行，并且能够利用先前定义的参数。'
- en: '`python_env.yaml` file outlines the precise version of Python necessary to
    execute the pipeline, along with a comprehensive list of all required packages.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`python_env.yaml` 文件概述了执行管道所需的精确Python版本，以及所有必需软件包的全面列表。'
- en: These two files were needed to create a necessary environment for running the
    project. Now, let’s see the actual scripts (entry points) that the pipeline will
    be executing.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个文件是创建运行项目所需环境所必需的。现在，让我们查看管道将执行的实际脚本（入口点）。
- en: Training and Experiment Tracking
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 训练和实验跟踪
- en: Training is done in `train_rf.py` and `train_hgbt.py` scripts. Both of them
    are largely the same, with exception of the hyper-parametrs that get passed and
    the pre-processing pipelines. Consider the function below which downloads the
    data and trains a Random Forest model.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 训练是在 `train_rf.py` 和 `train_hgbt.py` 脚本中完成的。它们大体相同，唯一的区别在于传递的超参数和预处理管道。考虑下面的函数，它下载数据并训练一个随机森林模型。
- en: The experiment starts when we define MLflow context using `with mlflow.start_run()`.
    Under this context, we use `mlflow.log_metrics` to save the PR AUC metrics (check
    out the `eval_and_log_metrics` function for more information) and `mlflow.sklearn.log_model`
    to save the preprocessing and modelling pipeline. This way, when we load the pipeline,
    it will do all the pre-processing together with the inference. Quite convenient
    if you ask me!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 实验在使用 `with mlflow.start_run()` 定义 MLflow 上下文时开始。在此上下文中，我们使用 `mlflow.log_metrics`
    来保存 PR AUC 指标（有关更多信息，请查看 `eval_and_log_metrics` 函数）和 `mlflow.sklearn.log_model`
    来保存预处理和建模管道。这样，当我们加载管道时，它将一起执行所有预处理和推理。如果你问我，这非常方便！
- en: Hyper-parameter Tuning
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 超参数调优
- en: 'Hyper-parameter tuning is done using Hyperopt package in `search_params.py`
    . A lot of the code is borrowed from the official [mlflow repo](https://github.com/mlflow/mlflow/tree/master/examples/hyperparam)
    but I’ve tried to simplify it quite a bit. The trickiest part of this script is
    to understand how to structure these tuning rounds, so that they appear connected
    to the “main” project run. Essentially, when we run `search_params.py` using MLflow,
    we want to make sure that the structure of experiments is as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 超参数调优使用 `search_params.py` 中的 Hyperopt 包进行。大部分代码来自官方[mlflow 仓库](https://github.com/mlflow/mlflow/tree/master/examples/hyperparam)，但我已经尽量简化了。这个脚本中最棘手的部分是理解如何组织这些调优轮次，使其与“主”项目运行连接起来。本质上，当我们使用
    MLflow 运行 `search_params.py` 时，我们要确保实验的结构如下：
- en: '![](../Images/a03435cb340c618b037051fb8a491fff.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a03435cb340c618b037051fb8a491fff.png)'
- en: Experiment structure visualised. Image by author
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 实验结构的可视化。图片来源于作者
- en: As you can see, the `search_params` script does nothing else but specifies which
    parameters should `train_rf.py` use next (e.g. depths of 10, 2 and 5) and what
    should be its parent run ID (in the example above it’s 1234). When you explore
    the script, make sure to pay attention to the following details.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，`search_params` 脚本只会指定`train_rf.py` 接下来应该使用哪些参数（例如，10、2 和 5 的深度），以及它的父级运行
    ID（在上面的示例中是 1234）。当你探索脚本时，确保注意以下细节。
- en: When we define `mlflow.start_run`context, we need to make sure that `nested`
    parameter is set to `True`
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们定义 `mlflow.start_run` 上下文时，我们需要确保 `nested` 参数设置为 `True`
- en: When we run `train_rf.py` (or `train_hgbt.py` ), we explicitly pass the `run_id`
    and make it equal to the previously created `child_run` run
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们运行 `train_rf.py`（或 `train_hgbt.py`）时，我们显式传递 `run_id` 并使其等于先前创建的 `child_run`
    运行
- en: We also need to pass the correct`experiment_id`
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还需要传递正确的 `experiment_id`
- en: Please see the example below to understand how it all works in code. `eval`
    funtion is the one that will be optimised by the Hyperopt minimisation function.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看下面的示例，以了解代码中的全部工作原理。`eval` 函数是将通过 Hyperopt 最小化函数进行优化的函数。
- en: The actual tuning function is relatively simple. All we do is initialise an
    MLflow experiment run (parent run of all the other runs) and optimise the objective
    function using provided search space.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的调优函数相对简单。我们所做的就是初始化一个 MLflow 实验运行（所有其他运行的父级运行），并使用提供的搜索空间优化目标函数。
- en: Please note that these functions are just to illustrate the main parts of the
    code. Refer to the [github repository](https://github.com/aruberts/tutorials/tree/main/mlflow_models)
    for the full versions of the code.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些函数只是为了说明代码的主要部分。有关完整的代码版本，请参考[github 仓库](https://github.com/aruberts/tutorials/tree/main/mlflow_models)。
- en: Run the RF Pipeline
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 RF 流程
- en: 'By now you should have a general idea about how the scripts work! So, let’s
    run the pipeline for Random Forest using this line:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你应该对脚本如何工作有一个大致的了解了！所以，让我们用这一行运行随机森林管道：
- en: '[PRE0]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let’s decompose this command line:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解这个命令行：
- en: '`mlflow run .` means that we want to run the Project in this folder'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mlflow run .` 意味着我们想要在此文件夹中运行项目'
- en: '`-e search_params` specifies which of the entry points in MLProject file we
    want to run'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-e search_params` 指定了我们要运行的 MLProject 文件中的入口点。'
- en: '`--experiment-name loan` makes the experiment name equal to “**loan”.** You
    can set it to whatever you want but write it down since you’ll need later'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--experiment-name loan` 将实验名称设置为“**loan**”。你可以将其设置为任何你想要的名称，但请记下，因为之后会用到。'
- en: '`-P model_type=rf` sets the `model_type` parameter in `search_params` script
    to “**rf”** (aka Random Forest)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-P model_type=rf` 将`search_params`脚本中的`model_type`参数设置为“**rf**”（即随机森林）。'
- en: 'When we run this line, four things should happen:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行这行代码时，应该会发生四件事：
- en: Python virtual environment will get created
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python 虚拟环境将被创建。
- en: New experiment called “**loan**” will get initialised
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 名为“**loan**”的新实验将被初始化。
- en: Kaggle data will get downloaded into a newly created folder `data`
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kaggle 数据将被下载到新创建的文件夹`data`中。
- en: Hyperparameter search will begin
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 超参数搜索将开始。
- en: When the experiments are done, we can check the results in the MLflow UI . To
    access it, simply use the command `mlflow ui` in your command line. In the UI,
    select “loan” experiment (or whatever you’ve called it) and add your metric to
    the experiments view.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 实验完成后，我们可以在 MLflow UI 中检查结果。要访问它，只需在命令行中使用命令`mlflow ui`。在 UI 中，选择“loan”实验（或你给它起的任何名字），并将你的指标添加到实验视图中。
- en: '![](../Images/79bb66edb952c8cdde684cead0d3aeb2.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/79bb66edb952c8cdde684cead0d3aeb2.png)'
- en: Screenshot of MLflow UI. Image by author.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow UI 截图。图像由作者提供。
- en: The best RF model has achieved test PR AUC of 0.104 and took 1 minute to train.
    Overall, the hyper-parameter tuning took step too roughly 5 minutes to complete.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳的 RF 模型在测试 PR AUC 中达到了 0.104，训练时间为 1 分钟。总体来说，超参数调整大约需要 5 分钟完成。
- en: Register the Model
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册模型
- en: By now, we have trained, evaluated and saved 10 Random Forest models. In theory,
    you can simply go to the UI to find the best model and manually register it in
    your Model Registry and promote it to production. However, a better way is to
    do it in code since then you can automate this step. This is exactly what `model_search.ipynb`
    notebook covers. Use it to follow along the sections below.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经训练、评估并保存了 10 个随机森林模型。从理论上讲，你可以直接去 UI 中找到最佳模型，手动将其注册到模型注册表并提升到生产环境。然而，更好的方法是通过代码进行，因为这样可以自动化这一步骤。这正是`model_search.ipynb`笔记本所涵盖的内容。使用它来跟随下面的各个部分。
- en: First of all, we need to find the best model. To do it programatically you need
    to gather all the hyperparameter tuning experiments (10 of them) and sort them
    by the test metric.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要找到最佳模型。要程序化地完成此操作，你需要收集所有超参数调整实验（10 个）并按测试指标进行排序。
- en: Your results will be different but the main goal here is to end up with correct
    `best_run` parameter. Please note that if you’ve changed the experiment name,
    you’ll need to change it in this script as well. The parent run IDs can be looked
    up in the UI if you click on the parent experiment (in this case named **“capable-ray-599”)**.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你的结果可能会有所不同，但主要目标是得到正确的`best_run`参数。请注意，如果你更改了实验名称，你也需要在此脚本中更改它。父级运行 ID 可以在
    UI 中查找，点击父实验（在这种情况下名为**“capable-ray-599”**）。
- en: '![](../Images/1bc70d87384fefc8a70426d83f30d99b.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1bc70d87384fefc8a70426d83f30d99b.png)'
- en: Run ID lookup in MLflow UI. Screenshot by author.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 ID 查找 MLflow UI。截图由作者提供。
- en: To test if your model is working as expected, we can easily load it into the
    notebook.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试模型是否按预期工作，我们可以轻松地将其加载到笔记本中。
- en: If you managed to get the prediction — congrats, you’ve done everything correctly!
    Finally, registering the model and promoting it to Production is a piece of cake
    as well.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你成功得到了预测——恭喜，你已经做对了一切！最后，注册模型并将其提升到生产环境也非常简单。
- en: Running these 2 lines of code registers your model, and promotes it to “Production”
    bucket internally. All this does is changes the ways of how we can access the
    models and their metadata but it’s incredibly powerful in the context of model
    versioning. For example, at any point we can compare version 1 with version 2
    when it comes out.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这 2 行代码会注册你的模型，并将其内部提升到“Production”桶。所有这些操作只是改变了我们访问模型及其元数据的方式，但在模型版本控制的背景下，这非常强大。例如，随时可以比较版本
    1 和版本 2。
- en: '![](../Images/1170edae42bc8d8f2edf4aa3abd34132.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1170edae42bc8d8f2edf4aa3abd34132.png)'
- en: MLflow model registry. Screenshot by author.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 模型注册表。截图由作者提供。
- en: If you go to the “Models” tab of the UI, you’ll indeed see that there is a model
    named `loan_model` and its Version 1 is currently in Production bucket. This means
    that we can now access the model by its name and stage which is very convenient.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你进入 UI 的“Models”选项卡，你确实会看到一个名为`loan_model`的模型，其版本1目前在生产环境中。这意味着我们现在可以通过其名称和阶段来访问该模型，这非常方便。
- en: Serve the Model
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务模型
- en: 'The easiest way of serving the model is to do it locally. This is usually done
    to test the endpoint and to make sure that we get the expected outputs. Serving
    with MLflow is quite easy, especially when we’ve already registered the model.
    All you need to do is run this this command line:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的模型服务方式是在本地进行。这通常用于测试端点，并确保我们获得预期的输出。使用MLflow服务模型非常简单，特别是当我们已经注册了模型时。你只需运行以下命令：
- en: '[PRE1]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This line will start a local server that will host your model (that’s called
    `loan_model` and is currently in `Production` stage) at the port 5001\. This means
    that you’ll be able to send the requests to `localhost:5001/invocations` endpoint
    and get the predictions back (given that the requests are properly formatted).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这条命令将启动一个本地服务器，该服务器将在5001端口托管你的模型（即`loan_model`，目前处于`Production`阶段）。这意味着你可以向`localhost:5001/invocations`端点发送请求，并获取预测结果（前提是请求格式正确）。
- en: To test the endpoint locally, you can use a `requests` library to call it and
    get the predictions.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本地测试端点，你可以使用`requests`库来调用它并获取预测结果。
- en: In the example above, we’re getting the same probability that we had before,
    but now these scores are produced by the local server and not your script. The
    inputs need needs to follow very specific guidelines, so that’s why we have 4
    lines of pre-processing. You can read more about the expected formats for MLflow
    serving [here](https://mlflow.org/docs/latest/models.html#deploy-mlflow-models)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们获得了与之前相同的概率，但现在这些分数是由本地服务器而不是你的脚本生成的。输入需要遵循非常具体的指南，这就是为什么我们有4行预处理的原因。你可以在[这里](https://mlflow.org/docs/latest/models.html#deploy-mlflow-models)阅读更多关于MLflow服务的期望格式的信息。
- en: Summary
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: If you’ve managed to get this far and everything is working — give yourself
    a nice round of applause! I know it was a lot to take in, so let’s summarise everything
    you’ve achieved so far.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经做到这些并且一切正常——给自己一个热烈的掌声吧！我知道这需要消化很多内容，所以让我们总结一下你迄今为止取得的成就。
- en: You saw and understand how to structure your project with MLflow Projects
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你看到了并理解了如何使用MLflow Projects来构建你的项目。
- en: You understand where in the script we log our parameters, metrics and models,
    and how `search_params.py` invokes `train_rf.py`
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你了解我们在脚本中记录参数、指标和模型的位置，以及`search_params.py`如何调用`train_rf.py`。
- en: You can now run the MLflow Projects and see the results in MLflow UI
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在可以运行MLflow Projects并在MLflow UI中查看结果。
- en: You know how to find the best model, how to add it to the model registry, and
    how to promote it to Production bucket programmatically
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你知道如何找到最佳模型，如何将其添加到模型注册中心，以及如何以编程方式将其推广到生产环境。
- en: You can serve the models from model registry locally and can call the endpoint
    to make a prediction
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在本地从模型注册中心提供模型，并调用端点进行预测。
- en: What Next?
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来做什么？
- en: I strongly recommend that you put your skills to the test by attempting to run
    the pipeline for the Gradient Boosted Trees model and then deploying the HGBT
    model. All the necessary scripts are available to you, so all that remains is
    for you to configure the pipeline and complete the deployment on your own. Give
    it a go and if you encounter any challenges or have any questions, don’t hesitate
    to leave them in the comments section.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈建议你通过尝试运行梯度提升树模型的管道并部署HGBT模型来检验你的技能。所有必要的脚本都已提供，因此只需你配置管道并完成部署。如果遇到任何挑战或有任何问题，请不要犹豫，在评论区留下你的问题。
