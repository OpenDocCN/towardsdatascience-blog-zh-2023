- en: Using Python to Solve One of the Most Common Problems in Engineering
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 解决工程中最常见的问题之一
- en: 原文：[https://towardsdatascience.com/using-python-to-solve-one-of-the-most-common-problems-in-engineering-c7f2a2d46091](https://towardsdatascience.com/using-python-to-solve-one-of-the-most-common-problems-in-engineering-c7f2a2d46091)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/using-python-to-solve-one-of-the-most-common-problems-in-engineering-c7f2a2d46091](https://towardsdatascience.com/using-python-to-solve-one-of-the-most-common-problems-in-engineering-c7f2a2d46091)
- en: Creating a generic framework for operating point analysis
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个用于工作点分析的通用框架
- en: '[](https://medium.com/@nhemenway2013?source=post_page-----c7f2a2d46091--------------------------------)[![Nick
    Hemenway](../Images/a38cade9fe4f81c7e43e5d3155a21d78.png)](https://medium.com/@nhemenway2013?source=post_page-----c7f2a2d46091--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c7f2a2d46091--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c7f2a2d46091--------------------------------)
    [Nick Hemenway](https://medium.com/@nhemenway2013?source=post_page-----c7f2a2d46091--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nhemenway2013?source=post_page-----c7f2a2d46091--------------------------------)[![Nick
    Hemenway](../Images/a38cade9fe4f81c7e43e5d3155a21d78.png)](https://medium.com/@nhemenway2013?source=post_page-----c7f2a2d46091--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c7f2a2d46091--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c7f2a2d46091--------------------------------)
    [Nick Hemenway](https://medium.com/@nhemenway2013?source=post_page-----c7f2a2d46091--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c7f2a2d46091--------------------------------)
    ·17 min read·Jan 2, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c7f2a2d46091--------------------------------)
    ·17 分钟阅读·2023年1月2日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/d75a1ef4baf1f261a7f26902bc2698be.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d75a1ef4baf1f261a7f26902bc2698be.png)'
- en: Photo by [SpaceX](https://unsplash.com/@spacex?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [SpaceX](https://unsplash.com/@spacex?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Certain classes of problems come up frequently in engineering. The focus of
    this article is on a specific type of problem that comes up so often in my daily
    work that I figured I‘d share how I go about solving it using Python. What type
    of problem are we talking about? The problem of solving the operating point of
    a system! Let’s illustrate what I mean with a simple example before diving into
    something a little more complex with code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在工程中，某些问题经常出现。本文的重点是讨论一种在我日常工作中经常遇到的问题，我决定分享如何使用 Python 来解决它。我们讨论的是什么类型的问题？就是解决系统工作点的问题！在深入复杂的代码之前，让我们用一个简单的例子来说明我的意思。
- en: We would like to solve the operating point of the simple circuit shown below.
    This can be done by rearranging Ohm’s law (V=IR) to isolate the current in terms
    of the known input voltage and resistance.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望解决下图所示简单电路的工作点。这可以通过重新排列欧姆定律 (V=IR) 来实现，从而根据已知的输入电压和电阻隔离电流。
- en: '![](../Images/9af806798a24dee231c112156b56d79a.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9af806798a24dee231c112156b56d79a.png)'
- en: Image by author
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'Simple, right? Unfortunately, most real world problems are never this easy.
    For example, what if I told you that as the resistor heats up, it’s resistance
    value changes, essentially making the resistance a function of current. We end
    up with an equation of the following form:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 简单，对吧？不幸的是，大多数现实世界的问题都没有这么简单。例如，如果我告诉你，电阻器加热时，其电阻值发生变化，这实际上使电阻成为电流的函数。我们会得到如下形式的方程：
- en: '![](../Images/0df52b1f9cd0fe498ed7e024c63941e2.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0df52b1f9cd0fe498ed7e024c63941e2.png)'
- en: Without knowing the actual functional form of the resistance, we can’t just
    solve for current by isolating it algebraically. Furthermore, what if the equation
    is complicated and it’s not possible to isolate the current by itself? Or, perhaps
    the resistance is given in terms of current as tabulated discrete data — then
    we wouldn’t even have an algebraic expression to manipulate to try to solve for
    current. How would we go about determining the current in the circuit then? We
    need a more general approach to solving this problem.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不知道实际的电阻函数形式，我们不能仅仅通过代数方法来求解电流。此外，如果方程很复杂，无法单独隔离电流怎么办？或者，假如电阻以电流的形式给出，并且是离散的表格数据
    — 那么我们甚至没有代数表达式来操作以尝试求解电流。那我们应该如何确定电路中的电流呢？我们需要一种更通用的方法来解决这个问题。
- en: 'The general solution to a problem like this is to pose it as a root finding
    problem. This is actually incredibly easy to do — we literally just have to subtract
    the right hand side of the equation from the left hand side, such that we get
    an equation that equals zero. Doing so yields the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这类问题的一般方法是将其表示为根查找问题。这实际上非常简单——我们只需将方程的右侧从左侧中减去，使得方程等于零。这样得到如下：
- en: '![](../Images/b510e285462032f9308a2c4e2d02b277.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b510e285462032f9308a2c4e2d02b277.png)'
- en: By doing this, we’ve re-posed our problem. Instead of solving for the current
    directly in terms of all other variables, we can try to find the value of current
    that can be input into the left hand side of the equation to make it evaluate
    to zero. Why do we formulate the problem like this? Because there are a ton of
    numerical algorithms that exist (bisection method, Newton’s method, etc.) to solve
    this exact kind of problem! And most of the algorithms don’t care how complicated
    the left hand side of the equation is — it doesn’t even have to have a closed
    algebraic form (i.e. it could be composed of interpolated discrete data, numerically
    evaluated integrals, or literally any type of function of arbitrary complexity
    to evaluate). As long as we can pose our problem in the form of f(x)=0, we can
    (almost) always find a solution to the problem (and the code can be modified/extended
    easily if the problem statement changes — no need to re-do algebra).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们重新提出了问题。我们不再直接求解电流值，而是尝试找到一个电流值，将其输入方程的左侧，使其结果为零。我们为什么这样制定问题？因为存在大量的数值算法（如二分法、牛顿法等）来解决这种精确的问题！而且大多数算法不在乎方程的左侧有多复杂——它甚至不需要有封闭的代数形式（即，它可以由插值的离散数据、数值评估的积分或任意复杂度的函数组成）。只要我们能将问题表示为f(x)=0，我们（几乎）总能找到问题的解决方案（如果问题陈述改变，代码也可以轻松修改/扩展——不需要重新做代数）。
- en: The rest of this article is going to walk through an example of how to apply
    the root finding methodology to a slightly more complicated, real-world problem,
    with emphasis on sound code structuring and organization techniques in Python.
    Although the problem (determining the flow rate of water in a pipe/pump system)
    is somewhat domain specific, the methodology and coding techniques that are used
    are completely general, and applicable to all engineering domains. With this in
    mind, I will try to keep the physical modeling aspects of the problem to a high
    level, such that regardless of ones technical background, the primary learning
    objectives of the article still come through clearly.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本文接下来将通过一个例子来讲解如何将根查找方法应用于一个稍微复杂一点的实际问题，重点是Python中的代码结构和组织技巧。尽管这个问题（确定管道/泵系统中的水流量）有些领域特定，但所使用的方法和编码技术完全通用，适用于所有工程领域。考虑到这一点，我会尽量保持问题的物理建模方面处于高层次，使得不论技术背景如何，文章的主要学习目标仍然清晰明了。
- en: As a side note, my domain “specialty” these days lies in the realm of motor
    controls and power electronics, and I am very far removed from pumping/piping
    applications. I haven’t touched on the subject in years, but thought it would
    make for an interesting example of the topic at hand. I’m sure there are plenty
    of individuals out there that are much more qualified to speak on the specifics
    of pump/pipe modeling than myself, but my intent with this article is on the methodology
    — not on how to solve pipe/pump problems. Regardless, I openly welcome comments
    or suggestions for improvement from those that are more knowledgeable of the field!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 作为旁注，我目前的领域“专长”在电机控制和功率电子学领域，与泵/管道应用相去甚远。我已经有好几年没有涉及这一主题，但认为它会是一个有趣的例子。我确信有许多人比我更有资格讨论泵/管道建模的具体细节，但我写这篇文章的意图在于方法论——而不是如何解决泵/管道问题。无论如何，我欢迎那些对该领域更了解的人的评论或改进建议！
- en: The Problem
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: We would like to transfer water from one tank to another. We already have a
    pump and some piping that can be used to connect the two tanks and want to get
    an estimate of how long it will take to transfer all of the water. The volume
    of each tank is known, so if we can estimate the flow rate of water between the
    tanks, we can estimate how long the transfer process will take. The full apparatus
    is shown below.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要将水从一个水箱转移到另一个水箱。我们已经有一个泵和一些管道可以用来连接两个水箱，想要估算转移所有水所需的时间。每个水箱的体积是已知的，因此，如果我们可以估算水在两个水箱之间的流量，我们就可以估算转移过程需要多长时间。完整的设备如下所示。
- en: '![](../Images/27009c554091bbd90c34d1c853994ca4.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/27009c554091bbd90c34d1c853994ca4.png)'
- en: Image by author
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: This specific problem (which can be classified as an “internal flow” problem)
    is very well understood within the field of mechanical engineering. For those
    less familiar though, or in need of a quick review, the way we typically go about
    solving these problems is with the Bernoulli equation (shown below).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定问题（可以归类为“内部流动”问题）在机械工程领域中非常清楚。对于那些不太熟悉的人，或者需要快速复习的人，我们通常通过伯努利方程来解决这些问题（如下所示）。
- en: '![](../Images/c24dd9bd76bcf8bdbfda7e94f87018f1.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c24dd9bd76bcf8bdbfda7e94f87018f1.png)'
- en: The Bernoulli equation is essentially an energy conservation statement that
    tells us how the energy of a fluid particle is transformed between different energy
    mechanisms as the fluid traverses along a streamline (the flow path that an imaginary
    particle would follow if dropped in the fluid). The left hand side of the equation
    represents the total per-weight energy of a fluid particle at any arbitrary first
    location (location 1) within the fluid, and is the sum of a gravitational potential
    term, kinetic term, and pressure term. As the fluid traverses the system, energy
    must be conserved, and thus the total energy at any arbitrary second point (location
    2) along the streamline (represented by the right hand side of the equation) must
    be equal to the total energy at location 1.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 伯努利方程本质上是一个能量守恒的陈述，它告诉我们流体粒子在沿流线（即如果流体中丢下一个假想粒子其会沿着的流动路径）移动时，能量如何在不同的能量机制之间转换。方程的左边表示流体粒子在任意第一个位置（位置1）处的总单位重能量，是重力势能项、动能项和压力项的总和。当流体在系统中流动时，能量必须守恒，因此在流线上的任意第二个点（位置2）处的总能量（由方程右边表示）必须等于位置1的总能量。
- en: 'The above form of the Bernoulli equation is known as the “head” form of the
    equation because each term has units of length/height. This is convenient for
    our intuition because we’re essentially equating the energy of each term to the
    equivalent gravitational potential energy of a column of fluid with a height of
    the given head. One major limitation of the Bernoulli equation, however, is that
    it assumes there are no losses in the system (which isn’t a great assumption).
    To overcome this limitation, we can supplement the equation with two additional
    terms as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 上述形式的伯努利方程被称为“扬程”形式，因为每个项的单位是长度/高度。这对我们的直觉很方便，因为我们基本上是在将每个项的能量等同于具有给定扬程高度的流体柱的重力势能。然而，伯努利方程的一个主要限制是它假设系统中没有损失（这并不是一个很好的假设）。为克服这一限制，我们可以在方程中补充两个附加项，如下所示：
- en: '![](../Images/41ae0ad7bf17975a23214206101e728c.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/41ae0ad7bf17975a23214206101e728c.png)'
- en: The Hp(Q) and Hl(Q) terms represent the head added to the system by a pump,
    and the head lost in the system from real world effects (like friction, viscosity,
    etc.) respectively. Note that both terms are functions of the system’s fluid flow
    rate, Q. (As an interesting consequence of the above paragraph describing the
    interpretation of head, the head of pump tells you how high a pump could theoretically
    push a fluid). We’ll examine the pump and loss terms more thoroughly in a bit,
    but before we do, let’s simplify the above equation for our specific problem.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Hp(Q)和Hl(Q)项分别表示泵对系统增加的扬程和由于实际世界效应（如摩擦、粘度等）在系统中损失的扬程。注意这两个项都是系统流体流量Q的函数。（作为上述描述扬程解释的一个有趣结果，泵的扬程告诉你泵理论上能将流体推高多少）。我们将稍后更详细地检查泵和损失项，但在此之前，让我们简化上述方程以解决我们的具体问题。
- en: Looking at the system above again, we will conveniently choose our two locations
    for the Bernoulli equation, such that most of the terms cancel. We can do this
    by choosing locations 1 and 2 to be at the free surface of the water of each tank
    respectively, where the pressure is constant and equal to atmospheric pressure
    (P1=P2), and the velocity is approximately constant and zero (V1=V2=0). We will
    also assume that the height of the water in the two tanks is the same at the instant
    we’re analyzing the system such that Z1=Z2\. After simplifying the algebra, we
    see that nearly all of the terms cancel, and we’re left with the fact that the
    head produced by the pump must equal the head lost in the system due to non-idealities.
    Stated another way, the pump is making up for any energy losses in the system.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 再次查看上面的系统，我们将方便地选择两个位置用于伯努利方程，使得大多数项相互抵消。我们可以通过选择位置 1 和 2 分别位于每个水箱的自由水面来做到这一点，此时压力是常数且等于大气压力（P1=P2），速度大约是常数且为零（V1=V2=0）。我们还将假设在我们分析系统的瞬间两个水箱中的水高度相同，即
    Z1=Z2。经过代数简化后，我们发现几乎所有项都抵消了，剩下的就是泵产生的扬程必须等于由于非理想性导致的系统损失的扬程。换句话说，泵在弥补系统中的任何能量损失。
- en: '![](../Images/274c4fbfcf935612ce6776f916492c5a.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/274c4fbfcf935612ce6776f916492c5a.png)'
- en: This situation can be seen qualitatively in the figure below. The head produced
    by a pump decreases with increasing flow rate, whereas, the losses in a piping
    system increase with increasing flow rate. The point where the two curves intersect
    (pump head = head loss) determines the operating point (flow rate) of the system.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中可以定性地看到这种情况。泵产生的扬程随着流量的增加而减少，而管道系统中的损失随着流量的增加而增加。两条曲线交点（泵扬程 = 损失扬程）决定了系统的工作点（流量）。
- en: '![](../Images/b0533f351d755dc0815b5ca05c269660.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b0533f351d755dc0815b5ca05c269660.png)'
- en: Image by author
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'The last step before we can jump into code is to pose the problem as a root
    finding problem. Subtracting the right hand side of the equation from the left
    hand side, we obtain the root solving problem that we are looking for. That is,
    we’ve posed our problem as follows: find the flow rate (Q) such that the left
    hand side of the equation below equals zero. At this point, the pump head will
    equal the system head losses.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以跳入代码之前的最后一步是将问题表示为根寻找问题。将方程右侧减去左侧，我们得到我们正在寻找的根求解问题。也就是说，我们将问题表述为：找到流量（Q），使得下面方程的左侧等于零。此时，泵扬程将等于系统的扬程损失。
- en: '![](../Images/3d07b5fd39fe13268eed036d6f659036.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3d07b5fd39fe13268eed036d6f659036.png)'
- en: The Code
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码
- en: To avoid losing the big picture of what we’re doing, I’m not going to explain
    every little detail of the code (I’m assuming you have a reasonable background
    in Python already). Instead, I’m going to focus my efforts on ensuring the narrative
    and structuring of the code is clear, and go into more detail as needed. As always,
    feel free to ask any questions if something isn’t clear.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免丢失我们正在做的大局，我不会解释代码的每一个细节（假设你已经具备合理的 Python 背景）。相反，我会集中精力确保叙述和代码结构清晰，并在需要时提供更多细节。与往常一样，如果有任何不清楚的地方，请随时提问。
- en: Setup
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置
- en: We will begin by importing all of the necessary modules. It will become apparent
    how each of the modules is used later on, but it’s worth noting that the key import
    statements are the ones from scipy. These are the functions that are specific
    to the problem at hand. The code block also set’s some default plotting settings
    (to personal taste), creates a folder to save the generated figures in, and defines
    some unit conversion constants that make our life easier later in the code.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从导入所有必要的模块开始。稍后将明显每个模块的使用方式，但值得注意的是，关键的导入语句来自 scipy。这些是针对当前问题的特定函数。代码块还设置了一些默认绘图设置（根据个人口味），创建了一个文件夹来保存生成的图形，并定义了一些单位转换常数，使得后续代码中的操作更加简便。
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next we will make a Python `dataclass` that essentially acts as a container
    for storing fluid properties (density, viscosity, and gravity). By default the
    properties are set to those of water. Note that although not completely necessary,
    Python data classes are incredibly convenient. If they’re new to you, I highly
    recommend you check out this [video](https://www.youtube.com/watch?v=vRVVyl9uaZc&t=291s).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个Python `dataclass`，它实际上充当了一个存储流体属性（密度、粘度和重力）的容器。默认情况下，这些属性设置为水的属性。请注意，虽然这不是完全必要的，但Python数据类非常方便。如果你对它们不熟悉，我强烈推荐你查看这个[视频](https://www.youtube.com/watch?v=vRVVyl9uaZc&t=291s)。
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Pipe Model
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道模型
- en: The next step is to model the head losses of the pipe (the Hl(Q) term in the
    extended Bernoulli equation above). This is typically done using the Darcy-Weisbach
    equation shown below, where f is a friction factor (more on this shortly), v is
    the flow velocity, g is gravity, and L and D are the pipe length and diameter
    respectively.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是建模管道的摩擦损失（上述扩展的Bernoulli方程中的Hl(Q)项）。这通常使用如下的Darcy-Weisbach方程，其中f是摩擦因子（稍后会详细介绍），v是流速，g是重力，而L和D分别是管道的长度和直径。
- en: '![](../Images/89e1ea2369b0e7893d16a72cf8761dea.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/89e1ea2369b0e7893d16a72cf8761dea.png)'
- en: Unfortunately, the friction factor (f) isn’t constant, but also depends on the
    flow velocity, fluid properties, and pipe dimensions. Various models exist to
    compute f, but we will use Haaland’s equation, shown below.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，摩擦因子（f）不是恒定的，而是依赖于流速、流体属性和管道尺寸。存在各种计算f的模型，但我们将使用下面的Haaland方程。
- en: '![](../Images/02a80f989484d3b403a11fa317ab663d.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/02a80f989484d3b403a11fa317ab663d.png)'
- en: In this equation, epsilon is the surface roughness of the pipe (which can be
    found in engineering textbook tables), and Re is the famous Reynolds number, computed
    as per below.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方程中，epsilon是管道的表面粗糙度（可以在工程教材的表格中找到），Re是著名的雷诺数，如下所示。
- en: '![](../Images/0e793e41a43826f779d2ea8bd18f6e6d.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0e793e41a43826f779d2ea8bd18f6e6d.png)'
- en: 'Lastly, we can note that the swept volume per unit time, or volumetric flow
    rate (Q) equals the cross-sectional area (A) of the pipe times the flow velocity
    (v). Thus, given a flow rate in the pipe, we can compute the corresponding flow
    velocity in the pipe as:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以注意到每单位时间的扫过体积，或者称为体积流量（Q），等于管道的横截面积（A）乘以流速（v）。因此，给定管道中的流量，我们可以计算出管道中的相应流速：
- en: '![](../Images/e5bac6a58bd0eb4d969535a4ea578b6d.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e5bac6a58bd0eb4d969535a4ea578b6d.png)'
- en: Hopefully all of these equations aren’t detracting from the bigger picture—
    we’re just looking at one particular model of computing head loss in a pipe. Given
    a flow rate and pipe dimensions, first compute the corresponding flow velocity,
    then plug through the equations above to compute the pipe’s head loss. This is
    exactly what the `Pipe` class (shown below) implements.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 希望所有这些方程没有让你忽视大局——我们只是查看了计算管道摩擦损失的一个特定模型。给定流量和管道尺寸，首先计算出相应的流速，然后通过上述方程计算管道的摩擦损失。这正是`Pipe`
    类（如下所示）所实现的。
- en: The initialization method stores the pipes dimensions (all assumed to be in
    meters) and fluid properties. The `A` method computes the cross-sectional area
    of the pipe (for those unfamiliar with the`@property` decorator, this [article](https://realpython.com/python-property/)
    explains it very well). The `Q_to_v` method converts the flow rate in gallons
    per minute (gpm) to a flow velocity in m/s. The `friction_factor` method evaluates
    Haaland’s equation as described above, and the `head_loss` and `head_loss_feet`
    evaluate the pipe’s head loss in meters and feet respectively (using the Darcy-Weisbach
    equation).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化方法存储了管道的尺寸（假设都以米为单位）和流体属性。`A` 方法计算管道的横截面积（对于不熟悉`@property` 装饰器的人，这篇[文章](https://realpython.com/python-property/)解释得非常好）。`Q_to_v`
    方法将每分钟加仑数（gpm）的流量转换为米/秒的流速。`friction_factor` 方法评估了上述提到的Haaland方程，而`head_loss`
    和 `head_loss_feet` 分别评估了管道的摩擦损失（以米和英尺为单位）（使用Darcy-Weisbach方程）。
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let’s see the pipe class in action. First, we can create a `Fluid` object for
    water and a `Pipe` object that’s 100 feet long and 1.25 inches in diameter.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看管道类的实际应用。首先，我们可以创建一个水的`Fluid`对象和一个长度为100英尺、直径为1.25英寸的`Pipe`对象。
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next we’ll plot the head loss curve as a function of the flow rate in gpm. Isn’t
    it incredible how clean and easy the code below becomes when we exploit object
    oriented programming?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将绘制流量（以gpm为单位）与摩擦损失的关系曲线。当我们利用面向对象编程时，下面的代码变得如此简洁和易读，这难道不令人惊叹吗？
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/83f4cc753e0ca6662be9a3c2f34516ca.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/83f4cc753e0ca6662be9a3c2f34516ca.png)'
- en: Image by author
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: Pump Model
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 泵模型
- en: 'We’ve got a working model of the pipe head losses — now we need a model of
    the head produced by a pump, Hp(Q). I’m sure there are analytic models that can
    be used to determine a pumps behavior, but we will assume that we already have
    a specific pump — namely the following random, fractional horspower pump that
    I found [online](https://www.grainger.com/product/DAYTON-Plug-In-Utility-Pump-110V-3YU55):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了管道头损失的工作模型——现在我们需要一个泵产生的头部模型，Hp(Q)。我相信有解析模型可以用来确定泵的行为，但我们将假设我们已经有了一个具体的泵——即我在[网上](https://www.grainger.com/product/DAYTON-Plug-In-Utility-Pump-110V-3YU55)找到的随机的、分数马力的泵：
- en: Most pumps will have a data sheet that includes a corresponding pump curve that
    characterizes the pumps behavior. For our pump, we get the pump curve below (note
    that for copyright reasons, this is a recreation of the figure provided by the
    manufacturer — the original can be found [here](https://www.grainger.com/ec/pdf/Dayton-3YU55-Utility-Pump-Technical-Data-Sheet.pdf)).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数泵都有一个数据表，其中包含描述泵行为的泵曲线。对于我们的泵，下面是泵曲线（请注意，出于版权原因，这只是制造商提供的图示的重建版——原版可以在[这里](https://www.grainger.com/ec/pdf/Dayton-3YU55-Utility-Pump-Technical-Data-Sheet.pdf)找到）。
- en: '![](../Images/57f3ba29fe7c636fc6ac3f85a77300f8.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/57f3ba29fe7c636fc6ac3f85a77300f8.png)'
- en: Image by Author
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: At this point we have an image depicting the pumps behavior, but not a mathematical
    model that can actually be used to determine how it will perform in the system.
    This issue comes up all the time, and the way I get around it is to 1) digitize
    the data, and then 2) wrap the discrete data with an interpolation scheme to produce
    a continous function. Let me illustrate.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们有了描绘泵行为的图像，但还没有一个可以实际用来确定它在系统中表现的数学模型。这个问题经常出现，我的解决方法是 1) 数字化数据，然后 2) 使用插值方案包装离散数据，以生成一个连续函数。让我来说明一下。
- en: Step 1) There are many tools that exist to digitize image data — my personal
    favorite is the free online utilitiy [WebPlotDigitizer](https://apps.automeris.io/wpd/).
    You load in the plot image of interest, align the axes, and then extract the desired
    data curves (either manually, or with the automatic extraction tool). The data
    can then be exported to a .csv file.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步）有许多工具可以将图像数据数字化——我个人最喜欢的是免费的在线工具[WebPlotDigitizer](https://apps.automeris.io/wpd/)。你可以加载感兴趣的图像，校准坐标轴，然后提取所需的数据曲线（可以手动提取，也可以使用自动提取工具）。数据可以导出为
    .csv 文件。
- en: '![](../Images/e85c75f1a10302d75f71a0db519ea9d2.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e85c75f1a10302d75f71a0db519ea9d2.png)'
- en: Image by Author
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: Step 2) Now that we’ve got digitized data, we just need to wrap it with some
    sort of interpolator — this is exactly what the `Pipe` class does below. The initialization
    method takes in the .csv file name, stores the file name, loads the data into
    a pandas DataFrame, storing it in a `data` attribute, and then passes the data
    to the `interp1d` function from scipy. The `interp1d` function then generates
    a new function that, by default, uses linear interpolation to turn the discrete
    datapoints into a continous function (full documentation for `interp1d` function
    can be found [here](https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.interp1d.html)).
    The newly generated interpolation function is then stored in a `_interp` attribute
    for later access. The `Pipe` class also contains a `bounds` method that returns
    a list containing the min/max values of flow rate in the pump curve data (this
    will be used in the root finding algorithm), and a `head_gain_feet` method that
    takes in the flow rate in gpm, and calls the underlying interpolation function
    that was generated by `interp1d`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步）现在我们已经得到了数字化的数据，我们只需要用某种插值器进行包装——这正是下面`Pipe`类所做的。初始化方法接收 .csv 文件名，存储文件名，将数据加载到
    pandas DataFrame 中，存储在 `data` 属性中，然后将数据传递给 scipy 的 `interp1d` 函数。`interp1d` 函数生成一个新的函数，默认使用线性插值将离散数据点转换为连续函数（`interp1d`
    函数的完整文档可以在[这里](https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.interp1d.html)找到）。新生成的插值函数随后存储在
    `_interp` 属性中以供后续访问。`Pipe` 类还包含一个 `bounds` 方法，该方法返回包含泵曲线数据中流量的最小/最大值的列表（这将在根查找算法中使用），以及一个
    `head_gain_feet` 方法，该方法接受流量值（单位为 gpm），并调用由 `interp1d` 生成的底层插值函数。
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We can create a `Pump` object and look at the raw data that we’ve read in.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个`Pump`对象并查看我们读取的原始数据。
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/436e2c4121a17ee77b20bc9071e6db46.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/436e2c4121a17ee77b20bc9071e6db46.png)'
- en: Image by author
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: We can also plot the pump curve data with the pipe loss curve to visually see
    where the system will operate.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将泵曲线数据与管道损失曲线一起绘制，以直观地查看系统将在哪里操作。
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/bf466f86dab858f9d2141cc89a4b4f39.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bf466f86dab858f9d2141cc89a4b4f39.png)'
- en: Image by author
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: System Model
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统模型
- en: We finally have the infrastructure in place to solve the operating point of
    the pump/pipe system. The last step is to create a `System` class that takes in
    a `Pipe` and `Pump` object and performs the root solving operation. As can be
    seen in the code below, the `System` class takes in and stores a `Pipe` and `Pump`
    object. It then uses the two objects to create a `residual` method that computes
    the difference between the pump head and pipe head loss. This `residual` method
    is then used in the`get_operating_point` method to actually solve the operating
    point of the system. The method wraps the `root_scalar` function from scipy, which
    acts as an interface for various root solving algorithms. We will let the `root_scalar`
    function choose whichever algorithm it sees best fit, but to help it, we will
    specify a bracketing interval that we know the root lies between. In our case,
    this bracketing interval is the upper and lower flow-rate bounds of the pump curve
    data. Full documentation on the `root_scalar` function can be found [here](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.root_scalar.html).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们终于建立了能够解决泵/管道系统操作点的基础设施。最后一步是创建一个`System`类，该类接收一个`Pipe`和`Pump`对象，并执行根求解操作。正如下面的代码所示，`System`类接收并存储一个`Pipe`和`Pump`对象。然后，它利用这两个对象创建一个`residual`方法，该方法计算泵头和管道头损失之间的差值。这个`residual`方法随后在`get_operating_point`方法中被使用，以实际求解系统的操作点。该方法包装了scipy的`root_scalar`函数，它作为各种根求解算法的接口。我们将让`root_scalar`函数选择它认为最适合的算法，但为了帮助它，我们将指定一个我们知道根在其间的区间。在我们的案例中，这个区间是泵曲线数据的上限和下限流量。关于`root_scalar`函数的完整文档可以在[这里](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.root_scalar.html)找到。
- en: 'Pro tip: the process of injecting the `Pipe` and `Pump` objects into the `System`
    class (as opposed to having the system class create a `Pipe` and `Pump` object
    at instantiation) is called “dependency injection”. This is typically considered
    a good coding practice as it makes code more modular, extensible, and easier to
    debug/test.'
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 提示：将`Pipe`和`Pump`对象注入`System`类（与在实例化时让系统类创建`Pipe`和`Pump`对象相对）被称为“依赖注入”。这通常被认为是一种良好的编码实践，因为它使代码更具模块化、可扩展性，更易于调试/测试。
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Let’s create a `System` and run the `get_operating_point` method to observe
    the fruits of our labor. As can be seen by the code output, the `get_operating
    point` method simply passes out the output of the `root_scalar` function, which
    is a `RootResults` object. This object is essentially just a container that stores
    various attributes, the most important of which, is the `root` attribute as it
    contains the solution to our problem.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个`System`并运行`get_operating_point`方法，以观察我们的劳动成果。正如代码输出所示，`get_operating_point`方法仅返回`root_scalar`函数的输出，这是一个`RootResults`对象。这个对象本质上只是一个容器，存储各种属性，其中最重要的是`root`属性，因为它包含我们问题的解决方案。
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/db0e1e4adcaf24ce163a49d3b810e660.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/db0e1e4adcaf24ce163a49d3b810e660.png)'
- en: We can plot the same pump and head loss curves again, this time adding in a
    vertical line at the computed steady-state operating point.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以再次绘制相同的泵和头损失曲线，这次在计算出的稳态操作点处添加一条垂直线。
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/88d7d26649d0c5599ff4481690fd2dc5.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/88d7d26649d0c5599ff4481690fd2dc5.png)'
- en: Image by author
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: Voila! We’ve programmatically determined the operating point of our system.
    And because we’ve done it using a somewhat generic coding framework, we can easily
    try the same analysis using different pumps or piping! We could even extend our
    code to include multiple pumps, or various pipe fittings/pipe branches.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了！我们已经程序化地确定了系统的操作点。因为我们使用的是一种比较通用的编码框架，我们可以轻松尝试使用不同的泵或管道进行相同的分析！我们甚至可以扩展我们的代码以包括多个泵，或各种管道配件/管道分支。
- en: Design Exploration
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计探索
- en: As a final little example, highlighting the benefits of setting up the code
    the way we did, we will perform a design exploration. Using the same pump, we
    would like to understand the impacts that pipe length has on the volumetric flow
    rate in the system. To do this, we simply loop over an array of pipe lengths (ranging
    from 100 to 1000 feet), update the length attribute of the `Pipe` object stored
    in the `System`, and then re-compute the operating point of the system, appending
    the result to a list. Finally we plot water flow rate as a function of pipe length.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个小例子，突出我们设置代码方式的好处，我们将进行设计探索。使用相同的泵，我们希望了解管道长度对系统体积流量的影响。为此，我们只需遍历一个管道长度数组（从100到1000英尺），更新存储在`System`中的`Pipe`对象的长度属性，然后重新计算系统的工作点，将结果追加到列表中。最后，我们将水流量绘制为管道长度的函数。
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/37f2e3dde6fce8c12d52894420bd3224.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/37f2e3dde6fce8c12d52894420bd3224.png)'
- en: Image by author
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: In a few lines of code, we were able to extract meaningful insight into the
    behavior of our system. If this was a design problem, these insights could drive
    key design choices.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 几行代码让我们能够深入了解系统的行为。如果这是一个设计问题，这些见解可能会驱动关键的设计决策。
- en: Conclusion
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: This article, although focused strongly on a domain specific example problem,
    highlights a few aspects of a work flow that I end up using a lot. The problem
    of operating point analysis comes up constantly in engineering and science, and
    although there are many ways to approach the issue, some methods are more robust,
    extensible, and flexible than others. The methodology (problem formulation and
    code structuring principles) used in this article have served me incredibly well,
    and I hope that others are inspired to adopt a similar work flow!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 本文虽然主要集中在一个特定领域的示例问题上，但突出了我经常使用的工作流程的几个方面。操作点分析的问题在工程和科学中经常出现，尽管有许多方法可以解决这个问题，但有些方法比其他方法更强大、可扩展和灵活。本文中使用的方法论（问题表述和代码结构原则）对我帮助极大，希望其他人也能受到启发，采用类似的工作流程！
- en: Feel free to leave any comments or questions you may have or connect with me
    on Linkedin — I’d be more than happy to clarify any points of uncertainty. Finally,
    I encourage you to play around with the code yourself (or even use it as a starting
    template for your own workflows ) — the Jupyter Notebook for this article can
    be found on my [Github](https://github.com/Nick-Hemenway/medium_most_common_problem).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 随时留下任何评论或问题，或者在LinkedIn上与我联系——我非常乐意澄清任何不确定的点。最后，我鼓励你自己尝试代码（甚至将其用作自己工作流程的起始模板）——这篇文章的Jupyter
    Notebook可以在我的[Github](https://github.com/Nick-Hemenway/medium_most_common_problem)上找到。
- en: Nicholas Hemenway
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尼古拉斯·赫门威
- en: '***If you enjoyed this, please f***[***ollow me on Medium***](/@nhemenway2013)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***如果你喜欢这个，请***[***在Medium上关注我***](/@nhemenway2013)'
- en: '***Consider subscribing to*** [***email updates***](/subscribe/@nhemenway2013)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***考虑订阅*** [***电子邮件更新***](/subscribe/@nhemenway2013)'
- en: '***Interested in collaborating? Let’s*** [***connect on LinkedIn***](https://www.linkedin.com/in/nicholas-hemenway/)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '***有兴趣合作吗？让我们*** [***在LinkedIn上联系***](https://www.linkedin.com/in/nicholas-hemenway/)'
