- en: Advanced JavaScript Functions To Improve Software Code Quality
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/advanced-javascript-functions-to-improve-code-quality-2663781ea382](https://towardsdatascience.com/advanced-javascript-functions-to-improve-code-quality-2663781ea382)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Enhance code quality with functions including Debounce, Once, and Memoize, all
    the way to Pipe, Pick, and Zip
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.knulst.de/?source=post_page-----2663781ea382--------------------------------)[![Paul
    Knulst](../Images/9fcb767d927a1fe53ee739c584fdf92c.png)](https://medium.knulst.de/?source=post_page-----2663781ea382--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2663781ea382--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2663781ea382--------------------------------)
    [Paul Knulst](https://medium.knulst.de/?source=post_page-----2663781ea382--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2663781ea382--------------------------------)
    ·14 min read·Feb 20, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dff07a46eeeaa2df542233e6e4f7feeb.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
- en: Photo by [Joan Gamell](https://unsplash.com/@gamell) / [Unsplash](https://unsplash.com/photos/ZS67i1HLllo)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**JavaScript is a powerful and versatile programming language** that has many
    built-in features that can help you write more efficient, maintainable, and readable
    code.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: In this blog post, I will explain how to use some in-built features to create
    some of the most powerful functions to **boost your performance** and make your
    code look much more beautiful. I will cover Debounce, Throttle, Once, Memoize,
    Curry, Partial, Pipe, Compose, Pick, Omit, and Zip which you can save in a utility
    file/class to optimize your code quality as a JavaScript developer.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '**Although the functions are explained using JavaScript, they could be easily
    implemented in any programming language. Once the concept of the different functions
    is understood, it can be applied everywhere.**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the functions (or concepts) described in this post are **often
    asked in technical interviews**.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Whether you are a beginner or an experienced senior developer, these functions
    will optimize your code and coding experience. They will make working with JavaScript
    more enjoyable and efficient.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Debounce
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A debounce function is a method for preventing a quick series of events from
    repeatedly activating a function. It works by postponing function execution until
    a certain period has passed without the event being fired. The Debounce function
    is a useful solution that could be applied in real-world applications to increase
    performance by preventing the execution of functions if a user is rapidly clicking
    the buttons.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'The following snippet will show how to implement the debounce function in JavaScript:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this JavaScript snippet, the `debounce` function will return a new function
    that executes the original function after a previously defined `delay`. If the
    function is called again, the `timeout` will be reset, and calling the function
    will be postponed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个JavaScript代码片段中，`debounce`函数将返回一个新的函数，该函数在先前定义的`delay`之后执行原始函数。如果函数再次被调用，`timeout`将被重置，函数调用将被推迟。
- en: This functionality will be useful if you have a function that updates the layout
    of a webpage when the window is resized. Without the Debounce function, this function
    would be called many times in quick succession as the user resizes the window,
    which can cause performance issues. With the Debounce function, the rate at which
    the layout is updated can be limited, making the page more responsive and efficient.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个在窗口调整大小时更新网页布局的函数，这个功能会很有用。如果没有Debounce函数，这个函数会在用户调整窗口时被多次快速调用，这可能会导致性能问题。使用Debounce函数可以限制布局更新的频率，从而使页面更加响应迅速和高效。
- en: 'This snippet shows how the Debounce function will be used in this use case:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码片段展示了如何在这种用例中使用Debounce函数：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, the `updateLayout` function will be called at most once every
    250 milliseconds when the window is resized. This functionality ensures that the
    layout is only updated 250ms after the user has finished resizing the window,
    making the webpage more efficient and responsive.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，当窗口调整大小时，`updateLayout`函数在250毫秒内最多会被调用一次。这个功能确保了在用户完成调整窗口大小后250毫秒才更新布局，使网页更加高效和响应迅速。
- en: Throttle
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Throttle
- en: The Throttle function is similar to the Debounce function but with slightly
    different behavior. Instead of limiting the rate at which the function is called,
    the Throttle function limits the rate at which the function is *executed*. This
    means it will forbid executing if the function was invoked before within a given
    period. It guarantees that a certain function runs at a consistent rate and won’t
    be triggered too often.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Throttle函数类似于Debounce函数，但行为稍有不同。Throttle函数限制了函数的*执行*频率，而不是调用频率。这意味着如果函数在给定时间内被调用，则会禁止执行。它保证了某个函数以一致的速度运行，不会触发过于频繁。
- en: 'The implementation of the Throttle function:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Throttle函数的实现：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this snippet, the `throttle` function will execute a provided function `func`,
    update a `wait` variable to `true`, and then starts a timer which will reset the
    `wait` parameter after the `delay` is passed. If the `throttle` function is called
    again it will either call the provided function or simply return if the `wait`
    parameter is still `true`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码片段中，`throttle`函数将执行一个提供的函数`func`，将`wait`变量更新为`true`，然后启动一个定时器，在`delay`时间过去后重置`wait`参数。如果`throttle`函数再次被调用，它将调用提供的函数或仅仅返回，如果`wait`参数仍为`true`。
- en: This Throttle functionality can be used on a webpage if you want to execute
    a function to update the layout while scrolling. Without a `throttle` function,
    this update function will be called multiple times as the user scrolls on the
    page, resulting in heavy performance issues. Using the `throttle` function, you
    can ensure that it will only be executed once every X milliseconds. This will
    result in more responsive and efficient usability of the webpage.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望在滚动时执行一个更新布局的函数，这个Throttle功能可以在网页上使用。如果没有`throttle`函数，这个更新函数会在用户滚动页面时被多次调用，导致严重的性能问题。使用`throttle`函数，你可以确保它每隔X毫秒只执行一次。这将导致网页的可用性更具响应性和效率。
- en: 'In the following snippet, you can see how the `throttle` function can be used:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码片段中，你可以看到如何使用`throttle`函数：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: By defining the `throttleUpdatedLayout` function and specifying a delay of 250
    milliseconds, it can be ensured that the `updateLayout` function will be executed
    at most once every 250 milliseconds when the window is scrolled. If the event
    is triggered before the delay is reached, nothing will happen.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过定义`throttleUpdatedLayout`函数并指定250毫秒的延迟，可以确保`updateLayout`函数在窗口滚动时最多每250毫秒执行一次。如果事件在延迟时间内触发，则不会发生任何事情。
- en: Once
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Once
- en: The Once function is a method that will prevent executing if already called.
    This is especially useful while working with event listeners, where you often
    encounter functions that only should run once. Instead of removing event listeners
    every time you can use the Once function in JavaScript.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`Once` 函数是一种方法，它会防止在已经被调用的情况下再次执行。这在处理事件监听器时特别有用，因为你经常会遇到只应该运行一次的函数。与其每次都移除事件监听器，不如在
    JavaScript 中使用 `Once` 函数。'
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For example, you can have a function that sends a request to a server to load
    some data. With the `once()` function, you could ensure that the request is not
    called multiple times if the user keeps clicking the button. This will avoid performance
    issues.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以有一个函数向服务器发送请求以加载一些数据。使用 `once()` 函数，你可以确保请求不会被多次调用，如果用户不断点击按钮。这将避免性能问题。
- en: Without the `once()` function, you would remove the click listener instantly
    after the request is sent to prevent sending the request again.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有 `once()` 函数，你需要在请求发送后立即移除点击监听器，以防止请求被再次发送。
- en: 'Applying the `once()` function to any code will look like this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `once()` 函数应用于任何代码将如下所示：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this example, the `requestSomeData` function will be called once, even if
    the user clicks the button multiple times.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`requestSomeData` 函数将被调用一次，即使用户多次点击按钮。
- en: Memoize
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Memoize
- en: Memoize is a JavaScript function, that is used to cache the results of a given
    function to prevent calling computationally expensive routines multiple times
    with the same arguments.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Memoize 是一个 JavaScript 函数，用于缓存给定函数的结果，以防止用相同参数多次调用计算开销大的例程。
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This `memoize()` function will cache the result of a given function and uses
    the arguments as key to retrieve the result if called again with the same arguments.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `memoize()` 函数会缓存给定函数的结果，并使用参数作为键来检索结果，如果用相同的参数再次调用它。
- en: Now, if you have a function that performs a complex calculation that is based
    on an input variable, you can use the `memoize()` function to cache the results
    and retrieve them instantly if called multiple times with the same input.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你有一个基于输入变量执行复杂计算的函数，你可以使用 `memoize()` 函数来缓存结果，并在用相同输入多次调用时立即检索结果。
- en: 'To see the benefits of the `memoize()` function, you can use it to calculate
    the Fibonacci numbers:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到 `memoize()` 函数的好处，你可以用它来计算斐波那契数：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example, the `fibonacci()` function will be converted into a `memoizedFibonacci`
    function. Then the `memoized()` function will be called, and the execution time
    will be logged to the console.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`fibonacci()` 函数将被转换为 `memoizedFibonacci` 函数。然后将调用 `memoized()` 函数，并将执行时间记录到控制台。
- en: 'The output will look like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![](../Images/f5757ad856da254c0975dc678d3965f9.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f5757ad856da254c0975dc678d3965f9.png)'
- en: Although the second call only calculates the Fibonacci number of 29 it took
    much longer than calculating the Fibonacci number of 30 a second time because
    it was cached by the `memoize()` function.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管第二次调用只计算了 29 的斐波那契数，但由于结果被 `memoize()` 函数缓存了，所以它比第二次计算 30 的斐波那契数花费了更长的时间。
- en: Curry
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Curry
- en: The Curry function (also known as Currying) is an advanced JavaScript function
    used to create a new function from an existing one by “pre-filling” some of its
    arguments. Currying is often used when working with functions that take multiple
    arguments and transform them into functions that take some arguments because the
    other will always stay the same.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Curry 函数（也称为柯里化）是一种高级 JavaScript 函数，用于通过“预填充”某些参数从现有函数中创建一个新函数。柯里化通常用于处理多个参数的函数，并将它们转换为接受一些参数的函数，因为其他参数将始终保持不变。
- en: 'Using the Curry function has several benefits:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Curry 函数有几个好处：
- en: It helps to avoid using the same variable again and again
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于避免重复使用相同的变量。
- en: It makes code more readable
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使代码更具可读性。
- en: It divides functions into multiple smaller functions that can handle one responsibility
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将函数分解为多个较小的函数，每个函数处理一个职责。
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This Curry function takes another function (`func`) and an optional argument
    `arity` that defaults to the length of `func`'s arguments. It returns a new function
    (`curried`) that can be called with a `arity` number of arguments. If not all
    arguments have been supplied, it returns a new function that can be called with
    more arguments until all required arguments have been provided. When all arguments
    are supplied, the original function (`func`) is called, and its result will be
    returned.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Curry 函数接收另一个函数（`func`）和一个可选的参数 `arity`，默认为 `func` 的参数长度。它返回一个新的函数（`curried`），该函数可以用
    `arity` 数量的参数调用。如果未提供所有参数，它会返回一个新的函数，该函数可以接受更多参数，直到所有必需的参数都已提供。当所有参数都提供时，会调用原始函数（`func`），并返回其结果。
- en: To understand the benefits of the Curry function, you could think of a method
    to calculate the distance between two points in a plane. Using a Curry function,
    you can create a new function that will only require one of these points, making
    it easier to use.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解 Curry 函数的好处，可以考虑一个计算平面上两点之间距离的方法。使用 Curry 函数，你可以创建一个只需要其中一个点的新函数，从而使其更易于使用。
- en: 'The following snippet will show how the previously defined curry function is
    used to optimize the readability of the implementation:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段将展示如何使用之前定义的 curry 函数来优化实现的可读性：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this example, a curried version of the `distance` function is created (`distanceFromOrigin`)
    by using the `curry` function and passing `distance` as the first argument and
    `3` as the second argument (`arity`). Also, it will call the curried function
    with `0,0` as the first two arguments.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，通过使用 `curry` 函数并将 `distance` 作为第一个参数和 `3` 作为第二个参数（`arity`），创建了 `distance`
    函数的 curried 版本（`distanceFromOrigin`）。此外，它将使用 `0,0` 作为前两个参数来调用 curried 函数。
- en: The resulting function `distanceFromOrigin` is now a new function that needs
    only two arguments, and will always use `0,0` as the first point.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 结果函数 `distanceFromOrigin` 现在是一个只需要两个参数的新函数，并且将始终使用 `0,0` 作为第一个点。
- en: Partial
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Partial
- en: The Partial function in JavaScript is similar to the Curry function. The significant
    difference between Curry and Partial is that a call to a Partial function returns
    the result instantly instead of returning another function down the currying chain.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中的 Partial 函数类似于 Curry 函数。Curry 和 Partial 之间的显著区别是，调用 Partial 函数会立即返回结果，而不是返回另一个函数。
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `partial` function in JavaScript typically takes an existing function, one
    or more input arguments, and returns a new function that calls the original function
    with the additional arguments passed in when the new function is called.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中的 `partial` 函数通常接收一个现有函数、一个或多个输入参数，并返回一个新函数，该新函数在调用时使用附加参数调用原始函数。
- en: 'In the following use case, a `calculate` function will be pre-filled with the
    first two arguments to generate a new function with a more readable name:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下用例中，一个 `calculate` 函数将被预填充前两个参数，以生成一个更具可读性的新函数：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this example, the `multiply10By` function is created by partially applying
    the generic `calculate` function and pre-filling the first two arguments with
    8 and 2\. This will create a new function `multiply10By` that only requires one
    argument specifying the amount of multiplication of 10 that has to be done. Also,
    it will make the code more readable and understandable.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`multiply10By` 函数是通过部分应用通用 `calculate` 函数并将前两个参数预填充为 8 和 2 来创建的。这将创建一个只需要一个参数的新函数
    `multiply10By`，该参数指定需要进行多少次乘以 10 的操作。此外，它还将使代码更具可读性和可理解性。
- en: Pipe
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道
- en: 'The Pipe function is a utility function used to chain multiple functions and
    pass the output of one to the next one in the chain. It is similar to the Unix
    pipe operator and will apply all functions left-to-right by using the JavaScript
    `reduce()` function:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Pipe 函数是一个用于链接多个函数并将一个函数的输出传递到链中的下一个函数的工具函数。它类似于 Unix 管道操作符，通过使用 JavaScript
    的 `reduce()` 函数将所有函数从左到右应用：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To understand the pipe function, imagine you have three functions:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解管道函数，假设你有三个函数：
- en: add a Prefix to a String
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给字符串添加前缀
- en: add a Suffix to a String
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给字符串添加后缀
- en: convert a String to Uppercase
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将字符串转换为大写
- en: Then you can use the pipe function to create a new function that will apply
    every single one from left to right to a String.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以使用管道函数创建一个新函数，该函数将依次从左到右应用于字符串。
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this example, the `decorated1` and `decorated2` functions are created by
    piping the `addPrefix`, `addSuffix`, and `toUppercase` functions in different
    orders. The new functions, that are created can be called with the input string
    to apply the three original ones in the given order. The resulting output strings
    will be different because the order provided in the pipe function is different.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`decorated1` 和 `decorated2` 函数是通过不同顺序地管道 `addPrefix`、`addSuffix` 和 `toUppercase`
    函数创建的。创建的新函数可以用输入字符串调用，以按给定顺序应用原始的三个函数。由于在管道函数中提供的顺序不同，结果输出字符串会有所不同。
- en: Compose
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Compose
- en: 'The Compose function is the same as the Pipe function, but it will use `reduceRight`
    to apply all functions:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Compose 函数与 Pipe 函数相同，但它将使用 `reduceRight` 来应用所有函数：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will result in the same functionality, but the functions are applied from
    right to left.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这将实现相同的功能，但函数从右到左应用。
- en: Pick
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pick
- en: The Pick function in JavaScript is used to select specific values from an object.
    It is a way to create a new object by selecting certain properties from a provided
    project. It is a functional programming technique that allows extracting a subset
    of properties from any object if the properties are available.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中的 Pick 函数用于从对象中选择特定的值。这是一种通过从提供的对象中选择某些属性来创建新对象的方式。这是一种函数式编程技术，允许从任何对象中提取属性的子集，只要这些属性是可用的。
- en: 'Here’s the implementation of the Pick function:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Pick 函数的实现：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This function takes two parameters:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数接受两个参数：
- en: '`obj`: Original object where the new object will be created from'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`obj`: 从中创建新对象的原始对象'
- en: '`keys`: Array of keys to select into the new object.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keys`: 选择进入新对象的键数组。'
- en: To create a new object the function will use the `reduce()` method to iterate
    the keys and compare them to the original object's properties. If a value is present,
    it will be added to the accumulator object of the reduce function, which was initialized
    with `{}`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新对象，函数将使用 `reduce()` 方法迭代键并将其与原始对象的属性进行比较。如果存在值，它将被添加到 reduce 函数的累加器对象中，该对象初始化为
    `{}`。
- en: At the end of the reduce function, the accumulator object will be the new object
    and contains only the specified properties that were in `keys` array.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在 reduce 函数的最后，累加器对象将是新对象，并且只包含 `keys` 数组中的指定属性。
- en: This function is useful if you want to avoid over-fetching data. With the Pick
    function, you can retrieve any object from the database and then only `pick()`
    needed properties and return them to the caller.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想避免过度提取数据，这个函数很有用。通过 Pick 函数，你可以从数据库中检索任何对象，然后仅 `pick()` 需要的属性并将它们返回给调用者。
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This function will use the `pick()` function to create a new object only containing
    `name` and `website` which can be returned to the caller without exposing the
    `role`, the `password`, or the `id`
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数将使用 `pick()` 函数创建一个仅包含 `name` 和 `website` 的新对象，可以返回给调用者，而不会暴露 `role`、`password`
    或 `id`。
- en: Omit
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Omit
- en: The Omit function is the opposite of the Pick function, as it will remove certain
    properties from an existing object. This means you can avoid over-fetching by
    hiding properties. It can be used as a replacement for the Pick function if the
    amount of properties to hide is smaller than the number of properties to pick.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Omit 函数是 Pick 函数的相反，它将从现有对象中移除某些属性。这意味着你可以通过隐藏属性来避免过度提取。如果隐藏的属性数量少于要选择的属性数量，可以将其作为
    Pick 函数的替代品。
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This function takes two parameters:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数接受两个参数：
- en: '`obj`: Original object where the new object will be created from'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`obj`: 从中创建新对象的原始对象'
- en: '`keys`: Array of keys that won''t be in the new object.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keys`: 不会出现在新对象中的键数组。'
- en: To create a new object and remove the properties the `Object.keys()` function
    is used to create an array of keys for the original object. Then JavaScript `filter()`
    function will remove every key that was specified in the `keys` argument. With
    the `reduce` function, the remaining keys will be iterated, and a new object is
    returned that only consist of every key not provided in the `keys` array.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新对象并移除属性，可以使用 `Object.keys()` 函数生成原始对象的键数组。然后，JavaScript 的 `filter()` 函数将移除
    `keys` 参数中指定的每一个键。通过 `reduce` 函数，剩余的键将被迭代，返回一个仅包含 `keys` 数组中未提供的每个键的新对象。
- en: 'In practice, you can use it if you have a large user object where you only
    want to remove the id:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，如果你有一个大的用户对象，只想移除 id，可以使用它：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this example, the `omit()` function is used to remove the `id` property and
    retrieve an object which will make your code more readable than using a for loop,
    setting `obj.id = undefined` or using `pick()` and supplying every attribute to
    pick.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`omit()` 函数用于移除 `id` 属性并获取一个对象，这样会使你的代码比使用 for 循环、设置 `obj.id = undefined`
    或使用 `pick()` 并提供每个要选择的属性更具可读性。
- en: Zip
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zip
- en: The Zip function is a JavaScript function that matches each passed array of
    elements to another array element and is used to combine multiple arrays into
    a single array of tuples. The resulting array will contain the corresponding elements
    from each array. Often, this functionality is used when working with data from
    multiple sources that need to be merged or correlated in some way.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Zip 函数是一个 JavaScript 函数，它将每个传入的元素数组与另一个数组元素匹配，用于将多个数组合并为一个包含元组的数组。结果数组将包含来自每个数组的对应元素。通常，当处理需要以某种方式合并或关联的多个来源的数据时，会使用这个功能。
- en: 'Unlike Python, JavaScript does not provide the Zip function out of the box.
    But, the implementation is easy:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Python 不同，JavaScript 默认不提供 Zip 函数。但实现起来很简单：
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This JavaScript snippet will create a new array of arrays, where every subarray
    is composed of the elements of the provided arrays. This means, that every element
    of the original array will be mapped to another element from another original
    array at the same index.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 JavaScript 片段将创建一个新数组的数组，其中每个子数组由提供的数组的元素组成。这意味着，原始数组的每个元素将映射到同一索引的另一个原始数组的元素。
- en: 'For example, you could have three arrays that:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以有三个数组，它们：
- en: contains the x coordinate
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含 x 坐标
- en: contains the y coordinate
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含 y 坐标
- en: contains the z coordinate
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含 z 坐标
- en: Without a zip function, you would manually loop through the arrays and pair
    the x, y, and z elements. But, by using the zip function, you can pass the original
    arrays and generate a new array of (x, y, z) tuples.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 没有 zip 函数，你需要手动遍历数组并配对 x、y 和 z 元素。但通过使用 zip 函数，你可以传递原始数组并生成一个新的 (x, y, z) 元组数组。
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this example, the `zip` function is used to combine the `xCoordinates`, `yCoordinates`,
    and `zCoordinates` arrays into a single array of tuples.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`zip` 函数用于将 `xCoordinates`、`yCoordinates` 和 `zCoordinates` 数组合并为一个包含元组的单一数组。
- en: Closing Notes
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结束语
- en: During this blog post, I covered many powerful and useful functions, that help
    to write more efficient, readable, and maintainable JavaScript code. If applied
    correctly, these functions will boost your code quality and make it easier to
    work with the project.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇博客文章中，我介绍了许多强大而有用的函数，这些函数有助于编写更高效、可读和可维护的 JavaScript 代码。如果正确应用，这些函数将提升你的代码质量，并使项目的工作更加轻松。
- en: It’s important to say that the explained JavaScript functions are not part of
    the core JavaScript language but are implemented in several popular JavaScript
    frameworks like **underscore.js**, **lodash**, etc.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要说明，解释的 JavaScript 函数不是核心 JavaScript 语言的一部分，而是在几个流行的 JavaScript 框架中实现的，如
    **underscore.js**、**lodash** 等。
- en: Finally, learning to use these functions effectively in real-life software projects
    is an ongoing process that needs practice. But, after some time, you will use
    these functions with ease and efficiency, making your code more readable and maintainable.
    Also, **overall code quality will be optimized**.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，学习在实际软件项目中有效使用这些函数是一个持续的过程，需要练习。但过了一段时间，你将能轻松高效地使用这些函数，使你的代码更具可读性和可维护性。此外，**整体代码质量将得到优化**。
- en: Finally, what do you think about these JavaScript functions? Are you eager to
    apply them to your project? Also, do you have any questions regarding any of the
    functions? I would love to hear your thoughts and answer your questions. Please
    share everything in the comments.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你对这些 JavaScript 函数有什么看法？你是否迫不及待地想将它们应用到你的项目中？另外，你对这些函数有任何疑问吗？我很乐意听取你的想法并回答你的问题。请在评论中分享一切。
- en: Feel free to connect with me on [my blog](https://www.paulsblog.dev), [LinkedIn](https://www.linkedin.com/in/paulknulst/),
    [Twitter](https://twitter.com/paulknulst), and [GitHub](https://github.com/paulknulst).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 随时通过 [我的博客](https://www.paulsblog.dev)、[LinkedIn](https://www.linkedin.com/in/paulknulst/)、[Twitter](https://twitter.com/paulknulst)
    和 [GitHub](https://github.com/paulknulst) 与我联系。
- en: Thank you for reading, and **happy coding!**
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读，**祝编码愉快！**
- en: '*This article was initially published on my blog at* [*https://www.paulsblog.dev/advanced-javascript-functions-to-improve-code-quality/*](https://www.paulsblog.dev/advanced-javascript-functions-to-improve-code-quality/)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*这篇文章最初发表于我的博客* [*https://www.paulsblog.dev/advanced-javascript-functions-to-improve-code-quality/*](https://www.paulsblog.dev/advanced-javascript-functions-to-improve-code-quality/)'
