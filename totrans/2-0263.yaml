- en: Advanced JavaScript Functions To Improve Software Code Quality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/advanced-javascript-functions-to-improve-code-quality-2663781ea382](https://towardsdatascience.com/advanced-javascript-functions-to-improve-code-quality-2663781ea382)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Enhance code quality with functions including Debounce, Once, and Memoize, all
    the way to Pipe, Pick, and Zip
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.knulst.de/?source=post_page-----2663781ea382--------------------------------)[![Paul
    Knulst](../Images/9fcb767d927a1fe53ee739c584fdf92c.png)](https://medium.knulst.de/?source=post_page-----2663781ea382--------------------------------)[](https://towardsdatascience.com/?source=post_page-----2663781ea382--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----2663781ea382--------------------------------)
    [Paul Knulst](https://medium.knulst.de/?source=post_page-----2663781ea382--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----2663781ea382--------------------------------)
    ·14 min read·Feb 20, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dff07a46eeeaa2df542233e6e4f7feeb.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Joan Gamell](https://unsplash.com/@gamell) / [Unsplash](https://unsplash.com/photos/ZS67i1HLllo)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**JavaScript is a powerful and versatile programming language** that has many
    built-in features that can help you write more efficient, maintainable, and readable
    code.'
  prefs: []
  type: TYPE_NORMAL
- en: In this blog post, I will explain how to use some in-built features to create
    some of the most powerful functions to **boost your performance** and make your
    code look much more beautiful. I will cover Debounce, Throttle, Once, Memoize,
    Curry, Partial, Pipe, Compose, Pick, Omit, and Zip which you can save in a utility
    file/class to optimize your code quality as a JavaScript developer.
  prefs: []
  type: TYPE_NORMAL
- en: '**Although the functions are explained using JavaScript, they could be easily
    implemented in any programming language. Once the concept of the different functions
    is understood, it can be applied everywhere.**'
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the functions (or concepts) described in this post are **often
    asked in technical interviews**.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you are a beginner or an experienced senior developer, these functions
    will optimize your code and coding experience. They will make working with JavaScript
    more enjoyable and efficient.
  prefs: []
  type: TYPE_NORMAL
- en: Debounce
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A debounce function is a method for preventing a quick series of events from
    repeatedly activating a function. It works by postponing function execution until
    a certain period has passed without the event being fired. The Debounce function
    is a useful solution that could be applied in real-world applications to increase
    performance by preventing the execution of functions if a user is rapidly clicking
    the buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following snippet will show how to implement the debounce function in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this JavaScript snippet, the `debounce` function will return a new function
    that executes the original function after a previously defined `delay`. If the
    function is called again, the `timeout` will be reset, and calling the function
    will be postponed.
  prefs: []
  type: TYPE_NORMAL
- en: This functionality will be useful if you have a function that updates the layout
    of a webpage when the window is resized. Without the Debounce function, this function
    would be called many times in quick succession as the user resizes the window,
    which can cause performance issues. With the Debounce function, the rate at which
    the layout is updated can be limited, making the page more responsive and efficient.
  prefs: []
  type: TYPE_NORMAL
- en: 'This snippet shows how the Debounce function will be used in this use case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `updateLayout` function will be called at most once every
    250 milliseconds when the window is resized. This functionality ensures that the
    layout is only updated 250ms after the user has finished resizing the window,
    making the webpage more efficient and responsive.
  prefs: []
  type: TYPE_NORMAL
- en: Throttle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Throttle function is similar to the Debounce function but with slightly
    different behavior. Instead of limiting the rate at which the function is called,
    the Throttle function limits the rate at which the function is *executed*. This
    means it will forbid executing if the function was invoked before within a given
    period. It guarantees that a certain function runs at a consistent rate and won’t
    be triggered too often.
  prefs: []
  type: TYPE_NORMAL
- en: 'The implementation of the Throttle function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this snippet, the `throttle` function will execute a provided function `func`,
    update a `wait` variable to `true`, and then starts a timer which will reset the
    `wait` parameter after the `delay` is passed. If the `throttle` function is called
    again it will either call the provided function or simply return if the `wait`
    parameter is still `true`.
  prefs: []
  type: TYPE_NORMAL
- en: This Throttle functionality can be used on a webpage if you want to execute
    a function to update the layout while scrolling. Without a `throttle` function,
    this update function will be called multiple times as the user scrolls on the
    page, resulting in heavy performance issues. Using the `throttle` function, you
    can ensure that it will only be executed once every X milliseconds. This will
    result in more responsive and efficient usability of the webpage.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following snippet, you can see how the `throttle` function can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: By defining the `throttleUpdatedLayout` function and specifying a delay of 250
    milliseconds, it can be ensured that the `updateLayout` function will be executed
    at most once every 250 milliseconds when the window is scrolled. If the event
    is triggered before the delay is reached, nothing will happen.
  prefs: []
  type: TYPE_NORMAL
- en: Once
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Once function is a method that will prevent executing if already called.
    This is especially useful while working with event listeners, where you often
    encounter functions that only should run once. Instead of removing event listeners
    every time you can use the Once function in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: For example, you can have a function that sends a request to a server to load
    some data. With the `once()` function, you could ensure that the request is not
    called multiple times if the user keeps clicking the button. This will avoid performance
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: Without the `once()` function, you would remove the click listener instantly
    after the request is sent to prevent sending the request again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Applying the `once()` function to any code will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `requestSomeData` function will be called once, even if
    the user clicks the button multiple times.
  prefs: []
  type: TYPE_NORMAL
- en: Memoize
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Memoize is a JavaScript function, that is used to cache the results of a given
    function to prevent calling computationally expensive routines multiple times
    with the same arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This `memoize()` function will cache the result of a given function and uses
    the arguments as key to retrieve the result if called again with the same arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if you have a function that performs a complex calculation that is based
    on an input variable, you can use the `memoize()` function to cache the results
    and retrieve them instantly if called multiple times with the same input.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the benefits of the `memoize()` function, you can use it to calculate
    the Fibonacci numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `fibonacci()` function will be converted into a `memoizedFibonacci`
    function. Then the `memoized()` function will be called, and the execution time
    will be logged to the console.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f5757ad856da254c0975dc678d3965f9.png)'
  prefs: []
  type: TYPE_IMG
- en: Although the second call only calculates the Fibonacci number of 29 it took
    much longer than calculating the Fibonacci number of 30 a second time because
    it was cached by the `memoize()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Curry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Curry function (also known as Currying) is an advanced JavaScript function
    used to create a new function from an existing one by “pre-filling” some of its
    arguments. Currying is often used when working with functions that take multiple
    arguments and transform them into functions that take some arguments because the
    other will always stay the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the Curry function has several benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: It helps to avoid using the same variable again and again
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It makes code more readable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It divides functions into multiple smaller functions that can handle one responsibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This Curry function takes another function (`func`) and an optional argument
    `arity` that defaults to the length of `func`'s arguments. It returns a new function
    (`curried`) that can be called with a `arity` number of arguments. If not all
    arguments have been supplied, it returns a new function that can be called with
    more arguments until all required arguments have been provided. When all arguments
    are supplied, the original function (`func`) is called, and its result will be
    returned.
  prefs: []
  type: TYPE_NORMAL
- en: To understand the benefits of the Curry function, you could think of a method
    to calculate the distance between two points in a plane. Using a Curry function,
    you can create a new function that will only require one of these points, making
    it easier to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following snippet will show how the previously defined curry function is
    used to optimize the readability of the implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this example, a curried version of the `distance` function is created (`distanceFromOrigin`)
    by using the `curry` function and passing `distance` as the first argument and
    `3` as the second argument (`arity`). Also, it will call the curried function
    with `0,0` as the first two arguments.
  prefs: []
  type: TYPE_NORMAL
- en: The resulting function `distanceFromOrigin` is now a new function that needs
    only two arguments, and will always use `0,0` as the first point.
  prefs: []
  type: TYPE_NORMAL
- en: Partial
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Partial function in JavaScript is similar to the Curry function. The significant
    difference between Curry and Partial is that a call to a Partial function returns
    the result instantly instead of returning another function down the currying chain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `partial` function in JavaScript typically takes an existing function, one
    or more input arguments, and returns a new function that calls the original function
    with the additional arguments passed in when the new function is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following use case, a `calculate` function will be pre-filled with the
    first two arguments to generate a new function with a more readable name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `multiply10By` function is created by partially applying
    the generic `calculate` function and pre-filling the first two arguments with
    8 and 2\. This will create a new function `multiply10By` that only requires one
    argument specifying the amount of multiplication of 10 that has to be done. Also,
    it will make the code more readable and understandable.
  prefs: []
  type: TYPE_NORMAL
- en: Pipe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Pipe function is a utility function used to chain multiple functions and
    pass the output of one to the next one in the chain. It is similar to the Unix
    pipe operator and will apply all functions left-to-right by using the JavaScript
    `reduce()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To understand the pipe function, imagine you have three functions:'
  prefs: []
  type: TYPE_NORMAL
- en: add a Prefix to a String
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: add a Suffix to a String
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: convert a String to Uppercase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then you can use the pipe function to create a new function that will apply
    every single one from left to right to a String.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `decorated1` and `decorated2` functions are created by
    piping the `addPrefix`, `addSuffix`, and `toUppercase` functions in different
    orders. The new functions, that are created can be called with the input string
    to apply the three original ones in the given order. The resulting output strings
    will be different because the order provided in the pipe function is different.
  prefs: []
  type: TYPE_NORMAL
- en: Compose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Compose function is the same as the Pipe function, but it will use `reduceRight`
    to apply all functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This will result in the same functionality, but the functions are applied from
    right to left.
  prefs: []
  type: TYPE_NORMAL
- en: Pick
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Pick function in JavaScript is used to select specific values from an object.
    It is a way to create a new object by selecting certain properties from a provided
    project. It is a functional programming technique that allows extracting a subset
    of properties from any object if the properties are available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the implementation of the Pick function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This function takes two parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`obj`: Original object where the new object will be created from'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keys`: Array of keys to select into the new object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To create a new object the function will use the `reduce()` method to iterate
    the keys and compare them to the original object's properties. If a value is present,
    it will be added to the accumulator object of the reduce function, which was initialized
    with `{}`.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the reduce function, the accumulator object will be the new object
    and contains only the specified properties that were in `keys` array.
  prefs: []
  type: TYPE_NORMAL
- en: This function is useful if you want to avoid over-fetching data. With the Pick
    function, you can retrieve any object from the database and then only `pick()`
    needed properties and return them to the caller.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This function will use the `pick()` function to create a new object only containing
    `name` and `website` which can be returned to the caller without exposing the
    `role`, the `password`, or the `id`
  prefs: []
  type: TYPE_NORMAL
- en: Omit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Omit function is the opposite of the Pick function, as it will remove certain
    properties from an existing object. This means you can avoid over-fetching by
    hiding properties. It can be used as a replacement for the Pick function if the
    amount of properties to hide is smaller than the number of properties to pick.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This function takes two parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`obj`: Original object where the new object will be created from'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keys`: Array of keys that won''t be in the new object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To create a new object and remove the properties the `Object.keys()` function
    is used to create an array of keys for the original object. Then JavaScript `filter()`
    function will remove every key that was specified in the `keys` argument. With
    the `reduce` function, the remaining keys will be iterated, and a new object is
    returned that only consist of every key not provided in the `keys` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'In practice, you can use it if you have a large user object where you only
    want to remove the id:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `omit()` function is used to remove the `id` property and
    retrieve an object which will make your code more readable than using a for loop,
    setting `obj.id = undefined` or using `pick()` and supplying every attribute to
    pick.
  prefs: []
  type: TYPE_NORMAL
- en: Zip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Zip function is a JavaScript function that matches each passed array of
    elements to another array element and is used to combine multiple arrays into
    a single array of tuples. The resulting array will contain the corresponding elements
    from each array. Often, this functionality is used when working with data from
    multiple sources that need to be merged or correlated in some way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike Python, JavaScript does not provide the Zip function out of the box.
    But, the implementation is easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This JavaScript snippet will create a new array of arrays, where every subarray
    is composed of the elements of the provided arrays. This means, that every element
    of the original array will be mapped to another element from another original
    array at the same index.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you could have three arrays that:'
  prefs: []
  type: TYPE_NORMAL
- en: contains the x coordinate
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: contains the y coordinate
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: contains the z coordinate
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Without a zip function, you would manually loop through the arrays and pair
    the x, y, and z elements. But, by using the zip function, you can pass the original
    arrays and generate a new array of (x, y, z) tuples.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `zip` function is used to combine the `xCoordinates`, `yCoordinates`,
    and `zCoordinates` arrays into a single array of tuples.
  prefs: []
  type: TYPE_NORMAL
- en: Closing Notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During this blog post, I covered many powerful and useful functions, that help
    to write more efficient, readable, and maintainable JavaScript code. If applied
    correctly, these functions will boost your code quality and make it easier to
    work with the project.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to say that the explained JavaScript functions are not part of
    the core JavaScript language but are implemented in several popular JavaScript
    frameworks like **underscore.js**, **lodash**, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, learning to use these functions effectively in real-life software projects
    is an ongoing process that needs practice. But, after some time, you will use
    these functions with ease and efficiency, making your code more readable and maintainable.
    Also, **overall code quality will be optimized**.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, what do you think about these JavaScript functions? Are you eager to
    apply them to your project? Also, do you have any questions regarding any of the
    functions? I would love to hear your thoughts and answer your questions. Please
    share everything in the comments.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to connect with me on [my blog](https://www.paulsblog.dev), [LinkedIn](https://www.linkedin.com/in/paulknulst/),
    [Twitter](https://twitter.com/paulknulst), and [GitHub](https://github.com/paulknulst).
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading, and **happy coding!**
  prefs: []
  type: TYPE_NORMAL
- en: '*This article was initially published on my blog at* [*https://www.paulsblog.dev/advanced-javascript-functions-to-improve-code-quality/*](https://www.paulsblog.dev/advanced-javascript-functions-to-improve-code-quality/)'
  prefs: []
  type: TYPE_NORMAL
