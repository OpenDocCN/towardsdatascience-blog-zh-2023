- en: VIM Tutorial — Edit Text Like a Pro
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VIM 教程 — 像专业人士一样编辑文本
- en: 原文：[https://towardsdatascience.com/vim-tutorial-edit-text-like-a-pro-ea13e45010f5](https://towardsdatascience.com/vim-tutorial-edit-text-like-a-pro-ea13e45010f5)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/vim-tutorial-edit-text-like-a-pro-ea13e45010f5](https://towardsdatascience.com/vim-tutorial-edit-text-like-a-pro-ea13e45010f5)
- en: An easy-to-follow tutorial for Vim text editor
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 易于遵循的 Vim 文本编辑器教程
- en: '[](https://medium.com/@fmnobar?source=post_page-----ea13e45010f5--------------------------------)[![Farzad
    Mahmoodinobar](../Images/2d75209693b712300e6f0796bd2487d0.png)](https://medium.com/@fmnobar?source=post_page-----ea13e45010f5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ea13e45010f5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ea13e45010f5--------------------------------)
    [Farzad Mahmoodinobar](https://medium.com/@fmnobar?source=post_page-----ea13e45010f5--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@fmnobar?source=post_page-----ea13e45010f5--------------------------------)[![Farzad
    Mahmoodinobar](../Images/2d75209693b712300e6f0796bd2487d0.png)](https://medium.com/@fmnobar?source=post_page-----ea13e45010f5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ea13e45010f5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ea13e45010f5--------------------------------)
    [Farzad Mahmoodinobar](https://medium.com/@fmnobar?source=post_page-----ea13e45010f5--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ea13e45010f5--------------------------------)
    ·12 min read·Mar 6, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ea13e45010f5--------------------------------)
    ·12分钟阅读·2023年3月6日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/5b1cb54fed04ecc490575d85a387c965.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5b1cb54fed04ecc490575d85a387c965.png)'
- en: Photo by [Pereanu Sebastian](https://unsplash.com/@sebastian123) on [Unsplash](https://unsplash.com/photos/qFH7-yKoxik)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Pereanu Sebastian](https://unsplash.com/@sebastian123) 在 [Unsplash](https://unsplash.com/photos/qFH7-yKoxik)
    上提供
- en: Vim is a powerful and highly customizable text editor that has been around since
    1991\. It is known for its modal editing interface — meaning it allows users to
    switch between different modes for editing, navigating, and selecting text. Vim
    is widely used by programmers and other power users who need a fast and efficient
    way to edit and manipulate text files. One of the main advantages of using Vim
    is its speed and efficiency. Once you learn the commands and master the interface,
    you can perform complex editing tasks with just a few keystrokes.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Vim 是一个功能强大且高度可定制的文本编辑器，自 1991 年以来一直存在。它以其模式编辑界面而闻名——这意味着它允许用户在不同的模式之间切换，用于编辑、导航和选择文本。Vim
    被程序员和其他需要快速高效方式编辑和操作文本文件的高级用户广泛使用。使用 Vim 的主要优势之一是其速度和效率。一旦你掌握了命令和界面，你可以用几个击键执行复杂的编辑任务。
- en: In this post, we are going to go over the most common commands used in Vim.
    I have included a cheat sheet right after this section, which can be used for
    future reference. Cheat sheet is followed by a detailed tutorial of the commands.
    My recommendation would be to go through the detailed tutorial section first and
    then for future use, you can simply refer to the cheat sheet table.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将介绍 Vim 中最常用的命令。我在本节之后包含了一个速查表，供将来参考。速查表之后是命令的详细教程。我建议首先阅读详细教程部分，然后在未来使用时，你可以简单地参考速查表。
- en: Let’s get started!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 开始吧！
- en: '*(All images, unless otherwise noted, are by the author.)*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*(除非另有说明，否则所有图片均由作者提供。)*'
- en: '[](https://medium.com/@fmnobar/membership?source=post_page-----ea13e45010f5--------------------------------)
    [## Join Medium with my referral link - Farzad Mahmoodinobar'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@fmnobar/membership?source=post_page-----ea13e45010f5--------------------------------)
    [## 通过我的推荐链接加入 Medium - Farzad Mahmoodinobar'
- en: Read every story from Farzad (and other writers on Medium). Your membership
    fee directly supports Farzad and other…
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读 Farzad (以及 Medium 上其他作者) 的每一个故事。你的会员费直接支持 Farzad 和其他人……
- en: medium.com](https://medium.com/@fmnobar/membership?source=post_page-----ea13e45010f5--------------------------------)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@fmnobar/membership?source=post_page-----ea13e45010f5--------------------------------)
- en: Overview Table of Important Vim Commands
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重要 Vim 命令概览表
- en: The following table summarizes some of the most important Vim commands that
    you need to know. Each command is described in more detail in the next section.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下表总结了一些你需要了解的重要 Vim 命令。每个命令在下一节中有更详细的描述。
- en: '![](../Images/ba4c8f28dedb2bfe64420dfc6cf862fc.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ba4c8f28dedb2bfe64420dfc6cf862fc.png)'
- en: Vim Commands Cheat Sheet
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Vim 命令速查表
- en: Vim Commands — Detailed Tutorial with Implementation
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vim 命令 — 详细教程与实现
- en: In this section we will walk through some of the most common Vim commands in
    detail. We will also apply each of the commands to text files to see the results.
    We will be using the Command Line Interface (CLI) to run Vim commands (if you
    need a refresher on CLI, you can visit this [CLI tutorial]()). If you are ready,
    open the CLI and let’s get started!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将详细介绍一些最常用的 Vim 命令。我们还将把每个命令应用于文本文件以查看结果。我们将使用命令行界面（CLI）来运行 Vim 命令（如果你需要复习
    CLI，可以访问这个 [CLI 教程]()）。如果你准备好了，打开 CLI，开始吧！
- en: 1\. “`vim"` — Create a File
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. “`vim"` — 创建文件
- en: 'First we will create a file named `demo.txt` so that we can apply the commands
    in that text file, as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个名为 `demo.txt` 的文件，以便可以在该文本文件中应用命令，如下所示：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This command creates a text file using Vim in the CLI. Once you run this command,
    you will see a blank page in your CLI similar to this picture:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令使用 Vim 在 CLI 中创建一个文本文件。一旦运行此命令，你将在 CLI 中看到一个类似于这张图片的空白页面：
- en: '![](../Images/747655b58ac6ab0d96df9504425fe4fc.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/747655b58ac6ab0d96df9504425fe4fc.png)'
- en: As you can see, the file is empty and we only see the name of the file in the
    bottom left corner. Let’s see how we can add some text in the text file.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，文件是空的，我们只能在左下角看到文件名。让我们看看如何在文本文件中添加一些文本。
- en: 2\. “i” — Insert
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. “i” — 插入
- en: The `i` command stands for “insert” and it is used to enter insert mode in Vim.
    When you are in insert mode, you can enter and edit text just like in any other
    text editor. To use this command, simply press `i` while in normal mode.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`i` 命令代表“insert”，用于进入 Vim 的插入模式。当你处于插入模式时，可以像在任何其他文本编辑器中一样输入和编辑文本。要使用此命令，只需在普通模式下按
    `i`。'
- en: 'Go ahead and press `i` and then type the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 继续按 `i`，然后输入以下内容：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Make sure not to press anything else. Below is what my CLI looks like at this
    point:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 确保不要按其他任何键。以下是此时我 CLI 的样子：
- en: '![](../Images/b8874d9cf28ac8e1df355dcf047c46fc.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b8874d9cf28ac8e1df355dcf047c46fc.png)'
- en: We see the text in that picture and also in the very bottom we can see that
    we are in the `— INSERT —` mode. In order to come out of that mode, simply press
    the escape key on your keyboard (make sure to do this before going to the next
    step).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在该图片中看到文本，并且在最底部我们可以看到我们处于 `— INSERT —` 模式。为了退出该模式，只需按下键盘上的 Escape 键（确保在进入下一步之前执行此操作）。
- en: So far we have added this text in the file but we have not saved the changes
    yet. Let’s look at that next.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经在文件中添加了这些文本，但尚未保存更改。接下来我们来看看这个问题。
- en: 3\. “:w” — Write
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. “:w” — 写入
- en: 'The `:w` command stands for “write” and it is used to save changes to a file
    in Vim. To use this command, simply type `:w` while in normal mode and press the
    return key (or enter) on your keyboard. This will save any changes you have made
    to the file and below is how it looks on my CLI after this change:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`:w` 命令代表“write”，用于在 Vim 中保存对文件的更改。要使用此命令，只需在普通模式下输入 `:w` 并按下回车键（或 Enter）。这将保存对文件所做的任何更改，以下是更改后我的
    CLI 的样子：'
- en: '![](../Images/dd91ada46dae66097fac61c783599406.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dd91ada46dae66097fac61c783599406.png)'
- en: '**Pro Tip:** Note that the “Write” command was entered after a “:”. In Vim,
    we enter the “command” mode by adding the command `:`. In other words, first we
    enter the command mode by typing `:` and then we type `w`, which becomes the “Write”
    command overall. We can always exit out of the command mode by pressing the escape
    button. We will use the command mode more in the next parts.'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**专业提示：** 请注意，“Write”命令是在“:”之后输入的。在 Vim 中，我们通过输入命令 `:` 进入“命令”模式。换句话说，我们首先通过输入
    `:` 进入命令模式，然后输入 `w`，这就成为了“Write”命令。我们可以随时通过按下 Escape 键退出命令模式。我们将在接下来的部分中更多地使用命令模式。'
- en: Now that we have saved our changes, we can quit (i.e. close) the file, in the
    next step.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经保存了更改，接下来我们可以退出（即关闭）文件。
- en: 4\. "`:q"` — Quit
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. "`:q"` — 退出
- en: The `:q` command stands for “quit” and it is used to exit Vim. To use this command,
    simply type `:q` while in normal mode (and press return/enter on your keyboard).
    If you have unsaved changes in the file, Vim will prompt you to save them before
    quitting.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`:q` 命令代表“quit”，用于退出 Vim。要使用此命令，只需在普通模式下输入 `:q`（然后按下回车/Enter）。如果文件中有未保存的更改，Vim
    会提示你在退出之前保存这些更改。'
- en: 5\. “:wq” — Write Quit
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. “:wq” — 写入并退出
- en: The `:wq` command stands for “write quit” and it is used to save changes to
    a file and exit Vim in one command (instead of going through them separately,
    like we did in the previous example). To use this command, type `:wq` while in
    normal mode. This will save any changes you have made to the file and exit Vim.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`:wq`命令代表“写入并退出”，用于将更改保存到文件并退出Vim（而不是像之前的示例那样分开进行）。要使用此命令，在普通模式下键入`:wq`。这将保存你对文件所做的任何更改并退出Vim。'
- en: 6\. “h”, “j”, “k”, “l”, “w”, “b” — Navigation Through Text Files
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6\. “h”、“j”、“k”、“l”、“w”、“b” — 文本文件中的导航
- en: These commands are used to move the cursor around in Vim. `h` moves the cursor
    left, `j` moves it down, `k` moves it up, and `l` moves it right. `w` moves the
    cursor to the beginning of the next word and `b` moves the cursor to the beginning
    of the current word. These commands are used in normal mode.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令用于在Vim中移动光标。`h`将光标向左移动，`j`向下移动，`k`向上移动，`l`向右移动。`w`将光标移动到下一个单词的开头，`b`将光标移动到当前单词的开头。这些命令在普通模式下使用。
- en: 'In order to practice these, go ahead and open the file that we had created
    using the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了练习这些，请使用以下命令打开我们创建的文件：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now that you have the file open in Vim, you can use the navigation keys to move
    around — give it a try!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经在Vim中打开了文件，你可以使用导航键进行移动——试试看吧！
- en: '**Pro Tip:** Note the commands to open an existing file and creating a new
    file are the same. If the file already exists, Vim opens the existing file. If
    the file does not exist, Vim will create a new file.'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**技巧提示：** 请注意，打开现有文件和创建新文件的命令是相同的。如果文件已存在，Vim将打开现有文件。如果文件不存在，Vim将创建一个新文件。'
- en: 7\. “x” — Delete
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7\. “x” — 删除
- en: The `x` command is used to delete the character under the cursor. To use this
    command, simply place the cursor on the character you want to delete and press
    “x” while in normal mode.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`x`命令用于删除光标下的字符。要使用此命令，只需将光标放在你要删除的字符上，并在普通模式下按“x”即可。'
- en: 'Let’s use this to delete letters “ic” from “Topic”. What I see is as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用这个来删除“Topic”中的“ic”字母。我看到的结果如下：
- en: '![](../Images/4e444b3780e786236fe40bbe26d093c5.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4e444b3780e786236fe40bbe26d093c5.png)'
- en: But what if we deleted these by mistake? Let’s see how we can undo this action
    in the next step.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果我们不小心删除了这些呢？让我们看看下一步如何撤销这个操作。
- en: 8\. “u” — Undo
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8\. “u” — 撤销
- en: The `u` command is used to undo changes in Vim. To use this command, simply
    press `u` while in normal mode.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`u`命令用于在Vim中撤销更改。要使用此命令，只需在普通模式下按`u`即可。'
- en: 'I pressed `u` twice and the deletions were undone as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我按了`u`两次，删除操作被撤销，如下所示：
- en: '![](../Images/10e5c4395f4b369cd6bdff1b2ff1359b.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/10e5c4395f4b369cd6bdff1b2ff1359b.png)'
- en: 9\. “Ctrl-r” — Redo
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9\. “Ctrl-r” — 重做
- en: The `Ctrl-r` command is used to redo changes in Vim. To use this command, simply
    press `Ctrl-r` while in normal mode.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ctrl-r`命令用于在Vim中重做更改。要使用此命令，只需在普通模式下按`Ctrl-r`即可。'
- en: 'Let’s say we changed our mind (again) and we actually meant to delete those
    two letters. I hit `Ctrl-r` twice and in the below screenshot we see that the
    letters are deleted once again:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们又改变了主意，实际上我们是要删除那两个字母。我按了`Ctrl-r`两次，在下面的截图中我们可以看到字母再次被删除：
- en: '![](../Images/0c89f0c6cd5de030250b030380671d65.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0c89f0c6cd5de030250b030380671d65.png)'
- en: Ok. Let’s leave these changes for now. Let’s next talk about searching for a
    term using Vim.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。我们先暂时保留这些更改。接下来我们来谈谈如何使用Vim搜索术语。
- en: 10\. “dd” — Delete Line
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10\. “dd” — 删除行
- en: The `dd` command is used to delete the entire line in Vim. To use this command,
    simply press `dd` while in normal model.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`dd`命令用于在Vim中删除整行。要使用此命令，只需在普通模式下按`dd`即可。'
- en: 11\. “/search_term” — Search
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11\. “/search_term” — 搜索
- en: The `/` command is used to search for a term in Vim. To use this command, type
    `/` followed by the term you want to search for and press enter. Vim will highlight
    the next occurrence of the term in the file.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`/`命令用于在Vim中搜索术语。要使用此命令，键入`/`后跟你要搜索的术语，然后按回车。Vim将突出显示文件中术语的下一个出现位置。'
- en: 'Let’s give this a try. I searched for “medium” using `/medium` and below are
    the results:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 试试看吧。我使用`/medium`搜索了“medium”，结果如下：
- en: '![](../Images/50cbd69e468b6e338d7046bce31dedfb.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/50cbd69e468b6e338d7046bce31dedfb.png)'
- en: As we see in the picture, the cursor jumped to the beginning of the word “medium”
    in the last line of text.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在图片中看到的，光标跳到了文本最后一行的“medium”一词的开头。
- en: 'Now let’s go ahead and highlight the search results using: `:set hlsearch`
    and now the searched term (i.e. “medium” in this example) is highlighted as shown
    in the picture below:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用 `:set hlsearch` 高亮显示搜索结果，现在搜索的词汇（例如本例中的“medium”）被高亮显示，如下图所示：
- en: '![](../Images/1b0e78e49bdf3915b4e5d5cbcacf7d83.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1b0e78e49bdf3915b4e5d5cbcacf7d83.png)'
- en: We can turn off this highlighted search using `:set nohlsearch`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `:set nohlsearch` 关闭此高亮搜索。
- en: 12\. “:s/search_term/replace_term/g” — Replace
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12\. “:s/search_term/replace_term/g” — 替换
- en: The `:s/search_term/replace_term/g` command is used to replace all occurrences
    of a term in Vim. To use this command, type `:s/search_term/replace_term/g` while
    in normal mode and press enter. Vim will replace all occurrences of the search
    term with the replace term.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`:s/search_term/replace_term/g` 命令用于在 Vim 中替换所有出现的词汇。要使用此命令，在普通模式下键入 `:s/search_term/replace_term/g`
    并按回车键。Vim 将用替换词汇替换所有出现的搜索词汇。'
- en: 'I tried this by replacing “Tutorial” with “guideline” with the following command:
    `:s/Tutorial/Guideline/g`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我通过使用以下命令将“Tutorial”替换为“guideline”进行尝试：`:s/Tutorial/Guideline/g`
- en: 'Below are the results:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是结果：
- en: '![](../Images/3c4fa7cccbc45d599f744dbc16305779.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3c4fa7cccbc45d599f744dbc16305779.png)'
- en: Next, let’s talk about how we can accomplish copying a text and then pasting
    it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们讨论一下如何完成文本复制并粘贴的操作。
- en: 13\. “yy” — Yank
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 13\. “yy” — 剪切
- en: The `yy` command is used to copy a line of text in Vim. To use this command,
    simply place the cursor on the line you want to copy and press `yy` while in normal
    mode.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`yy` 命令用于在 Vim 中复制一行文本。要使用此命令，只需将光标放在要复制的行上，并在普通模式下按 `yy`。'
- en: 14\. “p” — Paste
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 14\. “p” — 粘贴
- en: The `p` command is used to paste the text that has been yanked or deleted. To
    use this command, simply press `p` while in normal mode.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`p` 命令用于粘贴已被剪切或删除的文本。要使用此命令，只需在普通模式下按 `p` 键即可。'
- en: 'Let’s try the yank and paste commands. Go ahead and hit `yy` at the very beginning
    of the file and then press `p` and see what happens. Note that nothing really
    happens once you press `yy` but it is actually happening in the background. Once
    you press `p`, you will see the results. I happened to press `p` twice and below
    are the results:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试剪切和粘贴命令。首先在文件的开头按 `yy`，然后按 `p`，看看会发生什么。请注意，按下 `yy` 后实际上没有明显的变化，但实际情况是在后台进行的。一旦按下
    `p`，你将看到结果。我碰巧按了两次 `p`，以下是结果：
- en: '![](../Images/d2e4e7ffb5c3b1bc56f0bfd78e254ae3.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d2e4e7ffb5c3b1bc56f0bfd78e254ae3.png)'
- en: 15\. "`:set number"` — Show Line Numbers
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15\. "`:set number"` — 显示行号
- en: The `:set number` command is used to show line numbers in Vim. To use this command,
    type `:set number` while in normal mode.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`:set number` 命令用于在 Vim 中显示行号。要使用此命令，在普通模式下键入 `:set number`。'
- en: 'This one is self-explanatory. Below is what my CLI looks like after I enter
    the command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令不言而喻。以下是我输入命令后 CLI 的样子：
- en: '![](../Images/28c21de14e7767f8b17bdb65fb4937a1.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/28c21de14e7767f8b17bdb65fb4937a1.png)'
- en: 16\. “:set nonumber” — Hide Line Numbers
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16\. “:set nonumber” — 隐藏行号
- en: The `:set nonumber` command is used to hide line numbers in Vim. To use this
    command, type `:set nonumber` while in normal mode.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`:set nonumber` 命令用于在 Vim 中隐藏行号。要使用此命令，在普通模式下键入 `:set nonumber`。'
- en: 'And below are the results of hiding line numbers:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是隐藏行号的结果：
- en: '![](../Images/8ff19d472f522a24d876804e60234157.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8ff19d472f522a24d876804e60234157.png)'
- en: 17\. “:set paste” — Paste Without Auto-Indent
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17\. “:set paste” — 无自动缩进的粘贴
- en: The `:set paste` command is used to paste text without auto-indentation. To
    use this command, type `:set paste` while in normal mode, then paste the text,
    and type `:set nopaste` to exit paste mode. An example of a use case for this
    command is when pasting textual inputs that are sensitive towards indentation,
    such as programming scripts (think about a for loop in Python or similar).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`:set paste` 命令用于粘贴文本而不进行自动缩进。要使用此命令，在普通模式下键入 `:set paste`，然后粘贴文本，最后键入 `:set
    nopaste` 退出粘贴模式。此命令的一个应用场景是粘贴对缩进敏感的文本输入，例如编程脚本（例如 Python 中的 for 循环等）。'
- en: 18\. “:set spell” — Spell Check
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 18\. “:set spell” — 拼写检查
- en: The `:set spell` command is used to enable spell checking in Vim. To use this
    command, type `:set spell` while in normal mode. Vim will highlight any words
    that are misspelled.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`:set spell` 命令用于启用 Vim 的拼写检查。要使用此命令，在普通模式下键入 `:set spell`。Vim 会高亮显示任何拼写错误的单词。'
- en: 'Let’s see if Vim identifies anything in our file:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 Vim 是否在我们的文件中识别出了什么：
- en: '![](../Images/17b5a63e5f74d1a7f2c7f29b30535608.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/17b5a63e5f74d1a7f2c7f29b30535608.png)'
- en: As expected, my name is highlighted and is not recognized by Vim as a correctly-spelled
    word — I won’t take that personally!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，我的名字被突出显示，Vim未将其识别为正确拼写的词——我不会把这个放在心上！
- en: 19\. “:set nospell” — Disable Spell Check
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 19\. “:set nospell” — 禁用拼写检查
- en: The `:set nospell` command is used to disable spell checking in Vim. To use
    this command, type `:set nospell` while in normal mode.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`:set nospell`命令用于在Vim中禁用拼写检查。要使用此命令，请在正常模式下输入`:set nospell`。'
- en: 20\. “:w filename” — Write to a File
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 20\. “:w filename” — 写入文件
- en: The `:w filename` command is used to write the contents of the current file
    to a new file with the specified filename. To use this command, type `:w filename`
    while in normal mode.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`:w filename`命令用于将当前文件的内容写入一个具有指定文件名的新文件。要使用此命令，请在正常模式下输入`:w filename`。'
- en: 'Let’s try this one. First I will go ahead and save the content of this file
    into a new file named `demo2.txt` using the following command: `:w demo2.txt`.
    Then I closed out Vim (using `:q!`) and then looking at the files (using the `ls`
    command in the CLI), I see the new file named `demo2.txt` is now added there.
    Let’s open it with Vim and see how it looks like:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 试试这个。我将首先使用以下命令将文件内容保存到名为`demo2.txt`的新文件中：`:w demo2.txt`。然后我关闭了Vim（使用`:q!`），接着查看文件（使用CLI中的`ls`命令），看到新文件`demo2.txt`现在被添加到了那里。让我们用Vim打开它，看看它的样子：
- en: '![](../Images/11286f918d4a8cd832777a7e7158b297.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/11286f918d4a8cd832777a7e7158b297.png)'
- en: 21\. “:q!” — Quit Without Saving
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 21\. “:q!” — 不保存退出
- en: 'The `:q!` command is used to exit Vim without saving any changes to the file.
    To use this command, type `:q!` while in normal mode. In case you noticed in the
    previous example, I exited out of Vim using `:q!` so we expect that the changes
    were not saved. Let’s open `demo.txt` and verify this. Below are the results:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`:q!`命令用于退出Vim而不保存对文件的任何更改。要使用此命令，请在正常模式下输入`:q!`。如果你在之前的例子中注意到，我使用`:q!`退出了Vim，因此我们期望更改没有被保存。让我们打开`demo.txt`并进行验证。结果如下：'
- en: '![](../Images/fdb0922216c8bb2a2543fe2fad922cfe.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fdb0922216c8bb2a2543fe2fad922cfe.png)'
- en: As expected, the changes were not saved and I ended up with the original file.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，修改没有被保存，我最终得到了原始文件。
- en: 22\. “:e filename” — Open a File
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 22\. “:e filename” — 打开一个文件
- en: The `:e filename` command is used to open a file in Vim. To use this command,
    type `:e filename` while in normal mode.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`:e filename`命令用于在Vim中打开一个文件。要使用此命令，请在正常模式下输入`:e filename`。'
- en: 'Now that we have the `demo.txt` file open, let’s open the second file named
    `demo2.txt` using this command and below are the results:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经打开了`demo.txt`文件，接下来使用以下命令打开第二个名为`demo2.txt`的文件，结果如下：
- en: '![](../Images/a5dc0e81f5aa16dfefdd6107bfcbb1fc.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a5dc0e81f5aa16dfefdd6107bfcbb1fc.png)'
- en: As expected, the second file was opened.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，第二个文件已被打开。
- en: 23\. “:set tabstop=4” — Set Tab Width
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 23\. “:set tabstop=4” — 设置制表符宽度
- en: The `:set tabstop=4` command is used to set the width of tabs in Vim to 4 spaces.
    To use this command, type `:set tabstop=4` while in normal mode.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`:set tabstop=4`命令用于将Vim中的制表符宽度设置为4个空格。要使用此命令，请在正常模式下输入`:set tabstop=4`。'
- en: 'Let’s try this one. I will first set the tabstop to 4, enter the insert mode
    and then add a tab to the beginning of the second line in the file and below are
    the results:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 试试这个。我将首先将tabstop设置为4，进入插入模式，然后在文件第二行的开头添加一个制表符，结果如下：
- en: '![](../Images/ccb7bc0e5dce69971feb5ed5f7ecfc03.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ccb7bc0e5dce69971feb5ed5f7ecfc03.png)'
- en: 'Now let’s change the tabstop size to 8 and see how it changes:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将tabstop大小更改为8，看看它如何变化：
- en: '![](../Images/49398ff13b736ce61fb2a72cfea4f630.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/49398ff13b736ce61fb2a72cfea4f630.png)'
- en: Note that the change was applied automatically the the existing tab in the file
    and the tab size was increased from 4 to 8, as shown in the picture above.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，现有的制表符在文件中自动应用了更改，制表符大小从4增加到8，如上图所示。
- en: 24\. “:set expandtab” — Use Spaces Instead of Tabs
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 24\. “:set expandtab” — 使用空格代替制表符
- en: The `:set expandtab` command is used to replace tabs with spaces in Vim. To
    use this command, type `:set expandtab` while in normal mode. This one is self-explanatory
    so let’s move to the next command.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`:set expandtab`命令用于在Vim中将制表符替换为空格。要使用此命令，请在正常模式下输入`:set expandtab`。这个命令一目了然，我们可以继续下一个命令。'
- en: 25\. “:set syntax=python” — Syntax Highlighting
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 25\. “:set syntax=python” — 语法高亮
- en: The `:set syntax=python` command is used to enable syntax highlighting for Python
    code in Vim. To use this command, type `:set syntax=python` while in normal mode.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`:set syntax=python`命令用于在Vim中启用Python代码的语法高亮显示。要使用此命令，请在正常模式下输入`:set syntax=python`。'
- en: 'I was tempted to include this one because it is related to what I do and I
    use Python on a daily basis. In order to test this, let’s take the following steps:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我很想包括这一点，因为它与我的工作有关，并且我每天都在使用 Python。为了测试这一点，让我们采取以下步骤：
- en: '1\. Open a new Python file using Vim by: `vim demo.py` 2\. Paste the following
    command (selected from my post about [Multivariate Analysis](https://medium.com/towards-data-science/multivariate-analysis-going-beyond-one-variable-at-a-time-5d341bd4daca))'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 使用 Vim 打开一个新的 Python 文件，方法是：`vim demo.py` 2\. 粘贴以下命令（从我关于[多变量分析](https://medium.com/towards-data-science/multivariate-analysis-going-beyond-one-variable-at-a-time-5d341bd4daca)的帖子中选择）
- en: '[PRE3]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Below are the results that I see:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我看到的结果：
- en: '![](../Images/df10406a4309b8f42ecd2445af99f9e4.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/df10406a4309b8f42ecd2445af99f9e4.png)'
- en: '3\. Then I set the syntax to Python using: `:set syntax=python`'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 然后我通过使用`:set syntax=python`将语法设置为 Python
- en: '4\. Then I turn on the syntax using: `:syntax on`'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 然后我通过使用`:syntax on`来开启语法高亮
- en: 'Below are the results, which follows Python syntax as expected:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是结果，它符合预期的 Python 语法：
- en: '![](../Images/989e8d812fb7f9a3f3c7a48b45eb53cb.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/989e8d812fb7f9a3f3c7a48b45eb53cb.png)'
- en: As expected, the Python syntax is recognized and color-coded.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，Python 语法得到了识别和颜色编码。
- en: Conclusion
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this post we introduced Vim, a versatile text editor within the Command Line
    Interface (CLI), utilized by programmers and advanced users. Then we walked through
    some of the most common commands used in Vim along with examples for each. I hope
    that by the end of this tutorial, you feel more comfortable about using Vim going
    forward and start integrating it in your day to day text editing activities.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们介绍了 Vim，这是一个在命令行界面（CLI）中使用的多功能文本编辑器，被程序员和高级用户所利用。然后我们逐步讲解了一些在 Vim 中最常用的命令及其示例。我希望通过本教程，你对使用
    Vim 感到更加舒适，并开始将其整合到你日常的文本编辑活动中。
- en: Thanks for Reading!
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 感谢阅读！
- en: If you found this post helpful, please [follow me on Medium](/@fmnobar) and
    subscribe to receive my latest posts!
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得这篇文章对你有帮助，请[在 Medium 上关注我](/@fmnobar)并订阅以接收我最新的帖子！
