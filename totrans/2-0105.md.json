["```py\nlibrary(cronR)\n\nf   <- system.file(package = \"cronR\", \"extdata\", \"helloworld.R\")\ncmd <- cron_rscript(f)\n\n## schedule R script daily at 7 am\ncron_add(\n  command = cmd,\n  frequency = 'daily',\n  at = '7AM',\n  id = 'my_first_cronR',\n  description = 'schedule R script daily at 7 am'\n)\n\n## schedule same R script every 15 mins\ncron_add(cmd,\n         frequency = '*/15 * * * *',\n         id = 'my_second_cronR',\n         description = 'schedule same R script every 15 mins')\n```", "```py\n# functions\nget_data <- function() {\n  print(\"getting data\")\n}\n\ntransform_data1 <- function() {\n  print(\"transforming data 1\")\n}\n\ntransform_data2 <- function() {\n  print(\"transforming data 2\")\n}\n\nloading_data <- function() {\n  print(\"loading data\")\n}\n\n# _targets.R file\nlibrary(targets)\ntar_option_set(packages = c(\"readr\", \"dplyr\", \"ggplot2\"))\nlist(\n  tar_target(extraction, get_data()),\n  tar_target(transform_data, transform_data1_1(extraction)),\n  tar_target(transform_data2, transform_data2(extraction)),\n  tar_target(loading_data, loading_data(transform_data, transform_data2))\n)\n```", "```py\nid: \"r_script\"\ntype: \"io.kestra.core.tasks.scripts.Bash\"\ncommands:\n- 'Rscript my_awesome_R.R'\n```", "```py\nrun_this = BashOperator(\n    task_id=\"my_first_r_task\",\n    bash_command=\"Rscript my_awesome_R.R\",\n)\n```", "```py\n## Data Loader (Extraction)\n## You can download dataset here https://www.kaggle.com/datasets/yanmaksi/big-startup-secsees-fail-dataset-from-crunchbase\nload_data <- function() {\n    df <- read.csv(file='~/Downloads/big_startup_secsees_dataset.csv')\n    ## Access scheduler metadata or user defined variables\n    ## This part is powerful that you can access data orchestration metadata at runtime\n    df['date'] <- global_vars['execution_date']\n    df\n}\n\n## --------------------------------------------------------------##\n\n## Trasformation (Transformation)\nlibrary(\"pacman\") ## install pacman before\np_load(dplyr) ## dplyr makes it easier to recognize the dataframe column\n\ntransform <- function(df_1, ...) {\n    ## filter on USA startup\n    df_1 <- filter(df_1, country_code == 'USA')\n    df_1\n}\n\n## --------------------------------------------------------------##\n\n## Data Exporter (Loading)\nexport_data <- function(df_1, ...) {\n    # You can write to file to locally\n    write.csv(df_1, \"~/Downloads/usa_startup_dataset.csv\")\n}\n```", "```py\nsubprocess.run(\n    [\n        'Rscript',\n        '--vanilla',\n        file_path\n    ],\n    check=True,\n)\n```"]