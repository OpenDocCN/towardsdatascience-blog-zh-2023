["```py\nmodel = RandomizedSearchCV(\n    XGBRFClassifier(random_state=1234), \n    dict(n_estimators=stats.randint(50,300)), \n    n_iter=20, random_state=1234,\n    cv=5, n_jobs=-1, \n    refit=False, error_score='raise',\n    scoring={\n        'fbeta': make_scorer(fbeta_score, beta=0.1), \n        'roc_auc':'roc_auc', \n        'average_precision':'average_precision'\n    },\n).fit(X, y)\n```", "```py\nfrom sklearn.metrics import fbeta_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.base import clone, BaseEstimator, ClassifierMixin\n\nclass ThresholdClassifier(BaseEstimator, ClassifierMixin):\n\n    def __init__(self, estimator, refit=True, val_size=0.3):\n        self.estimator = estimator\n        self.refit = refit\n        self.val_size = val_size\n\n    def fit(self, X, y):\n\n        def scoring(th, y, prob):\n            pred = (prob > th).astype(int)\n            return 0 if not pred.any() else \\\n                -fbeta_score(y, pred, beta=0.1) \n\n        X_train, X_val, y_train, y_val = train_test_split(\n            X, y, stratify=y, test_size=self.val_size, \n            shuffle=True, random_state=1234\n        )\n\n        self.estimator_ = clone(self.estimator)\n        self.estimator_.fit(X_train, y_train)\n\n        prob_val = self.estimator_.predict_proba(X_val)[:,1]\n        thresholds = np.linspace(0,1, 200)[1:-1]\n        scores = [scoring(th, y_val, prob_val) \n                    for th in thresholds]\n        self.score_ = np.min(scores)\n        self.th_ = thresholds[np.argmin(scores)]\n\n        if self.refit:\n            self.estimator_.fit(X, y)\n        if hasattr(self.estimator_, 'classes_'):\n            self.classes_ = self.estimator_.classes_\n\n        return self\n\n    def predict(self, X):\n        proba = self.estimator_.predict_proba(X)[:,1]\n        return (proba > self.th_).astype(int)\n\n    def predict_proba(self, X):\n        return self.estimator_.predict_proba(X)\n```"]