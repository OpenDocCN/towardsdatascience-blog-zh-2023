["```py\nimport pandas as pd\n\npois = pd.read_csv(\"pois.csv\")\noutlets = pd.read_csv(\"outlets.csv\")\n```", "```py\n{'type': 'FeatureCollection',\n 'features': [{'type': 'Feature',\n   'properties': {},\n   'geometry': {'coordinates': [[[80.19371259270753, 6.307037132469091],\n      [80.19371259270753, 6.072771744744614],\n      [80.4434199500783, 6.072771744744614],\n      [80.4434199500783, 6.307037132469091],\n      [80.19371259270753, 6.307037132469091]]],\n    'type': 'Polygon'}}]}\n```", "```py\nfrom h3 import h3\nfrom shapely.geometry import Polygon,mapping\n\ndef dict_to_shapely(d):\n    coords = d['features'][0]['geometry']['coordinates'][0]\n    return Polygon(coords)\n\ndef polygon_to_h3(polygon,resolution):\n    polygon = mapping(polygon)\n    hexas = h3.polyfill(polygon,res=resolution,geo_json_conformant=True)\n    return list(set(hexas))\n\n#read geojson file\nwith open(\"sample-bbx.geojson\",'r') as f:\n    polygon_dict = json.loads(f.read())\n    shapely_polygon = dict_to_shapely(polygon_dict)\n    f.close()\n\nh3_idx = polygon_to_h3(shapely_polygon,resolution=8)\nh3_idx = pd.DataFrame(pd.Series(h3_idx,name='h3'))\n```", "```py\nscores = 1- (pois['category'].value_counts(normalize=True)) * 3\nscores_dict = dict(zip(scores.index,scores.values * 100))\n\npois['weight'] = pois['category'].map(scores_dict)\n\ngrouped_df = pois.groupby(\"h3\").agg(\n    counts=('category','count'),\n    score = ('weight','sum')\n).sort_values(by='counts',ascending=False)\n\ngrouped_df.head()\n```", "```py\ngrouped_df.reset_index(inplace=True)\nfull_scored_idx = h3_idx.merge(grouped_df,on='h3',how='left').fillna(0)\n\nfull_scored_idx['score'].plot.hist(color='skyblue',edgecolor='black',bins=5,figsize=(10,8))\nplt.title(\"Score Distibutin\")\nplt.xlabel(\"Score\")\nplt.ylabel(\"Frequency\")\nplt.grid(visible=True, linestyle='-.')\nplt.show()\n```", "```py\nh3_to_score = dict(zip(full_scored_idx['h3'],full_scored_idx['score']))\nget_krings = lambda h:h3.k_ring(h,k=3)\noutlets_h3['rings'] = outlets_h3['h3'].apply(get_krings)\n\nprint(outlets_h3[['category','h3','rings']])\n```", "```py\noutlets_exploded = outlets_h3.explode(column='rings')\noutlets_exploded['weight'] = outlets_exploded['rings'].map(h3_to_score)\n\n#can contains hexagons not relavent to current region\noutlets_exploded.dropna(inplace=True)\n\n#final scoring for outlets\noutlets_exploded.groupby(\"category\").agg(outlet_importance=(\"weight\",'sum'))\n```"]