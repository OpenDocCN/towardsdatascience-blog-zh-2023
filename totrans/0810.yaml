- en: 'Enhanced Object Detection: How To Effectively Implement YOLOv8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/enhanced-object-detection-how-to-effectively-implement-yolov8-afd1bf6132ae](https://towardsdatascience.com/enhanced-object-detection-how-to-effectively-implement-yolov8-afd1bf6132ae)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A practical guide to object detection in images, videos, and real-time webcam
    feed using both CLI and Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://thomasdorfer.medium.com/?source=post_page-----afd1bf6132ae--------------------------------)[![Thomas
    A Dorfer](../Images/9258a1735cee805f1d9b02e2adf01096.png)](https://thomasdorfer.medium.com/?source=post_page-----afd1bf6132ae--------------------------------)[](https://towardsdatascience.com/?source=post_page-----afd1bf6132ae--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----afd1bf6132ae--------------------------------)
    [Thomas A Dorfer](https://thomasdorfer.medium.com/?source=post_page-----afd1bf6132ae--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----afd1bf6132ae--------------------------------)
    ·7 min read·Mar 23, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7648a5890412b71ee953a2a079374602.png)'
  prefs: []
  type: TYPE_IMG
- en: Video by [Camilo Calderón](https://www.pexels.com/@camilo-calderon-3343529/)
    on [Pexels](https://www.pexels.com/video/a-video-footage-of-busy-street-4997787/).
    Converted to GIF format by the Author.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Object detection, a subfield of computer vision, is primarily concerned with
    the identification and localization of objects in images or videos with a certain
    degree of confidence. An identified object is generally annotated with a bounding
    box, which provides information to the viewer about the object’s nature and location
    in the scene.
  prefs: []
  type: TYPE_NORMAL
- en: 'In 2015, the [debut of **YOLO**](https://arxiv.org/abs/1506.02640), or **You
    Only Look Once**, shook the world of computer vision as its system was capable
    of real-time object detection with astounding accuracy and speed. Since then,
    YOLO has undergone several iterations of improvements in prediction accuracy and
    efficiency, eventually culminating in the release of its latest family member:
    **YOLOv8** by [Ultralytics](https://github.com/ultralytics/ultralytics).'
  prefs: []
  type: TYPE_NORMAL
- en: 'YOLOv8 comes in five versions: nano (n), small (s), medium (m), large (l),
    and extra large (x). Their respective improvements can be demonstrated by their
    mean average precisions (mAP) and latencies, evaluated by the the [COCO val2017](http://cocodataset.org/)
    dataset.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1d7acc0bee95ad83fd133a136f70ce50.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by [Ultralytics](https://github.com/ultralytics/ultralytics). License:
    [GNU General Public License](https://github.com/ultralytics/ultralytics/blob/main/LICENSE).'
  prefs: []
  type: TYPE_NORMAL
- en: Compared to previous versions, YOLOv8 is not only faster and more accurate,
    but it also requires fewer parameters to achieve its performance and, as if that
    wasn’t enough, comes with an intuitive and easy-to-use command-line interface
    (CLI) as well as a [Python package](https://pypi.org/project/ultralytics/), providing
    a more seamless experience for users and developers.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I will demonstrate how YOLOv8 can be applied to detect objects
    in static images, videos, and a live webcam using both CLI and Python.
  prefs: []
  type: TYPE_NORMAL
- en: Without further ado, let’s get into it!
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All you need to do to get started with YOLOv8 is to run the following command
    in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will install YOLOv8 via the `ultralytics` pip package.
  prefs: []
  type: TYPE_NORMAL
- en: Image Detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Object detection in static images has proven useful in a variety of domains,
    such as surveillance, medical imaging, or retail analytics. Whatever domain you
    choose to apply your detection system, YOLOv8 has made it incredibly simple for
    you to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Below is the raw image that we’re going to perform object detection on.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/72f307a8e29880c10ac55e9b51f8d2ea.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [James Coleman](https://unsplash.com/@jhc) on [Unsplash](https://unsplash.com/photos/jViepQKI01Q).
  prefs: []
  type: TYPE_NORMAL
- en: In order to run YOLOv8, we will look into both CLI and Python implementations.
    While in this particular case we’ll be using a `jpg` image, YOLOv8 supports a
    variety of different [image formats](https://docs.ultralytics.com/modes/predict/#image-formats).
  prefs: []
  type: TYPE_NORMAL
- en: CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Assuming we’d like to run the extra large YOLOv8x on our image (let’s call
    it `img.jpg`), the following command can be put into the CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we specify the following arguments: `detect` to use object detection,
    `predict` to perform a prediction task, `model` to select the model version, `source`
    to provide the file path of our image, and `save` to save the processed image
    with the object’s bounding boxes and their predicted classes and class probabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Python, the exact same task can be achieved with the following intuitive
    and low-code solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Whether you use the CLI or Python; in either case, the saved, processed image
    looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/31f70aa8124121a131a552d4f565fc2c.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [James Coleman](https://unsplash.com/@jhc) on [Unsplash](https://unsplash.com/photos/jViepQKI01Q).
    Processed with YOLOv8 by the Author.
  prefs: []
  type: TYPE_NORMAL
- en: We can clearly see the bounding boxes around every object it detected, as well
    as their corresponding class labels and probabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Video Detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Performing object detection on video files is almost identical to image files,
    with the only difference being the source file format. Just like with images,
    YOLOv8 supports a variety of different [video formats](https://docs.ultralytics.com/modes/predict/#video-formats)
    that can be fed as an input to the model. In our case, we’ll be using an `mp4`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s again look at both CLI and Python implementations. For faster computation,
    let’s now use the YOLOv8m model instead of the extra large version.
  prefs: []
  type: TYPE_NORMAL
- en: CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'First, let’s inspect our raw, `vid.mp4` file before we perform object detection
    on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/69a4afce1a59ac810aa7ccb5fa3bed97.png)'
  prefs: []
  type: TYPE_IMG
- en: Video by [Camilo Calderón](https://www.pexels.com/@camilo-calderon-3343529/)
    on [Pexels](https://www.pexels.com/video/a-video-footage-of-busy-street-4997787/).
    Converted to GIF format by the Author.
  prefs: []
  type: TYPE_NORMAL
- en: The video shows a scene of a busy city with lots of traffic, including cars,
    busses, trucks, and cyclists, as well as some people on the right side apparently
    waiting for a bus.
  prefs: []
  type: TYPE_NORMAL
- en: 'After processing this file using YOLOv8’s medium version, we get the following
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7648a5890412b71ee953a2a079374602.png)'
  prefs: []
  type: TYPE_IMG
- en: Video by [Camilo Calderón](https://www.pexels.com/@camilo-calderon-3343529/)
    on [Pexels](https://www.pexels.com/video/a-video-footage-of-busy-street-4997787/).
    Processed with YOLOv8m and converted to GIF format by the Author.
  prefs: []
  type: TYPE_NORMAL
- en: Again, we can see that YOLOv8m does a really good job at accurately capturing
    the objects in the scene. It even detects smaller objects that are part of a larger
    whole, such as a person on a bicycle wearing a backpack.
  prefs: []
  type: TYPE_NORMAL
- en: Live Detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, let’s take a look at what is required to detect objects in a live webcam
    feed. To do so, I’ll use my personal webcam and, just like before, both CLI and
    Python approaches.
  prefs: []
  type: TYPE_NORMAL
- en: To reduce the latency and subsequently the lag in the video, I’ll be using the
    light-weight nano version of YOLOv8.
  prefs: []
  type: TYPE_NORMAL
- en: CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Most of these arguments are identical to what we have seen above for image and
    video files, with the exception of `source`, which allows us to specify which
    video source to use. In my case, it’s the inbuilt webcam (0).
  prefs: []
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Again, we can perform the same task in Python with an ultra low-code solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an illustration of what YOLOv8n looks like on a live webcam:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1eaea037e2dd5c0a26e7956db86e34c8.png)'
  prefs: []
  type: TYPE_IMG
- en: GIF by the Author. Recorded from webcam using YOLOv8n.
  prefs: []
  type: TYPE_NORMAL
- en: Impressive! Despite the rather low video quality and poor lighting conditions,
    it still captures the objects pretty well and even detects some objects in the
    background, such as the olive oil and vinegar bottles on the left and the sink
    on the right.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting that while these intuitive CLI commands and low-code Python
    solutions are great ways to quickly get started on an object detection task, they
    do have limitations when it comes to custom configurations. For instance, if we’d
    like to configure the aesthetics of the bounding boxes or perform a simple task
    such as counting and displaying the number of objects that are being detected
    at any given time, we would have to code up our own custom implementation using
    packages such as [cv2](https://pypi.org/project/opencv-python/) or [supervision](https://pypi.org/project/supervision/).
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, the webcam footage above has been recorded using the following Python
    code in order to adjust the webcam’s resolution and custom-define the bounding
    boxes and their annotations. (Note: This was mainly done to make the GIF above
    more presentable. The CLI and Python implementations shown above would suffice
    to produce similar outcomes.)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'While the details in this code are beyond the scope of this article, here’s
    a great reference that uses a similar approach in case you are interested in upping
    your object detection game:'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: YOLOv8 does not only outperform its predecessors in accuracy and speed, but
    it also considerably improves user experience through an extremely easy-to-use
    CLI and low-code Python solutions. It also comes in five different model versions,
    providing the user with the opportunity to choose depending on their individual
    needs and tolerance limits for latency and accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: Whether your goal is to perform object detection on static images, videos, or
    a live webcam, YOLOv8 enables you to do this in a seamless manner. However, should
    your application require custom configurations, you may have to resort to additional
    computer vision packages such as `cv2` and `supervision`.
  prefs: []
  type: TYPE_NORMAL
- en: More Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[ultralytics/ultralytics: NEW — YOLOv8 🚀 in PyTorch > ONNX > CoreML > TFLite
    (github.com)](https://github.com/ultralytics/ultralytics)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[YOLOv8 Docs (ultralytics.com)](https://docs.ultralytics.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[YOLOv8 Object Counting in Real-time with Webcam, OpenCV and Supervision —
    YouTube](https://www.youtube.com/watch?v=QV85eYOb7gk)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Liked this article?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s connect! You can find me on [Twitter](https://twitter.com/ThomasADorfer)
    and [LinkedIn](https://www.linkedin.com/in/thomasdorfer/).
  prefs: []
  type: TYPE_NORMAL
- en: If you like to support my writing, you can do so through a [Medium Membership](https://thomasdorfer.medium.com/membership),
    which provides you access to all my stories as well as those of thousands of other
    writers on Medium.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@thomasdorfer/membership?source=post_page-----afd1bf6132ae--------------------------------)
    [## Join Medium with my referral link - Thomas A Dorfer'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Thomas A Dorfer (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@thomasdorfer/membership?source=post_page-----afd1bf6132ae--------------------------------)
  prefs: []
  type: TYPE_NORMAL
