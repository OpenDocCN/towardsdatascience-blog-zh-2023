["```py\nsquared_numbers = []\nfor number in numbers:\n    if number % 2 == 0:\n        squared = number ** 2\n        squared_numbers.append(squared)\n```", "```py\nsquared_numbers = [i**2 for i in numbers if i % 2 == 0]\n```", "```py\n>>> eur = [1, 2, 3, 4, 5]\n>>> usd = list(map(lambda x: x / 0.939276, eur))\n>>> usd\n[1.0646497940967299,\n 2.1292995881934598,\n 3.1939493822901897,\n 4.2585991763869195,\n 5.323248970483649]\n```", "```py\n# predefined conversion function\ndef eur_to_usd(x):\n    return x / 0.939276\n```", "```py\n>>> lst = list(range(1000000))\n\n# list comprehension\n>>> %timeit -r 10 -n 10 [i / 0.939276 for i in lst]\n163 ms ± 4.96 ms per loop (mean ± std. dev. of 10 runs, 10 loops each)\n\n# map with predefined input function\n>>> %timeit -r 10 -n 10 list(map(eur_to_usd, lst))\n197 ms ± 4.33 ms per loop (mean ± std. dev. of 10 runs, 10 loops each)\n\n# map with lambda function\n>>> %timeit -r 10 -n 10 list(map(lambda x: x / 0.939276, lst))\n204 ms ± 4.28 ms per loop (mean ± std. dev. of 10 runs, 10 loops each)\n```", "```py\n>>> numbers = [1, 2, 3, 4, 5]\n>>> filtered = list(filter(lambda x: x % 2 == 0, numbers))\n>>> filtered\n[2, 4]\n```", "```py\n# predefined filter function\ndef fil(x):\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n```", "```py\n>>> lst = list(range(1000000))\n\n# list comprehension\n>>> %timeit -r 10 -n 10 [i for i in lst if i % 2 == 0]\n84.6 ms ± 2.24 ms per loop (mean ± std. dev. of 10 runs, 10 loops each)\n\n# filter with predefined filter function\n>>> %timeit -r 10 -n 10 list(filter(fil, lst))\n134 ms ± 6.39 ms per loop (mean ± std. dev. of 10 runs, 10 loops each)\n\n# filter with lambda function\n>>> %timeit -r 10 -n 10 list(filter(lambda x: x % 2 == 0, lst))\n159 ms ± 6.67 ms per loop (mean ± std. dev. of 3 runs, 10 loops each)\n```", "```py\n>>> from functools import reduce\n>>> integers = [1, 2, 3, 4, 5]\n>>> reduce(lambda x, y: x * y, integers)\n120\n```", "```py\n>>> integers = [1, 2, 3, 4, 5]\n>>> product = 1\n>>> [product := product * num for num in numbers]\n>>> product\n120\n```", "```py\n>>> from math import prod\n>>> integers = [1, 2, 3, 4, 5]\n>>> prod(integers)\n120\n```", "```py\n>>> integers = list(range(1, 10001))\n\n# using reduce\n>>> %timeit -r 10 -n 100 reduce(lambda x, y: x * y, integers)\n24.5 ms ± 299 µs per loop (mean ± std. dev. of 10 runs, 100 loops each)\n\n# using math.prod\n>>> from math import prod\n>>> %timeit -r 10 -n 100 prod(integers)\n23.8 ms ± 707 µs per loop (mean ± std. dev. of 10 runs, 100 loops each)\n```"]