- en: The New Best Python Package for Visualising Network Graphs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/the-new-best-python-package-for-visualising-network-graphs-e220d59e054e](https://towardsdatascience.com/the-new-best-python-package-for-visualising-network-graphs-e220d59e054e)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A guide on who should use it, when to use it, how to use it, and why I was wrong
    before…
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@bl3e967?source=post_page-----e220d59e054e--------------------------------)[![Benjamin
    Lee](../Images/a369931c73019143609812354c773151.png)](https://medium.com/@bl3e967?source=post_page-----e220d59e054e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e220d59e054e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e220d59e054e--------------------------------)
    [Benjamin Lee](https://medium.com/@bl3e967?source=post_page-----e220d59e054e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e220d59e054e--------------------------------)
    ·10 min read·Nov 23, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/777d06e439c1fcdd3bf93623df5bf919.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
- en: Photo by [Chris Ried](https://unsplash.com/@cdr6934?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, I will introduce to you a Python package I stumbled upon that
    is, in my humble opinion, the *BEST* tool I have seen so far for visualising network
    graphs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Readers who are data scientists in need of a compact yet powerful visualisation
    package for quick prototyping, exploratory data analysis or debugging their network
    models are best suited for the contents below.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'The package that we will be inspecting is called: `[gravis](https://robert-haas.github.io/gravis-docs/)`'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://robert-haas.github.io/gravis-docs/?source=post_page-----e220d59e054e--------------------------------)
    [## gravis — gravis 0.1.0 documentation'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Edit description
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: robert-haas.github.io](https://robert-haas.github.io/gravis-docs/?source=post_page-----e220d59e054e--------------------------------)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'I personally use graph neural networks a lot in my day-to-day job, and quite
    frankly, I am annoyed that I didn’t know about this package earlier as it would
    have saved me a lot of time and energy trying to work around the shortcomings
    of the packages (`ipysigma` and `pyvis`) that I wrote about here:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@bl3e967/the-two-best-tools-for-plotting-interactive-network-graphs-8d352aa894d4?source=post_page-----e220d59e054e--------------------------------)
    [## The Two Best Tools for Plotting Interactive Network Graphs'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: A guide on how to use them, when to use them, and who should use them.
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@bl3e967/the-two-best-tools-for-plotting-interactive-network-graphs-8d352aa894d4?source=post_page-----e220d59e054e--------------------------------)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '**What makes a network visualisation package the best?**'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A visualisation package needs to:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Create a fully interactive visualisation, where I can click on nodes and edges
    and view its attributes, plus drag and drop them.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convenient to implement — doesn’t require too much code (like Dash), but powerful
    and flexible enough for most use cases.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moderately good scalability to the number of nodes and edges — we’re not making
    something for prod, but we need it to handle hundreds of nodes at least.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compatible with commonly used network packages in Python such as `networkx`.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What will we be testing the package on?
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Broadly speaking, we can qualify graphs according to whether they are homogenous
    or heterogeneous, or have directed or undirected edges.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: We will therefore test the package on two types of graphs that we will generate
    using `networkx`,
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: (1) A homogenous, undirected graph
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: (2) A heterogeneous, directed multigraph
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: as these are the two extremes of what one might encounter. If you are unfamiliar
    with the terminology, I suggest you visit [my previous article](https://medium.com/@bl3e967/the-two-best-tools-for-plotting-interactive-network-graphs-8d352aa894d4)
    and have a quick read of the introduction.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: TL;DR
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Homogenous = 1 type of node
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heterogeneous = multiple types of nodes and/or edges
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Undirected = Edges have no direction
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Directed = Edges have a direction
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-graph = Two nodes can have multiple edges between them
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set Up and Installation
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The package can be simply installed via pip:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We also need to install the below packages in order to generate our test graphs.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can also find all the code I use below in this repository.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/bl3e967/medium-articles?tab=readme-ov-file&source=post_page-----e220d59e054e--------------------------------)
    [## GitHub - bl3e967/medium-articles: The accompanying code to my medium articles.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: The accompanying code to my medium articles. . Contribute to bl3e967/medium-articles
    development by creating an account…
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/bl3e967/medium-articles?tab=readme-ov-file&source=post_page-----e220d59e054e--------------------------------)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Homogenous Undirected Network Example
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, to start us off, we need a graph to plot. We will write a simple graph generator
    function which will return a `networkx.Graph` object. We will add attributes to
    its node and edges to simulate data a data scientist might see in their work.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Graph Generator
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We use a random graph generator, for which I have selected the `networkx.dual_barabasi_albert_graph`
    method to simulate a scale-free network.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: We add node level attributes such as `degree`, `betweenness_centrality`, and
    some made up features with random numbers which we imaginatively call `feature1`,
    `feature2`, `feature3`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: We do the same for the edges as well, and add features `feature1` and `feature2`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: We finally label each node with a `uuid` (**U**niversally **U**nique **ID**entifier)
    to make things look more like real data.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When we plot the graph using `networkx` we get the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/a5f139c6566c84740ddb4996cf956faa.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: Test Graph of 50 nodes, homogenous and undirected.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Plotting with gravis
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now move on to plotting this graph using `gravis`. It is very simple to get
    going with this package and in full, it looks like this.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Let’s break this down into chunks.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Let’s assume we want to scale our node sizes according to their `betweenness_centrality`
    values and our edge thicknesses by their `feature1` values.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: We set `use_node_size_normalization=True` such that the node sizes are set according
    to normalised values of the `betweenness_centrality`, and we define `node_size_normalization_min`
    and `node_size_normalisation_max` to set the min and max node sizes we want.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We use equivalent arguments for edges to control their thickness:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Finally, I set the `many_body_force_strength` parameter to `-500` to make the
    edges longer than it is by default, to make the graph clearer to see.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: The resulting plot is shown below.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cae6b306007fd88f20ca289b6e741468.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
- en: Our homogenous, undirected graph visualised using gravis
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Adding Colour
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to scaling the node sizes by `betweenness_centrality`, I also want
    to colour them according to this as well.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: We can achieve this simply by adding a `color` attribute to the nodes. I can
    use named colours such as ‘red’, ‘blue’, ‘green’, and I won’t bother trying to
    do that here as that is too trivial. Let’s try and use a colour scale instead.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: I want to scale the values according to the `winter` colourmap found in `matplotlib`
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2ccfb1b61fd659882bd03742eeceacbd.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
- en: Low centrality values will be mapped to blue, high values will be mapped to
    green.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: I have this very helpful `MplColorHelper` class that I have used many times
    in my projects, that will convert a numeric value into an `RGB` string.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: All I need to specify is the min-max values we want to scale the colormap over.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'So, to colour nodes according to `betweenness_centrality` we do the below:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: and for edges, let’s colour them according to `feature1`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And voila, let there be colour:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5dfc4643e5b0559891b1200af1223150.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: Homogenous undirected network with node and edge colours
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Finally, `gravis` allows us to display any kind of free text stored on each
    node or edge using an information bar on the bottom of the visualisation.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use this to display our feature values — we format some text with the
    feature values, and save it to an attribute named `click`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: And now we are able to display our feature values very nicely using a panel
    on the bottom of the screen (I’ve made the graphs extra large here so you can
    see it as you would on screen).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7256d3596a423315c06e017782d58000.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
- en: Visualisation with node feature details displayed in the bottom panel.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/41aabc3b407209bffbd2126b562de312.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
- en: Visualisation with edge feature details displayed in the bottom panel
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: We have a fully interactive visualisation that allows us to drag nodes, and
    a side-bar to change the settings for the node and edge visualisation, labels,
    and the layout algorithm.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'It also allows you to export the visualisation to an image using the settings
    bar — no extra code required! Finally, if you wished to share this interactive
    graph with anyone, you can export it as a self-contained HTML file:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Heterogeneous Directed Network Example
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now try and visualise a heterogeneous directed network using `gravis`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Graph Generator
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Again, we need a function to return such a graph for us. We will use the same
    function as before, but now using the `nx.scale_free_graph` function.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: We also add in a `node_type` attribute to simulate a heterogeneous graph. The
    first 25 nodes will be `node_type = 0` and the remaining will be `node_type =
    1`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Plotting this using `nx.draw` gives us this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a4eb5437f34ca8dec20b075ca199fc21.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: Heterogeneous directed multigraph, numbered to display which nodes are of which
    type.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Plotting with gravis
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'How we plot for heterogeneous graphs is exactly the same as above. We can use
    the same methods to:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: generate a test multi-digraph
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: add feature values for nodes and edges
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: add colour to nodes and edges according to an attribute value
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All we need to do now is specify the shape of each node, as now we deal with
    multiple different node types.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'For our graph generator function `get_new_test_digraph`, we just need to add
    this line of code in our `for` loop over nodes:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: where for our purposes of simulating real-life data, we set the first 25 nodes
    in our graphs to be of `node_type = 0`, else `node_type = 1`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Next, we can use the `shape` attribute in gravis to specify the node shapes
    we want to use for each node.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will set `node_type = 0` to be circles, and rectangles for `node_type
    = 1`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We are now ready to plot our network in `gravis`. Notice we added the `edge_curvature`
    argument to be non-zero. This is necessary to prevent edges between two nodes
    from overlapping when there are many of them.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](../Images/1383de024fac4f931caec612ca6fef5d.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
- en: MultiDiGraph plotted on gravis with edge curvature and shapes set depending
    on the node type.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Voila! Simple and easy. You can see the multiple connections between some of
    the nodes on the left and the top of the graph.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Summary — Why I think Gravis is the best
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have already mentioned that I wrote about two other packages where I insisted
    they were the best — `pyvis` and `ipysigma`. I was convinced of this at the time
    as I had been using them myself for my day-to-day work.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: However, they have their unique issues which, in hindsight, made them suboptimal
    and this was why I covered both of them in the same blog! Depending on the use
    case, one of them was better than the other and I recommended users on which one
    to use when.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: This is why I was SHOCKED when I found `gravis`, as it seemed like someone had
    thought the exact same thing and developed this package to *combine* the pros
    of `pyvis` and `ipysigma` to make a perfect tool.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么我在发现`gravis`时感到震惊，因为它似乎有人完全按照相同的思路开发了这个包，*结合*了`pyvis`和`ipysigma`的优点，制作了一个完美的工具。
- en: 'Firstly, `gravis` provides both a *fully* interactive UI as you can:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`gravis`提供了*完全*互动的用户界面，你可以：
- en: Not only click on nodes and edges to display information but also allows the
    user to drag and drop nodes, very useful for complicated networks where the physics
    engine may need manual tweaking (and lacking in `ipysigma`)
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不仅可以点击节点和边以显示信息，还允许用户拖放节点，这对于需要手动调整物理引擎的复杂网络非常有用（而`ipysigma`缺乏这一点）。
- en: The node or edge information is displayed through a bar on the screen that neatly
    houses the information and also allows one to copy information from it (*a small
    but huge functionality that was lacking in* `pyvis` *that gave me a lot of headaches
    at my work*).
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点或边的信息通过屏幕上的一个栏展示，该栏整齐地容纳了信息，还允许从中复制信息（*这是一个小但非常重要的功能，`pyvis`中缺乏这一点，这让我在工作中非常困扰*）。
- en: Provides a different side-bar through which you can tune the physics engine
    parameters, change the settings for node and edge visualisation, and buttons through
    which you can export the graph as images.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供了一个不同的侧边栏，通过它你可以调整物理引擎参数，改变节点和边的可视化设置，并通过按钮将图形导出为图像。
- en: Plus it can display multiple edges between nodes (again, something `ipysigma`
    was incapable of doing).
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另外，它可以显示节点之间的多个边（再次说明，`ipysigma`无法做到这一点）。
- en: Therefore, `gravis` removes the need to pick and choose between `pyvis` and
    `ipysigma` as it has morphed the two packages together into one, whilst maintaining
    all of their advantages.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`gravis`消除了在`pyvis`和`ipysigma`之间进行选择的必要性，因为它将这两个包合并为一个，同时保持了它们的所有优点。
- en: In short, it ticks all the boxes and does its job well.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，它满足了所有要求，并且表现出色。
- en: I highly recommend this package.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈推荐这个包。
- en: Let me know what you think of it in the comments section, and if you like my
    article please give a clap or share with anyone who might be interested.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在评论区告诉我你的想法，如果你喜欢我的文章，请鼓掌或者分享给可能感兴趣的人。
