["```py\n# Easy import of data sets\npip install datazets\n\n# One-hot encoding\npip install df2onehot\n\n# PCA analysis. Create explainable biplots\npip install pca\n\n# Clustering with automatic evaluation\npip install clusteval\n\n# Making beautifull scatter plots\npip install scatterd\n\n# Making beautifull interactive scatter plots\npip install d3blocks\n\n# HNET for association analysis for the clusterlabels\npip install hnet\n```", "```py\n# Import library\nimport datazets as dz\n# Get the data science salary data set\ndf = dz.get('ds_salaries.zip')\n\n# The features are as following\ndf.columns\n\n# 'work_year'          > The year the salary was paid.\n# 'experience_level'   > The experience level in the job during the year.\n# 'employment_type'    > Type of employment: Part-time, full time, contract or freelance.\n# 'job_title'          > Name of the role.\n# 'salary'             > Total gross salary amount paid.\n# 'salary_currency'    > Currency of the salary paid (ISO 4217 code).\n# 'salary_in_usd'      > Converted salary in USD.\n# 'employee_residence' > Primary country of residence.\n# 'remote_ratio'       > Remote work: less than 20%, partially, more than 80%\n# 'company_location'   > Country of the employer's main office.\n# 'company_size'       > Average number of people that worked for the company during the year.\n\n# Selection of only European countries\n# countries_europe = ['SM', 'DE', 'GB', 'ES', 'FR', 'RU', 'IT', 'NL', 'CH', 'CF', 'FI', 'UA', 'IE', 'GR', 'MK', 'RO', 'AL', 'LT', 'BA', 'LV', 'EE', 'AM', 'HR', 'SI', 'PT', 'HU', 'AT', 'SK', 'CZ', 'DK', 'BE', 'MD', 'MT']\n# df['europe'] = np.isin(df['company_location'], countries_europe)\n```", "```py\n# Store salary in separate target variable.\ny = df['salary_in_usd']\n\n# Remove redundant variables\ndf.drop(labels=['salary_currency', 'salary', 'salary_in_usd'], inplace=True, axis=1)\n\n# Make the catagorical variables better to understand.\ndf['experience_level'] = df['experience_level'].replace({'EN':'Entry-level', 'MI':'Junior Mid-level', 'SE':'Intermediate Senior-level', 'EX':'Expert Executive-level / Director'}, regex=True)\ndf['employment_type'] = df['employment_type'].replace({'PT':'Part-time', 'FT':'Full-time', 'CT':'Contract', 'FL':'Freelance'}, regex=True)\ndf['company_size'] = df['company_size'].replace({'S':'Small (less than 50)', 'M':'Medium (50 to 250)', 'L':'Large (>250)'}, regex=True)\ndf['remote_ratio'] = df['remote_ratio'].replace({0:'No remote', 50:'Partially remote', 100:'>80% remote'}, regex=True)\ndf['work_year'] = df['work_year'].astype(str)\n\ndf.shape\n# (4134, 8)\n```", "```py\n# Import library\nfrom df2onehot import df2onehot\n\n# One hot encoding and removing any multicollinearity to prevent the dummy trap.\ndfhot = df2onehot(df,\n                  remove_multicollinearity=True,\n                  y_min=5,\n                  verbose=4)['onehot']\n\nprint(dfhot)\n#       work_year_2021  ...  company_size_Small (less than 50)\n# 0              False  ...                              False\n# 1              False  ...                              False\n# 2              False  ...                              False\n# 3              False  ...                              False\n# 4              False  ...                              False\n#              ...  ...                                ...\n# 4129           False  ...                              False\n# 4130            True  ...                              False\n# 4131           False  ...                               True\n# 4132           False  ...                              False\n# 4133            True  ...                              False\n\n# [4134 rows x 115 columns]\n```", "```py\n# Import library\nfrom pca import pca\n# Initialize\nmodel = pca(normalize=False)\n# Fit model using PCA\nmodel.fit_transform(dfhot)\n\n# Make biplot\nmodel.biplot(labels=df['job_title'],\n             s=y/500,\n             marker=df['experience_level'],\n             n_feat=10,\n             density=True,\n             fontsize=0,\n             jitter=0.05,\n             alpha=0.8,\n             color_arrow='#000000',\n             arrowdict={'color_text': '#000000', 'fontsize': 32},\n             figsize=(40, 30),\n             verbose=4,\n             )\n```", "```py\n# Import library\nfrom scatterd import scatterd\n\n# Create various scatter plots with different coloring.\nmodel.scatter(labels=df['company_size'],\n             s=y/500,\n             marker=df['experience_level'],\n             density=True,\n             fontsize=20,\n             jitter=0.05,\n             alpha=0.8,\n             figsize=(40, 30),\n             verbose=4,\n             grid=True,\n             legend=True,\n             )\n```", "```py\n# Import libraries\nfrom scatterd import scatterd\nfrom sklearn.manifold import TSNE\n\n# Remove work year from dataframe\ndf.drop(labels=['work_year'], inplace=True, axis=1)\n\n# Create new one hot matrix without work year\ndfhot = df2onehot(df, remove_multicollinearity=True, y_min=5, verbose=4)['onehot']\n\n# Feature embedding using tSNE\nX = TSNE(n_components=2, init='pca', perplexity=100).fit_transform(dfhot.values)\n\n# Import library\nfig, ax = scatterd(X[:, 0],\n                   X[:, 1],\n                   marker=df['experience_level'],\n                   s=y/500,\n                   labels=df['job_title'],\n                   fontsize=0,\n                   density=True,\n                   args_density={'alpha': 0.4},\n                   gradient='opaque',\n                   edgecolor='#000000',\n                   jitter=1,\n                   grid=True,\n                   legend=False,\n                   figsize=(40, 30),\n                   )\n```", "```py\n# Import library\nfrom clusteval import clusteval\n\n# Initialize clusteval\nce = clusteval(cluster='dbscan', metric='euclidean', linkage='complete', min_clust=7, normalize=True, verbose='info')\n\n# Cluster evaluation\nresults = ce.fit(X)\n```", "```py\n# Compute enrichment for each of the cluster labels\nce.enrichment(df)\n\n# Show the significantly associated catagories for the cluster labels\nprint(ce.results['enrichment'])\n\n#                 category_label              P  ...     category_name           Padj\n# 0                  Entry-level   8.988604e-31  ...  experience_level   5.954950e-27\n# 1             Junior Mid-level  3.818216e-294  ...  experience_level  2.547895e-290\n# 2    Intermediate Senior-level   5.812236e-51  ...  experience_level   3.857000e-47\n# 3             Junior Mid-level   4.519280e-43  ...  experience_level   2.997639e-39\n# 4             Junior Mid-level   1.477602e-68  ...  experience_level   9.821622e-65\n# ..                         ...            ...  ...               ...            ...\n# 146         Medium (50 to 250)   6.991347e-12  ...      company_size   4.603802e-08\n# 147               Large (>250)   1.424008e-61  ...      company_size   9.459684e-58\n# 148       Small (less than 50)   1.487384e-55  ...      company_size   9.874743e-52\n# 149         Medium (50 to 250)   4.985496e-22  ...      company_size   3.296410e-18\n# 150         Medium (50 to 250)   1.461693e-06  ...      company_size   9.553627e-03\n\n# [151 rows x 11 columns]\n\n# Create scatter plot with enrichment results.\nce.scatter(n_feat=4, s=y/500, jitter=0.05, fontsize=14, density=True, params_scatterd={'marker':df['experience_level'], 'gradient':'opaque', 'dpi':200}, figsize=(40,30))\n\n# Create dense areas with enrichment results.\nce.scatter(n_feat=4, s=0, jitter=0.05, fontsize=14, density=True, params_scatterd={'marker':df['experience_level'], 'gradient':'opaque', 'dpi':200}, figsize=(40,30))\n```", "```py\n# Import libraries\nfrom scatterd import scatterd, jitter_func\nfrom d3blocks import D3Blocks, normalize\nimport numpy as np\n\n# Initialize\nd3 = D3Blocks()\n\ntooltip = []\nfor i in range(0, df.shape[0]):\n    tip = '<br>'.join(list(map(lambda x: x[0].replace('_', ' ').title()+': '+x[1], np.array(list(zip(df.columns, df.iloc[i,:].values))))))\n    tip = tip + '<br>' + 'Salary: $' + str(y[i])\n    tooltip.append(tip)\n\n# Set all propreties\nd3.scatter(jitter_func(X[:,0], jitter=1),      # tSNE x-coordinates\n           jitter_func(X[:,1], jitter=1),      # tSNE y-coordinates \n           x1=jitter_func(model.results['PC']['PC1'].values, jitter=0.05), # PC1 x-coordinates\n           y1=jitter_func(model.results['PC']['PC2'].values, jitter=0.05), # PC2 y-coordinates\n           color=df['job_title'].values,       # Color on job title\n           tooltip=tooltip,                    # Tooltip\n           size=normalize(y.values, minscale=1, maxscale=25), # Node size on salary.\n           opacity='opaque',                   # Create a tidy scatterplot by only highlighting dense areas\n           stroke='#000000',                   # Edge color is black\n           cmap='tab20',                       # Colormap\n           scale=True,                         # Scale the datapoints\n           label_radio=['tSNE', 'PCA'],\n           figsize=[1024, 768],\n           filepath='Data_science_landscape.html',\n           )\n```"]