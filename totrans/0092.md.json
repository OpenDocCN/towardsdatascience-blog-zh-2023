["```py\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport powerlaw\nfrom scipy.stats import kurtosis\n```", "```py\nfilename_list = ['medium-followers', 'YT-earnings', 'LI-impressions']\n\ndf_dict = {}\n\nfor filename in filename_list:\n    df = pd.read_csv('data/'+filename+'.csv')\n    df = df.set_index(df.columns[0]) # set index\n    df_dict[filename] = df\n```", "```py\nfor filename in filename_list:\n    df = df_dict[filename]\n\n    # plot histograms (function bleow is defined in notebook on GitHub)\n    plot_histograms(df.iloc[:,0][df.iloc[:,0]>0], filename, filename.split('-')[1])\n    plt.savefig(\"images/\"+filename+\"_histograms.png\")\n\n    # print top 5 records\n    print(\"Top 5 Records by Percentage\")\n    print((df.iloc[:,0]/df.iloc[:,0].sum()).sort_values(ascending=False)[:5])\n    print(\"\")\n```", "```py\nfor filename in filename_list:\n    df = df_dict[filename]\n\n    # perform Power Law fit\n    results = powerlaw.Fit(df.iloc[:,0])\n\n    # print results\n    print(\"\")\n    print(filename)\n    print(\"-\"*len(filename))\n    print(\"Power Law Fit\")\n    print(\"a = \" + str(results.power_law.alpha-1))\n    print(\"xmin = \" + str(results.power_law.xmin))\n    print(\"\")\n```", "```py\nfor filename in filename_list:\n    df = df_dict[filename]\n\n    # print results\n    print(filename)\n    print(\"-\"*len(filename))\n    print(\"kurtosis = \" + str(kurtosis(df.iloc[:,0], fisher=True)))\n    print(\"\")\n```", "```py\nfor filename in filename_list:\n    df = df_dict[filename]\n\n    # perform Power Law fit\n    results = powerlaw.Fit(df.iloc[:,0])\n\n    # print results\n    print(\"\")\n    print(filename)\n    print(\"-\"*len(filename))\n    print(\"Log Normal Fit\")\n    print(\"mu = \" + str(results.lognormal.mu))\n    print(\"sigma = \" + str(results.lognormal.sigma))\n    print(\"\")\n```", "```py\ndef mean_abs_deviation(S):\n    \"\"\"\n        Computation of mean absolute deviation of an input sample S\n    \"\"\"\n    M = np.mean(np.abs(S - np.mean(S)))\n\n    return M\n\ndef generate_n_sample(X,n):\n    \"\"\"\n        Function to generate n random samples of size len(X) from an array X\n    \"\"\"\n    # initialize sample\n    S_n=0\n\n    for i in range(n):\n        # ramdomly sample len(X) observations from X and add it to the sample\n        S_n = S_n + X[np.random.randint(len(X), size=int(np.round(len(X))))]\n\n    return S_n\n\ndef kappa(X,n):\n    \"\"\"\n        Taleb's kappa metric from n0=1 as described here: https://arxiv.org/abs/1802.05495\n\n        Note: K_1n = kappa(1,n) = 2 - ((log(n)-log(1))/log(M_n/M_1)), where M_n denotes the mean absolute deviation of the sum of n random samples\n    \"\"\"\n    S_1 = X\n    S_n = generate_n_sample(X,n)\n\n    M_1 = mean_abs_deviation(S_1)\n    M_n = mean_abs_deviation(S_n)\n\n    K_1n = 2 - (np.log(n)/np.log(M_n/M_1))\n\n    return K_1n\n```", "```py\nn = 100 # number of samples to include in kappa calculation\n\nfor filename in filename_list:\n    df = df_dict[filename]\n\n    # print results\n    print(filename)\n    print(\"-\"*len(filename))\n    print(\"kappa_1n = \" + str(kappa(df.iloc[:,0].to_numpy(), n)))\n    print(\"\")\n```", "```py\nnum_runs = 1_000\nkappa_dict = {}\n\nfor filename in filename_list:\n    df = df_dict[filename]\n\n    kappa_list = []\n    for i in range(num_runs):\n        kappa_list.append(kappa(df.iloc[:,0].to_numpy(), n))\n\n    kappa_dict[filename] = np.array(kappa_list)\n\n    print(filename)\n    print(\"-\"*len(filename))\n    print(\"mean kappa_1n = \" + str(np.mean(kappa_dict[filename])))\n    print(\"\")\n```"]