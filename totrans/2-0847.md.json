["```py\nimport pandas as pd\nimport datetime\n\ndf_eu = pd.read_csv(\"EUTimeseries_53.087_5.859_SA2_60deg_120deg_2020_2020.csv\", \n                    skiprows=8).dropna()\ndisplay(df_eu)\n```", "```py\ndef str_to_date(d: str):\n    \"\"\" Convert string to datetime object \"\"\"\n    try:\n        return datetime.datetime.strptime(d, '%Y%m%d:%H%M')\n    except:\n        return None\n\ndef str_to_float(f: str):\n    \"\"\" Convert string value to float \"\"\"\n    try:\n        return float(f)\n    except:\n        return None\n\ndf_eu['time'] = df_eu['time'].map(str_to_date)\ndf_eu['G(i)'] = df_eu['G(i)'].map(str_to_float)\n```", "```py\npanels_amount = 1\npanel_size_m2 = 2.5\npanel_efficiency = 0.18\n\ndf_eu[\"kWh\"] = panels_amount * panel_size_m2 * panel_efficiency * df_eu['G(i)'] / 1000\n```", "```py\nfrom bokeh.io import show, output_notebook\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.plotting import figure\noutput_notebook()\n\ndf_day = df_eu[df_eu['time'].dt.date == datetime.date(2020, 6, 1)]\n\nsource = ColumnDataSource(df_day)\np = figure(width=1600, height=600, x_axis_type='datetime',\n           title=\"Solar Panels Generation Per Day, kWh\")\np.vbar(x='time', top='kWh', width=datetime.timedelta(minutes=50), source=source)\np.xgrid.grid_line_color = None\np.xaxis.ticker.desired_num_ticks = 12\np.y_range.start = 0\np.y_range.end = 0.4\nshow(p)\n```", "```py\nprint(\"Total, kWh:\", df_day[\"kWh\"].sum())\n\n> Total, kWh: 1.5560864999999997\n```", "```py\ndf_eu[\"month\"] = df_eu[\"time\"].dt.month\ndf_eu_month = df_eu[[\"month\", \"kWh\"]].groupby([\"month\"], as_index=False).sum()\ndisplay(df_eu_month.style.hide(axis=\"index\"))\n```", "```py\nsource = ColumnDataSource(data=dict(months=df_eu_month[\"month\"], \n                                    values=df_eu_month[\"kWh\"]))\np = figure(width=1600, height=600, \n           title=\"Solar Panels Generation Per Year, kWh\")\np.vbar(x='months', top='values', width=0.95, source=source)\np.xgrid.grid_line_color = None\np.xaxis.ticker.desired_num_ticks = 12\nshow(p) \n```", "```py\nprint(\"Total, kWh:\", df_eu[\"kWh\"].sum())\n\n> Total, kWh: 335.38783499999994\n```", "```py\ndf_eu[\"time\"] = df_eu['time'].map(str_to_date)\ndf_eu[\"month\"] = df_eu[\"time\"].dt.month\n```", "```py\n=ArrayFormula(MID(A10:A8793, 5, 2))\n```", "```py\ndf_eu[\"kWh\"] = df_eu['G(i)'] / 1000\n```", "```py\n=ArrayFormula(B10:B8793/1000)\n```", "```py\ndf_eu_month = df_eu[[\"month\", \"kWh\"]].groupby([\"month\"], as_index=False).sum()\n```", "```py\n=ArrayFormula(B1*B2*B3*Source!K11:K22)\n```", "```py\n=SUM(B7:B18)\n```", "```py\n=FILTER(MID(Source!A10:A8793, 10, 4), SEARCH(A24, Source!A10:A8793))\n\n=FILTER(B1*B2*B3*Source!H10:H8793, SEARCH(A24, Source!A10:A8793))\n```"]