["```py\n**CNN Architecture discussed in this article:**\n1) VGG\n2) Xception\n3) ResNet\n4) InceptionV3\n5) InceptionResNet\n6) MobileNet\n7) DenseNet\n8) NasNet\n9) EfficientNet\n10) ConvNEXT\n```", "```py\ntf.keras.applications.VGG16(\n    include_top=True,\n    weights=\"imagenet\",\n    input_tensor=None,\n    input_shape=None,\n    pooling=None,\n    classes=1000,\n    classifier_activation=\"softmax\",\n)\n```", "```py\ntf.keras.applications.Xception(\n    include_top=True,\n    weights=\"imagenet\",\n    input_tensor=None,\n    input_shape=None,\n    pooling=None,\n    classes=1000,\n    classifier_activation=\"softmax\",\n)\n```", "```py\ntf.keras.applications.ResNet50(\n    include_top=True,\n    weights=\"imagenet\",\n    input_tensor=None,\n    input_shape=None,\n    pooling=None,\n    classes=1000,\n    **kwargs\n)\n```", "```py\ntf.keras.applications.InceptionV3(\n    include_top=True,\n    weights=\"imagenet\",\n    input_tensor=None,\n    input_shape=None,\n    pooling=None,\n    classes=1000,\n    classifier_activation=\"softmax\",\n)\n```", "```py\ntf.keras.applications.InceptionResNetV2(\n    include_top=True,\n    weights=\"imagenet\",\n    input_tensor=None,\n    input_shape=None,\n    pooling=None,\n    classes=1000,\n    classifier_activation=\"softmax\",\n    **kwargs\n)\n```", "```py\ntf.keras.applications.MobileNet(\n    input_shape=None,\n    alpha=1.0,\n    depth_multiplier=1,\n    dropout=0.001,\n    include_top=True,\n    weights=\"imagenet\",\n    input_tensor=None,\n    pooling=None,\n    classes=1000,\n    classifier_activation=\"softmax\",\n    **kwargs\n)\n```", "```py\ntf.keras.applications.DenseNet121(\n    include_top=True,\n    weights=\"imagenet\",\n    input_tensor=None,\n    input_shape=None,\n    pooling=None,\n    classes=1000,\n    classifier_activation=\"softmax\",\n)\n```", "```py\ntf.keras.applications.NASNetLarge(\n    input_shape=None,\n    include_top=True,\n    weights=\"imagenet\",\n    input_tensor=None,\n    pooling=None,\n    classes=1000,\n    classifier_activation=\"softmax\",\n)\n```", "```py\ntf.keras.applications.EfficientNetB0(\n    include_top=True,\n    weights=\"imagenet\",\n    input_tensor=None,\n    input_shape=None,\n    pooling=None,\n    classes=1000,\n    classifier_activation=\"softmax\",\n    **kwargs\n)\n```", "```py\ntf.keras.applications.ConvNeXtTiny(\n    model_name=\"convnext_tiny\",\n    include_top=True,\n    include_preprocessing=True,\n    weights=\"imagenet\",\n    input_tensor=None,\n    input_shape=None,\n    pooling=None,\n    classes=1000,\n    classifier_activation=\"softmax\",\n)\n```"]