["```py\nfrom dlisio import dlis\nimport lasio\n```", "```py\nf, *tail = dlis.load('Data/NLOG Data/NPN_TVN-1_23_Dec_2009_E3_Main_SONIC_057PUC.DLIS')\n```", "```py\norigin, *origin_tail = f.origins\norigin.describe()\n```", "```py\nlas_file = lasio.LASFile()\n```", "```py\nlas_file.curves\n```", "```py\nwell_name = origin.well_name\nfield_name = origin.field_name\noperator = origin.company\n```", "```py\nlas_file.well['WELL'] = lasio.HeaderItem('WELL', value=well_name)\nlas_file.well['FLD'] = lasio.HeaderItem('FLD', value=field_name)\nlas_file.well['COMP'] = lasio.HeaderItem('COMP', value=operator)\nlas_file.well['DATE'] = '2009-12-23'\n```", "```py\ncolumns_to_extract = ['TDEP', 'BS', 'DT', 'DTSM', 'VPVS']\n```", "```py\nframe = f.frames[0]\n\nfor channel in frame.channels:\n    # If the channel name is in the list of channels to extract\n    if channel.name in columns_to_extract:\n        curves = channel.curves()\n\n        # If the channel name is 'TDEP', convert to 'DEPT' \n        if channel.name == 'TDEP':\n            channel_name = 'DEPT'\n            description = 'DEPTH'\n            # If the units are 0.1 in then convert to metres\n            if channel.units == '0.1 in':\n                curves = curves * 0.00254\n                unit = 'm'\n            else:\n                unit = channel.units\n        else:\n            description = channel.long_name\n            channel_name = channel.name\n            unit = channel.units\n\n        # Add the data to the LAS file\n        las_file.append_curve(\n            channel_name,\n            curves,\n            unit=unit,\n            descr=description\n        )\n```", "```py\nlas_file.curves\n```", "```py\nlas_file.write('output.las')\n```", "```py\nnew_las = lasio.read('output.las')\nnew_las.header\n```"]