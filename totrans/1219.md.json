["```py\nimport pandas as pd\nfrom sklearn.model_selection import cross_val_score, TimeSeriesSplit\n\ndata = pd.read_csv(\n    'https://raw.githubusercontent.com/Garve/datasets/4576d323bf2b66c906d5130d686245ad205505cf/mmm.csv',\n    parse_dates=['Date'],\n    index_col='Date'\n)\n\nX = data.drop(columns=['Sales'])\ny = data['Sales']\n```", "```py\nN = 200 # number of observations\n\n# previous marketing mix modeling has given us these parameters\ntv_coef = 10000       # α\ntv_lags = 4           # ℓ\ntv_carryover = 0.5    # λ\ntv_saturation = 0.002 # β\n\nradio_coef = 8000\nradio_lags = 2\nradio_carryover = 0.2\nradio_saturation = 0.0001\n\nbanners_coef = 14000\nbanners_lags = 0\nbanners_carryover = 0.2\nbanners_saturation = 0.001\n```", "```py\nimport numpy as np\n\ntv_carryover_matrix = sum([np.diag(tv_carryover**i*np.ones(N-i), k=-i) for i in range(tv_lags)])\nradio_carryover_matrix = sum([np.diag(radio_carryover**i*np.ones(N-i), k=-i) for i in range(radio_lags)])\nbanners_carryover_matrix = np.eye(N)\n```", "```py\nsales = (\n    tv_coef * np.sum(1 - np.exp(-tv_saturation * tv_carryover_matrix @ data[\"TV\"])) \n    + radio_coef * np.sum(1 - np.exp(-radio_saturation * radio_carryover_matrix @ data[\"Radio\"])) \n    + banners_coef * np.sum(1 - np.exp(-banners_saturation * banners_carryover_matrix @ data[\"Banners\"]))\n)\n```", "```py\nimport cvxpy as cp\n\noriginal_total_spends = data[[\"TV\", \"Radio\", \"Banners\"]].sum().sum()\n\n# declaring variables to be optimized, N=200 per channel\ntv = cp.Variable(N)\nradio = cp.Variable(N)\nbanners = cp.Variable(N)\n\n# the constraints, positive spends and a bounded total budget\nconstraints = [\n    tv >= 0,\n    radio >= 0,\n    banners >= 0,\n    cp.sum(tv + radio + banners) <= original_total_spends,\n]\n\n# cvxpy formulation, the model looks like the numpy version\nproblem = cp.Problem(\n    cp.Maximize(\n        tv_coef * cp.sum(1 - cp.exp(-tv_saturation * tv_carryover_matrix @ tv)) \\\n        + radio_coef * cp.sum(1 - cp.exp(-radio_saturation * radio_carryover_matrix @ radio)) \\\n        + banners_coef * cp.sum(1 - cp.exp(-banners_saturation * banners_carryover_matrix @ banners))\n    ), # like the numpy model, sum of all sales\n    constraints\n)\n```", "```py\nproblem.solve()\n\n# Output:\n# 5054070.207463957\n```", "```py\nsum(radio.value)\n\n# Output: \n# 524290.3686626207 (= 524,290.37 €)\n```", "```py\nconstraints = [\n    tv >= 0,\n    radio >= 0,\n    banners >= 0,\n    cp.sum(tv + radio + banners) <= original_total_spends,\n    cp.sum(radio) <= 300000 # new constraint\n]\n```", "```py\nsum(radio.value)\n\n# Output: \n# 299999.9992275703\n```"]