["```py\ntrain = df.iloc[:1400,:]\ntest = df.iloc[1400:,:]\n```", "```py\n# Creating an instance of the Prophet class and training the model\nm = Prophet() #instantiating a new Prophet object\nmodel = m.fit(train) #build the model with the historical data\n\nfuture = model.make_future_dataframe(periods=len(test), freq='D') #build the dataframe containing the predictions \nforecast = model.predict(future) #dataframe including a column yhat with the forecast\n```", "```py\nfrom sklearn import metrics\n\nr2_score = metrics.r2_score(list(test['y']), list(forecast.loc[1400:,'yhat']))\nmae = metrics.mean_absolute_error(list(test['y']), list(forecast.loc[1400:,'yhat']))\nmse = metrics.mean_squared_error(list(test['y']), list(forecast.loc[1400:,'yhat']))\n\nprint(f'r2_score : {r2_score}')\nprint(f'mae : {mae}')\nprint(f'mse : {mse}')\n```", "```py\nblack_friday = pd.DataFrame({\n  'holiday': 'black_friday',\n  'ds': pd.to_datetime(['2019-11-29', '2020-11-27', '2021-11-26', '2022-11-25']),\n  'lower_window': -10,\n  'upper_window': 1,\n})\nxmas_eve = pd.DataFrame({\n  'holiday': 'xmas_eve',\n  'ds': pd.to_datetime(['2019-12-24', '2020-12-24', '2021-12-24', '2022-12-24']),\n  'lower_window': -5,\n  'upper_window': 1,\n})\nholidays = pd.concat((black_friday, xmas_eve))\n```", "```py\n# Creating an instance of the Prophet class and training the model\nm2 = Prophet(holidays=holidays)\nm2.add_country_holidays(country_name='US') #adding US holidays\nmodel2 = m2.fit(train)\n\nfuture2 = model2.make_future_dataframe(periods=len(test), freq='D')\nforecast2 = model2.predict(future2)\n```", "```py\nr2_score = metrics.r2_score(list(test['y']), list(forecast2.loc[1400:,'yhat']))\nmae = metrics.mean_absolute_error(list(test['y']), list(forecast2.loc[1400:,'yhat']))\nmse = metrics.mean_squared_error(list(test['y']), list(forecast2.loc[1400:,'yhat']))\n\nprint(f'r2_score : {r2_score}')\nprint(f'mae : {mae}')\nprint(f'mse : {mse}')\n```", "```py\n# Create the grid\nchangepoint_prior_scale = [0.01, 0.03, 0.05, 0.07] # default 0.05\nseasonality_prior_scale = [1, 5, 10, 15] # default 10\nholidays_prior_scale = [1, 5, 10, 15] # default 10\nseasonality_mode = ['additive', 'multiplicative']\nchangepoint_range = [0.6, 0.7, 0.8, 0.9] # default 0.8\n\n# Compute the total number of iterations\ntotal_iter = len(changepoint_prior_scale)*len(seasonality_prior_scale)*len(holidays_prior_scale)*len(seasonality_mode)*len(changepoint_range)\nprint(f'Number of iterations : {total_iter}')\n\n# Loop over the parameters, build and assess the models\ngrid_search_results = []\niteration = 1\nfor cps in changepoint_prior_scale:\n    for sps in seasonality_prior_scale:\n        for hps in holidays_prior_scale:\n            for sm in seasonality_mode:\n                for cr in changepoint_range:\n                    m = Prophet(holidays=holidays, \n                                 changepoint_prior_scale = cps, \n                                 seasonality_prior_scale = sps, \n                                 holidays_prior_scale = hps, \n                                 seasonality_mode = sm, \n                                 changepoint_range = cr)\n                    m.add_country_holidays(country_name='US')\n                    model = m.fit(train)\n                    future = model.make_future_dataframe(periods=len(test), freq='D')\n                    forecast = model.predict(future) \n\n                    r2_score = metrics.r2_score(list(test['y']), list(forecast.loc[1400:,'yhat']))\n                    mae = metrics.mean_absolute_error(list(test['y']), list(forecast.loc[1400:,'yhat']))\n                    mse = metrics.mean_squared_error(list(test['y']), list(forecast.loc[1400:,'yhat']))\n\n                    print(f'iteration : {iteration} / {total_iter} ')\n                    print(f'r2_score : {r2_score}')\n                    print(f'mae : {mae}')\n                    print(f'mse : {mse}')\n\n                    grid_search_results.append([iteration, cps, sps, hps, sm, cr, r2_score, mae, mse])\n                    iteration += 1\n\n# Store the results in a dataframe\ngrid_search_df = pd.DataFrame(grid_search_results, columns = ['iteration', 'cps', 'sps', 'hps', 'sm', 'cr', 'r2_score', 'mae', 'mse'])\n```", "```py\ngrid_search_df.sort_values('mse', ascending = True).head()\n```", "```py\nchangepoint_prior_scale = 0.05 # default 0.05\nseasonality_prior_scale = 1 # default 10\nholidays_prior_scale = 5 # default 10\nseasonality_mode = 'additive'\nchangepoint_range = 0.6 # default 0.8\n\n# Creating an instance of the Prophet class and training the model\nm3 = Prophet(holidays=holidays, \n            changepoint_prior_scale = changepoint_prior_scale,\n            seasonality_prior_scale = seasonality_prior_scale,\n            holidays_prior_scale = holidays_prior_scale,\n            seasonality_mode = seasonality_mode,\n            changepoint_range = changepoint_range)\nm3.add_country_holidays(country_name='US')\nmodel3 = m3.fit(train)\n\nfuture3 = model3.make_future_dataframe(periods=len(test), freq='D')\nforecast3 = model3.predict(future3)\n```"]