- en: 'Efficient Coding in Data Science: Easy Debugging of Pandas Chained Operations'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学中的高效编码：轻松调试 Pandas 链式操作
- en: 原文：[https://towardsdatascience.com/efficient-coding-in-data-science-easy-debugging-of-pandas-chained-operations-0089f6de920f](https://towardsdatascience.com/efficient-coding-in-data-science-easy-debugging-of-pandas-chained-operations-0089f6de920f)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/efficient-coding-in-data-science-easy-debugging-of-pandas-chained-operations-0089f6de920f](https://towardsdatascience.com/efficient-coding-in-data-science-easy-debugging-of-pandas-chained-operations-0089f6de920f)
- en: PYTHON PROGRAMMING
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON 编程
- en: How to inspect Pandas data frames in chained operations without breaking the
    chain into separate statements
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在不将链式操作拆分为单独语句的情况下检查 Pandas 数据框
- en: '[](https://medium.com/@nyggus?source=post_page-----0089f6de920f--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----0089f6de920f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----0089f6de920f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----0089f6de920f--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----0089f6de920f--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus?source=post_page-----0089f6de920f--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----0089f6de920f--------------------------------)[](https://towardsdatascience.com/?source=post_page-----0089f6de920f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----0089f6de920f--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----0089f6de920f--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----0089f6de920f--------------------------------)
    ·9 min read·Nov 15, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----0089f6de920f--------------------------------)
    ·9 分钟阅读·2023年11月15日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/a4416aaa0e5cbb71ac3371cb86b01eae.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a4416aaa0e5cbb71ac3371cb86b01eae.png)'
- en: Debugging chained Pandas operations without breaking the chain is possible.
    Photo by [Miltiadis Fragkidis](https://unsplash.com/@_miltiadis_?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在不打破链式操作的情况下调试链式 Pandas 操作是可能的。照片由[Miltiadis Fragkidis](https://unsplash.com/@_miltiadis_?utm_source=medium&utm_medium=referral)提供，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: 'Debugging lies in the heart of programming. I wrote about this in the following
    article:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是编程的核心。我在以下文章中写到过这个话题：
- en: '[](/bugs-in-python-pdb-to-the-rescue-d88a56a2ca71?source=post_page-----0089f6de920f--------------------------------)
    [## Bugs in Python? Pdb To the Rescue!'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/bugs-in-python-pdb-to-the-rescue-d88a56a2ca71?source=post_page-----0089f6de920f--------------------------------)
    [## Python 中的错误？Pdb 来救援！'
- en: Is the Pdb debugger worth learning and using?
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Pdb 调试器值得学习和使用吗？
- en: towardsdatascience.com](/bugs-in-python-pdb-to-the-rescue-d88a56a2ca71?source=post_page-----0089f6de920f--------------------------------)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/bugs-in-python-pdb-to-the-rescue-d88a56a2ca71?source=post_page-----0089f6de920f--------------------------------)
- en: This statement is quite general and language- and framework-independent. When
    you use Python for data analysis, you need to debug code irrespective of whether
    you’re conducting complex data analysis, writing an ML software product, or creating
    a Streamlit or Django app.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个说法相当通用，不依赖于语言或框架。当你使用 Python 进行数据分析时，无论是进行复杂的数据分析、编写机器学习软件产品，还是创建 Streamlit
    或 Django 应用，你都需要调试代码。
- en: This article discusses debugging Pandas code, or rather a specific scenario
    of debugging Pandas code in which operations are chained into a pipe. Such debugging
    poses a challenging issue. When you don’t know how to do it, chained Pandas operations
    seem to be far more difficult to debug than regular Pandas code, that is, individual
    Pandas operations using typical assignment with square brackets.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章讨论了调试 Pandas 代码，或者更具体地说，是在链式操作的情况下调试 Pandas 代码。这种调试提出了一个挑战性的问题。当你不知道如何做到这一点时，链式
    Pandas 操作似乎比常规 Pandas 代码，即使用方括号的单独 Pandas 操作，更难调试。
- en: 'To debug regular Pandas code using typical assignment with square brackets,
    it’s enough to add a Python breakpoint — and use the `pdb` interactive debugger.
    This would be something like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要调试使用方括号的常规 Pandas 代码，只需添加一个 Python 断点 — 并使用 `pdb` 交互式调试器。可能是这样：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Unfortunately, you can’t do that when the code consists of chained operations,
    like here:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，当代码由链式操作组成时，你不能这样做，例如在这里：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'or, depending on your preference, here:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，根据你的喜好，可能是这样：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this case, there is no place to stop and look at the code — you can only
    do so before or after the chain. Thus, one of the solutions is to break the main
    chain into two sub-chains (two pipes) in a place where you want to debug the code,
    and debug it from there. Most likely, after debugging you will want to return
    to one chain instead of two, so I personally have never liked using such debugging.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，没有地方可以停下来查看代码——你只能在链的前面或后面这样做。因此，一个解决方案是在你想调试代码的地方将主链分成两个子链（两个管道），然后从那里进行调试。大多数情况下，调试后你会希望回到一个链而不是两个，因此我个人不喜欢使用这种调试方式。
- en: And this is why I came up with the method I’d like to present in this article.
    I am going to show you a solution for debugging chained Pandas operations that
    does not require you to break the chain. Instead, you can add something similar
    to a typical Python `breakpoint`. Adding and removing this breakpoint is easy,
    making debugging chained Pandas operations simple.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我想在本文中介绍的方法。我将展示一种调试链式 Pandas 操作的方法，这种方法不需要打断链。相反，你可以添加类似于典型 Python `breakpoint`
    的东西。添加和移除这个断点很简单，使调试链式 Pandas 操作变得轻松。
- en: I will propose three different functions that will help you debug code inside
    chains of Pandas operations. Once you will see the idea behind them, you will
    be able to implement your own debugging functions.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我将提出三种不同的函数，这些函数将帮助你调试 Pandas 操作链中的代码。一旦你了解了它们背后的思想，你将能够实现自己的调试函数。
- en: Functions for debugging Pandas chains
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于调试 Pandas 操作链的函数
- en: 'All the functions I’m going to present below utilize the `pd.pipe()` function:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我接下来要展示的所有函数都利用了 `pd.pipe()` 函数：
- en: '[## pandas.DataFrame.pipe - pandas 2.1.2 documentation'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[## pandas.DataFrame.pipe - pandas 2.1.2 文档](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.pipe.html?source=post_page-----0089f6de920f--------------------------------)'
- en: Function to apply to the Series/DataFrame. , and are passed into . Alternatively
    a tuple where data_keyword is a string…
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用到 Series/DataFrame 的函数，和 会被传递到 。或者，数据关键字是一个字符串的元组…
- en: pandas.pydata.org](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.pipe.html?source=post_page-----0089f6de920f--------------------------------)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: pandas.pydata.org
- en: 'You can use `pd.pip()` to call — and use to a dataframe — any function that
    expects a Pandas dataframe or series. This opens us a range of possibilities:
    any such function can be added inside a chain of Pandas operations. And this is
    how we structure the functions below.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `pd.pip()` 来调用——并应用于数据框——任何期望 Pandas 数据框或系列的函数。这为我们打开了许多可能性：任何这样的函数都可以被添加到
    Pandas 操作链中。这就是我们如何构建下面的函数的方式。
- en: Debugging via breakpoint
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过断点调试
- en: 'Let me start with the most important function, and at the same time the simplest
    one. It that adds a typical `breakpoint` to a chain of Pandas operations:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我从最重要且同时最简单的函数开始。它会在 Pandas 操作链中添加一个典型的 `breakpoint`：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Simple, isn’t it?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 简单，不是吗？
- en: You deserve the explanation why we’re creating a deep copy of the dataframe.
    If we didn’t done this, we would’ve risk that the original data frame would be
    returned. In our function, everything you do on the `df` dataframe does not affect
    the original dataframe, `d`. Hence, you can make changes to `df` and all will
    be fine. But you must *not* do any changes to `d`, since they will be reflected
    in the returned dataframe — and so the dataframe passed to further operations
    in the pipe would be done using this changed dataframe during debugging.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该知道为什么我们要创建数据框的深拷贝。如果我们不这样做，就有可能返回原始数据框。在我们的函数中，你对 `df` 数据框所做的一切不会影响原始数据框
    `d`。因此，你可以对 `df` 进行更改，一切都将正常。但是你*不*应对 `d` 进行任何更改，因为这些更改会反映在返回的数据框中——这样，在调试过程中传递到后续操作的管道中的数据框将使用这个更改后的数据框。
- en: 'We will use the `pdbreakpoint()` function for the following Pandas pipe:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `pdbreakpoint()` 函数来处理以下 Pandas 管道：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Certainly, it’s an overly simplistic example, but we don’t need a complicated
    pipe, as it could distract us from what interests us today: debugging. I used
    the `d` name for the dataframe for a reason; I wanted to use a different name
    from `df`, which I used inside the `pdbreakpoint()` function.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这是一个过于简单的例子，但我们不需要复杂的管道，因为这可能会使我们分心，从而失去对今天的重点：调试。我使用 `d` 作为数据框的名称是有原因的；我想使用一个不同于
    `df` 的名称，因为我在 `pdbreakpoint()` 函数内部使用了 `df`。
- en: Remember that if you typically use `df` as a name for your temporary dataframes,
    you may consider using a name like `d` inside `pdbreakpoint()`. The choice is
    yours, but the only requirement is to use a name for the dataframe inside `pdbreakpoint()`
    that is not used in the outer scope.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，如果你通常将`df`用作临时数据框的名称，你可以考虑在`pdbreakpoint()`内部使用类似`d`的名称。选择权在你，但唯一的要求是使用一个在`pdbreakpoint()`内部未在外部作用域中使用的数据框名称。
- en: Use a name for the dataframe inside `pdbreakpoint()` that is not used in the
    outer scope.
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在`pdbreakpoint()`内部使用一个在外部作用域中未使用的数据框名称。
- en: 'Now, suppose you want to inspect the `d` DataFrame after using the `assign()`
    function but before using the `query()` function. As mentioned earlier, you can
    achieve this by splitting the chain into two operations. Above, I demonstrated
    how to do this for Pandas code based on square brackets, and below, I illustrate
    how to do it for Pandas code based on chained operations:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设你想在使用`assign()`函数后但在使用`query()`函数之前检查`d`数据框。如前所述，你可以通过将链分成两个操作来实现这一点。上面，我展示了如何针对基于方括号的Pandas代码做到这一点，下面，我将展示如何针对基于链式操作的Pandas代码做到这一点：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'But this is something I have never liked doing. That’s why I came up with the
    `pdbreakpoint()` function. You can use it in the following way:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 但这是我从未喜欢做的事情。这就是我提出`pdbreakpoint()`函数的原因。你可以按以下方式使用它：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The screenshot below shows what will happen:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图展示了会发生什么：
- en: '![](../Images/75588db195947f76d21735470734660e.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/75588db195947f76d21735470734660e.png)'
- en: 'Screenshot from Python 3.11: Entering the pdb debugger using the pdbreaking
    function. Image by author.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3.11的截图：通过pdbreaking函数进入pdb调试器。图片由作者提供。
- en: 'You’re inside the `pdbreakpoint()` function, and when you look at it once more,
    you will see that you will have access to a `df` data frame — which is the dataframe
    *after* running `assign()` and *before* running `query()` on it. Look:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在在`pdbreakpoint()`函数内部，再次查看时，你会看到你可以访问一个`df`数据框——这是在运行`assign()`之后和运行`query()`之前的数据框。请看：
- en: '![](../Images/0ea3d2a1a18544facdda8a9be71e0487.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0ea3d2a1a18544facdda8a9be71e0487.png)'
- en: 'Screenshot from Python 3.11: Using the pdb debugger after using the pdbreaking
    function. Image by author.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3.11的截图：在使用pdbreaking函数后使用pdb调试器。图片由作者提供。
- en: So, we inspected `df` inside the breakpoint; when doing so, we ran `df.query("group
    == 'b'")`. However, after hitting `c` (for `continue`), we returned to the regular
    session and obtained the final result, which is the data frame after running `query("group
    == 'a'")`, that is, after running the whole chain of operations on the `d` dataframe.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们在断点内部检查了`df`；在这样做时，我们运行了`df.query("group == 'b'")`。然而，在按下`c`（用于`continue`）后，我们返回到常规会话，并获得最终结果，即运行`query("group
    == 'a'")`后的数据框，即对`d`数据框执行整个操作链后的数据框。
- en: That’s it! This is a very simple way of inspecting Pandas data frames using
    the `pdb` built-in Python debugger.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！这是一种非常简单的使用`pdb`内置Python调试器检查Pandas数据框的方法。
- en: Now that we know how to implement such functions, we can use this knowledge
    to implement other functions, ones that can help us debug Pandas chained operations.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何实现这样的函数，我们可以利用这些知识实现其他函数，帮助我们调试Pandas链式操作。
- en: Printing the head of a data frame
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打印数据框的前几行
- en: 'Our next function will not use the `pdb` interactive debugger. Instead, it
    will simply print the head of a data frame, with the possibility of selecting
    a subset of columns:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一个函数将不使用`pdb`交互式调试器。相反，它将简单地打印数据框的前几行，并可以选择一个列的子集：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let’s see the code in action:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看代码的实际效果：
- en: '![](../Images/41625535101558916e473f90ed68eafb.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/41625535101558916e473f90ed68eafb.png)'
- en: 'Screenshot from Python 3.11: Using the pdhead function. Image by author.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3.11的截图：使用pdhead函数。图片由作者提供。
- en: To show how `pdhead()` works, we used it twice — although in real life, you
    would never use this function twice in a row. The first time, we used it without
    `n` (so, with the default `n` value of `2`), and the second time with `n` of `3`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示`pdhead()`的工作原理，我们使用了两次——虽然在实际使用中，你不会连续两次使用这个函数。第一次，我们在没有`n`的情况下使用它（即，使用默认的`n`值`2`），第二次使用`n`为`3`。
- en: 'You can see the function works as expected. The screenshot below shows how
    `pdhead()` works with the `cols` argument:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到函数按预期工作。下面的截图展示了`pdhead()`如何与`cols`参数一起工作：
- en: '![](../Images/eb0b7286ff0fb290322f7a6ca545e5f8.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eb0b7286ff0fb290322f7a6ca545e5f8.png)'
- en: 'Screenshot from Python 3.11: Using the pdhead function. Image by author.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3.11的截图：使用pdhead函数。图片由作者提供。
- en: 'So, `cols` comes as handy when you want to see the dataframe with only selected
    columns. Here, we used both arguments, `n` and `cols`, and we saw the first three
    rows of a copy of the `d` data frame, with two columns: `xy` and `group`.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当你想只查看选定的列的数据框时，`cols` 会非常方便。在这里，我们使用了`n`和`cols`两个参数，并查看了`d`数据框的前面三行，包含两列：`xy`和`group`。
- en: As you may have noticed, `xy` was created within this very chain of operations,
    which does not pose any problems, as the temporary version of the dataframe for
    which we used `pdhead()` already contained this column.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经注意到的，`xy` 是在这条操作链中创建的，这没有任何问题，因为我们使用`pdhead()`的临时版本的数据框已经包含了这个列。
- en: 'You can easily reimplement the function to show the tail of a dataframe, or
    to show the selected part of the dataframe: a subset of columns and/or a subset
    of rows. I’ll leave this to you as an exercise.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以轻松地重新实现该函数，以显示数据框的尾部，或显示数据框的选定部分：列的子集和/或行的子集。我将这留给你作为练习。
- en: Do something inside a chain
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在链中做一些事情
- en: 'This time, I will present a general function that will enable you to do whatever
    you want inside a chain of Pandas operations:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我将展示一个通用函数，使你能够在 Pandas 操作链中实现任何你想做的事情：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This function is slightly more complex than the previous ones. It has two different
    use cases. Regardless of your intended action for the inspected dataframe, it
    must be reflected in the callable `func()`. You can use both positional and keyword
    arguments for this purpose.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数比之前的函数稍微复杂一点。它有两种不同的使用情况。无论你对检查的数据框的操作意图是什么，都必须在可调用的`func()`中反映出来。你可以为此使用位置参数和关键字参数。
- en: '*Use case 1: Do not use the data frame*. In that case, set `usedf` to `False`.
    For example, you can print a flag:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*用例 1：不要使用数据框*。在这种情况下，将`usedf`设置为`False`。例如，你可以打印一个标志：'
- en: '![](../Images/6ddac4aa2de11e7a5f5685456c6740ef.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6ddac4aa2de11e7a5f5685456c6740ef.png)'
- en: 'Screenshot from Python 3.11: Using the pddo function to print a flag. Image
    by author.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 截图来自 Python 3.11：使用 pddo 函数打印标志。图片作者提供。
- en: 'or the current date and time:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 或者当前日期和时间：
- en: '![](../Images/ca18d09fb28d3434c03480931f1e47ba.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ca18d09fb28d3434c03480931f1e47ba.png)'
- en: 'Screenshot from Python 3.11: Using the pddo function to print date and time.
    Image by author.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 截图来自 Python 3.11：使用 pddo 函数打印日期和时间。图片作者提供。
- en: You can also log information— but remember that with `usedf` set to `False`
    you don’t have access to the data frame. If you require access, you’ll need to
    set this argument to `True`, and the next use case is all about it.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以记录信息——但要记住，当`usedf`设置为`False`时，你无法访问数据框。如果你需要访问，你需要将此参数设置为`True`，接下来的用例就是关于它的。
- en: '*Use case 2: Use the data frame*. More interesting use cases involve accessing
    the dataframe. Let’s start with some simple examples:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*用例 2：使用数据框*。更有趣的用例涉及访问数据框。让我们从一些简单的例子开始：'
- en: '![](../Images/173115334f5dae56ea1053ae105a4281.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/173115334f5dae56ea1053ae105a4281.png)'
- en: 'Screenshot from Python 3.11: Using the pddo function to print the shape of
    a dataframe. Image by author.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 截图来自 Python 3.11：使用 pddo 函数打印数据框的形状。图片作者提供。
- en: As you can use, when `usedf` is `True` (which is the default value of `pddo()`),
    you can use the dataframe. It’s used as the first argument to `func()` — and you
    can’t change that as otherwise `pipe()` would break down.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所用，当`usedf`为`True`（这是`pddo()`的默认值）时，你可以使用数据框。它作为`func()`的第一个参数使用——你不能更改这一点，否则`pipe()`将会崩溃。
- en: 'You can, in fact, perform quite advanced operations using `pddo()`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你可以使用`pddo()`执行相当高级的操作：
- en: '![](../Images/6082ee12d9c3135a0ba5e1f50cd475a3.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6082ee12d9c3135a0ba5e1f50cd475a3.png)'
- en: 'Screenshot from Python 3.11: Using the pddo function to print the result of
    a complex pipe of Pandas operations. Image by author.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 截图来自 Python 3.11：使用 pddo 函数打印 Pandas 操作的复杂管道结果。图片作者提供。
- en: The `foo()` function performs quite a complex chain of operations and prints
    the result. Still, once `pipe()` calling `pddo()` (which calls `foo()`) returns,
    the original chain returns to the state before the `pipe()` function was called.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`foo()`函数执行了相当复杂的一系列操作并打印结果。然而，一旦`pipe()`调用`pddo()`（它调用`foo()`）返回，原始链条将恢复到`pipe()`函数被调用之前的状态。'
- en: What you need to remember that if you want something to be printed, you need
    to directly call the `print()` method. Actually, you can implement your own function
    in which you don’t need to call `print()` — I will leave you this as an exercise.
    However, such a version could be used only for printing while the current version
    of `pddo()` is more general, because you can, for example, log the dataframe to
    a logger.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要记住，如果你想打印某些内容，你需要直接调用`print()`方法。实际上，你可以实现自己的函数，在其中不需要调用`print()`——我将把这个作为练习留给你。然而，这样的版本只能用于打印，而当前版本的`pddo()`更为通用，因为你可以，例如，将数据框记录到日志记录器中。
- en: Conclusion
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We have explored debugging chained operations using self-defined functions.
    The most crucial function is `pdbreakpoint()`, as it enables you do use `pdb`,
    the built-in interactive Python debugger. The other functions employed static
    debugging, but some of them could be used also for other purposes, such as logging.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探讨了使用自定义函数调试链式操作。最关键的函数是`pdbreakpoint()`，因为它允许你使用`pdb`，内置的交互式 Python 调试器。其他函数采用了静态调试，但其中一些也可以用于其他目的，例如日志记录。
- en: You can expand this set of functions for debugging Pandas operations. They can
    be helpful for debugging pipes of these operations when you need to inspect the
    state of a dataframe at a specific point, without breaking the chain into separate
    statements.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以扩展这组用于调试 Pandas 操作的函数。当你需要在特定点检查数据框的状态，而不将链拆分为单独的语句时，它们可以帮助调试这些操作的管道。
- en: Now that you know the concept, you should not have problems with implementing
    your own functions. Nevertheless, my suggestion is not to overdo with them. We’re
    talking about debugging, and I’d consider having to choose from a dozen or so
    functions to debug Pandas code a distraction rather than help.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你了解了这个概念，你应该不会在实现自己的函数时遇到问题。然而，我的建议是不要过度使用它们。我们讨论的是调试，我认为在调试 Pandas 代码时需要从十几个函数中选择，这更多是干扰而非帮助。
- en: To be honest, I myself use only the `pdbreakpoint()` function, but I wanted
    to share you with idea concept rather than just one function— so that you can
    choose your own approach to debugging. As I discussed in [my previous *Towards
    Data Science* article on debugging in Python](https://medium.com/towards-data-science/bugs-in-python-pdb-to-the-rescue-d88a56a2ca71),
    I’m a great fan of the `pdb` interactive debugger, and I rarely need to use anything
    else. But this doesn’t mean that other approaches are not equally useful, at least
    in certain situations.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 说实话，我自己只使用`pdbreakpoint()`函数，但我想与你分享这个概念，而不仅仅是一个函数——以便你可以选择自己调试的方法。正如我在[我之前的*Towards
    Data Science*关于 Python 调试的文章](https://medium.com/towards-data-science/bugs-in-python-pdb-to-the-rescue-d88a56a2ca71)中讨论的，我是`pdb`交互式调试器的忠实粉丝，我很少需要使用其他工具。但这并不意味着其他方法在某些情况下不是同样有用的。
- en: 'Thanks for reading. If you enjoyed this article, you may also enjoy other articles
    I wrote; you will see them [here](https://medium.com/@nyggus). And if you want
    to join Medium, please use my referral link below:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。如果你喜欢这篇文章，你可能也会喜欢我写的其他文章；你可以[在这里](https://medium.com/@nyggus)看到它们。如果你想加入
    Medium，请使用下面的推荐链接：
- en: '[](https://medium.com/@nyggus/membership?source=post_page-----0089f6de920f--------------------------------)
    [## Join Medium with my referral link - Marcin Kozak'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus/membership?source=post_page-----0089f6de920f--------------------------------)
    [## 通过我的推荐链接加入 Medium - Marcin Kozak'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为 Medium 会员，你的会员费的一部分将会分配给你阅读的作者，并且你可以完全访问每个故事……
- en: medium.com](https://medium.com/@nyggus/membership?source=post_page-----0089f6de920f--------------------------------)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@nyggus/membership?source=post_page-----0089f6de920f--------------------------------)
