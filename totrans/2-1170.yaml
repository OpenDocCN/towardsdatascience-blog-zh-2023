- en: How to Effectively Start Coding in the Era of ChatGPT
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在 ChatGPT 时代有效开始编码
- en: 原文：[https://towardsdatascience.com/how-to-effectively-start-coding-in-the-era-of-chatgpt-cfc5151e1c42](https://towardsdatascience.com/how-to-effectively-start-coding-in-the-era-of-chatgpt-cfc5151e1c42)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-effectively-start-coding-in-the-era-of-chatgpt-cfc5151e1c42](https://towardsdatascience.com/how-to-effectively-start-coding-in-the-era-of-chatgpt-cfc5151e1c42)
- en: Some advice to use ChatGPT to learn to program while actually learning it
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些使用 ChatGPT 学习编程的建议，同时实际进行学习
- en: '[](https://federicotrotta.medium.com/?source=post_page-----cfc5151e1c42--------------------------------)[![Federico
    Trotta](../Images/e997e3a96940c16ab5071629016d82fd.png)](https://federicotrotta.medium.com/?source=post_page-----cfc5151e1c42--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cfc5151e1c42--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cfc5151e1c42--------------------------------)
    [Federico Trotta](https://federicotrotta.medium.com/?source=post_page-----cfc5151e1c42--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://federicotrotta.medium.com/?source=post_page-----cfc5151e1c42--------------------------------)[![Federico
    Trotta](../Images/e997e3a96940c16ab5071629016d82fd.png)](https://federicotrotta.medium.com/?source=post_page-----cfc5151e1c42--------------------------------)[](https://towardsdatascience.com/?source=post_page-----cfc5151e1c42--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----cfc5151e1c42--------------------------------)
    [Federico Trotta](https://federicotrotta.medium.com/?source=post_page-----cfc5151e1c42--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cfc5151e1c42--------------------------------)
    ·11 min read·Jun 5, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----cfc5151e1c42--------------------------------)
    ·阅读时间11分钟·2023年6月5日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/798f47ae83cd1fe10d15404d5b3ca636.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/798f47ae83cd1fe10d15404d5b3ca636.png)'
- en: Image by [StockSnap](https://pixabay.com/it/users/stocksnap-894430/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=2557468)
    on [Pixabay](https://pixabay.com/it//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=2557468)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [StockSnap](https://pixabay.com/it/users/stocksnap-894430/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=2557468)
    提供，来自 [Pixabay](https://pixabay.com/it//?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=2557468)
- en: If you’d like to start to program but you’re afraid AI will steal your job,
    then this article is definitely for you. Especially if you’re thinking about changing
    your career to become a Software Engineer or a Data Professional, I really feel
    how uncomfortable you are right now.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想开始编程但担心人工智能会抢走你的工作，那么这篇文章绝对适合你。特别是如果你在考虑换职业成为软件工程师或数据专业人士，我真的能感受到你现在的不安。
- en: I started to program about 3 years ago when I was 30 with no prior experience,
    and this helped me find my first remote work in IT.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我大约在三年前，当时我30岁，没有任何经验，这帮助我找到了我的第一份IT远程工作。
- en: 'Now, 3 years ago ChatGPT didn’t exist and I know you’re vexed with questions
    like: “What if I invest months learning and practicing to program and then I don’t
    find an actual job because of AI?”.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，3年前 ChatGPT 并不存在，我知道你可能会有这样的疑问：“如果我花几个月时间学习和实践编程，结果却因为人工智能找不到实际工作怎么办？”。
- en: 'Well, let me tell you one thing: don’t be afraid of the recent layoffs in Big
    Techs: they’re not directly related to the increase of AI. Also, none really knows
    if AI will replace developers in 5 years, so here’s my opinion: AI will replace
    developers that can’t actually code. So, if you effectively learn how to code,
    you’ll find AI as a tool that helps you speed up your daily tasks, not an enemy
    that will replace you.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，让我告诉你一件事：不要害怕最近大科技公司的裁员：这些裁员与人工智能的增长并没有直接关系。而且，没有人真正知道人工智能是否会在5年内取代开发人员，所以我的看法是：人工智能会取代那些实际上不能编程的开发人员。因此，如果你有效地学习如何编码，你会发现人工智能是一个帮助你加快日常任务的工具，而不是一个会取代你的敌人。
- en: So, in this article, we’ll see how ChatGPT can actually be an added value for
    you if you're thinking to start to program today, regardless of how old you are
    and what’s is your current career status.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这篇文章中，我们将看到，如果你今天打算开始编程，无论你多大年龄或当前的职业状态如何，ChatGPT 实际上可以为你带来额外的价值。
- en: 'This is what you’ll find here:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你在这里会发现的内容：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Rule number 1: how to correctly ask questions to ChatGPT'
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规则第1条：如何正确向 ChatGPT 提问
- en: The first thing to learn is how to correctly ask ChatGPT the right questions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要学习的是如何正确地向 ChatGPT 提问。
- en: When I started learning to program I thought that developers were nerdy people
    who started to program at 5 years old and had a huge knowledge of programming,
    having in mind all the code they needed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当我开始学习编程时，我认为开发者是那些从五岁开始编程、拥有丰富编程知识的人，他们心中装满了所有需要的代码。
- en: 'And you know what? I couldn’t be more wrong. Here’s a harsh truth:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道吗？我之前的想法完全错误。这里有一个严酷的事实：
- en: A lot of developers started to learn to program in their 20s and 30s.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 许多开发者在他们的20岁和30岁时开始学习编程。
- en: The majority of developers work by searching stuff on Google and StackOverflow
    (and today, they ask questions to ChatGPT).
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 大多数开发者通过在 Google 和 StackOverflow 上搜索信息来工作（如今，他们也向 ChatGPT 提问）。
- en: So, first of all, if you’re starting to program right now don’t be ashamed to
    spend a lot of time on Google, StackOverflow, or ChatGPT. It’s completely normal.
    You just need to know how to correctly do so because you’ll never have in mind
    all the code you need (you’ll have in mind just the methods and functions you
    use the most, of course).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，首先，如果你现在刚开始编程，不要羞于花大量时间在 Google、StackOverflow 或 ChatGPT 上。这是完全正常的。你只需要知道如何正确地使用这些资源，因为你永远不会记住所有你需要的代码（你只会记住你最常用的方法和函数，当然）。
- en: Anyway, the difference between today and the 90s is that in the 90s the Internet
    barely existed, so developers hadn’t all the support that have today thanks to
    global communities, forums, websites, and AI.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，今天和90年代的区别在于，90年代互联网几乎不存在，所以开发者没有像今天这样通过全球社区、论坛、网站和 AI 获得的支持。
- en: This led developers to learn to program the hard way, not rarely spending days
    to solve a problem (finding a bug or finding the right piece of code).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致开发者不得不艰难地学习编程，通常需要花费数天时间来解决一个问题（找出错误或找到合适的代码）。
- en: 'Today, you have a great opportunity: you have a senior developer available
    24/7 and this is ChatGPT, but you have to treat it like so, not like an oracle.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你有一个绝佳的机会：你可以24/7使用一位高级开发者，那就是 ChatGPT，但你需要像对待高级开发者一样对待它，而不是像对待神谕一样。
- en: 'So, here’re some guidelines on how you should correctly query ChatGPT if you’re
    starting to program today:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这里有一些关于如何正确地询问 ChatGPT 的指导原则，适合今天刚开始编程的人：
- en: '**Learn the basics first**. Before using ChatGPT, my advice is that you need
    to learn the basics first for a simple reason: ChatGPT often gives you code that
    you need to refactor, for any reason. This means that you need to have prior knowledge
    of coding: you can’t just ask ChatGPT to create some code for you to solve an
    actual problem. The kind of developers that will be replaced by AI is properly
    the ones that ask questions to ChatGPT with no prior (or with poor) knowledge
    of coding. So, before prompting, get a course and start practicing.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**首先学习基础知识**。在使用 ChatGPT 之前，我的建议是你需要首先学习基础知识，原因很简单：ChatGPT 经常会给你需要重构的代码，无论是什么原因。这意味着你需要具备一定的编程知识：你不能仅仅让
    ChatGPT 为你创建一些代码来解决实际问题。将会被 AI 替代的开发者是那些没有（或知识贫乏的）编程基础的人。所以，在提出问题之前，先报一个课程并开始实践吧。'
- en: '**Ask questions, then learn**. When we’re children we are very curious and
    our questioning makes us grow because we’re genuinely interested in the answers.
    This is the state of mind we’d always have as Software Professionals: having an
    answer and just copying and pasting it won’t make us learn how to program. If
    the code we get from ChatGPT works you should, at least, ask it to explain the
    code it used and why it is used it. As a beginner, in fact, your role is to learn
    so that in the future you can use ChatGPT less and be more independent: this is
    why you should always ask for code explanations.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**提出问题，然后学习**。当我们还是孩子时，我们非常好奇，我们的问题让我们成长，因为我们对答案真的感兴趣。这就是我们作为软件专业人员应始终保持的心态：仅仅得到一个答案并复制粘贴并不会让我们学会编程。如果我们从
    ChatGPT 获得的代码能够工作，你应该至少要求它解释使用的代码及其原因。作为一个初学者，你的角色实际上是学习，以便将来你可以减少对 ChatGPT 的依赖，更加独立：这就是为什么你应该始终要求代码解释的原因。'
- en: '**Solve actual problems**. When programming, we can solve the same problem
    with different methods: this is why it doesn’t make any sense to just ask ChatGPT
    to generate some random code. We absolutely need to ask it something related to
    a project we are making or a problem we need to solve.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**解决实际问题**。在编程时，我们可以用不同的方法解决同一个问题：这就是为什么仅仅让 ChatGPT 生成一些随机代码没有任何意义的原因。我们绝对需要询问它与我们正在做的项目或需要解决的问题相关的内容。'
- en: '**Don’t blindly trust it**. As a generative AI system, ChatGPT is prone to
    errors. While today with GTP-4 models we’ve seen very good improvements, there
    are still errors in the code. Also, errors are often due to the prompts that may
    be incomplete or somehow misleading. This is why, even if the code works, you
    can’t blindly trust the answers and need to understand deeply the code you get.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**不要盲目相信它**。作为一个生成性AI系统，ChatGPT容易出错。虽然今天使用GPT-4模型我们看到了很好的改进，但代码中仍然存在错误。此外，错误通常是由于提示可能不完整或某种程度上具有误导性。这就是为什么，即使代码有效，你也不能盲目相信答案，需要深入理解你获得的代码。'
- en: 'Rule number 2: always refer to the documentation'
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规则第2条：始终参考文档
- en: '![](../Images/3685d24e2d759466df2efbf5bea7cc11.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3685d24e2d759466df2efbf5bea7cc11.png)'
- en: The learning workflow while coding. Image by Federico Trotta.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 编码时的学习流程。图像来源：Federico Trotta。
- en: 'I created the above image for some content I wrote on Linkedin some months
    ago (oh, and by the way: [here’s my profile](https://www.linkedin.com/in/federico-trotta/)
    if you want to get in touch).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了上面的图片用于几个月前我在LinkedIn上写的一些内容（哦，顺便说一下：[这是我的个人资料](https://www.linkedin.com/in/federico-trotta/)如果你想联系我）。
- en: 'Here’s the moral of the story: regardless of where you’re searching for the
    information you need to solve your coding issue, you always need to read the documentation.
    Always.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 故事的寓意是：无论你在哪里寻找解决编码问题的信息，你始终需要阅读文档。永远。
- en: This is the Gospel for us Developers/Data Professionals. We always need to read
    the documentation.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于我们开发者/数据专业人员来说是福音。我们总是需要阅读文档。
- en: 'In fact, if we find a snippet of code that can solve a problem we’re facing,
    if we don''t understand the code we won’t be able to generalize the code we’re
    using. This means that in the future we won''t be able to solve a similar problem
    because we haven’t learned anything: we just copied and pasted the code.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，如果我们找到一个可以解决我们面临问题的代码片段，如果我们不理解这些代码，我们将无法概括我们正在使用的代码。这意味着将来我们将无法解决类似的问题，因为我们没有学到任何东西：我们只是复制和粘贴了代码。
- en: 'And this is particularly true with ChatGPT, especially because sometimes it
    invents libraries that don’t exist. Yes, you read it right: sometimes ChatGPT
    invents libraries.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于ChatGPT尤其如此，特别是因为有时它会发明一些不存在的库。是的，你没看错：有时ChatGPT会发明库。
- en: We have to say that, thanks to GPT-4, OpenAI made a lot of improvements. But
    in the last months, it happened to me at least a couple of times that ChatGPT
    invented some unexisting libraries.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须说，感谢GPT-4，OpenAI做了很多改进。但在过去几个月里，我至少遇到过几次ChatGPT发明了一些不存在的库。
- en: 'And you know how we can see if a library doesn’t exist? There are some possibilities:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道我们如何查看一个库是否存在吗？有一些可能性：
- en: You know what you’re doing and asking ChatGPT. But this will happen after months
    of practice when you gained some experience.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你知道自己在做什么并询问ChatGPT。但这将在你经过几个月的实践并积累一些经验后发生。
- en: You get the code from ChatGPT, read it, try to understand it, ask ChatGPT for
    some explanation on the usage, go online to read the documentation and find no
    reference.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你从ChatGPT那里获取代码，阅读它，尝试理解它，询问ChatGPT关于使用的解释，在线查阅文档却找不到参考。
- en: 'You try the code and get an error, and you learn your lesson the hard way.
    But don’t be ashamed of it: it happened even to me.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你尝试代码并遇到错误，你会通过实际经验学到教训。但不要感到羞愧：我也遇到过这种情况。
- en: 'Remember: there’s nothing bad in the urge to solve a problem as soon as possible.
    So, you can even try the code and get an error. Well, the truth is that the error
    can even be due to a bad prompt, and this happens very frequently.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 记住：急于尽快解决问题没有什么不好。所以，你甚至可以尝试代码并遇到错误。实际上，错误甚至可能是由于不好的提示，这种情况非常频繁。
- en: 'Anyway, remember: if your job is done because you solved the actual problem,
    then, please: go read the documentation for more understanding. You may also discover
    that your issue can be solved with less code.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，记住：如果你的工作已经完成，因为你解决了实际问题，那么，请：去阅读文档以获取更多理解。你也可能发现你的问题可以用更少的代码解决。
- en: 'Rule number 3: troubleshooting and debugging'
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规则第3条：故障排除和调试
- en: ChatGPT is a great tool even for troubleshooting and debugging your code. However,
    even in this case, you must learn how to use it correctly, if you’re starting
    your learning-how-to-code path.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT是一个很棒的工具，即使是在故障排除和调试你的代码时。然而，即使在这种情况下，你也必须学会如何正确使用它，如果你刚刚开始学习编码。
- en: First of all, if you’re using an IDE like VS CODE or PYCHARM to program, then
    use their debugging features. They have integrated debugging features thanks to
    which you can just push a button, and they debug your code, showing you (eventual)
    troubles in your code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如果你使用的是像VS CODE或PYCHARM这样的IDE编程，那么使用它们的调试功能。它们集成了调试功能，你只需按下一个按钮，它们就会调试你的代码，显示代码中的（可能的）问题。
- en: 'At this stage, but even later (I’m still using this method), the best idea
    is to follow this path:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，甚至在后面（我仍在使用这种方法），最好的办法是遵循这条路径：
- en: Write your program.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写你的程序。
- en: Debug your code in the IDE.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在IDE中调试你的代码。
- en: Read the eventual warnings you get from the debugger if something doesn’t work.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果有警告从调试器中获得，请阅读它们，如果某些功能不起作用。
- en: Paste the warnings on Google if you don’t know how to solve them.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你不知道如何解决它们，可以将警告粘贴到Google上。
- en: Paste the warnings on ChatGPT if Googling doesn’t solve your problem.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果谷歌搜索没有解决你的问题，可以将警告粘贴到ChatGPT上。
- en: Paste the whole code in ChatGPT if you still haven't solved your issue.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你仍未解决问题，将完整代码粘贴到ChatGPT中。
- en: Go read the documentation if the previous point solved your issue.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果前一个点解决了你的问题，请查看文档。
- en: 'I’ll never get tired to repeat it: we **always** need to refer to the documentation
    when Google or ChatGPT solve an issue we have with our code.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我会不断重复：我们**总是**需要参考文档，当谷歌或ChatGPT解决了我们代码中的问题时。
- en: 'So, please: don’t blindly paste the code into ChatGPT asking to search for
    troubles in your code: first, strive to find them on your own the hard way because
    this is the only way you’ll learn things. There’s no other way to learn stuff,
    and I know you know it.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，请：不要盲目将代码粘贴到ChatGPT中，要求查找代码中的问题：首先，努力自己找到它们，因为这是你学习的唯一途径。没有其他学习方法，我知道你也知道这一点。
- en: 'Finally, an **important note**: remember that ChatGPT works in the cloud and,
    also, it may use your prompts to train its algorithms (with recent changes in
    the data privacy usage you should be able to change the settings, and choose not
    to give consent to OpenAI to train its algorithms with your prompts).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，**重要说明**：记住，ChatGPT在云端运行，并且它可能会使用你的提示来训练其算法（根据最近的数据隐私使用更改，你应该能够更改设置，选择不允许OpenAI使用你的提示来训练其算法）。
- en: 'However, an important thing to keep in mind is to not paste into ChatGPT code
    to debug with sensible information: due to data breaches and other related security
    issues, it’s better to keep yourself safe.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，需要记住的是，不要将包含敏感信息的代码粘贴到ChatGPT中进行调试：由于数据泄露和其他相关安全问题，最好保护自己。
- en: Examples in Python
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的示例
- en: Now, let’s see some examples of prompts we should write on ChatGPT to learn
    how to code.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看一些我们应该在ChatGPT上写的提示，以学习如何编程。
- en: 'I’ve asked ChatGPT the following: “*How can we print in Python?*”'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我问了ChatGPT以下问题：“*我们如何在Python中打印？*”
- en: 'Here’s the answer:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是答案：
- en: In Python, you can use the `print()` function to display output on the console
    or terminal. The `print()` function takes one or more arguments and prints them
    as text.
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在Python中，你可以使用`print()`函数在控制台或终端上显示输出。`print()`函数接受一个或多个参数，并将它们打印为文本。
- en: ''
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here are a few examples of using the `print()` function:'
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这里有几个使用`print()`函数的示例：
- en: ''
  id: totrans-67
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Printing a simple string:'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 打印简单的字符串：
- en: '[PRE1]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '2\. Printing variables:'
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 2. 打印变量：
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '3\. Printing multiple arguments separated by a specific character:'
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 3. 打印多个用特定字符分隔的参数：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '4\. Printing formatted output using f-strings (Python 3.6 and above):'
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 4. 使用f-strings打印格式化输出（Python 3.6及以上）：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: These are just a few examples to demonstrate the usage of the `print()` function.
    You can pass various types of objects as arguments to the `print()` function,
    and it will automatically convert them into a string representation before printing.
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这些只是展示`print()`函数用法的一些示例。你可以将各种类型的对象作为参数传递给`print()`函数，它会自动将它们转换为字符串表示形式，然后进行打印。
- en: 'Now, a question: which method would you use?'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有一个问题：你会使用哪种方法？
- en: Exactly, here’s the problem! The prompt we made was too generic so ChatGPT gave
    us a generic answer.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 正是这里出现了问题！我们做的提示太笼统，所以ChatGPT给了我们一个泛泛的回答。
- en: 'So, here’s another lesson: **prompts must be very specific**. One could be:
    *“I have a list with some strings in Python: how can I print them efficiently?”*'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这里有另一个教训：**提示必须非常具体**。例如：*“我在Python中有一个包含一些字符串的列表：我如何有效地打印它们？”*
- en: 'Here’s the answer:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这是答案：
- en: To print a list of strings efficiently in Python, you can use the `join()` method
    along with the `print()` function. The `join()` method concatenates all the strings
    in the list into a single string using a specified separator. Then you can simply
    pass this concatenated string to the `print()` function to display it.
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要在 Python 中有效地打印一个字符串列表，你可以使用 `join()` 方法与 `print()` 函数结合使用。`join()` 方法将列表中的所有字符串连接成一个单独的字符串，使用指定的分隔符。然后你可以将这个连接后的字符串传递给
    `print()` 函数以显示它。
- en: ''
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here’s an example:'
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE5]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the example above, the `join()` method joins the strings in `my_list` using
    a space `' '` as the separator. Then the `print()` function is used to display
    the concatenated string.
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在上面的例子中，`join()` 方法使用空格 `' '` 作为分隔符来连接 `my_list` 中的字符串。然后使用 `print()` 函数来显示连接后的字符串。
- en: ''
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: By using the `join()` method, you avoid the overhead of multiple calls to the
    `print()` function, resulting in more efficient string concatenation and printing.
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 通过使用 `join()` 方法，你可以避免多次调用 `print()` 函数的开销，从而实现更高效的字符串连接和打印。
- en: 'And here we are: with a specific question we got a specific answer.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们来了：有了具体的问题，我们得到了具体的答案。
- en: 'And now, you know what we have to do? Yes, you know: if we don’t know how it
    works, we have to ask ChatGPT some more explanations on the `join()` method. We
    can do it in the same chat like so: “*What is the method ‘join()’ and how does
    it work?”*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你知道我们需要做什么了吗？是的，你知道：如果我们不知道它是如何工作的，我们需要向 ChatGPT 询问更多关于 `join()` 方法的解释。我们可以在同一个聊天中这样做：“*‘join()’
    方法是什么，它是如何工作的？*”
- en: 'And here’s the answer:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是答案：
- en: The `join()` method is a string method in Python that concatenates the elements
    of an iterable (such as a list, tuple, or set) into a single string using a specified
    separator. It returns a new string that contains all the elements joined together.
  id: totrans-91
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`join()` 方法是 Python 中的一个字符串方法，用于将可迭代对象（如列表、元组或集合）的元素连接成一个单独的字符串，使用指定的分隔符。它返回一个新的字符串，包含所有连接在一起的元素。'
- en: ''
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The syntax for using the `join()` method is as follows:'
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用 `join()` 方法的语法如下：
- en: '[PRE6]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, `separator` is the string that will be used to join the elements, and
    `iterable` is the collection of elements to be joined.
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在这里，`separator` 是将元素连接起来的字符串，`iterable` 是要连接的元素集合。
- en: ''
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When `join()` is called on a separator string, it iterates over the elements
    of the iterable and concatenates them, inserting the separator string between
    each pair of elements. The separator is not added at the beginning or the end
    of the resulting string.
  id: totrans-97
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当 `join()` 在分隔符字符串上被调用时，它遍历可迭代对象的元素并将它们连接起来，在每对元素之间插入分隔符字符串。分隔符不会添加到结果字符串的开头或结尾。
- en: ''
  id: totrans-98
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here’s an example to illustrate how the `join()` method works:'
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这是一个例子，说明 `join()` 方法是如何工作的：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the example above, the `join()` method is called on the separator string
    `' '`. It iterates over the elements of `my_list` and concatenates them, inserting
    a space between each pair of elements. The resulting string `'Hello World Python'`
    is then printed.
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在上面的例子中，`join()` 方法在分隔符字符串 `' '` 上被调用。它遍历 `my_list` 中的元素并将它们连接起来，在每对元素之间插入一个空格。结果字符串
    `'Hello World Python'` 被打印出来。
- en: ''
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It’s worth noting that the `join()` method is a more efficient way to concatenate
    multiple strings compared to using the `+` operator in a loop. This is because
    `join()` internally optimizes the process of concatenation, resulting in better
    performance, especially when dealing with a large number of strings.
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 值得注意的是，`join()` 方法是一种比在循环中使用 `+` 运算符连接多个字符串更高效的方法。这是因为 `join()` 内部优化了连接过程，从而提高了性能，特别是在处理大量字符串时。
- en: 'Now, at this point, you should do other two things:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在这一点上，你应该做其他两件事：
- en: Searching for “join() Python” on Google and see some other examples and read
    the documentation.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Google 上搜索“join() Python”，查看其他一些例子并阅读文档。
- en: As we can see, ChatGPT tells us that this method is more efficient than using
    the `+` operator with a loop to solve this problem. You should continue the chat
    and ask for an example (then, read the documentation that may come with the next
    examples).
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们所见，ChatGPT 告诉我们这种方法比使用 `+` 运算符和循环解决这个问题更高效。你应该继续聊天并请求一个例子（然后，阅读可能会随下一个例子附带的文档）。
- en: Conclusions
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: I hope you find useful this article on how to start your programming journey
    with the help of ChatGPT.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你觉得这篇文章对如何开始编程之旅有用，尤其是借助 ChatGPT。
- en: 'Remember: don’t take anything for granted. Use it to learn, not as an oracle.
    And after you solved your issue, write a specific prompt, read the documentation,
    learn the code and, if possible, make practice with the code you get as an answer.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 记住：不要把任何事情视为理所当然。用它来学习，而不是作为预言。解决问题后，写一个具体的提示，阅读文档，学习代码，并在可能的情况下，练习你得到的代码。
- en: '**FREE PYTHON EBOOK:**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**免费 Python 电子书：**'
- en: 'Started learning Python Data Science but struggling with it? [***Subscribe
    to my newsletter and get my free ebook: this will give you the right learning
    path to follow to learn Python for Data Science with hands-on experience.***](https://federico-trotta.ck.page/a3970f33f4)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 开始学习 Python 数据科学但遇到困难？[***订阅我的通讯并获得我的免费电子书：这将为你提供正确的学习路径，帮助你通过实践经验学习 Python
    数据科学。***](https://federico-trotta.ck.page/a3970f33f4)
- en: 'Enjoyed the story? Become a Medium member for 5$/month [through my referral
    link](https://medium.com/@federicotrotta/membership): I’ll earn a small commission
    to no additional fee to you:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 享受了这个故事吗？每月只需 5$ [通过我的推荐链接](https://medium.com/@federicotrotta/membership) 成为
    Medium 会员：我将获得少量佣金，而不会增加你的费用：
- en: '[](https://federicotrotta.medium.com/membership?source=post_page-----cfc5151e1c42--------------------------------)
    [## Join Medium with my referral link - Federico Trotta'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://federicotrotta.medium.com/membership?source=post_page-----cfc5151e1c42--------------------------------)
    [## 通过我的推荐链接加入 Medium - Federico Trotta'
- en: Read every story from Federico Trotta (and thousands of other writers on Medium).
    Your membership fee directly supports…
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读 Federico Trotta 的每一个故事（以及 Medium 上成千上万其他作家的故事）。你的会员费直接支持…
- en: federicotrotta.medium.com](https://federicotrotta.medium.com/membership?source=post_page-----cfc5151e1c42--------------------------------)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: federicotrotta.medium.com](https://federicotrotta.medium.com/membership?source=post_page-----cfc5151e1c42--------------------------------)
