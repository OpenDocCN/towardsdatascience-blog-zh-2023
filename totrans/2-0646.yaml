- en: 'Data Leakage: What It Is and Why It Causes Our Predictive Systems to Fail'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/data-leakage-what-it-is-and-why-it-causes-our-predictive-systems-to-fail-4e5ed008489b](https://towardsdatascience.com/data-leakage-what-it-is-and-why-it-causes-our-predictive-systems-to-fail-4e5ed008489b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Data leakage represents, together with over/underfitting, the main cause of
    failure of machine learning projects that go into production*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@theDrewDag?source=post_page-----4e5ed008489b--------------------------------)[![Andrea
    D''Agostino](../Images/58c7c218815f25278aae59cea44d8771.png)](https://medium.com/@theDrewDag?source=post_page-----4e5ed008489b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4e5ed008489b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4e5ed008489b--------------------------------)
    [Andrea D''Agostino](https://medium.com/@theDrewDag?source=post_page-----4e5ed008489b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4e5ed008489b--------------------------------)
    ·5 min read·Aug 4, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/76015a8e90a6ce9fe834ebd8b66a25a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Grianghraf](https://unsplash.com/@grianghraf?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Data leakage is undoubtedly a threat that preys on data scientists, regardless
    of the level of seniority.
  prefs: []
  type: TYPE_NORMAL
- en: It is that phenomenon that can affect everyone — even professionals with years
    of experience in the sector.
  prefs: []
  type: TYPE_NORMAL
- en: Together with over/underfitting, **it represents the main cause of failure of
    machine learning projects that go into production.**
  prefs: []
  type: TYPE_NORMAL
- en: Data leakage occurs when information present in the training set leaks into
    the evaluation set (whether validation or test set)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*But why does data leakage claim so many victims?*'
  prefs: []
  type: TYPE_NORMAL
- en: Because even after many experiments and evaluations in the development phase,
    **our models can fail spectacularly in a production scenario.**
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding data leakage is not easy. I hope that with this article you’ll understand
    why and how to avoid it in your projects!
  prefs: []
  type: TYPE_NORMAL
- en: Examples of data leakage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here’s an example that can be useful for you to understand what data leakage
    is.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that we are developers of applied AI and we are employed by a company
    that manufactures children’s toys in series.
  prefs: []
  type: TYPE_NORMAL
- en: Our task is to create a machine learning model to identify if a toy will be
    subject to a refund request within 3 days of its sale.
  prefs: []
  type: TYPE_NORMAL
- en: We receive the data from the factory, in the form of images capturing the toy
    before canning.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5fdc65428777ffa910f6676f2ba32d5d.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Jerry Wang](https://unsplash.com/@jerry_318?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: We use these images to train our model which performs very well in cross validation
    and on the test set.
  prefs: []
  type: TYPE_NORMAL
- en: We deliver the model and for the first month **the customer reports only 5%
    defective toy refund requests.**
  prefs: []
  type: TYPE_NORMAL
- en: In the second month we prepare for the retraining of the model. The factory
    sends us more photographs, which we use to expand the initial training dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Again, the model performs well in cross-validation and testing.
  prefs: []
  type: TYPE_NORMAL
- en: This time, however, we receive a communication that customers are making requests
    and that 90% of these requests refer to a defective toy.
  prefs: []
  type: TYPE_NORMAL
- en: We take a look at the photos….and we notice that the photos sent by the customer
    in the last batch **show the toys subject to refund during the first month.**
  prefs: []
  type: TYPE_NORMAL
- en: The new photos supplied by the factory inadvertently include the information
    regarding the refund request within 3 days of the sale of the toy.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Basically, the customer sent us selected images after the refund request was
    made, **so these images capture specific characteristics of the toys that have
    been returned**. This may include visible damage or obvious defects which have
    been discovered by the customer and which have led to a refund request.
  prefs: []
  type: TYPE_NORMAL
- en: '*Consequently we understand that the model is very good at identifying specific
    defects, thus showing a high performance in development but not in production.*'
  prefs: []
  type: TYPE_NORMAL
- en: We have to call the customer and explain the situation and possibly clean up
    the training dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '**Despite its relevance, the concept of data leakage is little mentioned compared
    to overfitting. This makes it even more dangerous for the emerging data scientist.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Common causes of data leakage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let’s see some of the most frequent causes that lead to data leakage.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Timelines split randomly rather than by time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are usually taught that randomly splitting training, validation, and test
    datasets is the correct choice.
  prefs: []
  type: TYPE_NORMAL
- en: However, very often our **data can be correlated on a time basis**, which means
    that the time variable influences the distribution of our labels.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take for example a time series that comes from the stock market.
  prefs: []
  type: TYPE_NORMAL
- en: If we randomly split this dataset, **data leakage would occur at 100%.**
  prefs: []
  type: TYPE_NORMAL
- en: This is because data from the following days would be randomly mixed into the
    training dataset. **Our model would be exposed to the “correct” labels without
    having to learn them.**
  prefs: []
  type: TYPE_NORMAL
- en: It’s kind of like a kid in school has the correct answers to the test that he’s
    taking. High performance, but very low knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: 'To avoid the problem, **it is useful to split the data based on time**: for
    example if we have data for a month, we train the model on the first 20 days,
    and we test on the remaining 10, sequentially.'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Transform the data before splitting it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is one of the most common causes among data science newcomers.
  prefs: []
  type: TYPE_NORMAL
- en: This is how this error manifests itself
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**The mistake here that we applied scaling to all the data before splitting
    them into training and test sets.**'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the scaler object requires to know the mean and standard deviation
    of the dataset to which it is applied.
  prefs: []
  type: TYPE_NORMAL
- en: By providing it with the entire dataset, it will also have stored and used information
    from the test set, **which will shift the mean and standard deviation.**
  prefs: []
  type: TYPE_NORMAL
- en: '**To fix this, *always* split your data before applying a transformation like
    scaling.**'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Fill in the missing data with information from the test set
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A bit similar to the point above, but from another angle.
  prefs: []
  type: TYPE_NORMAL
- en: A common method for imputing missing data from a column is to fill the cells
    with the mean or median of all the data in the column.
  prefs: []
  type: TYPE_NORMAL
- en: If the mean is also calculated on the values belonging to the test set, we are
    generating leakage in the training set.
  prefs: []
  type: TYPE_NORMAL
- en: Again, we split our data before applying imputation.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Failure to remove duplicates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we have duplicate records in our dataset, there is a risk that some of these
    may appear in both training and test sets.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, the leakage. Our model will clearly be good at predicting the value of
    such duplicates, reducing the prediction error considerably (but incorrectly).
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this error, y**ou must remove the duplicates before performing the
    train-test split.**
  prefs: []
  type: TYPE_NORMAL
- en: If we do *oversampling*, i.e. create artificial duplicates to train a model
    on an unbalanced dataset, then we need to do it after splitting the data.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Wrong data generation process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like the toy factory example above.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes the leakage comes from **how the data we need to train the model on
    is generated and delivered.**
  prefs: []
  type: TYPE_NORMAL
- en: There is no way around this scenario. We just have to be vigilant, ask questions
    and take nothing for granted, especially when we are not in control of the data
    generation process just like in the case of the toy factory.
  prefs: []
  type: TYPE_NORMAL
- en: In general, the advice is always to check the data if it is not processed /
    delivered by a data science team
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thank you for reading this far.
  prefs: []
  type: TYPE_NORMAL
- en: You learned what data leakage is and why it’s so difficult to manage, even for
    experienced data scientists.
  prefs: []
  type: TYPE_NORMAL
- en: In this case the devil is in the details which, especially for new programmers,
    are easily overlooked when coding.
  prefs: []
  type: TYPE_NORMAL
- en: The examples I’ve shown you should help you assess whether your project is experiencing
    leakage.
  prefs: []
  type: TYPE_NORMAL
- en: '**Usually, if you notice very high performance in development, always check
    for leakage.**'
  prefs: []
  type: TYPE_NORMAL
- en: We never want our model to fail in production!
  prefs: []
  type: TYPE_NORMAL
- en: Until next time,
  prefs: []
  type: TYPE_NORMAL
- en: Andrew
  prefs: []
  type: TYPE_NORMAL
