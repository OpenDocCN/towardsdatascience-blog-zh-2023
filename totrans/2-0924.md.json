["```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nN = 10\nns = np.arange(N)\n\nfig, axes = plt.subplots(1, N//2+1, figsize=(18,8), sharex=True, sharey=True)\n\nfor k in range(0, N//2+1):\n    eiks = np.exp(-2*1J*np.pi*ns/N*k)\n    pretty_ax(axes[k])\n    plot_sum_vector(eiks, axes[k])\n    axes[k].set_title(f'k={k}')\n    axes[k].set_aspect('equal')\nfig.suptitle(f'Complex plot of the $e^{{-2i\\pi kn/N}}$ families')\n```", "```py\nimport numpy as np\nfrom scipy.signal import detrend\nimport matplotlib.pyplot as plt\n\nN = 20\n# create a sample signal, with linear, offset, noise and sinus parts\nys = np.arange(N) * 2 + 4 + np.random.randn(N) + 4*np.sin(2*np.pi*np.arange(N)/5)\n# constant and linear detrend\nys_c = detrend(ys, type='constant')\nys_l = detrend(ys, type='linear')\n\nfig, axes = plt.subplots(1, 2)\n\nax = axes[0]\nax.plot(ys, label='raw')\nax.plot(ys_c, label='constant-detrended')\nax.plot(ys_l, label='linear-detrended')\nax.legend()\nax.set_title('Input signal')\n\nax = axes[1]\n# we use rfft since our input signals are real\nax.plot(np.abs(np.fft.rfft(ys)))\nax.plot(np.abs(np.fft.rfft(ys_c)))\nax.plot(np.abs(np.fft.rfft(ys_l)))\nax.set_title('Module of Fourier-transform')\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nN = 10\nns = np.arange(N)\nKs = [-5, 2, 5]\n\nfig, axes = plt.subplots(len(Ks), N//2+1, figsize=(18,8), sharex=True, sharey=True, gridspec_kw={'hspace':0, 'wspace':0})\n\nfor i, K in enumerate(Ks):\n    xs = K*np.arange(N)\n    for k in range(0, N//2+1):\n        Zs = xs * np.exp(-2*1J*np.pi*ns/N*k) / N\n        ax = axes[i, k]\n        pretty_ax(ax)\n        plot_sum_vector(Zs, ax)\n        ax.set_aspect('equal')\n        ax.set_xlabel(f'k={k}')\n    axes[i, 0].set_ylabel(f'K={K}')\nfig.tight_layout()\n```"]