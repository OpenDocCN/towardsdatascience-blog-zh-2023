- en: How to Optimize Your Marketing Budget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-optimize-your-marketing-budget-63707c18ba36](https://towardsdatascience.com/how-to-optimize-your-marketing-budget-63707c18ba36)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[MARKETING ANALYTICS](https://medium.com/tag/marketing-analytics)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is Time to Reap The Fruits of Your Hard Marketing Mix Model Training!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://dr-robert-kuebler.medium.com/?source=post_page-----63707c18ba36--------------------------------)[![Dr.
    Robert Kübler](../Images/3b8d8b88f76c0c43d9c305e3885e7ab9.png)](https://dr-robert-kuebler.medium.com/?source=post_page-----63707c18ba36--------------------------------)[](https://towardsdatascience.com/?source=post_page-----63707c18ba36--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----63707c18ba36--------------------------------)
    [Dr. Robert Kübler](https://dr-robert-kuebler.medium.com/?source=post_page-----63707c18ba36--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----63707c18ba36--------------------------------)
    ·11 min read·Jul 3, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d591a198d3af1704d0affe022ea503b5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image created with DALL-E.
  prefs: []
  type: TYPE_NORMAL
- en: Marketing mix models are a powerful tool for understanding the impact of different
    marketing channels on sales. By building a marketing mix model, marketers can
    quantify the contribution of each channel to their overall sales, and then use
    this information to optimize their budget allocation.
  prefs: []
  type: TYPE_NORMAL
- en: So far, I have written an entire series about [**building** marketing mix models](https://kuebler.ai/list/marketing-mix-modeling-cc3268801754),
    yet I still owe you an article about how to use these models to optimize media
    spending. Today is your lucky day since in this article, I will show you just
    that!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/301f2f390f4783a046362ae4ce16ac23.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are new to marketing mix modeling, you can start with my introductory
    article:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/introduction-to-marketing-mix-modeling-in-python-d0dd81f4e794?source=post_page-----63707c18ba36--------------------------------)
    [## Introduction to Marketing Mix Modeling in Python'
  prefs: []
  type: TYPE_NORMAL
- en: Which advertising spendings are really driving your sales?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/introduction-to-marketing-mix-modeling-in-python-d0dd81f4e794?source=post_page-----63707c18ba36--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can optimize something, we have to build a model first. We will do
    it very quickly, so we can get to the main section of this article as soon as
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: The Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let us load some data. I will use the same dataset as in my old articles.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The dataset looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/24c7ab64e15add9ff0d1613d885153a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'The logic behind this table is the following: imagine you work in a company
    that sells some product. You can see the weekly sales of this product in the column
    **Sales**. In order to boost these sales, you spend some money on advertising,
    in our example **TV**, **Radio**, and **Banner** advertising. We now want to model
    the sales using advertising spending and more *control variables*, such as weekday,
    month, product price, weather, …'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/32f1a68a3513553c78f8f5ebf94160f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: The Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Building complex models such as XGBoost or deep neural networks are hard to
    interpret and optimize. We turn to a proven method that uses interpretable carryover
    and saturation effects to build a generalized additive model instead, [as done
    here](/a-small-python-library-for-marketing-mix-modeling-mamimo-100f31666e18):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c03a53a00fe537940285ec6153e3e608.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'The carryover and saturation blocks are intuitive feature transformations:'
  prefs: []
  type: TYPE_NORMAL
- en: The **carryover** models that a media spending at time *t* might still influence
    the sales at times *t* + 1, *t* + 2, …, or the other way around, that sales that
    were observed at time *t* are also influenced by the spending at time *t -* 1,
    *t* - 2, …
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **saturation** models diminishing rates of return, e.g., increasing your
    spending in a channel from 0 € to 100,000 € has a big impact, but changing it
    from 1,000,000,000 to 1,000,100,000 does not anymore.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Note:*** *In the graphic, the control variables are omitted. This is fine
    because we do not need them for optimization anyway — we cannot change them anyway
    like the money we put into our media channels. The only control variable that
    we* ***can*** *change is the price, but we assume that it is constant here, and
    that we only really want to optimize our media expenditures.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So, the model has the form
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4b51a35e328a1e4efc3821a4157cc826.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: for some yet-to-be-defined functions **sat**uration and **car**ryover. As an
    example, let us assume that
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6891575de9e0d6382feeaea5ccf10fe7.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: and
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5cc9a7612fbeb9e3172a64cc7b906e97.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: '*β* is the saturation coefficient, *λ* the carryover strength, and *ℓ* the
    carryover length.'
  prefs: []
  type: TYPE_NORMAL
- en: We can learn these parameters by treating them as hyperparameters, or by employing
    Bayesian methods and treating them as normal, learnable parameters. We have seen
    in detail how to get these parameters in all of my last articles about marketing
    mix modeling, so I will not go further into this topic.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, let us assume that we have the numbers now, and we want to use them
    to create an optimized media budget allocation plan.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing The Media Budget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us assume that our previous marketing mix modeling attempts left us with
    the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We will now rebuild the marketing mix model in Python using numpy.
  prefs: []
  type: TYPE_NORMAL
- en: But why? We have build a model using scikit-learn or PyMC already! Can’t we
    reuse these?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Good question! We *could* use our pre-trained model and hand it over to a general-purpose
    optimization algorithm that tries to find media spend inputs that maximize sales.
    However, this is called **black-box optimization**, and it has the problem that
    it likes to get stuck in local optima instead of finding a global optimum.
  prefs: []
  type: TYPE_NORMAL
- en: Another problem with black-box optimization is that the algorithms typically
    have various parameters that you have to play around with to find a good (but
    maybe not optimal) solution. That’s why some people say that this kind of optimization
    is more an art than it is science.
  prefs: []
  type: TYPE_NORMAL
- en: Convexity to The Rescue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we can formulate our problem as a **convex optimization problem**, we can
    solve it using libraries such as [cvxpy](https://www.cvxpy.org/) that are **guaranteed**
    to find the best media budget allocation. I used this library [here](https://medium.com/towards-data-science/introduction-to-linear-programming-b6647d20d5f6)
    already to solve another optimization problem.
  prefs: []
  type: TYPE_NORMAL
- en: In order to use a convex optimization method, our model has to be convex **or
    concave**, meaning that putting a minus sign in front of the model makes it convex.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/794f1d794c83d050fe1f203412d4311a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if our model is *y* = *x*², it would be a concave function that
    is easy to minimize. *y* = 100 - *x*² would be a concave model that is easy to
    maximize.
  prefs: []
  type: TYPE_NORMAL
- en: I will not go into detail any further; just know that **our model is in fact
    a concave function**! In a model carryover-saturation model that we created, it
    is sufficient that the second derivative of the saturation function is negative,
    then the model is concave.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/98bb1b16ee41681693e187f5bfc37034.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: However, if we use other saturation functions such as Adbudg or other typical
    S-shaped functions, they might neither be concave nor convex, which makes it more
    difficult to optimize them.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/93c58294240fb77ab36095b71959fcb5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Ok, enough of the theory. Just remember for now that our model is concave, which
    is great since then we can find a global optimum, i.e. a budget allocation that
    yields the maximum sales.
  prefs: []
  type: TYPE_NORMAL
- en: Reimplementing Our Model in Numpy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let us define some matrices that take care of the carryover effect.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: I know that this is hard to grasp, so let’s take a look at one of these matrices.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3616eca2b6c43641ff02e1d43fbcef23.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: This implements a carryover with a strength of 0.2 and a length of 1\. You can
    see this if you multiply this matrix with a spending vector.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4141fda8f28c4d3ccdd183e6c844974b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: With this out of the way, let us continue with the saturation. This is only
    a simple formula involving `exp` , so no problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives us the sum of the sales **that come from our marketing efforts**
    since we ignore the control variables here.The number is 3,584,648.73 €, and we
    want to increase it now by changing our media spendings! Spoiler: it turns out
    that we can **increase this number by about 1.5 million to 5,054,070.21 €.** Wow!
    Not bad for just juggling some numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/08b72a924611ccf4b624d43cf8b50b31.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: About the result
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also see an interesting pattern here.
  prefs: []
  type: TYPE_NORMAL
- en: It seems that spending your budget equally is your best bet.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Only the first period’s spend is a bit higher, but then it kind of balances
    out. That is because of how our model works: In the first period, there is no
    adstock yet, so we have to invest a bit more to get our sales rolling. Starting
    from the second period, we only have to put so much into the model to keep the
    adstock high, but not too high because of the saturation. In the last period,
    the adstock does not matter anymore since time ends there, as far as the model
    is concerned. That’s why the optimized budget there is lower.'
  prefs: []
  type: TYPE_NORMAL
- en: Reimplementing Our Model in CVXPY
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Alright, now we are ready to get to that optimal solution using cvxpy. First,
    we define the variables, in our case one for each channel and each timestep so
    3**N* = 3*200 = 600 variables in total.
  prefs: []
  type: TYPE_NORMAL
- en: Without anything else, the optimum would be setting all variables to infinity,
    so we need some constraints. The variables should all be
  prefs: []
  type: TYPE_NORMAL
- en: non-negative, and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: we want the sum of all of these 600 variables to be smaller or equal to what
    we have spent historically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we want to optimize the model the model that we have implemented using
    numpy functions, but using their cvxpy equivalent instead, which typically means
    writing `cp` instead of `np` . We can even reuse the carryover matrix from before!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We can now solve this maximization problem in **very short time** via
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Nice! We can get the optimal budget via `tv.value, radio.value, banners.value` .
    You can see that the spends are kind of constant for each week in each channel,
    which is maybe not as interesting as expected. But optimal is optimal, so we will
    take it.
  prefs: []
  type: TYPE_NORMAL
- en: We could have gotten 5 million instead of 3.6 million in the past. While this
    is nice to know, it is worthless now and might just upset the business. However,
    we can use this logic now to optimize future marketing spends as well, of course!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Further Constraints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'That’s it, now you have a basic budget optimization tool! And the good part
    is that you can model even more constraints that might come from the business.
    As an example, the business might say that the total radio spends are quite high:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The business wants it to be less than 300,000 €, for strategic reasons that
    the model cannot know. Alright, no problem, let’s add it to the constraint set!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Easy as that. We can let the optimization run again and we end up with slightly
    reduced optimized sales of 4,990,178.80 €. But if we check the sum of the radio
    spends now
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: we can see that the business constraint was respected. And we can add even more
    constraints, such as
  prefs: []
  type: TYPE_NORMAL
- en: the sum of two channels should be smaller or greater than some number, or
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: in some weeks we don’t allow any media spending.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You only have to model it using some sums and equalities or inequalities.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, we first recapped the formulas for marketing mix models. This
    was important because we needed to reimplement the models. Luckily, since our
    models are easy and interpretable, this was no problem at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our model had in fact another great property: it’s concave! In this case, the
    maximum value of sales is uniquely defined, and we could get to it via convex
    optimization. Optimizing non-convex or non-concave functions is difficult in general,
    and more of an art that involves tuning many hyperparameters, that’s why we didn’t
    go this route.'
  prefs: []
  type: TYPE_NORMAL
- en: As a grand finale, we optimized our media budget! It was about time. We have
    even seen how to incorporate more constraints into the model, such as that some
    channels need some minimum or maximum budget allocations. Using this approach,
    you can now optimize your future media budget allocation.
  prefs: []
  type: TYPE_NORMAL
- en: Another optimization that we did not talk about is **minimizing your media budget**
    under the constraint that you want to make a certain minimal amount of sales,
    i.e. spending as little money as you can to still reach your goal. This is something
    you can also implement yourself easily! In contrast, before we have taken all
    of the money we have and made as many sales as possible.
  prefs: []
  type: TYPE_NORMAL
- en: I hope that you learned something new, interesting, and valuable today. Thanks
    for reading!
  prefs: []
  type: TYPE_NORMAL
- en: '**As the last point, if you**'
  prefs: []
  type: TYPE_NORMAL
- en: '**want to support me in writing more about machine learning and**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**plan to get a Medium subscription anyway,**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**why not do it** [**via this link**](https://dr-robert-kuebler.medium.com/membership)**?
    This would help me a lot! 😊**'
  prefs: []
  type: TYPE_NORMAL
- en: '*To be transparent, the price for you does not change, but about half of the
    subscription fees go directly to me.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Thanks a lot if you consider supporting me!**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you have any questions, write me on* [*LinkedIn*](https://www.linkedin.com/in/dr-robert-k%C3%BCbler-983859150/)*!*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And if you want to dive deeper into the world of algorithms, give my new publication
    **All About Algorithms** a try! I’m still searching for writers!
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/all-about-algorithms?source=post_page-----63707c18ba36--------------------------------)
    [## All About Algorithms'
  prefs: []
  type: TYPE_NORMAL
- en: From intuitive explanations to in-depth analysis, algorithms come to life with
    examples, code, and awesome…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/all-about-algorithms?source=post_page-----63707c18ba36--------------------------------)
  prefs: []
  type: TYPE_NORMAL
