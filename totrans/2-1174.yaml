- en: 'How to Engage with Users By Storytelling: Show Data Analytics in R and Shiny'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-engage-with-users-by-storytelling-show-data-analytics-in-r-and-shiny-e7205c06ccea](https://towardsdatascience.com/how-to-engage-with-users-by-storytelling-show-data-analytics-in-r-and-shiny-e7205c06ccea)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How R and Shiny Can Help You Find the Best Youtube Videos for Your Kids
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://chengzhizhao.medium.com/?source=post_page-----e7205c06ccea--------------------------------)[![Chengzhi
    Zhao](../Images/186bba91822dbcc0f926426e56faf543.png)](https://chengzhizhao.medium.com/?source=post_page-----e7205c06ccea--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e7205c06ccea--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e7205c06ccea--------------------------------)
    [Chengzhi Zhao](https://chengzhizhao.medium.com/?source=post_page-----e7205c06ccea--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e7205c06ccea--------------------------------)
    ·9 min read·Mar 13, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7509f012586e8a90a0f1ef5734651113.png)'
  prefs: []
  type: TYPE_IMG
- en: 'How to Engage with Users By Storytelling: Show Data Analytics in R and Shiny
    | Image By Author'
  prefs: []
  type: TYPE_NORMAL
- en: 'Data is more engaged with storytelling. As a data professional, I seek less
    complicated ways to convey the gap between data analysis and communication. A
    dashboard is traditionally the default way to visualize and share data. It also
    carries the responsibility for communication. However, I found the limitations
    of the dashboard: limited chart selections and less freedom to customize. I explored
    more interactive ways to illustrate ideas and engage with users — *build a web
    application for your data.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Shiny**](https://shiny.rstudio.com/) is an R package for building interactive
    web apps directly from R code. Using R without worrying about context switching
    into HTML, CSS, and JavaScript is exciting. This saves time for consistently being
    in one language. We can reuse the R''s data frame and manipulate data using R
    packages like dply and ggplot2 charts without issue. Hadley Wickham''s book —
    [*Mastering Shiny*](https://www.amazon.com/Mastering-Shiny-Interactive-Reports-Dashboards/dp/1492047384)has
    in-depth content on this.'
  prefs: []
  type: TYPE_NORMAL
- en: What's more exciting about using R and Shiny is now we can build an app where
    the end users can interact with the data analysis we have done. They can gain
    more insight by exploring alone without knowing the complication behind the scene.
    In this story, I will show you how to engage with users by storytelling — show
    data analytics in R and Shiny.
  prefs: []
  type: TYPE_NORMAL
- en: Prepare Data for building the Cocomelon Video.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In my previous story, I shared how we can use the Youtube data API in R to
    retrieve the statistics of the world''s second-largest Youtube channel — Cocomelon.
    We have built a process to retrieve data, perform basic cleaning up, and deliver
    several data visualizations using ggplot2\. Throughout this analysis, there are
    a couple of interesting findings:'
  prefs: []
  type: TYPE_NORMAL
- en: The most popular Cocomelon videos created 4-5 years ago remain trending up due
    to many daily watches.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The most watched video: "Bath Song," is played 20%+ more times than the second
    video — "Wheels on the Bus."'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The most-watched video for videos released in 200 days is 🔴 CoComelon Songs
    Live 24/7\. This video shows that parents can keep the kids with videos automatically
    rotating without switching videos explicitly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[](/r-for-data-analysis-how-to-find-the-perfect-cocomelon-video-for-your-kids-833d6b2d9267?source=post_page-----e7205c06ccea--------------------------------)
    [## R for Data Analysis: How to Find the Perfect Cocomelon Video for Your Kids'
  prefs: []
  type: TYPE_NORMAL
- en: How to Build End-to-End Data Project Exploring New Trending Cocomelon Videos
    from Scratch Using R
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/r-for-data-analysis-how-to-find-the-perfect-cocomelon-video-for-your-kids-833d6b2d9267?source=post_page-----e7205c06ccea--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Using data to tell this story is interesting. However, as the end users, I assume
    you are familiar with R and some R packages for data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: What if you don't know anything above? As a parent, I found it exciting data
    to help your little ones not get bored with the "always popular" videos. Is there
    an easy way to show the data to those who know nothing about R or any programming
    language? And can we let more users explore themselves?
  prefs: []
  type: TYPE_NORMAL
- en: Yes. I can build a web App and share it publicly to make everyone experience
    the web app built by R and Shiny
  prefs: []
  type: TYPE_NORMAL
- en: I wrote down my process on how to build this end-to-end web app with Shiny in
    R. (If you don't care about how to make it technically, scroll to the bottom and
    see the final result)
  prefs: []
  type: TYPE_NORMAL
- en: Inspired By The Book — Mastering Shiny
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I knew nothing about Shiny until I read Mr. Wickham's book, [*Mastering Shiny*](https://www.amazon.com/Mastering-Shiny-Interactive-Reports-Dashboards/dp/1492047384)*.*
    Mr. Wickham is the Chief Scientist at RStudio, and his books are all famous in
    the R community. Picking a specific package to write as a book, Shiny is a unique
    project in the R community.
  prefs: []
  type: TYPE_NORMAL
- en: Let users interact with your data and your analysis — Shiny
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Storytelling with data should not be in one direction. It deserved to be bi-directional.
    With user engagement, it helps with the mutual understanding of data, and it becomes
    easier to achieve the goal with the data analysis you produce and reduce the communication
    barrier.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Shiny package breaks the gap between the data professional who performs
    analysis and the data consumer who leverages the data to make the decision. It
    makes a perfect use case for users to engage with the data analysis you have done
    by enabling one element: Interactivity.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Note: This story isn''t Shiny or R 101\. There are books and online resources
    to familiarize yourself with the content here. I will focus on the process of
    building the end-to-end project. As Hadley Wickham suggested in the book, the
    normal development of the Shiny app involves multiple iterations.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'First Iteration: UI Layout And Server'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Building a Shiny App usually includes two main components: the UI and the server.
    UI handles the displaying on the screen, and the server runs the backend logic
    to get it ready to dispatch to UI for rendering.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can reuse the data we have to persist from the previous post and read them
    from the CSV file: [R for Data Analysis: How to Find the Perfect Cocomelon Video
    for Your Kids](/r-for-data-analysis-how-to-find-the-perfect-cocomelon-video-for-your-kids-833d6b2d9267?gi=2c57fb3f8b81).'
  prefs: []
  type: TYPE_NORMAL
- en: Here is the complete code for the first iteration.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The first version of our application is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: For the UI part, we used `sidebarLayout` in Shiny to split the `sidebarPanel`
    and `mainpanel`. In the `sidebarPanel` we add an input text box to get the number
    of rows to display, which will further pass down the value to the server part
    and perform the `head` operation. In the `mainpanel` , we add a `plotOutput` and
    a `tableOutput` as a placeholder to display the data.
  prefs: []
  type: TYPE_NORMAL
- en: For the server part, we'd perform reading the data first. Then using the data
    transformed, we find all the output is defined in UI, supply the content for `renderPlot`
    and `renderTable` .
  prefs: []
  type: TYPE_NORMAL
- en: We call `reactive` to reduce redundant operations and improve performance to
    give a better user experience. Shiny's reactive expressions accomplish this. Reactive
    programming is declarative, which the engine can lazily evaluate and optimize.
    In our example, when the app initially loads, it reads the CSV file only once
    and caches the intermedia result. If the user changes the input from the default
    ten rows to 20 rows, we only go back to the earliest stage needed to rerun the`head`
    operation instead of reading from the CSV file again.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the result for the first iteration
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/da51e5bd194c853ec5cf628c41890c75.png)'
  prefs: []
  type: TYPE_IMG
- en: 'First Iteration: UI Layout And Server with R and Shiny | Image By Author'
  prefs: []
  type: TYPE_NORMAL
- en: 'Second Iteration: Interactivity with User Click'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having an input text reflect changes in the plot and table is an exciting first
    step. You probably noticed that the plot and table quickly changed when I typed
    the number `2`. It's efficient due to the reactive programming.
  prefs: []
  type: TYPE_NORMAL
- en: Shiny supports additional engagement on the `plotOutput` which takes the users'
    pointer event that feeds as input for the other outputs. In the previous step,
    there are many dots on the plot, but we need to know what a point on the plot
    represents. As a user, it can be helpful to provide users with additional information
    so the user can explore themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Youtube API also provides the embedded iframe we can add to our web application.
    We need to search the title on Youtube to provide a seamless experience for our
    kids.
  prefs: []
  type: TYPE_NORMAL
- en: We'd need to add a few changes to our code to see this change. Here is the complete
    code for the second iteration.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'On `plotOutput` , we can define an id: plot_click. Whenever a position is clicked
    within the plot, The plot will send coordinates to the server and can be found
    in `input$plot_click`.'
  prefs: []
  type: TYPE_NORMAL
- en: We imported [DT](https://rstudio.github.io/DT/shiny.html) in our Shiny app this
    time. DT is an R interface to the JavaScript library [DataTables](http://datatables.net/).
    `DT::renderDataTable` enables more robust functionality than Shiny's default `renderTable`
    . Once we can identify the pointer location to know where the user clicks, we
    can further highlight that specific row to the user. `formatStyle` is one way
    that we can update the CSS attribute of the table. We used `styleEqual` , whenever
    the clicked value matches, the defined style will be applied.
  prefs: []
  type: TYPE_NORMAL
- en: We also tried to get the closest point `near_point <- nearPoints(data(),input$plot_click)`
    first. We cannot expect the users to click precisely on the exact point in the
    plot. `nearPoints` is a helper function to get to the nearest point. Thus, it
    would highlight the clicked item correctly.
  prefs: []
  type: TYPE_NORMAL
- en: To display the video, we can leverage`renderUI` and use the iframe already provided
    by Youtube API on the sidebar.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7509f012586e8a90a0f1ef5734651113.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Second Iteration: Interactivity with User Click | Image By Author'
  prefs: []
  type: TYPE_NORMAL
- en: What if users want to choose a list of videos to watch? To select multiple points,
    we can use `brushedPoints` , all we'd need to do is change `plotOutput(“plot”,
    click = “plot_click”)` to `plotOutput(“plot”, brush = “plot_brush”)` , and we
    can collect the list of points by following
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: And we can choose multiple points now
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f4ab87939e5264ae5dfaa87bff3fee01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Second Iteration: Interactivity with BrushedPoints | Image By Author'
  prefs: []
  type: TYPE_NORMAL
- en: 'Third Iteration: Add Some Theme'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The theme is critical in making your web application look more polished. Shiny
    integrates well with [bslib](https://rstudio.github.io/bslib/index.html), a package
    that supports [Bootstrap themes](https://getbootstrap.com/docs/4.6/getting-started/theming/)
    in R.
  prefs: []
  type: TYPE_NORMAL
- en: To enable a theme, we can add a line of code indicating which theme we are interested
    in `fluidPage`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4ee28f19c2b959cb948fe7e81500b9fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Third Iteration: Add Some Theme | Image By Author'
  prefs: []
  type: TYPE_NORMAL
- en: Now, it's time to publish our application and make it available to the public.
    There are multiple options mentioned on the [Shiny tutorial page](https://shiny.rstudio.com/tutorial/written-tutorial/lesson7/).
    RStudio makes it easy to follow the instructions here to publish your application.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/59e07cd2d3f132c7a6d8ee169eb0f7d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Publish to shinyapps.io via RStudio | Image By Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Now here is our Shiny web application for the top videos of Cocomelon for our
    little ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://chengzhizhao.shinyapps.io/Cocomelon_Shiny/](https://chengzhizhao.shinyapps.io/Cocomelon_Shiny/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[## Explore Cocomelon Youtube Videos'
  prefs: []
  type: TYPE_NORMAL
- en: chengzhizhao.shinyapps.io](https://chengzhizhao.shinyapps.io/Cocomelon_Shiny/?source=post_page-----e7205c06ccea--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this story, I have extended my previous story [R for Data Analysis: How
    to Find the Perfect Cocomelon Video for Your Kids](/r-for-data-analysis-how-to-find-the-perfect-cocomelon-video-for-your-kids-833d6b2d9267),
    to be more engaging with Shiny. I have shared the multiple iterations on how to
    bring data analytics to the next stage: for storytelling and more helpful to our
    users (our kids 😊)'
  prefs: []
  type: TYPE_NORMAL
- en: I also publish the [web application](https://chengzhizhao.shinyapps.io/Cocomelon_Shiny/)
    for people who want to play with this interactive web page. I hope this article
    helps bring the ideas of data analytics to more people and lets more people learn
    about R and Shiny.
  prefs: []
  type: TYPE_NORMAL
- en: 'I hope this story is helpful to you. This article is **part of a series** of
    my engineering & data science stories that currently consist of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chengzhi Zhao](../Images/51b8d26809e870b4733e4e5b6d982a9f.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Chengzhi Zhao](https://chengzhizhao.medium.com/?source=post_page-----e7205c06ccea--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: Data Engineering & Data Science Stories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[View list](https://chengzhizhao.medium.com/list/data-engineering-data-science-stories-ddab37f718e7?source=post_page-----e7205c06ccea--------------------------------)53
    stories![](../Images/8b5085966553259eef85cc643e6907fa.png)![](../Images/9dcdca1fc00a5694849b2c6f36f038d4.png)![](../Images/2a6b2af56aa4d87fa1c30407e49c78f7.png)'
  prefs: []
  type: TYPE_NORMAL
- en: You can also [**subscribe to my new articles**](https://chengzhizhao.medium.com/subscribe)
    or become a [**referred Medium member**](https://chengzhizhao.medium.com/membership)with
    unlimited access to all the stories on Medium.
  prefs: []
  type: TYPE_NORMAL
- en: In case of questions/comments, **do not hesitate to write in the comments**
    of this story or **reach me directly** through [Linkedin](https://www.linkedin.com/in/chengzhizhao/)
    or [Twitter](https://twitter.com/ChengzhiZhao).
  prefs: []
  type: TYPE_NORMAL
