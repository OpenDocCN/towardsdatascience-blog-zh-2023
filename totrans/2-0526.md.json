["```py\n#Import dependencies\nimport numpy as np\nimport pandas as pd\n# Read csv of data\ncfb_info_df = pd.read_csv(r'.\\FBS_Football_Team_Info.csv', encoding = 'unicode_escape')\n```", "```py\n# Drop Unused columns\ncfb_info_df_regression = cfb_info_df[['Latitude', 'Longitude','Enrollment', 'Current_conference_2025','years_playing', 'years_playing_FBS', 'Stadium_capacity', 'is_aau_member', 'is_R1', 'total_draft_picks_2000_to_2020', 'first_rd_draft_picks_2000_to_2020', 'number_1_draft_picks_2000_to_2020',  'wsj_college_football_revenue_2019', 'wsj_college_football_value_2018', 'wsj_college_football_value_2017', 'bowl_games_played', 'bowl_game_win_pct', 'historical_win_pct', 'total_games_played','p_AP_Top_25_2001_to_2021', 'tj_altimore_fan_base_size_millions']]\n```", "```py\nX = cfb_info_df_regression.drop(['tj_altimore_fan_base_size_millions'], axis = 1)\ny = cfb_info_df_regression['tj_altimore_fan_base_size_millions']\n```", "```py\nX = pd.get_dummies(X, columns = ['Current_conference_2025'])\n```", "```py\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n```", "```py\ndef min_max_column(column):\n    column = column.astype('float')\n    column_scaled = (column - min(column)) / (max(column) - min(column))\n    return column_scaled\n```", "```py\nfor col in X_train.columns:\n    X_train[col] = min_max_column(X_train[col])\n\nfor col in X_test.columns:\n    X_test[col] = min_max_column(X_test[col])\n```", "```py\nfrom sklearn.linear_model import LinearRegression\nreg = LinearRegression().fit(X_train, y_train)\n```", "```py\nfrom sklearn.linear_model import LinearRegression\nreg = LinearRegression().fit(X_train, y_train)\n```", "```py\nimport plotly.express as px\nimport plotly.express as px\n#Create a data frame for plot\nplot_df = pd.DataFrame(cfb_info_df['Team'].iloc[list(y_test.index)], columns=['Team'])\nplot_df['Actual Fan Base Size'] = y_test\nplot_df['Predicted Fan Base Size'] = reg.predict(X_test)\nplot_df['Absolute Percent Error'] = abs(plot_df['Actual Fan Base Size'] - plot_df['Predicted Fan Base Size'])/plot_df['Actual Fan Base Size']\nplot_df['Under Predict'] = plot_df['Actual Fan Base Size'] > plot_df['Predicted Fan Base Size']\n\nfig = px.scatter(plot_df, x='Actual Fan Base Size', y='Predicted Fan Base Size', size = 'Absolute Percent Error', \n                 color = 'Under Predict', hover_data = ['Team'])\nfig.show()\n```", "```py\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n```", "```py\nfrom sklearn.ensemble import RandomForestRegressor\nreg = RandomForestRegressor(n_estimators=100, max_depth=None, random_state=0)\nreg.fit(X_train, y_train)\n```", "```py\nreg.score(X_test, y_test)\n```", "```py\nimport plotly.express as px\n#Create a data frame for plot\nplot_df = pd.DataFrame(X_train.columns, columns=['Feature Name'])\nplot_df['Importance'] = reg.feature_importances_\nfig = px.bar(plot_df, x='Feature Name', y='Importance')\nfig.show()\n```"]