["```py\n@my_decorator\ndef foo(x, y):\n    # do something; in result,\n    # you obtain changed_x and changed_y\n    return changed_x, changed_y\n```", "```py\nfrom typing import Callable\n\n(1) def scream(func: Callable) -> Callable:\n(2)     def inner(*args, **kwargs):\n(3)         print(\"SCREAM!!!\")\n(4)         return func(*args, **kwargs)\n(5)     return inner\n```", "```py\ndef foo():\n    return \"foo tells you that life is great\"\n```", "```py\n>>> foo()\n'foo tells you that life is great'\n```", "```py\nfrom typing import List\n\ndef bar(\n    x: int,\n    string: str,\n    func: Callable = lambda a, b: a * b,\n    **kwargs\n) -> List[str]:\n    \"\"\"Applies a callable to each character in the given string.\n\n    It does so, passing in the given integer and any additional\n    keyword arguments. Returns a list of the results.\n    \"\"\"\n    return [func(x, s_i, **kwargs) for s_i in string]\n```", "```py\n>>> bar(3, \"abc\")\n['aaa', 'bbb', 'ccc']\n```", "```py\n>>> def concatenate(i: int, s: str, sep: Optional[str] = \"-\") -> str:\n...     return f\"{str(i)}{sep}{s}\"\n>>> bar(5, \"abc\", func=concatenate)\n['3-a', '3-b', '3-c']\n>>> bar(3, \"abc\", func=concatenate, sep=\":\")\n['3:a', '3:b', '3:c']\n```", "```py\nfrom typing import Callable, List\n\n@scream\ndef foo():\n    return \"foo tells you that life is great\"\n\n@scream\ndef bar(\n    x: int,\n    string: str,\n    func: Callable = lambda a, b: a * b,\n    **kwargs\n) -> List[str]:\n    return [func(x, s_i, **kwargs) for s_i in string]\n```", "```py\n>>> foo()\nSCREAM!!!\n'foo tells you that life is great'\n>>> bar(5, \"abc\", func=concatenate)\nSCREAM!!!\n['3-a', '3-b', '3-c']\n>>> bar(3, \"abc\", func=concatenate, sep=\":\")\nSCREAM!!!\n['3:a', '3:b', '3:c']\n```", "```py\ndef foo():\n    return \"foo tells you that life is great\"\n\nfoo = scream(foo)\n```", "```py\nfrom typing import Callable\n\ndef scream(func: Callable) -> Callable:\n    def inner(*args, **kwargs):\n        print(\"SCREAM!!!\")\n        output = func(*args, **kwargs)\n        print(\"SCREAM AGAIN!!!\")\n        return output\n    return inner\n```", "```py\n>>> foo()\nSCREAM!!!\n'foo tells you that life is great'\nSCREAM AGAIN!!!\n```", "```py\nfrom typing import Callable\n\ndef scream(func: Callable) -> Callable:\n    def inner(*args, **kwargs):\n        print(\"SCREAM, JUST SCREAM!!!\")\n    return inner\n```", "```py\n>>> foo()\nSCREAM, JUST SCREAM!!!\n```", "```py\nfrom typing import Callable\n\ndef silence(func: Callable) -> Callable:\n    def inner(*args, **kwargs):\n        pass\n    return inner\n```", "```py\n@switch\n@make_it_true_assertion\ndef assert_paths(*args: Any, handle_with: type = AssertionError, **kwargs: Any) -> None:\n    return check_if_paths_exist(*args, handle_with=handle_with, **kwargs)\n```"]