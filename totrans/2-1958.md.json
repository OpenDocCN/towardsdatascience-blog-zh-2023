["```py\nconda create â€“-name taipy-env python=3.8\n```", "```py\nconda activate taipy-env\n```", "```py\npip install taipy\n```", "```py\nfrom taipy import Gui\n\nanalytics_choice = [\"Breach types distribution\",\n                 \"Breach by State\",\n                 \"Top 10 Risky States\",\n                 \"Covered Entity Type\",\n                 \"\"]\n\nchoice = \"\"\n\nmy_app_page = \"\"\"\n# Security Breach Analytics Dashboard\n\n## Breach Analysis\nPlease choose from the list below to start your analysis\n\n<|{choice}|selector|lov={analytics_choice}|dropdown|>\n\nYour choice: <|{choice}|text|>\n\"\"\"\n\nif __name__ == '__main__':\n Gui(page=my_app_page).run(host=\"0.0.0.0\", port=9696)\n```", "```py\npython taipy_app.py\n```", "```py\nfrom taipy import Gui\nimport pandas as pd\n\nbreach_data = pd.read_csv(\"data/breach_report_data.csv\")\n\ndef toggle_table_dialog(state):\n state.show_table_dialog = not state.show_table_dialog\n\nshow_table_dialog = False\n\nmy_app_page = \"\"\"\n<center> Security Breach Analytics Dashboard</center>\n------------------------------\n<br/>\n\n<center> Click the Button below to display data </center>\n\n<br/>\n\n<center><|Display Raw Data|button|on_action=toggle_table_dialog|></center>\n<|{show_table_dialog}|dialog|on_action=toggle_table_dialog|width=90vw|labels=Cancel|\n<center><|{breach_data}|table|width=fit-content|height=65vh|></center>\n|>\n\"\"\"\n```", "```py\n# import libraries here\n\nmy_app_page = \"\"\"\n<center> Security Breach Analytics Dashboard</center>\n------------------------------\n<center> Graph 3: Top 10 Most Affected States</center>\n<br/>\n<|{breach_df}|chart|type=bar|x=State|y=Individuals_Affected|>\n\"\"\"\n\n# Put the '__main__' section here\n```", "```py\n<|{breach_location_image}|image|width=\"2400px\"|height=\"1000px\"|hover_text=\"Word cloud of Breach Location\"|>\n```", "```py\nfrom wordcloud import WordCloud\nfrom PIL import Image\nfrom io import BytesIO\n\ndef generate_word_cloud(data, column_name):\n\n  # Join all the location information into one long string\n text = ' '.join(data[str(column_name)])\n\n wordcloud = WordCloud(\n     background_color=\"#1E3043\"\n )\n\n # Generate the word cloud\n my_wordcloud = wordcloud.generate(text)\n\n image = my_wordcloud.to_image()\n my_buffer = BytesIO()\n image.save(my_buffer, format = 'PNG')\n\n return my_buffer.getvalue()\n```", "```py\ndef update_Type_of_Breach(state, var_name, var_value):\n if var_name == \"Type_of_Breach\":\n         state.df = breach_df[breach_df.Type_of_Breach == var_value]\n```", "```py\n<|layout.start|columns= 1 2|gap=1.8rem|\n <optional_id|part|>\n  <|{first content}|>\n|optional_id>\n\nâ€¦\n\n <\n  <|{second content}|>\n>\n\n>\n```", "```py\n# Preprocessing of the DateTime column\nbreach_df['Breach_Submission_Date'] = pd.to_datetime(breach_df['Breach_Submission_Date'])\nbreach_df[\"Year\"] = breach_df[\"Breach_Submission_Date\"].dt.year\n\nmarkdown = \"\"\"\n<|toggle|theme|>\n\n# <center>Security Breach Analytics Dashboard ðŸš¨</center>\n\n<center>**Chart 1:**General Trend Location of Breached Information </center>\n\n<center><|{breach_location_image}|image|width=2400px|height=1000px|hover_text=Word cloud of Breach Location|></center>\n\n------------------------------\n<|layout|columns=2 5 5|gap=1.5rem|\n\n<column_1|\n### Type of Breach:\n<|{breach_type}|selector|lov={breach_types}|dropdown|width=100%|>\n\n------------------------------\n\n<|Display Raw Data|button|on_action=toggle_table_dialog|>\n\n<|{show_table_dialog}|dialog|on_action=toggle_table_dialog|width=90vw|labels=Cancel|\n<center><|{breach_df}|table|width=fit-content|height=65vh|></center>\n|>\n|column_1>\n\n<column_2|\n**Chart 2:** Individuals Affected by State\n<|{df}|chart|type=bar|x=State|y=Individuals_Affected|>\n\n**Chart 4:** Individuals Affected by Year\n<|{df}|chart|type=bar|x=Year|y=Individuals_Affected|>\n|column_2>\n\n<column_3|\n**Chart 3:** Individuals Affected by Type of Breach\n<|{df}|chart|type=bar|x=Type_of_Breach|y=Individuals_Affected|>\n\n**Chart 5:** Individuals Affected per Covered Entity Type\n<|{df}|chart|type=bar|x=Covered_Entity_Type|y=Individuals_Affected|>\n|column_3>\n\n|>\n\"\"\"\n\nif __name__ == \"__main__\":\n gui = Gui(page=markdown)\n gui.run(dark_mode=False, host=\"0.0.0.0\", port=9696)\n```", "```py\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import (\n confusion_matrix,\n accuracy_score,\n precision_score,\n recall_score,\n f1_score\n)\n\ndef filter_columns(df, list_columns_to_skip):\n\n filtered_df = df.drop(list_columns_to_skip, axis=1)\n return filtered_df\n\ndef preprocess_columns(df):\n\n df['Breach_Submission_Date'] = pd.to_datetime(data['Breach_Submission_Date'])\n df['Breach_Submission_Month'] = df['Breach_Submission_Date'].dt.month\n df['Breach_Submission_Year'] = df['Breach_Submission_Date'].dt.year\n df.drop(\"Breach_Submission_Date\", axis=1, inplace=True)\n\n return df\n\ndef encode_features(df):\n\n list_columns_to_encode = ['State','Location_of_Breached_Information',\n                                'Business_Associate_Present', \n                                'Covered_Entity_Type']\n le = LabelEncoder()\n\n for col in list_columns_to_encode:\n     df[col] = le.fit_transform(df[col])\n\n X = df.drop('Type_of_Breach', axis=1)\n y = le.fit_transform(df['Type_of_Breach'])\n\n return {\"X\": X, \"y\": y}\n\ndef split_data(features_target_dict):\n X_train, X_test, y_train, y_test =    \n                       train_test_split(features_target_dict[\"X\"],                   \n                                        features_target_dict[\"y\"],\n                                        test_size=0.3, \n                                        random_state=42)\n\n return {\n     \"X_train\": X_train, \"X_test\": X_test,\n     \"y_train\": y_train, \"y_test\": y_test\n }\n\ndef train_model(train_test_dictionary):\n\n classifier = RandomForestClassifier()\n\n classifier.fit(train_test_dictionary[\"X_train\"],\n                train_test_dictionary[\"y_train\"])\n\n predictions = classifier.predict(train_test_dictionary[\"X_test\"],\n                                  train_test_dictionary[\"y_test\"])\n\n return predictions\n\ndef show_performance(train_test_dictionary, predictions):\n\n y_test = train_test_dictionary[\"y_test\"]\n\n accuracy = accuracy_score(y_test, predictions)\n precision = precision_score(y_test, predictions)\n recall = recall_score(y_test, predictions)\n f1score = f1_score(y_test, predictions)\n\n return pd.DataFrame({\n     \"Metrics\": ['accuracy', 'precision', 'recall', 'f1_score'],\n     \"Values\": [accuracy, precision, recall, f1score]\n })\n```", "```py\nfrom taipy import Core, create_scenario\nfrom taipy.core.config import Config\n\nconfig_file_name = \"./taipy_config.toml\"\nscenario_name = \"DATA_BREACH_SCENARIO\"\n\nConfig.load(config_file_name)\nscenario_config = Config.scenarios[scenario_name]\n\nif __name__ == \"__main__\":\n\n Core().run()\n\n pipeline_scenario = create_scenario(scenario_config)\n pipeline_scenario.submit() # This executes the scenario\n\n model_metrics = pipeline_scenario.performance_data.read()\n\n print(model_metrics)\n```"]