["```py\nquery = \"\"\"\nSELECT * FROM DATA\n\"\"\"\n\noutput = sqldf(query,locals())\noutput\n```", "```py\nWITH bookshop AS\n(\nSELECT TITLE, YEARPUBLISHED,\n(YEARPUBLISHED/10) * 10 AS DECADE,\nNUMPAGES, GENRES, RATING, AUTHOR, UNITSSOLD,\nREVENUE\nfrom df\n)\n\nSELECT DECADE, SUM(REVENUE) AS TOTAL_REVENUE,\nROUND(AVG(REVENUE),0) AS AVG_REVENUE\nFROM bookshop\nGROUP BY DECADE\nORDER BY TOTAL_REVENUE DESC\n```", "```py\n# creating df bookshop\nbookshop = df.copy()\nbookshop['Decade'] = (bookshop['YearPublished'] // 10) * 10\n\n# group by decade, agg revenue by sum and mean\nresult = bookshop.groupby('DECADE') \\\n                 .agg({'Revenue': ['sum', 'mean']}) \\\n                 .reset_index()\n\nresult.columns = ['Decade', 'Total_Revenue', 'Avg_Revenue']\n\n# sorting by decade\nresult = result.sort_values('Total_Revenue')\n```", "```py\n# Creating primary y-axis (total revenue)\nfig, ax1 = plt.subplots(figsize=(15, 9))\nax1.bar(agg_decade['DECADE'], agg_decade['TOTAL_REVENUE'], \n        width = 0.4, align='center', label='Total Revenue (Dollars)')\nax1.set_xlabel('Decade')\nax1.set_ylabel('Total Revenue (Dollars)', color='blue')\n\n# Adjusting gridlines on the primary y-axis\nax1.grid(color='blue', linestyle='--', linewidth=0.5, alpha=0.5)\n\n# Creating secondary y-axis (avg revenue)\nax2 = ax1.twinx()\nax2.scatter(agg_decade['DECADE'], agg_decade['AVG_REVENUE'], \n         marker='o', color='red', label='Avg Revenue (Dollars)')\nax2.set_ylabel('Avg Revenue (Dollars)', color='red')\n\n# Adjusting gridlines on the secondary y-axis\nax2.grid(color='red', linestyle='--', linewidth=0.5, alpha=0.5)\n\n# Setting the same y-axis limits for both ax1 and ax2\nax1.set_ylim(0, 1.1*max(agg_decade['TOTAL_REVENUE']))\nax2.set_ylim(0, 1.1*max(agg_decade['AVG_REVENUE']))\n\n# Combining legends for both axes\nlines, labels = ax1.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax2.legend(lines + lines2, labels + labels2, loc='upper left')\n\n# Set title\nplt.title('Total and Avg Revenue by Decade')\n\n# Show the plot\nplt.show()\n```", "```py\nSELECT AUTHOR,\nCOUNT(TITLE) AS NUM_BOOKS,\nSUM(REVENUE) AS TOTAL_REVENUE,\nROUND(AVG(REVENUE),0) AS AVG_REVENUE,\nROUND(AVG(RATING),2) AS AVG_RATING_PER_BOOK\nFROM bookshop\nGROUP BY AUTHOR\nORDER BY TOTAL_REVENUE DESC\nLIMIT 10\n```", "```py\nresult = bookshop.groupby('Author') \\\n                 .agg({\n                     'Title': 'count',\n                     'Revenue': ['sum', 'mean'],\n                     'Rating': 'mean'\n                 }) \\\n                 .reset_index()\n\nresult.columns = ['Author', 'Num_Books', 'Total_Revenue', \n                  'Avg_Revenue', 'Avg_Rating_per_Book']\n\n# Sorting for total revenue\nresult = result.sort_values('Total_Revenue', ascending=False)\n\n# top 10\nresult_top10 = result.head(10)\n```", "```py\n# Creating figure and axis\nfig1, ax1 = plt.subplots(figsize=(15, 9))\n\n#plotting bar chart of total revenue\nax1.bar(agg_author['Author'], agg_author['TOTAL_REVENUE'], \n        width=0.4, align='center', color='silver', label='Total Revenue (Dollars)')\nax1.set_xlabel('Author')\nax1.set_xticklabels(agg_author['Author'], rotation=-45, ha='left')\nax1.set_ylabel('Total Revenue (Dollars)', color='blue')\n\n# Adjusting gridlines on the primary y-axis\nax1.grid(color='blue', linestyle='--', linewidth=0.5, alpha=0.5)\n\n#creating scatter plot of avg revenue\nax1.scatter(agg_author['Author'], agg_author['AVG_REVENUE'], \n         marker=\"D\", color='blue', label='Avg Revenue per Book (Dollars)')\n\n# Creating scatter plot of avg rating on secondary axis\nax2 = ax1.twinx()\nax2.scatter(agg_author['Author'], agg_author['AVG_RATING_PER_BOOK'], \n         marker='^', color='red', label='Avg Rating per Book')\nax2.set_ylabel('Avg Rating', color='red')\n\n# Adjusting gridlines on the secondary y-axis\nax2.grid(color='red', linestyle='--', linewidth=0.5, alpha=0.5)\n\n# Combining legends for both axes\nlines, labels = ax1.get_legend_handles_labels()\nlines2, labels2 = ax2.get_legend_handles_labels()\nax1.legend(lines + lines2, labels + labels2, loc='upper right')\n\n# Set title\nplt.title('Top 10 Authors by Revenue, Rating')\n\n# Show the plot\nplt.show()\n```", "```py\nWITH PERCENTILES AS (\n    SELECT \n        PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY NUMPAGES) \n        AS PERCENTILE_25,\n        PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NUMPAGES) \n        AS MEDIAN,\n        PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY NUMPAGES) \n        AS PERCENTILE_75\n    FROM bookshop\n)\nSELECT \n    TITLE, TITLE, REVENUE, NUMPAGES,\n    CASE\n        WHEN NUMPAGES< (SELECT PERCENTILE_25 FROM PERCENTILES) \n        THEN 'Quartile 1'\n        WHEN NUMPAGES BETWEEN (SELECT PERCENTILE_25 FROM PERCENTILES) \n        AND (SELECT MEDIAN FROM PERCENTILES) THEN 'Quartile 2'\n        WHEN NUMPAGES BETWEEN (SELECT MEDIAN FROM PERCENTILES) \n        AND (SELECT PERCENTILE_75 FROM PERCENTILES) THEN 'Quartile 3'\n        WHEN NUMPAGES > (SELECT PERCENTILE_75 FROM PERCENTILES) \n        THEN 'Quartile 4'\n    END AS PAGELENGTH_QUARTILE\nFROM bookshop\nORDER BY REVENUE DESC\n```", "```py\n--For SQLite dialect\nSELECT TITLE, REVENUE, NUMPAGES,\nCASE\nWHEN NUMPAGES < 318 THEN 'Quartile 1'\nWHEN NUMPAGES BETWEEN 318 AND 375 THEN 'Quartile 2'\nWHEN NUMPAGES BETWEEN 375 AND 438 THEN 'Quartile 3'\nWHEN NUMPAGES > 438 THEN 'Quartile 4'\nEND AS PAGELENGTH_QUARTILE\nFROM bookshop\n\nORDER BY REVENUE DESC\n```", "```py\n# Define the percentiles using numpy\npercentiles = np.percentile(bookshop['NumPages'], [25, 50, 75])\n\n# Define the bin edges using the calculated percentiles\nbin_edges = [-float('inf'), *percentiles, float('inf')]\n\n# Define the labels for the buckets\nbucket_labels = ['Quartile 1', 'Quartile 2', 'Quartile 3', 'Quartile 4']\n\n# Create the 'RUNTIME_BUCKET' column based on bin edges and labels\nbookshop['RUNTIME_BUCKET'] = pd.cut(bookshop['NumPages'], bins=bin_edges, \n                                labels=bucket_labels)\n\nresult = bookshop[['Title', 'Revenue', \n               'NumPages', 'PAGELENGTH_QUARTILE']].sort_values(by='NumPages', \n                                                          ascending=False)\n```", "```py\n# Set the style for the plots\nsns.set(style=\"whitegrid\")\n\n#Setting order of profit buckets\npagelength_bucket_order = ['Quartile 1', 'Quartile 2', \n                        'Quartile 3', 'Quartile 4']\n\n# Create the boxplot\nplt.figure(figsize=(16, 10))\nsns.boxplot(x='PAGELENGTH_QUARTILE', y='Revenue', \n            data=pagelength_output, order = pagelength_bucket_order, \n            showfliers=True)\n\n# Add labels and title\nplt.xlabel('PageLength Quartile')\nplt.ylabel('Revenue (Dollars)')\nplt.title('Boxplot of Revenue by PageLength Bucket')\n\n# Show the plot\nplt.show()\n```"]