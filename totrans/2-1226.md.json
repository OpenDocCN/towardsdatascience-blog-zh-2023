["```py\nimport tifffile as tiff\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Landsat scene ID \nID = 'LC08_L2SP_206023_20221118_20221128_02_T1'\n\n# Load Red (B4) band\nB4 = tiff.imread('./data/{}/{}_SR_B4.TIF'.format(ID, ID))\n\n# Scale band\nB4 = np.clip(B4*0.0000275-0.2, 0, 1)\n\n# Clip to enhance contrast\nB4 = np.clip(B4,0,0.2)/0.2\n\n# Display grayscale image\nfig, ax = plt.subplots(figsize=(10, 10))\nplt.imshow(B4, cmap='gray')\nax.set_axis_off()\n```", "```py\nimport json\n\n# Load metadata file\nMTL = json.load(open('./data/{}/{}_MTL.json'.format(ID, ID)))\nprojection = MTL['LANDSAT_METADATA_FILE']['PROJECTION_ATTRIBUTES']\nprojection\n```", "```py\ndef coords_to_pixels(ul, utm, m=30):\n    \"\"\" Convert UTM coordinates to pixel coordinates\"\"\"\n\n    x = int((utm[0] - ul[0])/m)\n    y = int((ul[1] - utm[1])/m)\n\n    return x, y\n```", "```py\nimport utm \n\n# Get UTM coordinates of upper left corner\nul = [float(projection['CORNER_UL_PROJECTION_X_PRODUCT']),\n        float(projection['CORNER_UL_PROJECTION_Y_PRODUCT'])]\n\n# Lat/long coordinates of Howth\nlat=53.3760\nlong=-6.0741\n\n# Convert GPS to UTM coordinates\nutmx,utmy,_,_ = utm.from_latlon(lat,long)\nprint(utmx,utmy)\n\n# Convert UTM to pixel coordinates\nx,y = coords_to_pixels(ul, [utmx,utmy])\nprint(x,y)\n```", "```py\nimport cv2 \n\n# Add circle to image at pixel coordinates\nimage = B4.copy()\nimage = cv2.circle(image, (int(x), int(y)), 10, 1,5)\n\n# Crop image around pixel coordinates\nh = 100\ncrop_image = image[y-h:y+h, x-h:x+h]\n```", "```py\nimport rasterio as rio\n\n# Open red channel with rasterio\nB4 = rio.open('./data/{}/{}_SR_B4.TIF'.format(ID, ID))\n\n# Display image map projection \nprint(B4.crs)\n```", "```py\n# Lat/Long coordinates of Howth\nlat=53.3760\nlong=-6.0741\n\n# Get UTM coordinates\nutmx,utmy,_,_ = utm.from_latlon(lat,long)\n\n# Convert UTM to pixel coordinates\ny,x = B4.index(utmx,utmy)\nprint(x,y)\n```", "```py\nfrom rasterio.warp import reproject, Resampling, calculate_default_transform\n\ndst_crs = \"EPSG:4326\"  # google maps CRS\nfilename = './data/{}/{}_SR_B4.TIF'.format(ID, ID)\nnew_filename = './data/{}/{}_SR_B4_EPSG4326.tif'.format(ID, ID)\n\n# Open file\nwith rio.open(filename) as src:\n    src_transform = src.transform\n\n    # calculate the transform matrix for the output\n    dst_transform, width, height = calculate_default_transform(\n        src.crs,\n        dst_crs,\n        src.width,\n        src.height,\n        *src.bounds,  # unpacks outer boundaries\n    )\n\n    # set properties for output\n    dst_kwargs = src.meta.copy()\n    dst_kwargs.update(\n        {\n            \"crs\": dst_crs,\n            \"transform\": dst_transform,\n            \"width\": width,\n            \"height\": height,\n            \"nodata\": 0,  \n        }\n    )\n\n    # write to disk\n    with rio.open(new_filename, \"w\", **dst_kwargs) as dst:\n        # reproject to new CRS\n        reproject(\n            source=rio.band(src, 1),\n            destination=rio.band(dst, 1),\n            src_transform=src.transform,\n            src_crs=src.crs,\n            dst_transform=dst_transform,\n            dst_crs=dst_crs,\n            resampling=Resampling.nearest)\n```", "```py\n# Open red channel\nB4 = rio.open('./data/{}/{}_SR_B4_EPSG4326.TIF'.format(ID, ID))\nprint(B4.crs)\n```", "```py\n# GPS coordinates of Howth\nlat=53.3760\nlong=-6.0741\n\n# Convert UTM to pixel coordinates\ny,x = B4.index(long,lat)\nprint(x,y)\n```"]