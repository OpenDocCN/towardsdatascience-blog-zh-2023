- en: These 5 SQL Techniques Cover ~80% of Real-Life Projects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这 5 种 SQL 技术涵盖了 ~80% 的实际项目
- en: 原文：[https://towardsdatascience.com/5-advanced-sql-techniques-for-real-life-projects-f2db9b6680e2](https://towardsdatascience.com/5-advanced-sql-techniques-for-real-life-projects-f2db9b6680e2)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/5-advanced-sql-techniques-for-real-life-projects-f2db9b6680e2](https://towardsdatascience.com/5-advanced-sql-techniques-for-real-life-projects-f2db9b6680e2)
- en: Speed up your SQL learning curve
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加快你的 SQL 学习曲线
- en: '[](https://thuwarakesh.medium.com/?source=post_page-----f2db9b6680e2--------------------------------)[![Thuwarakesh
    Murallie](../Images/44f1a14a899426592bbd8c7f73ce169d.png)](https://thuwarakesh.medium.com/?source=post_page-----f2db9b6680e2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f2db9b6680e2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f2db9b6680e2--------------------------------)
    [Thuwarakesh Murallie](https://thuwarakesh.medium.com/?source=post_page-----f2db9b6680e2--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://thuwarakesh.medium.com/?source=post_page-----f2db9b6680e2--------------------------------)[![Thuwarakesh
    Murallie](../Images/44f1a14a899426592bbd8c7f73ce169d.png)](https://thuwarakesh.medium.com/?source=post_page-----f2db9b6680e2--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f2db9b6680e2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f2db9b6680e2--------------------------------)
    [Thuwarakesh Murallie](https://thuwarakesh.medium.com/?source=post_page-----f2db9b6680e2--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f2db9b6680e2--------------------------------)
    ·8 min read·Mar 8, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f2db9b6680e2--------------------------------)
    ·8 分钟阅读·2023年3月8日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/9fa3d4a6f9a1bcd3cf96e5b4e65cbdf3.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9fa3d4a6f9a1bcd3cf96e5b4e65cbdf3.png)'
- en: Photo by [Possessed Photography](https://unsplash.com/es/@possessedphotography?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由 [Possessed Photography](https://unsplash.com/es/@possessedphotography?utm_source=medium&utm_medium=referral)
    提供的照片，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Are you curious about SQL but hesitant to dive in? Or maybe you’re already familiar
    with the basics of SQL but struggle to apply it to real-life projects.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否对 SQL 感到好奇但又犹豫不决？或者你已经熟悉 SQL 的基础知识，但在将其应用于实际项目时遇到困难。
- en: I know the feeling.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我了解这种感觉。
- en: When I first started learning SQL, I was intimidated by the vast amount of information.
    And even today, I still constantly learn and explore new techniques.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当我第一次开始学习 SQL 时，我被大量的信息所吓倒。即使今天，我仍然不断学习和探索新技术。
- en: Sure, the basics of SQL, like joins, subqueries, filtering, and ordering, are
    easy to pick up. But you need advanced techniques for complex real-world problems.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，SQL 的基础知识，如连接、子查询、过滤和排序，很容易掌握。但是，对于复杂的实际问题，你需要高级技术。
- en: In this post, I want to share the five advanced SQL techniques I use the most
    in my everyday work. By mastering these techniques, you’ll be able to accomplish
    almost 80% of production-grade SQL queries, making you a valuable asset to any
    data-driven projects.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我想分享我在日常工作中最常用的五种高级 SQL 技术。通过掌握这些技术，你将能够完成几乎 80% 的生产级 SQL 查询，使你成为任何数据驱动项目的宝贵资产。
- en: '[](/fast-load-data-to-sql-from-python-2d67aea946c0?source=post_page-----f2db9b6680e2--------------------------------)
    [## Python To SQL — I Can Now Load Data 20X Faster'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/fast-load-data-to-sql-from-python-2d67aea946c0?source=post_page-----f2db9b6680e2--------------------------------)
    [## Python To SQL — 我现在可以将数据加载速度提高 20 倍'
- en: The good, bad, and ugly ways of uploading large batches of data
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 上传大量数据的好、坏和丑陋的方法
- en: towardsdatascience.com](/fast-load-data-to-sql-from-python-2d67aea946c0?source=post_page-----f2db9b6680e2--------------------------------)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/fast-load-data-to-sql-from-python-2d67aea946c0?source=post_page-----f2db9b6680e2--------------------------------)
- en: I have intentionally not included some other frequently used techniques, such
    as transactions. This list of methods will be very helpful if you’re in an analytical
    role than a software engineer role.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我故意没有包括一些其他常用的技术，例如事务。如果你在分析角色中，这份方法列表将非常有用，而不是在软件工程师角色中。
- en: Throughout the post, I assumed we were in a Postgres database. But every major
    relational database nowadays offers similar functionality.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在整篇文章中，我假设我们使用的是 Postgres 数据库。但如今每个主要的关系数据库都提供类似的功能。
- en: 1\. Window functions
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1. 窗口函数
- en: A window function is an analytic function that performs calculations across
    a set of rows related to the current row. The result of a window function is returned
    alongside the original rows in the result set without changing the underlying
    data.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口函数是一种分析函数，它在与当前行相关的一组行中执行计算。窗口函数的结果与原始行一起返回，而不改变底层数据。
- en: '[](/junior-developers-write-multi-page-sql-queries-seniors-use-window-functions-f82dfeb8e378?source=post_page-----f2db9b6680e2--------------------------------)
    [## Junior Developers Write Multi-Page SQL Queries; Seniors Use Window Functions'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/junior-developers-write-multi-page-sql-queries-seniors-use-window-functions-f82dfeb8e378?source=post_page-----f2db9b6680e2--------------------------------)
    [## 初级开发者编写多页 SQL 查询；高级开发者使用窗口函数'
- en: An elegant way to perform computation within the context of a record
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在记录的上下文中执行计算的一种优雅方法
- en: towardsdatascience.com](/junior-developers-write-multi-page-sql-queries-seniors-use-window-functions-f82dfeb8e378?source=post_page-----f2db9b6680e2--------------------------------)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/junior-developers-write-multi-page-sql-queries-seniors-use-window-functions-f82dfeb8e378?source=post_page-----f2db9b6680e2--------------------------------)'
- en: A real-life example of a window function might be calculating the running total
    of sales revenue for a particular product over time. This could be useful for
    identifying trends in sales, such as which products are most popular at certain
    times of the year.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口函数的实际例子可能是计算特定产品随时间的销售收入累计总额。这对于识别销售趋势可能很有用，比如某些产品在一年中的某些时间最受欢迎。
- en: 'Here’s an example of how to use the `SUM` window function to calculate the
    running total of sales revenue for a specific product over time:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个如何使用 `SUM` 窗口函数计算特定产品随时间的销售收入累计总额的例子：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, the `SUM` window function is used to calculate the running
    total of `revenue` for a particular `product_id` over time. The `PARTITION BY`
    clause groups the data by `product_id`, and the `ORDER BY` clause sorts the data
    by `date`. The `running_total` column contains the result of the `SUM` window
    function.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`SUM` 窗口函数用于计算特定 `product_id` 随时间的 `revenue` 累计总额。`PARTITION BY` 子句按
    `product_id` 对数据进行分组，`ORDER BY` 子句按 `date` 对数据进行排序。`running_total` 列包含 `SUM` 窗口函数的结果。
- en: '**Why not use** `**group by**`**?**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么不使用** `**group by**`**？**'
- en: This confused me when I first started using window functions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当我第一次开始使用窗口函数时，这让我感到困惑。
- en: Yes, you can use `GROUP BY` to aggregate data in PostgreSQL. Yet, using `GROUP
    BY` would provide a different result than a window function.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，你可以在 PostgreSQL 中使用 `GROUP BY` 来聚合数据。然而，使用 `GROUP BY` 会提供与窗口函数不同的结果。
- en: In the example of calculating the running total of sales revenue for a specific
    product over time, using `GROUP BY` would group the sales data by `product_id`
    and `date`, and then calculate the sum of income for each group. This would give
    you the total revenue for each day rather than the running total of revenue over
    time.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算特定产品随时间的销售收入累计总额的例子中，使用 `GROUP BY` 会按 `product_id` 和 `date` 对销售数据进行分组，然后计算每个组的收入总和。这将给你每一天的总收入，而不是随时间的累计收入。
- en: 'Here’s an example of using `GROUP BY` to aggregate sales data by `product_id`
    and `date`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用 `GROUP BY` 按 `product_id` 和 `date` 聚合销售数据的例子：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[Learn more about SQL window functions](https://mode.com/sql-tutorial/sql-window-functions/)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[了解更多关于 SQL 窗口函数的信息](https://mode.com/sql-tutorial/sql-window-functions/)'
- en: '2\. CTE: Common table expression'
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '2\. CTE: 公共表表达式'
- en: A CTE is a temporary named result set you can reference within a single SQL
    statement. It defines a subquery that can be referenced multiple times within
    a gigantic query, thus simplifying complex queries.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: CTE 是一个可以在单个 SQL 语句中引用的临时命名结果集。它定义了一个可以在庞大的查询中多次引用的子查询，从而简化了复杂查询。
- en: Let’s take an example to understand this better. Suppose you have a table that
    contains all the customer orders. You want to find the sales by product for top-performing
    regions.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来更好地理解这一点。假设你有一个包含所有客户订单的表。你想找到各个产品在表现最佳的地区的销售情况。
- en: Without a CTE, you must write a complex query involving subqueries, joins, and
    aggregation functions. This could make the query challenging to read and understand.
    However, by using a CTE, you can simplify the query and make it more readable.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 没有 CTE，你必须编写复杂的查询，涉及子查询、连接和聚合函数。这可能使查询难以阅读和理解。然而，使用 CTE 可以简化查询，使其更易读。
- en: Here’s a classic example to understand the usefulness of CTEs.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个经典例子，用于理解 CTE 的有用性。
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the above query, we use two CTE to calculate the top-selling products in
    the top-performing regions.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的查询中，我们使用了两个CTE来计算顶级销售区域中的畅销产品。
- en: The first CTE, `regional_sales`, calculates the total sales for each region
    by summing the `amount` column of the `orders` table and grouping the results
    by `region`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个CTE，`regional_sales`，通过对`orders`表的`amount`列求和并按`region`分组，计算每个区域的总销售额。
- en: The second CTE, `top_regions`, selects only the regions whose total sales are
    greater than 10% of the total sales across all regions. This is done using a subquery
    that calculates the total sales across all regions and divides it by 10.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个CTE，`top_regions`，仅选择那些总销售额超过所有区域总销售额10%的区域。这是通过一个子查询来计算所有区域的总销售额并将其除以10实现的。
- en: The main query then joins the `orders` table with the `top_regions` CTE using
    an `IN` clause to filter the results to only include orders from the top-performing
    regions.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 主查询然后使用`IN`子句将`orders`表与`top_regions` CTE连接，以仅包含来自顶级销售区域的订单。
- en: 'Here’s the rewritten query without using a CTE:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是没有使用CTE的重写查询：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: A CTE can simplify complex queries and make them more readable. It makes reusing
    the same subquery multiple times within a larger query easier.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: CTE可以简化复杂的查询，使其更具可读性。它使在更大查询中多次重用相同的子查询变得更容易。
- en: '[Learn more about CTEs](https://learnsql.com/blog/what-is-common-table-expression/)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[了解更多关于CTE的信息](https://learnsql.com/blog/what-is-common-table-expression/)'
- en: 3\. Recursive query
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 递归查询
- en: Have you ever wanted to retrieve data from a database where the data is stored
    in a hierarchical or tree-like structure?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾经想从一个数据以层次结构或树状结构存储的数据库中检索数据？
- en: For instance, you may have a product category tree where each category has subcategories,
    and each subcategory can have further subcategories. In such cases, a recursive
    query can be handy.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可能有一个产品类别树，其中每个类别都有子类别，每个子类别还可以有进一步的子类别。在这种情况下，递归查询非常有用。
- en: A recursive query is a query that references itself in the definition. It’s
    useful when traversing a tree or a hierarchical structure in the database and
    retrieving all the related data. In other words, it enables you to select data
    from a table that depends on data from the same table.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 递归查询是指在定义中引用自身的查询。当遍历数据库中的树状或层次结构并检索所有相关数据时，它很有用。换句话说，它使你能够从一个依赖于同一表中数据的表中选择数据。
- en: 'Here’s an example of a recursive query that can be used to traverse a category
    tree:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于遍历类别树的递归查询示例：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We use a CTE with the `WITH` clause to define the recursive query in this example.
    The `RECURSIVE` keyword tells Postgres that it’s a recursive query.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个例子中使用了带有`WITH`子句的CTE来定义递归查询。`RECURSIVE`关键字告诉Postgres这是一个递归查询。
- en: The `category_tree` CTE is defined by two SELECT statements. The first SELECT
    statement selects the root nodes of the category tree (nodes with no parent),
    and the second SELECT statement selects the child nodes recursively. The `UNION
    ALL` operator combines the results of both SELECT statements.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`category_tree` CTE由两个SELECT语句定义。第一个SELECT语句选择类别树的根节点（没有父节点的节点），第二个SELECT语句递归选择子节点。`UNION
    ALL`操作符结合了两个SELECT语句的结果。'
- en: The `depth` column is used to keep track of the depth of each category node
    in the tree. The `path` column is an array that stores the path from the root
    to the current node.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`depth`列用于跟踪树中每个类别节点的深度。`path`列是一个数组，用于存储从根节点到当前节点的路径。'
- en: With this query, we can retrieve all the categories in the tree with their respective
    depths and paths.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个查询，我们可以检索树中所有类别及其各自的深度和路径。
- en: '[Learn more about Recursive queries](https://learnsql.com/blog/sql-recursive-cte/)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[了解更多关于递归查询的信息](https://learnsql.com/blog/sql-recursive-cte/)'
- en: 4\. Dynamic SQL
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 动态SQL
- en: If you’ve ever worked with SQL queries, you might have encountered some that
    are pretty complex and need to be generated at run time. Writing such queries
    can be daunting, and executing them can be even more challenging.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经使用过SQL查询，你可能遇到过一些非常复杂的查询，需要在运行时生成。编写这些查询可能令人望而却步，而执行它们则可能更加具有挑战性。
- en: In the past, I used to rely on Python to generate complex SQL queries and execute
    them using a database connector such as psycopg2\. This approach was effective
    but not very elegant.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，我曾依靠Python生成复杂的SQL查询，并使用像psycopg2这样的数据库连接器执行它们。这种方法有效但不太优雅。
- en: However, I recently discovered dynamic SQL in Postgres, making generating and
    executing complex queries much more manageable. With dynamic SQL, you can dynamically
    create queries based on runtime conditions, which is incredibly useful when dealing
    with complex data structures or business logic.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我最近发现了 Postgres 中的动态 SQL，这使得生成和执行复杂查询变得更加可控。使用动态 SQL，你可以根据运行时条件动态创建查询，这在处理复杂的数据结构或业务逻辑时非常有用。
- en: 'Let’s say you want to retrieve all orders placed on a specific date. In a static
    query, you might write something like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想检索在特定日期下的所有订单。在静态查询中，你可能会写成这样：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'But what if you allow the user to select a date range? With dynamic SQL, you
    can generate the query based on user input like this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你允许用户选择一个日期范围呢？使用动态 SQL，你可以根据用户输入生成查询，如下所示：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this example, we’ve created a function that takes two parameters, `start_date`
    and `end_date`, and returns a table of orders that fall within that date range.
    The `EXECUTE` statement allows us to generate the query based on the input parameters
    dynamically, and the `USING` clause specifies the values for the query.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们创建了一个函数，该函数接受两个参数，`start_date` 和 `end_date`，并返回一个在该日期范围内的订单表。`EXECUTE`
    语句允许我们根据输入参数动态生成查询，而 `USING` 子句则指定了查询的值。
- en: This example is rudimentary. But in large-scale projects, you’d need lots of
    SQL generated dynamically.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子很简单。但是在大规模项目中，你会需要大量动态生成的 SQL。
- en: '[Learn more about Dynamic SQL](https://www.postgresql.org/docs/current/ecpg-dynamic.html).'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[了解更多关于动态 SQL 的信息](https://www.postgresql.org/docs/current/ecpg-dynamic.html)。'
- en: 5\. Cursors
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 游标
- en: Our queries may run on constrained environments. Running an intensive operation
    on a vast table all at once may not always be preferable. Or we may need more
    control over the operation than applying it to a full table.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的查询可能会在受限环境中运行。一次性对一个庞大的表进行密集操作可能并不总是最佳选择。或者我们可能需要对操作有更多的控制，而不是将其应用于整个表。
- en: This is where cursors come in handy. Cursors allow you to retrieve and manipulate
    data from a result set one row at a time. You can use cursors to iterate through
    a data set and perform complex operations on each row.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是游标派上用场的地方。游标允许你逐行检索和操作结果集中的数据。你可以使用游标遍历数据集，并对每一行执行复杂的操作。
- en: Suppose you have a table called “products” that contains information about all
    products, including the product ID, product name, and current inventory. You can
    use a cursor to iterate through all orders that contain a specific product and
    update its inventory.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个名为“products”的表，其中包含所有产品的信息，包括产品 ID、产品名称和当前库存。你可以使用游标遍历所有包含特定产品的订单，并更新其库存。
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this example, we first declare a cursor called “cur_orders” that selects
    all order details that contain a specific product ID. We then define a variable
    called “product_inventory” to store the current inventory of the product.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们首先声明了一个名为“cur_orders”的游标，选择所有包含特定产品 ID 的订单详细信息。然后我们定义了一个名为“product_inventory”的变量，用于存储该产品的当前库存。
- en: Inside the loop, we fetch each order ID, product ID, and quantity from the cursor,
    subtract the quantity from the current inventory and update the products table
    with the new inventory value.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环中，我们从游标中获取每个订单 ID、产品 ID 和数量，从当前库存中减去数量，并使用新的库存值更新产品表。
- en: Finally, we close the cursor and do something after updating the inventory,
    such as logging the changes.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们关闭游标，并在更新库存后进行其他操作，例如记录更改。
- en: Conclusion
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: In conclusion, SQL is a powerful language that offers many techniques to work
    with complex data. But learning them all might intimidate you at first.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，SQL 是一种强大的语言，提供了许多处理复杂数据的技术。但是，初学时掌握所有这些技术可能会让你感到不知所措。
- en: This blog post explored five of the most commonly used advanced SQL techniques,
    including CTE, Window function, Recursive queries, dynamic queries, and cursors.
    While basic SQL concepts such as joins and subqueries are fundamental to working
    with data, these techniques will help you work on almost any SQL project.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇博客文章探讨了五种最常用的高级 SQL 技术，包括 CTE、窗口函数、递归查询、动态查询和游标。虽然像联接和子查询这样的基本 SQL 概念对于处理数据是基础，但这些技术将帮助你处理几乎任何
    SQL 项目。
- en: While this post provides an overview of the advanced SQL techniques, it is not
    intended to be an exhaustive discussion of each technique. However, relevant links
    have been provided for those who wish to explore these concepts further. In the
    future, I plan to delve deeper into each of these techniques individually, providing
    a more comprehensive understanding of their capabilities and potential applications.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这篇文章提供了高级 SQL 技术的概述，但并不打算对每种技术进行详尽讨论。有关的链接已经提供，供那些希望深入探讨这些概念的人使用。未来，我计划对每种技术进行更深入的探讨，提供更全面的理解其能力和潜在应用。
- en: Thanks for reading, friend! If you enjoyed my article, let’s keep in touch on
    [**LinkedIn**](https://www.linkedin.com/in/thuwarakesh/), [**Twitter**](https://twitter.com/Thuwarakesh),
    and [**Medium**](https://thuwarakesh.medium.com/).
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 感谢阅读，朋友！如果您喜欢我的文章，让我们在 [**LinkedIn**](https://www.linkedin.com/in/thuwarakesh/)、[**Twitter**](https://twitter.com/Thuwarakesh)
    和 [**Medium**](https://thuwarakesh.medium.com/) 保持联系。
- en: ''
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Not a Medium member yet? Please use this link to [**become a member**](https://thuwarakesh.medium.com/membership)
    because, at no extra cost for you, I earn a small commission for referring you.
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 还不是 Medium 会员？请使用这个链接[**成为会员**](https://thuwarakesh.medium.com/membership)，因为在没有额外费用的情况下，我会因推荐您而获得一小部分佣金。
