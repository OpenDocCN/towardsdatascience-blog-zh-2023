- en: Explore Pydantic V2’s Enhanced Data Validation Capabilities
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Pydantic V2 的增强数据验证功能
- en: 原文：[https://towardsdatascience.com/explore-pydantic-v2s-enhanced-data-validation-capabilities-792a3353ec5](https://towardsdatascience.com/explore-pydantic-v2s-enhanced-data-validation-capabilities-792a3353ec5)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/explore-pydantic-v2s-enhanced-data-validation-capabilities-792a3353ec5](https://towardsdatascience.com/explore-pydantic-v2s-enhanced-data-validation-capabilities-792a3353ec5)
- en: Learn the new features and syntaxes of Pydantic V2
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解 Pydantic V2 的新功能和语法
- en: '[](https://lynn-kwong.medium.com/?source=post_page-----792a3353ec5--------------------------------)[![Lynn
    G. Kwong](../Images/b9a05b6587db5ca41c1d8264adda5b06.png)](https://lynn-kwong.medium.com/?source=post_page-----792a3353ec5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----792a3353ec5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----792a3353ec5--------------------------------)
    [Lynn G. Kwong](https://lynn-kwong.medium.com/?source=post_page-----792a3353ec5--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://lynn-kwong.medium.com/?source=post_page-----792a3353ec5--------------------------------)[![Lynn
    G. Kwong](../Images/b9a05b6587db5ca41c1d8264adda5b06.png)](https://lynn-kwong.medium.com/?source=post_page-----792a3353ec5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----792a3353ec5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----792a3353ec5--------------------------------)
    [Lynn G. Kwong](https://lynn-kwong.medium.com/?source=post_page-----792a3353ec5--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----792a3353ec5--------------------------------)
    ·7 min read·Oct 25, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----792a3353ec5--------------------------------)
    ·7 min read·2023年10月25日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/84d995a0acb8b86cb58dee8da4027427.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/84d995a0acb8b86cb58dee8da4027427.png)'
- en: Image by jackmac34 on Pixabay
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 jackmac34 在 Pixabay 提供
- en: Data validation stands as a cornerstone for robust applications in the ever-evolving
    field of data engineering and software development. Ensuring data cleanliness
    and accuracy is essential not only for application reliability but also for user
    experience.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 数据验证是数据工程和软件开发领域中稳健应用的基石。确保数据的清洁性和准确性不仅对应用的可靠性至关重要，也对用户体验有很大影响。
- en: Pydantic is the most widely used data validation library for Python. The core
    of the newest version (V2) of Pydantic has been rewritten in Rust and has a much
    better performance than the previous version. Besides, there are some major improvements
    to the functionalities like supporting strict mode, validation without a model,
    model namespace cleanup, etc.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Pydantic 是 Python 中使用最广泛的数据验证库。Pydantic 最新版本（V2）的核心已经用 Rust 重新编写，相比于之前的版本性能大大提升。此外，在功能方面也有一些重大改进，例如支持严格模式、无模型验证、模型命名空间清理等。
- en: This post will dive deep into the latest features and enhanced performance of
    the powerful data validation capabilities of Pydantic, offering developers a comprehensive
    toolset for all sorts of data-handling tasks.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将深入探讨 Pydantic 强大数据验证功能的最新特性和增强性能，为开发者提供一个全面的数据处理工具集。
- en: Preparation
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To follow the examples in this post, you should install a modern version of
    Python (≥ 3.10) and the latest version of Pydantic V2\. It’s recommended to manage
    the different versions of Python and the libraries with a [conda](https://superdataminer.com/2022/01/04/how-to-create-virtual-environments-with-venv-and-conda-in-python/)
    virtual environment:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本文中的示例，您应该安装现代版本的 Python（≥ 3.10）和最新版本的 Pydantic V2。建议使用 [conda](https://superdataminer.com/2022/01/04/how-to-create-virtual-environments-with-venv-and-conda-in-python/)
    虚拟环境来管理不同版本的 Python 和库：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Basic Usage
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本用法
- en: Normally with Pydantic, we need to define the schema of our data using models
    first, which are simply classes inheriting from `BaseModel`. In these models,
    the data types of each field are defined by type hints.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通常使用 Pydantic 时，我们需要先通过模型定义数据的模式，这些模型只是继承自 `BaseModel` 的类。在这些模型中，每个字段的数据类型由类型提示定义。
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To use this model for validation, we can create an instance by passing the
    values for each field:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此模型进行验证，我们可以通过传递每个字段的值来创建一个实例：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The string data for `storage` is coerced to an integer which is defined in the
    model.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`storage` 字符串数据会被强制转换为模型中定义的整数。'
- en: For simplicity of demonstration, we will only use two fields, namely `brand`
    and `storage` in this post, which can be easily expanded to other fields.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示的简便性，我们在本文中仅使用两个字段，即`brand`和`storage`，这可以轻松扩展到其他字段。
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Validate data directly
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直接验证数据
- en: 'In the example above, an instance of a Pydantic model is created for data validation.
    In Pydantic V2, we can also validate dictionaries or JSON data directly using
    `model_validate()` and `model_validate_json()`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，为数据验证创建了一个Pydantic模型的实例。在Pydantic V2中，我们还可以直接使用`model_validate()`和`model_validate_json()`来验证字典或JSON数据：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In Pydantic V2, all methods on models start with `model_`, and thus the field
    names are not allowed to start with `model_` . However, field aliases can be used
    if needed.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在Pydantic V2中，所有模型的方法都以`model_`开头，因此字段名称不允许以`model_`开头。然而，如果需要，可以使用字段别名。
- en: Validate data in strict mode
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在严格模式下验证数据
- en: 'By default, the strict mode is off, which means the data type will be coerced
    if possible. For example, in the above examples, the type of the `storage` field
    is coerced from `str` to `int`. We can disable the strict mode so data types of
    all fields must match exactly:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，严格模式是关闭的，这意味着数据类型会被强制转换（如果可能的话）。例如，在上述示例中，`storage`字段的类型从`str`被强制转换为`int`。我们可以禁用严格模式，这样所有字段的数据类型必须完全匹配：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can also set strict mode on the field level of the model so we don’t need
    to specify it in the validation step:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在模型的字段级别设置严格模式，这样我们在验证步骤中就不需要指定它：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Configure models with model_config
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`model_config`配置模型
- en: In Pydantic V2, to specify configuration on a model, we can set a class attribute
    called `model_config` to be a dict with the key/value pairs that will be used
    as the config. Typically, we do this with a special dict called `ConfigDict` which
    is a `TypedDict` for configuring Pydantic behavior.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在Pydantic V2中，为了指定模型的配置，我们可以将类属性`model_config`设置为一个字典，该字典包含将用于配置的键/值对。通常，我们通过一个称为`ConfigDict`的特殊字典来做到这一点，它是一个用于配置Pydantic行为的`TypedDict`。
- en: 'For example, we can set the `strict` mode on the model level, rather than on
    the field level as shown above:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以在模型级别设置`strict`模式，而不是在字段级别，如上所示：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We have also specified the minimum length for string fields to be 2 so a brand
    like `X` will be rejected.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还指定了字符串字段的最小长度为2，因此像`X`这样的品牌将被拒绝。
- en: Use typing.Annotated for Fields
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`typing.Annotated`来处理字段
- en: 'Rather than assigning a `Field` value to a field to specify the behavior of
    a field, it can also be done with type hint using `typing.Annotated`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 不必将`Field`值分配给字段以指定字段的行为，也可以使用类型提示`typing.Annotated`来完成：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With `Annotated`, the first type parameter (here `int`) passed is the actual
    type and the rest is just metadata for other tools (here Pydantic). You can have
    anything as the metadata, and it’s up to the other tools how to use it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Annotated`时，传递的第一个类型参数（这里是`int`）是实际类型，其余的是其他工具（这里是Pydantic）的元数据。元数据可以包含任何内容，如何使用由其他工具决定。
- en: Fields with dynamic default values
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 具有动态默认值的字段
- en: We can set a dynamic default value for a field so it can be generated automatically
    and can be different for each model instance. For example, we can set the current
    timestamp as the created time for a model and also set a unique ID for it. This
    can be done using `default_factory`, which accepts a factory function as the input.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为字段设置动态默认值，这样它可以自动生成，并且每个模型实例可能不同。例如，我们可以将当前时间戳设置为模型的创建时间，并为其设置唯一的ID。这可以通过使用`default_factory`来完成，它接受一个工厂函数作为输入。
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: It shows that the `uid` and `created` field are created automatically and will
    be different for each model.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明`uid`和`created`字段是自动创建的，并且每个模型将会不同。
- en: Field and model validators
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字段和模型验证器
- en: 'Similar to applying the strict mode on a field, we can apply a custom validator
    to a field using the `Annotated` syntax of type hints. Let’s add a custom validator
    which checks if the storage is a valid value:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于在字段上应用严格模式，我们可以使用`Annotated`语法为字段应用自定义验证器。让我们添加一个自定义验证器，检查`storage`是否是有效值：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `AfterValidator` indicates that the validation will be applied after Pydantic’s
    inner validation logic. It’s equivalent to the `after` mode with `@field_validator()`
    decorator as shown below.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`AfterValidator`表示验证将在Pydantic的内部验证逻辑之后应用。它相当于使用`@field_validator()`装饰器的`after`模式，如下所示。'
- en: Note that the validation code should not raise `ValidationError` itself, but
    rather raise a `ValueError` or `AssertionError` (or subclass thereof) which will
    be caught and used to populate `ValidationError`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，验证代码不应抛出`ValidationError`本身，而应抛出`ValueError`或`AssertionError`（或其子类），这些异常将被捕获并用于填充`ValidationError`。
- en: 'We can also use the `@field_validator()` decorator to apply a custom validator
    to a field:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`@field_validator()`装饰器为字段应用自定义验证器：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Using `@field_validator()` should work exactly the same as with the `Annotated`
    syntax shown above. There are some pros and cons for each syntax:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`@field_validator()`的效果应与上述`Annotated`语法完全相同。每种语法都有其优缺点：
- en: Using `Annotated` we can re-use the custom validation function more easily.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Annotated`可以更轻松地重用自定义验证函数。
- en: Using `field_validator` we can apply the same validation function to multiple
    fields more easily.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`field_validator`我们可以更轻松地将相同的验证函数应用于多个字段。
- en: Therefore, you need to decide which syntax to use based on your specific practical
    use case.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你需要根据具体的实际使用案例来决定使用哪种语法。
- en: We can also apply custom validators to the whole model using `@model_validator()`.
    In this case, we can have access to data from all the fields. For example, let’s
    assume that if the brand is “Apple”, then the storage must be at least 256GB.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`@model_validator()`将自定义验证器应用于整个模型。在这种情况下，我们可以访问所有字段的数据。例如，假设如果品牌是“Apple”，则存储必须至少为256GB。
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that `@model_validator()` is an instance method decorator, rather than
    a [class method decorator](https://superdataminer.com/2021/11/16/how-to-decorate-classes-in-python/)
    like `@field_validator()`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`@model_validator()`是一个实例方法装饰器，而不是像`@field_validator()`那样的[类方法装饰器](https://superdataminer.com/2021/11/16/how-to-decorate-classes-in-python/)。
- en: Dumping or Serialization
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转储或序列化
- en: 'We can use`[model_dump](https://docs.pydantic.dev/latest/concepts/serialization/#modelmodel_dump)()`
    to convert an instance of a Pydantic model to a dictionary with the values of
    the instance. We will use the more verbose model as introduced at the beginning
    of this post to demonstrate serialization:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`[model_dump](https://docs.pydantic.dev/latest/concepts/serialization/#modelmodel_dump)()`将Pydantic模型的实例转换为包含实例值的字典。我们将使用文章开头介绍的更详细的模型来演示序列化：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Pydantic can serialize many commonly used types to JSON that would otherwise
    be incompatible with a simple `json.dumps()` (e.g. `datetime`, `date` or `UUID`)
    . If needed, we can also customize how a field should serialized with the `[@field_serializer](http://twitter.com/field_serializer)()`
    decorator. For example, let’s convert the brand to uppercase when it’s dumped.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Pydantic可以将许多常用类型序列化为JSON，这些类型否则会与简单的`json.dumps()`不兼容（例如`datetime`、`date`或`UUID`）。如果需要，我们还可以使用`[@field_serializer](http://twitter.com/field_serializer)()`装饰器自定义字段的序列化方式。例如，我们可以在转储时将品牌转换为大写。
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note that `_info` represents the metadata that’s provided by Pydantic automatically.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`_info`表示Pydantic自动提供的元数据。
- en: In this post, we introduced how to use the latest version of Pydantic (V2) for
    data validation. A lot of syntax changes and new features have been introduced
    in this version which can be pretty verbose and cumbersome to read in the official
    documentation. Luckily, we only use a small set of them in our daily work and
    most of them have been introduced in this post with simple examples which can
    provide developers with a comprehensive toolset for all sorts of data-handling
    tasks.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们介绍了如何使用最新版本的Pydantic（V2）进行数据验证。在这个版本中引入了许多语法变化和新特性，这些在官方文档中可能会显得非常冗长和复杂。幸运的是，我们在日常工作中只使用了一小部分功能，并且大多数功能在这篇文章中通过简单的示例进行了介绍，这些示例可以为开发者提供全面的数据处理工具集。
- en: Related posts
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关帖子
- en: '[How to Validate Your Data with Custom Validators of Pydantic Models in Python](https://superdataminer.com/2022/08/05/how-to-validate-your-data-with-custom-validators-of-pydantic-models-in-python/)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用Pydantic模型的自定义验证器验证数据](https://superdataminer.com/2022/08/05/how-to-validate-your-data-with-custom-validators-of-pydantic-models-in-python/)'
- en: '[Understand and Master the Decorator in Python](https://superdataminer.com/2021/05/14/understand-and-master-the-decorator-in-python/)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[理解和掌握Python中的装饰器](https://superdataminer.com/2021/05/14/understand-and-master-the-decorator-in-python/)'
