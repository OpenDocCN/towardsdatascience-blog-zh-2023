- en: Become Fluent in Python Decorators via Visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/become-fluent-in-python-decorators-via-visualization-4cc6ac06f2cb](https://towardsdatascience.com/become-fluent-in-python-decorators-via-visualization-4cc6ac06f2cb)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Comprehend Python Decorators By Visualization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://chengzhizhao.medium.com/?source=post_page-----4cc6ac06f2cb--------------------------------)[![Chengzhi
    Zhao](../Images/186bba91822dbcc0f926426e56faf543.png)](https://chengzhizhao.medium.com/?source=post_page-----4cc6ac06f2cb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4cc6ac06f2cb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4cc6ac06f2cb--------------------------------)
    [Chengzhi Zhao](https://chengzhizhao.medium.com/?source=post_page-----4cc6ac06f2cb--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4cc6ac06f2cb--------------------------------)
    ¬∑7 min read¬∑Jan 23, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c44b22b6f30e95008253cc13f75711a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Huyen Bui](https://unsplash.com/ja/@huyenbui30?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/vM9R9uu_BKY?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Python decorator is syntactic sugar. You can achieve everything without explicitly
    using the decorator. However, Using the decorator can help your code be more concise
    and readable. Ultimately, you write fewer lines of code by leveraging Python decorators.
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, Python decorator isn't a trivial concept to comprehend. Understanding
    Python decorators requires building blocks, including closure, function as an
    object, and deep knowledge of how Python code is executed.
  prefs: []
  type: TYPE_NORMAL
- en: Many online resources talk about Python decorators, but many tutorials only
    provide some sample code walkthroughs. Reading sample code could help to get a
    basic understanding of Python decorator. When it comes time to implement your
    decorator, we might still need clarification and clarity about the decorator concept
    and yet have to refer to the online resource to refresh our memory for detail.
  prefs: []
  type: TYPE_NORMAL
- en: Reading code sometimes doesn't deepen memory but seeing images does. In this
    article, I want to help you understand Python decorator with some visualization
    and fun examples.
  prefs: []
  type: TYPE_NORMAL
- en: Python Functions are Objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/5005c7b57120ec09d984c5e80f8e5eb6.png)'
  prefs: []
  type: TYPE_IMG
- en: Python Functions are Objects | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'If we went to Python programming 101 class, we might get a drawing like this.
    We defined a variable, a representational name used to reference an object. The
    variable `foo` points to an object at a given time. It can be a list `[1,2,3,4]`
    , it can be a dictionary `[‚Äúcity‚Äù: ‚ÄúNew York‚Äù]`, or it can a string `‚ÄúI like dumplings‚Äù`'
  prefs: []
  type: TYPE_NORMAL
- en: A less covered discussed topic in Python is that the variable `foo` can also
    point to a function `add()` . When the variable refers to a function, the `foo`
    can pass around the same way you used other types like int, str, list, or dict.
  prefs: []
  type: TYPE_NORMAL
- en: What does that mean I can pass `foo` around? **This unlocks us to pass a function
    as an argument. Furthermore, we can return a function as a return type**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Code walkthrough**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Function Definition**: we defined three functions called `add` which adds
    two objects; `I_am_1()` which simply returns number 1; `return_1` which return
    the function `I_am_1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interesting Fact**: Then we point to another variable `foo` to it. To prove
    that function is an object like the other types, we can even remove the original
    function reference named `add` . The rest of the code is still runnable due to
    `foo` refers to the object for the function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Result Explain**: `return_1()()` looks wired at first. If we take a closer
    look, it is the same way as we are calling the function, `return_1()` is `I_am_1`
    as it just returns this function. In this case, we can think `return_1()()=1`mentally,
    so it does not surprise us the `foo(1,2)` gives an output of 3\. We can also pass
    `foo(1,2)` to another function. In this case, we passed it to itself. Since `foo(1,2)=3`
    , the outer function will operate as `foo(3,3)` . To get the result, we can pass
    the entire function with its arguments over and let the program execute at runtime
    to decipher everything.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code Visualisation**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1b5c4e5630701aa221fbaedd63d6d7ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Pass Function to another Function | Image By Author
  prefs: []
  type: TYPE_NORMAL
- en: Python Decorators Structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Python decorator transforms the functionality of the original object without
    modifying the original one. It is syntax sugar that allows users to extend the
    object''s ability more conveniently instead of duplicating some existing code.
    Decorators are a pythonic implementation of the [decorator design pattern](http://en.wikipedia.org/wiki/Decorator_pattern)
    (Note: python decorator isn''t precisely the same as decorator design pattern).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have discussed that we can return a function as a return type.Now, we extend
    that idea to demonstrate how a decorator works: **we can return a function as
    a return type within another function.**'
  prefs: []
  type: TYPE_NORMAL
- en: To make our example more fun, we can create our decorator like a wrapper around
    a function and later stacks the multiple decorators.
  prefs: []
  type: TYPE_NORMAL
- en: Let's first define our functions and use the example of making some dumplings.
    ü•üü•üü•ü
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Code walkthrough**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Function Definition**: we defined three functions called `add_filling_vegetable`,
    `add_dumplings_wrapper`, and `dumplings` . Within `add_filling_vegetable` and
    `add_dumplings_wrapper`, we define a wrapper function that wraps around the original
    function passed as an argument. Additionally, we can do additional things. In
    this case, we print some text before and after the original function. If the original
    function also defined parameters, we can pass them in from the wrapper function.
    We also leverage the magic `*args` and `**kwargs` to be more flexible'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Result Explain**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'we can call the default ingredients for `meat` by using the default one `add_dumplings_wrapper(add_filling_vegetable(dumplings))()`
    , we can see the function are chaining together. It''s not readable, which we
    will fix shortly with decorator syntax. The core idea here is that we keep passing
    the function object as an argument to another. The function does two things: 1)
    continue doing the unmodified original function; 2) execute additional code. The
    execution of the entire code is like a round trip.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/bef2eccb094b8a80cbf6f137f7804084.png)'
  prefs: []
  type: TYPE_IMG
- en: '`add_dumplings_wrapper(add_filling_vegetable(dumplings))() | Image By Author`'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. for `add_dumplings_wrapper(add_filling_vegetable(dumplings))(ingredients=‚Äôtofu‚Äô)`
    it changes the default ingredients from `meat` to `tofu` by passing an additional
    argument. In this case, `*args` and `**kwargs` is very useful for resolving the
    complexity. The wrapper functions don't have to unwrap to know the context of
    the argument. As a decorator, it is safe to pass down the actual function without
    modifying them.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f9310b64980d7273c4f08cb100cf7f6f.png)'
  prefs: []
  type: TYPE_IMG
- en: '`add_dumplings_wrapper(add_filling_vegetable(dumplings))(ingredients=‚Äôtofu‚Äô)`'
  prefs: []
  type: TYPE_NORMAL
- en: So far, we haven‚Äôt touched the decorator syntax yet. Let‚Äôs make a small change
    in how we define the original function and call it `fancy_dumplings`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now decorator simplifies how we call all the functions and makes it more readable.
    We only need to call `fancy_dumplings` only once. it is much cleaner visually
    than nesting multiple functions horizontally.
  prefs: []
  type: TYPE_NORMAL
- en: What can I use decorators for?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Great! How to create the Python decorators are clear to us now. What can I use
    decorators for?
  prefs: []
  type: TYPE_NORMAL
- en: There are many potential practical use cases for Python decorators. It makes
    your code easier to read and dynamically. *Note you don‚Äôt necessarily need to
    go decorators. We can always implement a wrapper around another function to achieve
    the same goal.* ***The decorator is just syntactic sugar****.*
  prefs: []
  type: TYPE_NORMAL
- en: You can build your time decorator to evaluate the performance for a given function.
    The following is a timer example from [Primer on Python Decorators](https://realpython.com/primer-on-python-decorators/#a-few-real-world-examples)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It measures the time to execute a given function. Let‚Äôs stack it with our dumplings
    example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can keep stacking the decorators to achieve your goal by simply calling
    the original function without worrying about wrapping other functions around when
    calling, as we have provided the sequence of the decorator when we define the
    original function.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d99170ba9040d4b0cb7d30c8879e8e77.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Markus Spiske](https://unsplash.com/@markusspiske?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/IiEFmIXZWSw?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many possibilities you can leverage the Python decorators. Essentially,
    it‚Äôs a wrapper to alert the behavior of the original function. It depends on your
    perspective to judge how practical the decorator is, but it shouldn't be a syntax
    that feels foreign to you. I hope with some visualization, the concept of decorators
    becomes more straightforward to understand. Please let me know if you have any
    comments on this story.
  prefs: []
  type: TYPE_NORMAL
- en: 'I hope this story is helpful to you. This article is **part of a series** of
    my engineering & data science stories that currently consist of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chengzhi Zhao](../Images/51b8d26809e870b4733e4e5b6d982a9f.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Chengzhi Zhao](https://chengzhizhao.medium.com/?source=post_page-----4cc6ac06f2cb--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: Data Engineering & Data Science Stories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[View list](https://chengzhizhao.medium.com/list/data-engineering-data-science-stories-ddab37f718e7?source=post_page-----4cc6ac06f2cb--------------------------------)53
    stories![](../Images/8b5085966553259eef85cc643e6907fa.png)![](../Images/9dcdca1fc00a5694849b2c6f36f038d4.png)![](../Images/2a6b2af56aa4d87fa1c30407e49c78f7.png)'
  prefs: []
  type: TYPE_NORMAL
- en: You can also [**subscribe to my new articles**](https://chengzhizhao.medium.com/subscribe)
    or become a [**referred Medium member**](https://chengzhizhao.medium.com/membership)who
    gets unlimited access to all the stories on Medium.
  prefs: []
  type: TYPE_NORMAL
- en: In case of questions/comments, **do not hesitate to write in the comments**
    of this story or **reach me directly** through [Linkedin](https://www.linkedin.com/in/chengzhizhao/)
    or [Twitter](https://twitter.com/ChengzhiZhao).
  prefs: []
  type: TYPE_NORMAL
