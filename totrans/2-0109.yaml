- en: 5 Jupyter Hacks That You Never Knew Even Existed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/5-jupyter-hacks-that-you-never-knew-even-existed-9dc0a08fd90a](https://towardsdatascience.com/5-jupyter-hacks-that-you-never-knew-even-existed-9dc0a08fd90a)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: With a bonus tip
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@avi_chawla?source=post_page-----9dc0a08fd90a--------------------------------)[![Avi
    Chawla](../Images/c9c3e4fc7549c3e388f8b4a5560c7cc6.png)](https://medium.com/@avi_chawla?source=post_page-----9dc0a08fd90a--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9dc0a08fd90a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9dc0a08fd90a--------------------------------)
    [Avi Chawla](https://medium.com/@avi_chawla?source=post_page-----9dc0a08fd90a--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9dc0a08fd90a--------------------------------)
    ·6 min read·Mar 1, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8ce875075d28ea946aa0054fce1a075b.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Sigmund](https://unsplash.com/@sigmund?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Jupyter Notebook is one of the most sought-after IDEs for almost all Python-oriented
    programming tasks such as data science, machine learning, scientific computing,
    and many more.
  prefs: []
  type: TYPE_NORMAL
- en: Its interactive coding capabilities make it the go-to tool not only for beginners
    but experts as well.
  prefs: []
  type: TYPE_NORMAL
- en: Yet, despite its widespread usage, many of its users do not use it to its full
    potential.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, they tend to use Jupyter using its default interface/capabilities,
    which, in my opinion, can be significantly improved to provide a richer experience.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, in this article, I will present 5 cool Jupyter hacks that you probably
    never knew even existed.
  prefs: []
  type: TYPE_NORMAL
- en: These will allow you to unlock new levels of productivity and creativity with
    this powerful tool.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s begin 🚀!
  prefs: []
  type: TYPE_NORMAL
- en: '#1 Stop Previewing Raw DataFrames'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Often when we load a DataFrame in Jupyter, we preview it by printing. This
    is shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/60656ce2b1095c38f78f2f6813f192ad.png)'
  prefs: []
  type: TYPE_IMG
- en: However, it hardly tells anything about what’s inside this data.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, one has to dig deeper by analyzing it, which involves simple yet
    repetitive code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, use [Jupyter-DataTables](https://bit.ly/jupyter-datatables). You can
    install it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use it, run the following code in Jupyter:'
  prefs: []
  type: TYPE_NORMAL
- en: It supercharges the default preview of a DataFrame with many useful features.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, whenever you print a DataFrame, it will appear much more elegant
    as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d514d8829ffd81354f9cd97eadc14b94.png)'
  prefs: []
  type: TYPE_IMG
- en: This richer preview provides sorting, filtering, exporting, and pagination operations
    along with column distribution and data types
  prefs: []
  type: TYPE_NORMAL
- en: '#2 Label Your Data With The Click Of A Button'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not all data you get is labeled beforehand.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, typically with unlabeled data, one may have to spend some time annotating/labeling
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Rather than previewing the files externally and labeling them or building a
    complex annotation pipeline, you can annotate in just a few lines of code using
    𝐢𝐩𝐲𝐚𝐧𝐧𝐨𝐭𝐚𝐭𝐞.
  prefs: []
  type: TYPE_NORMAL
- en: It provides a Jupyter widget specifically for data annotation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following commands to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: Data annotation becomes easier by clicking buttons. Thus, ipyannotate allows
    you to attach data labels to buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider we have some images of cats and dogs (unlabeled). We can create an
    annotation pipeline as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/659a6e1695f48d8aaadb788b0e7a7f84.png)'
  prefs: []
  type: TYPE_IMG
- en: As shown above, you can annotate your data by simply clicking the corresponding
    button.
  prefs: []
  type: TYPE_NORMAL
- en: What’s more, you can also retrieve the labels and use them for your data pipeline
    as required.
  prefs: []
  type: TYPE_NORMAL
- en: '#3 View Documentation in Jupyter'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While working in Jupyter, it is common to forget the parameters of a function
    and visit the official docs (or StackOverflow).
  prefs: []
  type: TYPE_NORMAL
- en: However, you can view the documentation in the notebook itself.
  prefs: []
  type: TYPE_NORMAL
- en: Pressing 𝐒𝐡𝐢𝐟𝐭-𝐓𝐚𝐛 opens the documentation panel. This is extremely useful and
    saves time as one does not have to open the official docs every single time.
  prefs: []
  type: TYPE_NORMAL
- en: 'A demo is shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a0df67cb22b51168b5246f9af3478779.png)'
  prefs: []
  type: TYPE_IMG
- en: This feature also works for your custom functions.
  prefs: []
  type: TYPE_NORMAL
- en: '#4 Get Notified When Jupyter Cell Has Executed'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After running some code in a Jupyter cell, we often navigate away to do some
    other work in the meantime.
  prefs: []
  type: TYPE_NORMAL
- en: Here, one has to repeatedly get back to the Jupyter tab to check whether the
    cell has been executed or not.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this, you can use the %%𝐧𝐨𝐭𝐢𝐟𝐲 magic command from the 𝐣𝐮𝐩𝐲𝐭𝐞𝐫𝐧𝐨𝐭𝐢𝐟𝐲
    extension.
  prefs: []
  type: TYPE_NORMAL
- en: As the name suggests, it notifies the user upon completion (both successful
    and unsuccessful) of a Jupyter cell via a browser notification.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install it, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, load the extension:'
  prefs: []
  type: TYPE_NORMAL
- en: And done!
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, whenever you want to get notified, enter the following magic command at
    the top of the cell:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever the cell will finish its execution, you will receive the following
    notification:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6759e91a1b66d98d0fbb84ae24f3d1a5.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on the notification will take you back to the Jupyter tab.
  prefs: []
  type: TYPE_NORMAL
- en: '#5 Clear Cell Output In Jupyter Notebook During Run-time'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While using Jupyter, we typically print many details to track the code’s progress.
  prefs: []
  type: TYPE_NORMAL
- en: However, it gets frustrating when the output panel has accumulated a bunch of
    details, but we are only interested in the most recent output.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, scrolling to the bottom of the output each time can be annoying too.
  prefs: []
  type: TYPE_NORMAL
- en: To clear the output of the cell, you can use the 𝗰𝗹𝗲𝗮𝗿_𝗼𝘂𝘁𝗽𝘂𝘁 method from the
    𝗜𝗣𝘆𝘁𝗵𝗼𝗻 package.
  prefs: []
  type: TYPE_NORMAL
- en: IPython comes pre-installed with Python, so no installation is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can import the method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: When invoked, it will remove the current output of the cell, after which you
    can print the latest details.
  prefs: []
  type: TYPE_NORMAL
- en: 'A demo is shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6a72ea74fbdd382daa1328f5624c1fe6.png)'
  prefs: []
  type: TYPE_IMG
- en: As demonstrated above, we only see the latest output in the cell. The previous
    outputs are being erased.
  prefs: []
  type: TYPE_NORMAL
- en: Bonus Tip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although the above-mentioned tips will significantly enrich your Jupyter experience,
    there are still many things that I struggle to do with Jupyter.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, Jupyter sucks when it comes to collaboration. As it runs locally,
    there is no way to embed real-time collaboration capabilities in Jupyter where
    teams can work together, add comments, track progress, etc.
  prefs: []
  type: TYPE_NORMAL
- en: What’s more, sharing is equally painful. If I ever have to share my notebook
    with someone, the only way to do that is by emailing them or hosting it online,
    on GitHub, for instance, and sharing the link.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, many data science tasks are not just limited to Python. They equally
    involve SQL, which is largely used to interact with organizational databases.
  prefs: []
  type: TYPE_NORMAL
- en: However, integrating SQL in Jupyter is feasible but a tedious process.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Frustrated with these limitations, I started looking for alternatives, and I
    am glad I discovered Deepnote.
  prefs: []
  type: TYPE_NORMAL
- en: Without having to learn anything new about how to use it, it took away all the
    limitations of Jupyter in a snap and has consistently offered me an enriching
    Jupyter-like experience.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing, collaborating, using SQL, creating charts without any code, connecting
    to a database, etc., everything is seamlessly integrated into Deepnote.
  prefs: []
  type: TYPE_NORMAL
- en: While I understand that Jupyter tends to offer a generalized experience for
    all Python users, it miserably fails to address all the pain points of data scientists,
    especially those working in teams.
  prefs: []
  type: TYPE_NORMAL
- en: Deepnote, in my opinion, is a supercharged version of Jupyter for all data-driven
    projects, and you should definitely check it out.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this, we come to the end of this blog.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations on learning a few incredible hacks for Jupyter notebook. I am
    sure these tips will level up your python programming productivity.
  prefs: []
  type: TYPE_NORMAL
- en: Also, I would love to know what are your favorite hacks while using Jupyter
    notebook.
  prefs: []
  type: TYPE_NORMAL
- en: As always, thanks for reading!
  prefs: []
  type: TYPE_NORMAL
