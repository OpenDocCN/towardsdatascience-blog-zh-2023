- en: Exploring the Power of Overlay File Systems in Linux Containers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Linux 容器中叠加文件系统的力量
- en: 原文：[https://towardsdatascience.com/exploring-the-power-of-overlay-file-systems-in-linux-containers-d846724ec06d](https://towardsdatascience.com/exploring-the-power-of-overlay-file-systems-in-linux-containers-d846724ec06d)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[https://towardsdatascience.com/exploring-the-power-of-overlay-file-systems-in-linux-containers-d846724ec06d](https://towardsdatascience.com/exploring-the-power-of-overlay-file-systems-in-linux-containers-d846724ec06d)'
- en: Unlocking the Potential of Containerization with a unique yet simple idea of
    layering
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过独特而简单的分层思路释放容器化的潜力
- en: '[](https://dpoulopoulos.medium.com/?source=post_page-----d846724ec06d--------------------------------)[![Dimitris
    Poulopoulos](../Images/ce535a1679779f5a2ec8b024e6691e50.png)](https://dpoulopoulos.medium.com/?source=post_page-----d846724ec06d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d846724ec06d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d846724ec06d--------------------------------)
    [Dimitris Poulopoulos](https://dpoulopoulos.medium.com/?source=post_page-----d846724ec06d--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[![Dimitris Poulopoulos](../Images/ce535a1679779f5a2ec8b024e6691e50.png)](https://dpoulopoulos.medium.com/?source=post_page-----d846724ec06d--------------------------------)
    [![Towards Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d846724ec06d--------------------------------)
    [Dimitris Poulopoulos](https://dpoulopoulos.medium.com/?source=post_page-----d846724ec06d--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d846724ec06d--------------------------------)
    ·7 min read·Feb 1, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d846724ec06d--------------------------------)
    ·7 min read·2023年2月1日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/4cc7cae29da36d8e2f7e3699d9915b37.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4cc7cae29da36d8e2f7e3699d9915b37.png)'
- en: Photo by [Hoach Le Dinh](https://unsplash.com/@hoachld?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/PeRt3uMmjYM?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[Hoach Le Dinh](https://unsplash.com/@hoachld?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    摄影 [Unsplash](https://unsplash.com/photos/PeRt3uMmjYM?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)'
- en: This series of articles explores how Linux containers work under the hood and
    the tools we need to build similar environments without Docker. Why do that? Well,
    if you really want to know what happens when you execute `docker run` this is
    the first step you need to take. The last two articles focused on the role of
    Namespaces and Control Groups (groups) in containerization.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本系列文章探讨了 Linux 容器如何在幕后工作，以及我们需要什么工具来构建类似的环境而无需 Docker。为什么要这样做？好吧，如果你真的想知道当你执行
    `docker run` 时发生了什么，这是你需要迈出的第一步。最后两篇文章集中在命名空间和控制组（groups）在容器化中的作用。
- en: '[](/containers-how-they-work-under-the-hood-and-why-theyre-taking-over-the-data-science-world-6b94702609aa?source=post_page-----d846724ec06d--------------------------------)
    [## Containers: How They Work Under the Hood and Why They’re Taking Over the Data
    Science World'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 容器：它们如何在幕后工作以及为什么它们正在主导数据科学世界](https://towardsdatascience.com/?source=post_page-----d846724ec06d--------------------------------)'
- en: A Beginner’s Guide to Understanding the Magic of Docker
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初学者理解 Docker 神奇的指南
- en: 'towardsdatascience.com](/containers-how-they-work-under-the-hood-and-why-theyre-taking-over-the-data-science-world-6b94702609aa?source=post_page-----d846724ec06d--------------------------------)
    [](/the-power-of-linux-cgroups-how-containers-take-control-of-their-resources-ba564fef13b0?source=post_page-----d846724ec06d--------------------------------)
    [## The Power of Linux Cgroups: How Containers Take Control of Their Resources'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Linux 控制组的力量：容器如何掌控其资源](https://towardsdatascience.com/?source=post_page-----d846724ec06d--------------------------------)'
- en: Optimizing Container Resource Allocation with Linux Control Groups
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Linux 控制组优化容器资源分配
- en: towardsdatascience.com](/the-power-of-linux-cgroups-how-containers-take-control-of-their-resources-ba564fef13b0?source=post_page-----d846724ec06d--------------------------------)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[The Power of Linux Cgroups: How Containers Take Control of Their Resources](https://towardsdatascience.com/?source=post_page-----d846724ec06d--------------------------------)'
- en: This article closes the loop on the topic, introducing overlay file systems,
    the last building block we need to create a container-like environment without
    relying on Docker.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本文完成了对这一主题的讨论，引入了叠加文件系统，这是创建类似容器环境所需的最后一个构建块，无需依赖 Docker。
- en: Linux containers have revolutionized the way applications are deployed and managed
    in modern computing. At the heart of this technology lies the overlay file system,
    a critical component that enables containers to share a common base image while
    keeping each container isolated from one another.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 容器彻底改变了现代计算中应用程序的部署和管理方式。此技术的核心是叠加文件系统，这是一个关键组件，使容器能够共享一个共同的基础镜像，同时保持每个容器之间的隔离。
- en: In the following paragraphs, we will delve into the concept of overlay file
    systems and their role in making Linux containers lightweight, efficient, and
    secure. Whether you are a seasoned sysadmin or just starting to explore containers,
    this article provides a comprehensive overview of overlay file systems and their
    impact on the world of containerization.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的段落中，我们将深入探讨叠加文件系统的概念及其在使 Linux 容器轻量、高效和安全方面的作用。无论你是经验丰富的系统管理员还是刚开始探索容器的新人，本文都提供了叠加文件系统的全面概述及其对容器化世界的影响。
- en: '[Learning Rate](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=overlayfs)
    is a newsletter for those who are curious about the world of MLOps. MLOps is a
    broad field that strives to bring ML models to production in an efficient and
    rerpoducible way. Containers play a crucial role in the pipeline. If you want
    to learn more about topics like this subscribe [here](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=overlayfs).
    You’ll hear from me on the last Saturday of every month with updates and thoughts
    on the latest MLOps news and articles!'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[学习速率](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=overlayfs)是一个针对那些对
    MLOps 世界感兴趣的人的新闻简报。MLOps 是一个广泛的领域，致力于以高效和可重复的方式将 ML 模型投入生产。容器在管道中扮演了关键角色。如果你想了解更多类似的主题，可以在
    [这里](https://www.dimpo.me/newsletter?utm_source=medium&utm_medium=article&utm_campaign=overlayfs)
    订阅。你会在每个月的最后一个星期六收到我的更新和对最新 MLOps 新闻和文章的看法！'
- en: Setting the Scene
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置场景
- en: Linux containers have become a staple in modern computing, offering an efficient
    and flexible way to package and deploy applications. Unlike traditional virtual
    machines, containers allow multiple isolated applications to run on a single host,
    sharing the host’s operating system kernel. This architecture provides numerous
    benefits, including increased efficiency, scalability, and portability.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 容器已成为现代计算的一个重要组成部分，提供了一种高效和灵活的方式来打包和部署应用程序。与传统虚拟机不同，容器允许多个隔离的应用程序在单个主机上运行，共享主机的操作系统内核。这种架构提供了诸多好处，包括提高效率、可扩展性和可移植性。
- en: Containers have been around for over a decade, with the first containerization
    technologies emerging in the early 2000s. However, it wasn’t until the advent
    of Docker in 2013 that containers truly took off, becoming a cornerstone of modern
    application deployment.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 容器已经存在了十多年，首个容器化技术出现于 2000 年代初。然而，直到 2013 年 Docker 的出现，容器才真正起飞，成为现代应用程序部署的基石。
- en: Yet, to fully understand what’s happening under the hood, we take a step back,
    pretend like Docker does not exist, and try to create a container-like environment
    ourselves. This effort won’t give us a production-ready solution, we will still
    be missing quite a few things, but it will give us a better understanding of how
    containers work.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了充分理解底层发生的情况，我们退一步，假设 Docker 不存在，尝试自己创建一个类似容器的环境。虽然这个努力不会给我们一个生产就绪的解决方案，我们仍然会缺少一些东西，但它将使我们更好地理解容器是如何工作的。
- en: To this end, this article explores overlay file systems. An overlay file system
    is a type of union file system that enables multiple lower layers to be stacked
    on top of each other, creating a unified view of the data. In the context of Linux
    containers, an overlay file system is used to layer the changes made by a container
    on top of a base image while preserving the original image intact. This allows
    containers to share a common base image and reduces the size of the images that
    need to be transferred, stored, and deployed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，本文探讨了叠加文件系统。叠加文件系统是一种联合文件系统，允许多个下层堆叠在一起，创建数据的统一视图。在 Linux 容器的背景下，叠加文件系统用于将容器所做的更改层叠在基础镜像之上，同时保持原始镜像的完整。这允许容器共享一个共同的基础镜像，并减少需要传输、存储和部署的镜像的大小。
- en: If this explanation sounds confusing, let’s build an overlay file system ourselves.
    It’s easier than you think.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个解释听起来令人困惑，让我们自己创建一个overlay文件系统。它比你想象的要简单。
- en: A Simple Example
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个简单的例子
- en: 'To build an overlay file system, we need two things: i) a lower layer and ii)
    an upper layer. In simple words, we need two directories. To be clear about their
    role, we will name the first one `lower` and the second one `upper`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建overlay文件系统，我们需要两样东西：i）一个下层和ii）一个上层。简单来说，我们需要两个目录。为了清楚地说明它们的角色，我们将第一个命名为`lower`，第二个命名为`upper`：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, let’s go into the `lower` directory and create three files. We will name
    the first file `delete-me.txt`, the second one `duplicate.txt`, and the last one
    `lower.txt`. Put anything you want inside, but make sure that you clearly state
    that this is a file that lives in the `lower` directory. For example, in `duplicate.txt`
    we can write something like:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们进入`lower`目录并创建三个文件。我们将第一个文件命名为`delete-me.txt`，第二个命名为`duplicate.txt`，最后一个命名为`lower.txt`。可以在文件中放入任何内容，但请确保明确说明这是一个存在于`lower`目录中的文件。例如，在`duplicate.txt`中我们可以写：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/acd6daad044049c155565f586776a8e7.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/acd6daad044049c155565f586776a8e7.png)'
- en: The lower dir — Image by author
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`lower`目录 — 作者提供的图片'
- en: In the upper directory, we will also create a `duplicate.txt` file and an `upper.txt`
    file. Again, you can populate their contents however you like, but make sure you
    clearly state that these are files live in the `upper` directory.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在`upper`目录中，我们还将创建一个`duplicate.txt`文件和一个`upper.txt`文件。你可以根据自己的需要填充这些文件的内容，但请确保明确说明这些文件存在于`upper`目录中。
- en: '![](../Images/f707a9ec21a8d9ba0950eee98dfa7f91.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f707a9ec21a8d9ba0950eee98dfa7f91.png)'
- en: The upper dir — Image by author
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`upper`目录 — 作者提供的图片'
- en: Now, we are ready to create an overlay file system, which will layer the two
    directories on top of each other and present a unified view of the data. For this,
    we need two more directories, one named `merged` and a last one named `workdir`.
    These live at the same level as the `lower` and `upper` directories.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备创建一个overlay文件系统，它将把两个目录叠加在一起，并呈现数据的统一视图。为此，我们需要两个更多的目录，一个名为`merged`，另一个名为`workdir`。这些目录与`lower`和`upper`目录处于同一层级。
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/1c3d7cd7573abc801f02cace7f4390fb.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1c3d7cd7573abc801f02cace7f4390fb.png)'
- en: Our working environment — Image by Author
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的工作环境 — 作者提供的图片
- en: 'The command to create the overlay file system is the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 创建overlay文件系统的命令如下：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Let’s decipher this step by step. First, you say that you want to mount a new
    file system that is of type `overlay`. You specify which are the `lower`, `upper`,
    and `workdir` directories. You set `none` for the source, as there is no underlying
    device that contains the data. Instead, the data come from the `lower` and `upper`
    directories. Finally, you say that you want to mount this in the `merged` directory.
    The `workdir` directory is a special place the system keeps the metadata it needs
    to function. We don’t touch this directory.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步一步地解读这个过程。首先，你说你想挂载一个类型为`overlay`的新文件系统。你指定了`lower`、`upper`和`workdir`目录。你将源设置为`none`，因为没有包含数据的底层设备。相反，数据来自`lower`和`upper`目录。最后，你说你想将其挂载到`merged`目录中。`workdir`目录是系统保存所需元数据的特殊位置。我们不会触碰这个目录。
- en: If you now list the files in the `merged` directory, you’ll see a unified view
    of the `lower` and `upper` directories. The `lower.txt` and `delete-me.txt` files
    from the `lower` directory are there, while the `upper.txt` and `duplicate.txt`
    files come from the `upper` directory. As you can safely guess by now, any files
    that have the same name in the `lower` and `upper` directories will come from
    the `upper` directory.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在列出`merged`目录中的文件，你会看到`lower`和`upper`目录的统一视图。`lower`目录中的`lower.txt`和`delete-me.txt`文件都在其中，而`upper`目录中的`upper.txt`和`duplicate.txt`文件也在其中。正如你现在可以安全地猜测的那样，`lower`和`upper`目录中具有相同名称的任何文件都将来自`upper`目录。
- en: '![](../Images/1fe86672e327e7aa9808856b37010ba9.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1fe86672e327e7aa9808856b37010ba9.png)'
- en: The merged directory — Image by author
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 合并目录 — 作者提供的图片
- en: Moreover, the `lower` directory is read-only. Any changes you make in the `merged`
    directory won’t affect it. Instead, everything will be recorded in the `upper`
    directory.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`lower`目录是只读的。你在`merged`目录中所做的任何更改不会影响它。相反，一切都将记录在`upper`目录中。
- en: 'For example, if you delete the `delete-me.txt` file, the system will place
    a character device in the `upper` directory, with the same name and zeros for
    the minor and major numbers. This indicates to the system that the file has been
    deleted, and you won’t see it in the `merged` directory:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你删除了`delete-me.txt`文件，系统将在`upper`目录中放置一个字符设备，其名称相同，次要和主要数字为零。这告诉系统该文件已被删除，你将在`merged`目录中看不到它：
- en: '![](../Images/e82f5fd0218fa0b445b33e904a6f6118.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e82f5fd0218fa0b445b33e904a6f6118.png)'
- en: Deleting a file — Image by author
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 删除文件 — 作者图像
- en: 'If you navigate in the `lower` directory, you’ll find the `delete-me.txt` file
    where you left it:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在`lower`目录中浏览，你会发现`delete-me.txt`文件仍在你留下的位置：
- en: '![](../Images/18d33e7305c84e4c317269f56ae5ef2e.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/18d33e7305c84e4c317269f56ae5ef2e.png)'
- en: The lower directory is read-only — Image by Author
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 下层目录是只读的 — 作者图像
- en: On the other hand, if you change the contents of the `lower.txt` file, the system
    will execute a copy-on-write operation. That means that the moment you save the
    changes in the `lower.txt` file, it will copy it to the `upper` directory and
    keep the changes there. You can check the contents of the `lower.txt` file in
    each directory yourself.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果你更改了`lower.txt`文件的内容，系统将执行写时复制操作。这意味着，当你保存对`lower.txt`文件的更改时，它将把文件复制到`upper`目录，并在其中保留这些更改。你可以自行检查每个目录中的`lower.txt`文件的内容。
- en: This is the essence of the overlay file system; you have a lower directory that
    stays intact, while a directory that is layered on top records all the changes.
    That’s how in containers, you can keep the file system of your base image unchanged
    and have layers that record the changes you made to the container.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是覆盖文件系统的精髓；你有一个保持不变的下层目录，而一个位于其上方的目录记录所有的更改。这就是在容器中如何保持基础镜像的文件系统不变，并拥有记录你对容器所做更改的层。
- en: Conclusion
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In conclusion, overlay file systems play a critical role in the success of Linux
    containers, enabling efficient, secure, and isolated deployment of applications.
    The overlay file system allows containers to share a common base image while keeping
    each container isolated from one another, reducing the size of images and improving
    the overall performance of the container ecosystem.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，覆盖文件系统在 Linux 容器的成功中扮演着至关重要的角色，它使得应用程序的高效、安全和隔离部署成为可能。覆盖文件系统允许容器共享一个共同的基础镜像，同时保持每个容器相互隔离，从而减少镜像的大小并提高容器生态系统的整体性能。
- en: In this article, we have explored the basics of overlay file systems and their
    impact on the containerization ecosystem. Now, we’re ready to move on and create
    a container-like environment without using Docker. I’ll see you in the next article.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们探讨了覆盖文件系统的基础知识及其对容器化生态系统的影响。现在，我们准备继续前进，创建一个不使用 Docker 的类似容器的环境。我将在下一篇文章中见到你。
- en: About the Author
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于作者
- en: My name is [Dimitris Poulopoulos](https://www.dimpo.me/?utm_source=medium&utm_medium=article&utm_campaign=overlayfs),
    and I’m a machine learning engineer working for [Arrikto](https://www.arrikto.com/).
    I have designed and implemented AI and software solutions for major clients such
    as the European Commission, Eurostat, IMF, the European Central Bank, OECD, and
    IKEA.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我的名字是[Dimitris Poulopoulos](https://www.dimpo.me/?utm_source=medium&utm_medium=article&utm_campaign=overlayfs)，我是一名在[Arrikto](https://www.arrikto.com/)工作的机器学习工程师。我为欧洲委员会、Eurostat、IMF、欧洲中央银行、OECD
    和 IKEA 等主要客户设计和实施了人工智能和软件解决方案。
- en: If you are interested in reading more posts about Machine Learning, Deep Learning,
    Data Science, and DataOps, follow me on [Medium](https://towardsdatascience.com/medium.com/@dpoulopoulos/follow),
    [LinkedIn](https://www.linkedin.com/in/dpoulopoulos/), or [@james2pl](https://twitter.com/james2pl)
    on Twitter.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣阅读更多关于机器学习、深度学习、数据科学和数据操作的文章，可以在[Medium](https://towardsdatascience.com/medium.com/@dpoulopoulos/follow)、[LinkedIn](https://www.linkedin.com/in/dpoulopoulos/)或Twitter上的[@james2pl](https://twitter.com/james2pl)关注我。
- en: Opinions expressed are solely my own and do not express the views or opinions
    of my employer.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 表达的意见完全是我个人的观点，并不代表我雇主的观点或意见。
