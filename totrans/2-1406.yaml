- en: 'Learning Python for Data Science On-the-Job Part 1: Philosophy'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/learning-python-for-data-science-on-the-job-part-1-philosophy-6e2aedc4e041](https://towardsdatascience.com/learning-python-for-data-science-on-the-job-part-1-philosophy-6e2aedc4e041)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Practical advice and philosophy on how to become a proficient Data Scientist
    without formal education
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://nrlewis929.medium.com/?source=post_page-----6e2aedc4e041--------------------------------)[![Nicholas
    Lewis](../Images/e1a473d6da5f4ae1cc569f30b08acde3.png)](https://nrlewis929.medium.com/?source=post_page-----6e2aedc4e041--------------------------------)[](https://towardsdatascience.com/?source=post_page-----6e2aedc4e041--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----6e2aedc4e041--------------------------------)
    [Nicholas Lewis](https://nrlewis929.medium.com/?source=post_page-----6e2aedc4e041--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----6e2aedc4e041--------------------------------)
    ·8 min read·Jan 14, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f6156bd577abc49b42723a0ea50db58b.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Fatos Bytyqi](https://unsplash.com/@fatosi?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: With data science becoming more prevalent in every industry, it’s interesting
    to note how many self-taught programmers are in the workforce. Many people are
    seeking a mid-career shift, looking to supplement their expertise with the powerful
    tool of data science, or are simply interested in what all the hype is about.
    Although I went back to school for some formal education in data science, I never
    took a programming course in my undergraduate studies, and I worked in a data
    science job for 2 years before going back to school; I would definitely consider
    myself a self-taught programmer! It’s been nearly 10 years since I started my
    first research position job using Matlab and Python to explore optimization techniques
    in systems biology applications. As I’ve been thinking back, I thought I’d share
    some of the things that I tried — some that worked and some that didn’t — that
    helped me to learn programming in Python (and Matlab) and data science on-the-job.
  prefs: []
  type: TYPE_NORMAL
- en: This article is Part 1 in a 2-part series about learning data science without
    formal education. Part 1 is a reflection of my experience with some practical
    advice on things to try and maybe even avoid (you’ll find out that I don’t like
    YouTube tutorials!). [Part 2](https://nrlewis929.medium.com/learning-python-for-data-science-on-the-job-part-2-practice-b4ece80488da)
    takes a simple linear regression problem and works it in both Excel and Python,
    teaching some basic Python syntax and comparing the benefits and drawbacks of
    each method. Hope you enjoy!
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I still vividly remember my first week as a freshman research assistant, surrounded
    by grad students who ate, breathed, and dreamed in code. I didn’t understand how
    anyone could understand something as simple as `print('Hello World!')`. Why did
    that work? And how in the world was I supposed to do more advanced things?
  prefs: []
  type: TYPE_NORMAL
- en: I quickly learned that programming is, basically, logical ideas expressed with
    specific words and structure to produce an outcome. It was the same as typing
    things into my calculator, only more powerful. The only hard part is learning
    the syntax, or the keywords and characters that translate that logic in your head
    into an actionable task by the computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few things that worked for me to learn syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: Google is your best friend! To learn how to do a `for` loop, just Google “Python
    for loop example.” You’ll probably see some great tutorials that walk you through
    exactly which keywords and characters to use. As your questions get more advanced,
    you’ll discover Stack Overflow, a forum for people to ask questions and get answers
    from the community. You’ll see lots of creative ways to do the same thing there,
    and you’ll eventually develop a sense for commonly accepted practices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Treat Python as something you’re familiar with to start. For example, we’ve
    probably all used a calculator, so start by just putting in equations like you
    would a calculator. Then start adding complexity, like assigning variables, printing
    results, and increasing the computational complexity. The exercise in Part 2 of
    this series is an excellent in-depth case study in this.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn to read documentation. Unfortunately, there’s no good standard of how
    people write documentation, and some is done really poorly. But any time you start
    using a new package (such as pandas or numpy), if you have a question about how
    to do something, go to their documentation first and try to figure it out before
    you Google it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A few other things about getting started:'
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to comment your code! That might be the first syntax you should learn.
    Google “how to comment code in Python.” Comments are lines of code that aren’t
    executed, so you can explain your logic and rationale for what you write. Go back
    to your earlier code at times and recognize your improvement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get good at debugging. This can be as simple as adding `print` statements so
    you can see what your program is doing, and see if it matches what you expect
    it to be doing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read! A ton! When I started my data science job, I was rusty on Python, and
    had never done any data science. So I spent the first hour of every work day reading
    how-tos and working through side projects. This was valuable just so that I could
    understand what options are out there. As you read, think of how what you’re reading
    applies to your work projects. I found tons of inspiration for innovative approaches
    to my work that were triggered by ideas from my readings (see, for example, my
    series on [emulating PID controllers](/emulating-a-pid-controller-with-long-short-term-memory-part-1-bb5b87165b08)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are tons of platforms to run Python code. Currently, the best for beginners
    (and advanced users who are trying out new ideas) is Jupyter notebook. If you
    are learning in a classroom setting, your instructor is most likely going to use
    a Jupyter notebook, because it is more intuitive and has built-in features that
    a simple text file doesn’t have.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Introductory Tutorials and Materials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In my opinion, generic tutorials or YouTube videos aren’t worth the time. They
    don’t work for me, and they’re too generic to actually be helpful. If you’re completely
    new to programming, they *might* be useful just to start wrapping your head around
    how syntax works. If you do use them, you have to be active and code along with
    them. Most of us aren’t able to effectively learn just be watching and absorbing…you
    might watch a 4 hour tutorial, but if you’re not actively engaged, you probably
    won’t be any better of a coder after it’s over.
  prefs: []
  type: TYPE_NORMAL
- en: I learned coding by immersing myself in projects that I cared about. I would
    get some starter code that I would then go through line-by-line to understand.
    I’d add `print` statements to get a better idea of what was going on. Then I’d
    start making little tweaks and customizations. Even now, I almost never start
    writing code from complete scratch; rather, I’ll find some similar code (usually
    that I’ve written before, but as a starter, feel free to start with online resources),
    copy and paste it, then customize it to my particular project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting with a project rather than tutorial does two things: first, it gives
    you something that you care about doing, so you’re more invested (Towards Data
    Science is really good for finding project walk-throughs). It’s probably also
    a lot more relevant to what you’ll be doing later on in your job. Secondly, it
    gives you the opportunity to customize code to do what you want, rather than just
    spit out something that millions of people have already done. It’s the difference
    between doing a school assignment with an answer in the back of the book, and
    doing an open-ended work project with no single right answer. You’ll be able to
    recognize that there are different ways of doing the same thing. Eventually, you’ll
    start to recognize more efficient ways of coding, but for now, it’s more about
    getting reps in.'
  prefs: []
  type: TYPE_NORMAL
- en: Start with the Basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The simple truth is that no one is going to become a master in Python overnight.
    After 10 years, there’s still a lot that I’m learning. But something that will
    really help is to start with basic functionality in your code first, then add
    complexity. This is not only a good framework for beginner coders, but even advanced
    coders. In fact, as I was going through a recent [job search](/my-data-science-job-search-6deb4117e7b5),
    one of the most valuable pieces of feedback I got from a coding challenge was
    to start with the basic functionality before I started trying to tackle edge cases.
    It can be paralyzing to think of how to write an entire script that works perfectly
    (and, I might argue, impossible to do this), but with just a little practice,
    you can write a perfectly functional `for` loop or dictionary that gets most of
    what you need done.
  prefs: []
  type: TYPE_NORMAL
- en: What do I mean by this? Consider a classic coding challenge of [converting Roman
    numerals to integers](https://www.geeksforgeeks.org/python-program-for-converting-roman-numerals-to-decimal-lying-between-1-to-3999/).
    There are some very logical rules to follow, but rather than trying to account
    for all of them at once, start with the basic, then add complexity. Start by writing
    some code that translates each individual Roman numeral to an integer (such as
    X = 10). Then figure out how to program the case of a larger value followed by
    a smaller value (such as XI = 11). Finally, code for the case where a larger value
    is preceeded by a smaller value (such as IX = 9).
  prefs: []
  type: TYPE_NORMAL
- en: Developing Confidence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Whether it’s teaching someone a language, an instrument, or any other skill,
    the thing that I always tell a student is this: have confidence! You’re not *just*
    learning violin, you play it. You’re not *just* learning Russian, you speak it.
    The same goes for this: you’re not *just* learning programming, you already do
    it. Sure, you’re continually developing and learning, and perhaps at a different
    skill level. But even as a beginner violinist, I would still claim that I played
    violin, even though I was nowhere near the level I am today. Same with programming.
    Sure, I know more than I did 10 years ago, and I’ll know more than I do now 10
    years from now, but that doesn’t diminish the fact that I am a programmer, just
    as I was 10 years ago when I started. The key behind this mentality is that it
    gives you confidence to put yourself out there, to tackle hard problems (or speak
    the language or perform on the instrument). And we learn best by doing, by challenging
    ourselves, and by having confidence. Yes, you should absolutely solicit feedback
    as much as possible, but don’t be paralyzed by fear of making mistakes. Don’t
    give yourself excuses to *not* take on an assignment just because you don’t know
    how to do it. The whole point of this is that you’re learning, and quite possibly
    even learning on the job.'
  prefs: []
  type: TYPE_NORMAL
- en: Case Study and Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When I started my first data science job, I made a goal for myself: I wanted
    to know Python better than I knew Excel. I was a whiz at Excel, but was definitely
    starting to hit the limitations, even with VBA. Most of us are familiar with or
    even experts in Excel; the case study in Part 2 is a fantastic way to get your
    feet wet by working a problem both in Excel and Python. I hope you’ll not only
    be able to see the parallels and pros and cons, but also develop confidence.'
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully some of this was useful to you. I know we all learn differently, and
    you may try a YouTube tutorial or virtual classroom and feel like it was the most
    valuable thing. The point I want to make is that you *can* learn this valuable
    skill on-the-job, and develop just as much confidence as your peers who had formal
    education in programming. As always,you can connect with me on [LinkedIn](https://www.linkedin.com/in/nicholas-lewis-0366146b/),
    and feel free to follow me on [Towards Data Science](https://nrlewis929.medium.com/)
    to see my regular posts on data science case studies.
  prefs: []
  type: TYPE_NORMAL
