- en: 'Backfilling Mastery: Elevating Data Engineering Expertise'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回填精通：提升数据工程专业技能
- en: 原文：[https://towardsdatascience.com/backfilling-mastery-elevating-data-engineering-expertise-a6873fb7ed2e](https://towardsdatascience.com/backfilling-mastery-elevating-data-engineering-expertise-a6873fb7ed2e)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/backfilling-mastery-elevating-data-engineering-expertise-a6873fb7ed2e](https://towardsdatascience.com/backfilling-mastery-elevating-data-engineering-expertise-a6873fb7ed2e)
- en: DATA ENGINEERING
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据工程
- en: A go-to guide for data engineers wading through the backfilling maze
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据工程师应对回填难题的实用指南
- en: '[](https://tamimi-naser.medium.com/?source=post_page-----a6873fb7ed2e--------------------------------)[![Naser
    Tamimi](../Images/8d43c66ea3c0ef9b49c7d33dbc008c28.png)](https://tamimi-naser.medium.com/?source=post_page-----a6873fb7ed2e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a6873fb7ed2e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a6873fb7ed2e--------------------------------)
    [Naser Tamimi](https://tamimi-naser.medium.com/?source=post_page-----a6873fb7ed2e--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://tamimi-naser.medium.com/?source=post_page-----a6873fb7ed2e--------------------------------)[![纳赛尔·塔米米](../Images/8d43c66ea3c0ef9b49c7d33dbc008c28.png)](https://tamimi-naser.medium.com/?source=post_page-----a6873fb7ed2e--------------------------------)[](https://towardsdatascience.com/?source=post_page-----a6873fb7ed2e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----a6873fb7ed2e--------------------------------)
    [纳赛尔·塔米米](https://tamimi-naser.medium.com/?source=post_page-----a6873fb7ed2e--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a6873fb7ed2e--------------------------------)
    ·7 min read·Nov 17, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----a6873fb7ed2e--------------------------------)
    ·阅读时长7分钟·2023年11月17日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/ca03f6688b8f11402878f079d3beac93.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ca03f6688b8f11402878f079d3beac93.png)'
- en: Photo by [Towfiqu barbhuiya](https://unsplash.com/@towfiqu999999?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Towfiqu barbhuiya](https://unsplash.com/@towfiqu999999?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: What is Backfilling?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是回填？
- en: Imagine starting a new data pipeline and getting data from a source you’ve never
    parsed before (e.g. pulling info from an API or an existing hive table). Now,
    you’re on a mission to make it seem like you collected this data ages ago. That’s
    one example of what we call data backfilling in data engineering.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你刚开始一个新的数据管道，从一个你之前没有解析过的来源获取数据（例如，从API或现有的Hive表中提取信息）。现在，你的任务是让它看起来像你很久以前就收集了这些数据。这就是我们在数据工程中所说的数据回填的一个例子。
- en: But it’s not just about starting a new data pipeline or table. You could have
    a table that’s been gathering data for a while, and suddenly, you need to change
    the data (for example due to a new metric definition), or toss in more data from
    a new data source. Or maybe there’s an awkward gap in your data, and you just
    want to patch it up. All these situations are examples of data backfilling. The
    common thread is turning “back” in time and “filling” up your table with some
    historical data.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但这不仅仅是启动一个新的数据管道或表。你可能有一个已经收集数据一段时间的表，而突然你需要更改数据（例如由于新的指标定义），或者从新的数据源中添加更多数据。或者你的数据中可能有一个尴尬的空白，你只是想修补它。所有这些情况都是数据回填的例子。共同的特点是“回到”过去，并用一些历史数据“填补”你的表格。
- en: The following figure (Figure 1) shows a straightforward backfilling scenario.
    In this instance, a daily job retrieves data from two upstream sources (one for
    platform A and another for platform B). The dataset is structured with the first
    partition being ‘ds,’ and the second partition (or sub-partitions) representing
    the platforms. Unfortunately, data for the period from 2023–10–03 to 2023–10–05
    is absent due to certain issues. To address this gap, a backfilling operation
    was initiated (the backfilling job started on 2023–10–08).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 下图（图1）展示了一个简单的回填场景。在这个实例中，一个每日任务从两个上游来源（一个是平台A，另一个是平台B）检索数据。数据集的结构是第一个分区为‘ds’，第二个分区（或子分区）代表平台。不幸的是，由于某些问题，从2023年10月3日到2023年10月5日的数据缺失。为了弥补这一空缺，启动了回填操作（回填任务于2023年10月8日开始）。
- en: '![](../Images/775860d0506ae23c029144b6f6afef9b.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/775860d0506ae23c029144b6f6afef9b.png)'
- en: Figure 1) A simple backfilling scenario
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图1）一个简单的回填场景
- en: Backfilling and Restating
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回填与重述
- en: 'A brief heads-up before proceeding further: within the domain of data engineering,
    we normally encounter two scenarios: “backfilling” a table or “restating” a table.
    These processes, while sharing some similarities, have some subtle differences.
    Backfilling, as a practice, is about populating missing or incomplete data in
    a dataset. Its application is commonly directed towards updating historical data
    or rectifying gaps. Conversely, restating a table involves effecting substantial
    alterations to the content or structure of the table. This transformation is typically
    undertaken to rectify errors, update data models, or implement significant modifications
    to the dataset. For the sake of simplicity, acknowledging the subtle differences
    of these terms, both processes will be referred to as “backfilling” in this article.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前简要说明一下：在数据工程领域，我们通常会遇到两种情况：“回填”一个表格或“重述”一个表格。这些过程虽然有些相似，但也存在一些微妙的差异。回填是指在数据集中填充缺失或不完整的数据。它通常用于更新历史数据或修正数据缺口。相反，重述表格涉及对表格的内容或结构进行重大修改。这种转换通常是为了纠正错误、更新数据模型或对数据集进行重大更改。为了简化起见，考虑到这些术语的微妙差异，在本文中我们将这两种过程统称为“回填”。
- en: It’s worth mentioning that there could be variations in how different engineers
    refer to these processes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，不同的工程师可能对这些过程的称谓有所不同。
- en: Let’s Talk About Design
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们谈谈设计
- en: 'Let’s dive a bit deeper. You are designing your new table schema and planning
    out your ETL processes. Definitely give some serious thought to backfilling. So,
    take a moment to ask yourself: Is my design good to go for both the regular (mostly
    daily) tasks and handling future backfilling tasks? Can I easily fill in missing
    data when I need to, or is it going to be a headache with manual steps every time
    I want to patch things up?'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨一下。你正在设计新的表格模式并规划 ETL 过程。一定要认真考虑回填。因此，花点时间问问自己：我的设计是否适用于常规（主要是每日）任务以及处理未来回填任务？当需要填补缺失数据时，我是否能够轻松完成，还是每次修复时都要经历繁琐的手动步骤？
- en: Sometimes you need to find a sweet spot in your design. You want things to run
    smoothly, not just for your everyday data flow but also when you’re trying to
    fix up any gaps in your dataset. So, a little extra attention to your design now
    can save you from headaches later on!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你需要在设计中找到一个平衡点。你希望系统运行顺畅，不仅仅是处理日常数据流，也要在修复数据集中的任何缺口时同样顺畅。因此，现在对设计多加关注，可以为将来节省不少麻烦！
- en: For example, you might think that if you do a backfill for this table, you need
    to overwrite the previous data and not append to it. In this case, if you are
    using Hive tables, maybe Hive partitions can help you achieve this goal more easily.
    In this case, you can define a partition based on the date (mostly called ‘ds’)
    and change your ETL to overwrite the partition instead of appending to it. With
    this schema design, every time you write on your table, the previous partitions
    (in this case, previous ‘ds’ dates) will be removed and replaced with new data.
    However, you might foresee that every backfill might only need to affect not the
    entire ‘ds,’ but part of that. For example, look at Figure 1 and ds=2023–10–05\.
    In this case, part of the data is loaded successfully and part of that failed.
    In such cases, you can define a secondary partition (or even tertiary if needed)
    to support partial backfilling for a specific date in the future. At the same
    time, you want to keep your number of partitions as low as possible to avoid small
    partitions (which might cause less efficient data processing).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可能会认为，如果你对这个表格进行回填，你需要覆盖之前的数据而不是追加数据。在这种情况下，如果你使用的是 Hive 表格，也许 Hive 分区可以帮助你更轻松地实现这个目标。在这种情况下，你可以根据日期（通常称为“ds”）定义一个分区，并将你的
    ETL 更改为覆盖该分区而不是追加到其中。采用这种模式设计，每次你在表格上写入数据时，之前的分区（在这种情况下是之前的“ds”日期）将被移除，并用新数据替换。然而，你可能会预见到每次回填可能只需要影响“ds”的一部分。例如，查看图1和ds=2023–10–05。在这种情况下，部分数据成功加载，而部分数据加载失败。在这种情况下，你可以定义一个辅助分区（如果需要，也可以定义三级分区）来支持对未来某一特定日期的部分回填。同时，你也希望尽可能保持分区数量较低，以避免小分区（这可能导致数据处理效率低下）。
- en: Another effective strategy involves writing the newly backfilled data to a distinct
    partition location rather than overwriting the existing partition location on
    the disk. This can be achieved by, for instance, introducing a unique runtime_id
    directory within your partition location path. Subsequently, update the partition
    location in the Hive metastore from the old path to the new path. This approach
    enables the retention of previous data (as a precaution) while still facilitating
    the update of the entire partition. The following folder structure is an example
    of how we can runtime_id to keep different versions of backfilling under the same
    table location. Remember, this technique requires that your ETL update partition
    locations in the Hive metastore database.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种有效的策略是将新回填的数据写入一个不同的分区位置，而不是覆盖磁盘上的现有分区位置。这可以通过例如在分区位置路径中引入一个独特的 runtime_id
    目录来实现。随后，将 Hive 元数据存储中的分区位置从旧路径更新到新路径。这种方法允许保留以前的数据（作为预防措施），同时仍然能够更新整个分区。以下文件夹结构是我们如何使用
    runtime_id 在同一表位置下保持不同版本的回填的示例。请记住，这种技术要求你的 ETL 更新 Hive 元数据存储数据库中的分区位置。
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Also, in addition to your regular (for example, daily) workflow, you might need
    to develop a ready-to-go backfilling workflow for cases in which you need to backfill
    the data. For instance, if you are working on Apache Airflow, you can have a daily
    DAG for your regular scheduled data loading tasks and a separate DAG for backfilling.
    In this case, if something happens that requires backfilling data quickly, you
    have a DAG ready to go.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，除了你常规的（例如每日的）工作流外，你可能还需要开发一个准备就绪的回填工作流，以应对需要回填数据的情况。例如，如果你使用 Apache Airflow，你可以有一个每日的
    DAG 处理你的常规调度数据加载任务，并为回填数据设置一个单独的 DAG。在这种情况下，如果发生需要快速回填数据的情况，你将有一个现成的 DAG 可以使用。
- en: Start Backfilling
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始回填
- en: You carefully crafted your table schema and ETL pipelines, anticipating the
    need for future backfilling. Now, after days, weeks, or even months, the long-awaited
    moment for backfilling has arrived. But what steps should you take? Is it as straightforward
    as running your backfill workflow/DAG for a specified date range, or does it demand
    more careful consideration before hitting the backfill button?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你精心设计了表模式和 ETL 管道，预见到未来需要进行数据回填。现在，经过几天、几周，甚至几个月，期待已久的数据回填时刻终于到来了。但你应该采取什么步骤？这是否仅仅是运行你的回填工作流/DAG
    来处理指定日期范围，还是在点击回填按钮之前需要更仔细的考虑？
- en: Unfortunately, the design isn’t the sole challenge to overcome. The backfilling
    process itself can be quite intricate. Initially, you must ensure that backfilling
    is feasible. For instance, certain APIs may not support historical data beyond
    a specific lookback period, while some source tables might not retain data for
    an extended duration due to privacy constraints. It’s essential to confirm whether
    backfilling for your specific timeframe is viable.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，设计并不是唯一需要克服的挑战。回填过程本身可能相当复杂。首先，你必须确保回填是可行的。例如，某些 API 可能不支持超出特定回溯期的历史数据，而一些源表由于隐私限制可能不会保留较长时间的数据。确认你的特定时间范围内回填是否可行是至关重要的。
- en: Now, let’s assume luck is on your side, and data availability poses no issues.
    The next consideration revolves around your table users. Adding or modifying data,
    especially historical data, can impact downstream users. A responsible data engineer
    takes into account the consequences of such actions on product users and demonstrates
    respect for their experience. In some scenarios, notifying downstream users in
    advance about the backfilling operation may be necessary for them to obtain the
    most up-to-date data. Additionally, you may need to assess how changes to a column
    affect other tables. In an open coding ecosystem, engineers can collaborate to
    check other projects and data pipelines for verification. If a downstream user
    relies on a column slated for modification, it’s crucial to evaluate the impact
    and explore alternatives, such as expanding the table instead of altering column
    logic. Can you assist them in updating their ETL logic, or should you redirect
    them to an alternative data source?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设幸运站在你这边，数据可用性没有问题。下一步要考虑的是你的表格用户。添加或修改数据，特别是历史数据，可能会影响下游用户。负责任的数据工程师会考虑这些行为对产品用户的影响，并尊重他们的体验。在某些情况下，提前通知下游用户回填操作可能是必要的，以便他们获取最新的数据。此外，你还需要评估列的变化如何影响其他表格。在开放的编码生态系统中，工程师可以合作检查其他项目和数据管道以进行验证。如果下游用户依赖于即将修改的列，评估影响并探索替代方案（如扩展表格而不是改变列逻辑）是至关重要的。你能协助他们更新ETL逻辑，还是应该将他们引导到替代数据源？
- en: In essence, displaying responsibility for what you and your team own is what
    distinguishes a good engineer from a less effective one.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，对你和你的团队所负责的内容展示责任感，是区分优秀工程师与效果较差工程师的关键。
- en: Validation
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证
- en: Now that your backfilling is complete, the next crucial step is validation.
    Employing some fundamental techniques can expedite the validation process.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的回填工作已经完成，下一步至关重要的是验证。使用一些基本技术可以加快验证过程。
- en: first, it is crucial to verify the completion of the backfilling process. Occasionally,
    even when it appears that the backfilling job has been executed and completed
    successfully, an incorrect parameter may result in no actual updates or data being
    written to the table. Therefore, prior to validating the backfilled data, it is
    imperative to confirm the successful execution of the backfilling process. Introducing
    a specific column in the table that captures the processing timestamp can aid
    in validating whether the data has been recently updated. Alternatively, checking
    the `runtime_id` associated with new partition locations is another method. As
    outlined in the design section, the inclusion of an optional `runtime_id` in the
    partition path allows for direct examination of the table path. This enables the
    straightforward identification of whether new `runtime_id` folders have been created
    after the backfilling operation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，验证回填过程的完成是至关重要的。有时，即使看起来回填作业已经成功执行，错误的参数可能导致没有实际更新或数据写入表格。因此，在验证回填数据之前，必须确认回填过程成功执行。在表格中引入一个捕获处理时间戳的特定列可以帮助验证数据是否已最近更新。或者，检查与新分区位置关联的`runtime_id`也是一种方法。正如设计部分所述，在分区路径中包含可选的`runtime_id`允许直接检查表路径。这可以简便地识别回填操作后是否创建了新的`runtime_id`文件夹。
- en: If your backfilling addressed gaps using a source table, the most straightforward
    approach is to aggregate metrics from the source table and compare them with your
    target table. Crafting a query that replicates your ETL logic allows for a comprehensive
    comparison, albeit it may require a bit of time and effort. However, this query
    serves a dual purpose, not only aiding in immediate validation but also serving
    as a valuable tool for future checks. It is advisable to document and store such
    queries in your ETL documentation for ongoing use.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的回填工作使用了源表来填补空白，最直接的方法是从源表中聚合指标，并与目标表进行比较。编写一个复制ETL逻辑的查询可以进行全面的比较，尽管这可能需要一些时间和精力。然而，这个查询有双重作用，不仅有助于即时验证，还作为未来检查的有价值工具。建议在你的ETL文档中记录并存储这些查询，以便持续使用。
- en: In instances where the backfilling focused solely on certain columns without
    introducing new rows to the table, an additional validation method involves scrutinizing
    the unchanged columns in comparison to their previous states. For instance, evaluating
    the sum of these columns before and after backfilling ensures that no unintended
    alterations have occurred in the unaffected areas.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在补填仅集中在某些列而未向表中引入新行的情况下，额外的验证方法包括检查未更改列与其之前状态的比较。例如，评估这些列在补填前后的总和可以确保未对未受影响的区域进行任何非预期的更改。
- en: Summary
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: To sum up, some best backfilling practices in data engineering are introduced
    in this article. We broke down the differences between backfilling and restating
    a table. Also the vital role of smart design in handling both regular tasks and
    backfilling adventures are stressed. We tackled the hurdles of the backfilling
    process, dealing with issues like data availability and keeping our downstream
    pals in the loop. Finally, we mentioned that data engineers need to be mindful
    of how their changes affect downstream users and must act responsibly when backfilling
    is needed.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，这篇文章介绍了一些数据工程中的最佳补填实践。我们分解了补填和重新声明表之间的区别。同时，强调了智能设计在处理常规任务和补填工作中的重要作用。我们解决了补填过程中的难题，例如数据可用性以及保持下游伙伴的信息通畅。最后，我们提到数据工程师需要关注其更改对下游用户的影响，并在需要补填时负责任地行动。
