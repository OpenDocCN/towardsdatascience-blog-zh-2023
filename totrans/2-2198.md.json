["```py\n# Parameters\nduration = 20         # seconds\nsampling_rate = 20    # Hz\nfrequency = 5         # Hz (vibration frequency)\namplitude = 1.0       # Min Max range\nnoise_level = 0.3     # Noise factor to increase reality\nmax_wear = 1          # Maximum wear before reset\nwear_threshold = 0.5  # Wear threshold for reset\n\n# Generate synthetic vibration signal with wear and threshold\ntime, vibration_signal = generate_vibration_signal(duration, sampling_rate,\n frequency, amplitude, noise_level, max_wear, wear_threshold) \n```", "```py\nimport numpy as np\n\n# Apply FFT to the signal\nfft_result = np.fft.fft(vibration_signal)\n\n# This very important part, let`s investigate it more in depth\nfrequencies = np.fft.fftfreq(len(fft_result), 1/sampling_rate)\n```", "```py\n# Plot the time-domain signal\nplt.subplot(2, 1, 1)\nplt.plot(t, vibration_signal)\nplt.title('Vibration Signal with Wear')\nplt.xlabel('Time (s)')\nplt.ylabel('Amplitude')\n\n# Plot the frequency-domain signal (FFT)\nplt.subplot(2, 1, 2)\nplt.plot(frequencies, np.abs(fft_result))\nplt.title('Frequency Domain Signal (FFT)')\nplt.xlabel('Frequency (Hz)')\nplt.ylabel('Amplitude Spectrum')\n\nplt.tight_layout()\nplt.show()\n```", "```py\n# First Signal\nfrequency = 10  \namplitude = 1\n\n#Second Signal\nfrequency = 20  \namplitude = 1\n```", "```py\nt2, vibration_signal_2 = generate_vibration_signal(duration, sampling_rate,\n   frequency, amplitude, noise_level, max_wear, wear_threshold)\n\n# Combine the signals just simply add them :) \ncombined_signal = vibration_signal + vibration_signal_2\n\nplt.plot(t1, combined_signal, label='Signal 1')\nplt.title('Combined Signals')\nplt.xlabel('Time (s)')\nplt.ylabel('Amplitude')\nplt.show()\n```", "```py\n# Apply FFT to the combined signal\nfft_result = np.fft.fft(combined_signal)\nfrequencies = np.fft.fftfreq(len(fft_result), 1/sampling_rate)\n\n# Plot the frequency-domain signal (FFT)\nplt.plot(frequencies, np.abs(fft_result))\nplt.title('Frequency Domain Signal (FFT)')\nplt.xlabel('Frequency (Hz)')\nplt.ylabel('Amplitude Spectrum')\nplt.show()\n```", "```py\nfrequency = 100  \namplitude = 1\nt3, vibration_signal_3 = generate_vibration_signal(duration, sampling_rate,\n   frequency, amplitude, noise_level, max_wear, wear_threshold)\n\n# Combine the signals just simply add them :)\ncombined_signal = vibration_signal + vibration_signal_2 + vibration_signal_3\n\nfrequency = 150 # Just for make offset, now you know how it works  \namplitude = 2\nt4, vibration_signal_4 = generate_vibration_signal(duration, sampling_rate,\n    frequency, amplitude, noise_level, max_wear, wear_threshold)\n\n# Combine the signals\ncombined_signal = vibration_signal + vibration_signal_2 +\n    vibration_signal_3 +vibration_signal_4\n\n# Apply FFT to the combined signal\nfft_result = np.fft.fft(combined_signal)\nfrequencies = np.fft.fftfreq(len(fft_result), 1/sampling_rate)\n\nplt.plot(frequencies, np.abs(fft_result))\nplt.title('Frequency Domain Signal (FFT)')\nplt.xlabel('Frequency (Hz)')\nplt.ylabel('Amplitude Spectrum')\n\nplt.tight_layout()\nplt.show()\n```", "```py\nfrequency = 150 # Just for make offset, now you know how it works  \namplitude = 2\nt4, vibration_signal_4 = generate_vibration_signal(duration, sampling_rate,\n    frequency, amplitude, noise_level, max_wear, wear_threshold)\n\n# Combine the signals\ncombined_signal = vibration_signal + vibration_signal_2 +\n    vibration_signal_3 + vibration_signal_4\n\nfrequency = 150 # Just for make offset, now you know how it works  \namplitude = 2\nt4, vibration_signal_4 = generate_vibration_signal(duration, sampling_rate,\n    frequency, amplitude, noise_level, max_wear, wear_threshold)\n\n# Combine the signals\ncombined_signal = vibration_signal + vibration_signal_2 +\n    vibration_signal_3 + vibration_signal_4\n\n# Apply FFT to the combined signal\nfft_result = np.fft.fft(combined_signal)\nfrequencies = np.fft.fftfreq(len(fft_result), 1/sampling_rate)\n\nplt.plot(frequencies, np.abs(fft_result))\nplt.title('Frequency Domain Signal (FFT)')\nplt.xlabel('Frequency (Hz)')\nplt.ylabel('Amplitude Spectrum')\n\nplt.tight_layout()\nplt.show()\n```", "```py\nfrequency = 100  \namplitude = 1\nt5, vibration_signal_5 = generate_vibration_signal(duration, sampling_rate,\n       frequency, amplitude, noise_level, max_wear, wear_threshold)\n\nfrequency = 200\namplitude = 1\nt6, vibration_signal_6 = generate_vibration_signal(duration, sampling_rate, \n       frequency, amplitude, noise_level, max_wear, wear_threshold)\n\nfrequency = 400\namplitude = 3\nt7, vibration_signal_7 = generate_vibration_signal(duration, sampling_rate,\n       frequency, amplitude, noise_level, max_wear, wear_threshold)\n\ncombined_signal2 = vibration_signal_5 + vibration_signal_6 + vibration_signal_7\n```", "```py\ndef welch_method(signal, segment_size=128, overlap=64):\n    f, Pxx = plt.psd(signal, NFFT=segment_size, Fs=sampling_rate, noverlap=overlap)\n    plt.title('Welch Method')\n    plt.xlabel('Frequency (Hz)')\n    plt.ylabel('Power/Frequency (dB)')\n    plt.show()\n    return f, Pxx\n\nfreq_welch, P_welch = welch_method(combined_signal2)\n```", "```py\ndef bartlett_method(signal, segment_size=128):\n    f, Pxx = plt.psd(signal, NFFT=segment_size, Fs=sampling_rate, window=np.bartlett(segment_size))\n    plt.title('Bartlett Method')\n    plt.xlabel('Frequency (Hz)')\n    plt.ylabel('Power/Frequency (dB)')\n    plt.show()\n    return f, Pxx\n\nfreq_bartlett, P_bartlett = bartlett_method(combined_signal2) \n```", "```py\nfrom scipy.signal import spectrogram\n\n# Apply Short-Time Fourier Transform (STFT) to the combined signal\nfrequencies, times, Sxx = spectrogram(combined_signal, fs=sampling_rate,\nnperseg=256, noverlap=128)\n```", "```py\nplt.pcolormesh(times, frequencies, 10 * np.log10(Sxx), shading='auto')\nplt.title('Spectrogram - Combined Signal')\nplt.xlabel('Time (s)')\nplt.ylabel('Frequency (Hz)')\nplt.show()\n```", "```py\namplitude = 20 # Increase it \nt4, vibration_signal_4 = generate_vibration_signal(duration, sampling_rate,\n  frequency, amplitude, noise_level, max_wear, wear_threshold)\n\n# Combine the signals\ncombined_signal = vibration_signal + vibration_signal_2 + \n  vibration_signal_3 + vibration_signal_4\n\n# Apply FFT to the combined signal\nfft_result = np.fft.fft(combined_signal)\nfrequencies = np.fft.fftfreq(len(fft_result), 1/sampling_rate)\n\nplt.plot(frequencies, np.abs(fft_result))\nplt.title('Frequency Domain Signal (FFT)')\nplt.xlabel('Frequency (Hz)')\nplt.ylabel('Amplitude Spectrum')\n\nplt.tight_layout()\nplt.show()\n```", "```py\nfrom scipy.signal import spectrogram\n\n# Apply Short-Time Fourier Transform (STFT) to the combined signal\nfrequencies, times, Sxx = spectrogram(combined_signal, fs=sampling_rate, nperseg=256, noverlap=128)\n\nplt.pcolormesh(times, frequencies, 10 * np.log10(Sxx), shading='auto')\nplt.title('Spectrogram - Combined Signal')\nplt.xlabel('Time (s)')\nplt.ylabel('Frequency (Hz)')\nplt.show()\n```"]