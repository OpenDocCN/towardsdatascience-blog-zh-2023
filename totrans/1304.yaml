- en: Image Filters with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/image-filters-with-python-3dc223a12624](https://towardsdatascience.com/image-filters-with-python-3dc223a12624)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A concise computer vision project for building image filters using Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://bharath-k1297.medium.com/?source=post_page-----3dc223a12624--------------------------------)[![Bharath
    K](../Images/b6f215f28132a953bcae80842301e303.png)](https://bharath-k1297.medium.com/?source=post_page-----3dc223a12624--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3dc223a12624--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3dc223a12624--------------------------------)
    [Bharath K](https://bharath-k1297.medium.com/?source=post_page-----3dc223a12624--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3dc223a12624--------------------------------)
    ·8 min read·Feb 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8358092c7a80daf900a213c1dcdeddeb.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Pineapple Supply Co.](https://unsplash.com/@pineapple?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Images exist in different scales, contrasts, bit depths, and qualities. We are
    filled with a variety of unique and beautiful images that encompass us all over
    our surroundings and across the internet. Manipulating these images can lead to
    several intriguing results, which are used for a wide array of fun and helpful
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: In image processing and computer vision, playing around with images is a critical
    component to solving different tasks and acquiring desirable results for numerous
    projects. With the proper handling of imaging tasks, we can recreate a modified
    version of the image useful for several computer vision and deep learning applications,
    such as data augmentation.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will focus on developing a simple image filter application
    to primarily modify the brightness and contrast of a particular image. Several
    other noteworthy modifications, including shader styles, clip art, emojis, and
    other similar additions, can be implemented and added to your project.
  prefs: []
  type: TYPE_NORMAL
- en: If the readers are not familiar with computer vision and OpenCV, I would suggest
    checking out one of my previous articles on a complete and extensive beginner
    guide to get started with OpenCV and computer vision. The link for the same is
    provided below. I would recommend checking it out first before proceeding with
    the remaining contents of this article.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/opencv-complete-beginners-guide-to-master-the-basics-of-computer-vision-with-code-4a1cd0c687f9?source=post_page-----3dc223a12624--------------------------------)
    [## OpenCV: Complete Beginners Guide To Master the Basics Of Computer Vision With
    Code!'
  prefs: []
  type: TYPE_NORMAL
- en: A tutorial with codes to master all the important concepts of computer vision
    and how to implement them using OpenCV
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/opencv-complete-beginners-guide-to-master-the-basics-of-computer-vision-with-code-4a1cd0c687f9?source=post_page-----3dc223a12624--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'Starter code for Brightness and Contrast modifier with Python:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/9f846b0b9849d618ea85a912e2e512e8.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Jacopo Maia](https://unsplash.com/@ja_ma?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will look at a simple starter code that will help us get
    started with the basic image filters of modifying the brightness and contrast
    of the original image with the help of the Open CV computer vision library. For
    this task, we will make use of a random image for testing the sample code and
    understanding its fundamental working.
  prefs: []
  type: TYPE_NORMAL
- en: In order to comprehend this test case, I am using the above image as a test
    sample to analyze and understand the working process of the brightness and contrast
    modifiers accordingly. To follow along with this project, I highly recommend downloading
    the above image and storing it in the working directory as test_image.jpg.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you can store the image with any other functional name and use images
    with any other format as well. The only essential step is to mention the appropriate
    name and its respective format while reading the images. The first step is to
    import the Open CV library, as demonstrated in the code block below, and ensure
    that the library is completely functional.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once the library is imported and its working is verified, we can proceed to
    read the original image that we recently saved in our working directory. The cv2.imread
    function can read the image once the image name is mentioned.
  prefs: []
  type: TYPE_NORMAL
- en: If the image is not stored in the working directory, ensure that the specific
    file, along with the image name, is mentioned. Since the original dimension of
    the above image is 4608 x 3072, it would be optimal to shrink the image by a little
    bit and reduce the dimensions. I have resized the image to a (512, 512) scale
    to easily track the progress and perform the desired tasks with a slightly higher
    speed.
  prefs: []
  type: TYPE_NORMAL
- en: In the final step of the below code sample, we will define alpha and gamma parameters
    which will act as the contrast and brightness modifiers accordingly. Using these
    two parameters, we can control the values accordingly. Note that the contrast
    parameter varies from a range of 0 to 127, while the brightness parameter can
    vary from 0 to 100.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Once we have incorporated all the previous steps, we will proceed to use the
    “add weighted” function in the Open CV library, which helps us to compute the
    alpha and gamma (the brightness and contrast values) accordingly. This function
    is primarily useful for blending images by using the alpha, beta, and gamma values.
    Note that for a single image, we can just assign beta as zero and gain the appropriate
    results.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will display the modified image in the computer vision window, as
    shown in the sample code block below. Once the image is displayed, we can proceed
    to close the window when the user clicks the close button. For further understanding
    of some of the primary functions of Open CV, I highly recommend checking out my
    previously mentioned article to gain additional information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The parameters alpha acts as the contrast, and gamma acts as the brightness
    modifier in the above starter code sample. However, modifying these parameters
    as provided in this starter code sample for many different variations might be
    slightly unrealistic. Hence, the best idea would be to create a GUI interface
    and find the best values for each parameter of your required image filters. This
    topic will be covered further in the upcoming section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Further development of the project with controllers:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/f1ab8a7b56c6c240298dbf284792483b.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of modified image by Author
  prefs: []
  type: TYPE_NORMAL
- en: We can create a custom GUI with Open CV using controllers for optimizing the
    brightness and contrast parameters and adjusting our results accordingly. We can
    have a slide bar for each of these attributes, which, when moved along its respective
    variables, can create a different effect on the image by applying a unique filter
    with each variation of brightness and contrast.
  prefs: []
  type: TYPE_NORMAL
- en: The first few steps are similar to the previous section, where we will import
    the Open CV library, read the respective image and resize it accordingly. The
    readers can choose their own appropriate sizes. The code snippet for the following
    is provided below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the next step, we will define the brightness and contrast function through
    which we can define the get trackbar position function in the Open CV library
    to obtain the current position of both the brightness and contrast elements. The
    weighted function will be utilized to compute both these parameters to calculate
    a combined output of both these combinations together, as shown in the code block
    below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Once the trackbar function is defined, we will create a named window and the
    trackbar for which we are obtaining the required parameters. We will create two
    separate trackbars for both the brightness and contrast features, as shown in
    the below code block. The wait key function will activate once both the original
    image window and the trackbar window with the image are closed to help terminate
    the program.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We can adjust the track bar positions for both the brightness and contrast slide
    bars to change the numbers from 0 to 10 and 0 to 20, respectively. The variations
    can be observed accordingly by adjusting the respective positions. However, this
    project still has much room for improvement and a higher degree of scale for varying
    the parameters. We can scale brightness values on a 255 scale and contrast on
    a 127 scale to obtain finer and more detailed images.
  prefs: []
  type: TYPE_NORMAL
- en: To fix some of these issues and enhance this project further, I suggest the
    Geeks for Geeks website, which I considered for a portion of the code used in
    this section. I highly recommend the readers check the following [link](https://www.geeksforgeeks.org/changing-the-contrast-and-brightness-of-an-image-using-python-opencv/)
    for further reading and understanding of this project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Conclusion:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/c744b0445c315f81cdae7f9f28dcdd51.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Mailchimp](https://unsplash.com/@mailchimp?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: I combine magic and science to create illusions. I work with new media and interactive
    technologies, things like artificial intelligence or computer vision, and integrate
    them in my magic.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**— *Marco Tempest***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Images play a critical role in computer vision and image processing. By modifying
    images to create a similar or highly filtered variation of the image, we can solve
    a wide array of projects by accumulating more data, as in the case of data augmentation
    or other similar tasks.
  prefs: []
  type: TYPE_NORMAL
- en: We can also achieve a more desirable and enhanced version of particular images
    through which several other useful deep learning tasks can be performed. In this
    article, we explored the use of adding features such as brightness and contrast
    to modify the original image. In the first section, we learned how to utilize
    the alpha and gamma parameters to act as brightness and contrast parameters.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we developed a GUI interface through which the original
    image can be manipulated to obtain copies of its modified version. All the tasks
    were performed with some basic computer vision and image processing knowledge
    and libraries.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to get notified about my articles as soon as they go up, check out
    the following [link](https://bharath-k1297.medium.com/subscribe) to subscribe
    for email recommendations. If you wish to support other authors and me, then subscribe
    to the below link.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://bharath-k1297.medium.com/membership?source=post_page-----3dc223a12624--------------------------------)
    [## Join Medium with my referral link - Bharath K'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Bharath K (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: bharath-k1297.medium.com](https://bharath-k1297.medium.com/membership?source=post_page-----3dc223a12624--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: If you have any queries related to the various points stated in this article,
    then feel free to let me know in the comments below. I will try to get back to
    you with a response as soon as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Check out some of my other articles in relation to the topic covered in this
    piece that you might also enjoy reading!
  prefs: []
  type: TYPE_NORMAL
- en: '[](/the-ultimate-replacements-to-jupyter-notebooks-51da534b559f?source=post_page-----3dc223a12624--------------------------------)
    [## The Ultimate Replacements to Jupyter Notebooks'
  prefs: []
  type: TYPE_NORMAL
- en: Discussing an excellent replacement option to Jupyter Notebooks for interpreting
    Data Science projects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/the-ultimate-replacements-to-jupyter-notebooks-51da534b559f?source=post_page-----3dc223a12624--------------------------------)
    [](/7-best-research-papers-to-read-to-get-started-with-deep-learning-projects-59e11f7b9c32?source=post_page-----3dc223a12624--------------------------------)
    [## 7 Best Research Papers To Read To Get Started With Deep Learning Projects
  prefs: []
  type: TYPE_NORMAL
- en: The seven best research papers that have stood the test of time and will help
    you to create amazing projects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/7-best-research-papers-to-read-to-get-started-with-deep-learning-projects-59e11f7b9c32?source=post_page-----3dc223a12624--------------------------------)
    [](/develop-your-own-spelling-check-toolkit-with-python-740bf84a865d?source=post_page-----3dc223a12624--------------------------------)
    [## Develop Your Own Spelling Check Toolkit with Python
  prefs: []
  type: TYPE_NORMAL
- en: Creating an application to verify your spellings effectively with Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/develop-your-own-spelling-check-toolkit-with-python-740bf84a865d?source=post_page-----3dc223a12624--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Thank you all for sticking on till the end. I hope all of you enjoyed reading
    the article. Wish you all a wonderful day!
  prefs: []
  type: TYPE_NORMAL
