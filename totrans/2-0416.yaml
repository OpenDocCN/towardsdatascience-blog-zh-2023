- en: Bugs in Python? Pdb to the Rescue!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/bugs-in-python-pdb-to-the-rescue-d88a56a2ca71](https://towardsdatascience.com/bugs-in-python-pdb-to-the-rescue-d88a56a2ca71)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PYTHON PROGRAMMING
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Is the Pdb debugger worth learning and using?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@nyggus?source=post_page-----d88a56a2ca71--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----d88a56a2ca71--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d88a56a2ca71--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d88a56a2ca71--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----d88a56a2ca71--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d88a56a2ca71--------------------------------)
    ·13 min read·Sep 21, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dd08cfd6f7862fe8ce97e843516e22a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Debugging helps you learn from your failures. Photo by [Brett Jordan](https://unsplash.com/@brett_jordan?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Various tools can be used to debug Python code, from the simplest `print()`
    function, via static but more advanced `[icecream](https://github.com/gruns/icecream)`
    and its sibling `[ycecream](https://github.com/salabim/ycecream)`, to the various
    interactive debuggers that IDEs offer. My choice, however, has always been the
    built-in `pdb` debugger, along with the built-in `breakpoint()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging lies in the heart of programming. You start debugging when you start
    learning programming, and you stop debugging when you’ve promised you’ve just
    written your very last line of code — and if you keep that very promise.
  prefs: []
  type: TYPE_NORMAL
- en: 'You could think that one way to decrease the time spent on debugging your code
    is to write good code. Let’s face it: More often than not, writing good code means…
    debugging a lot during development. Certainly, a good programmer will write better
    code and make fewer mistakes — but this does not mean he or she does not need
    to debug.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is, however, one way to debug less: To debug less, write good unit tests.'
  prefs: []
  type: TYPE_NORMAL
- en: To debug less, write good unit tests.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Whether or not you’re using [test-driven development](https://en.wikipedia.org/wiki/Test-driven_development),
    write good tests. Writing *good tests* means writing a sufficient number of well-written
    tests. I don’t aim here to discuss testing, so I’ll leave you with this thought;
    I wrote more about testing here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/geekculture/make-yourself-enjoy-writing-unit-tests-e639711c10bd?source=post_page-----d88a56a2ca71--------------------------------)
    [## Make Yourself Enjoy Writing Unit Tests'
  prefs: []
  type: TYPE_NORMAL
- en: Most developers dislike writing tests. If you’re among them, do your best to
    change that.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/geekculture/make-yourself-enjoy-writing-unit-tests-e639711c10bd?source=post_page-----d88a56a2ca71--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: We can assume that all programmers need to debug their code. Some may say they
    don’t, but that’s not true. They do; they simply don’t use dedicated debugging
    tools, called debuggers. Instead, they run their code for particular input, then
    they check it, and then, seeing something is wrong, they change the code and repeat
    the process. So, despite not using debuggers, they do debug their code; they just
    have to spend more time doing that. Debuggers were created for a reason!
  prefs: []
  type: TYPE_NORMAL
- en: 'Often, a single call to the `print()` can do the job. But don’t fool yourself:
    This is *not* a very effective way of debugging. I am not saying you shouldn’t
    use it — but that’s an overly simplistic method that will work in the simplest
    situations only.'
  prefs: []
  type: TYPE_NORMAL
- en: Many of those who use IDEs for code development like using debuggers built into
    these IDEs. Visual Studio Code has its own debugger, Pycharm has one, and even
    [Thonny](https://thonny.org/) has one.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use various debuggers available as Python packages to be installed
    from PyPi. Open [PyPi](https://pypi.org/) and look for a term “debugger”; you
    will have a lot of hits, though you may need quite some patience to find those
    that can help you debug your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read about Python debuggers in the below *Towards Data Science* article:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/5-python-debugging-tools-that-are-better-than-print-1aa02eba35?source=post_page-----d88a56a2ca71--------------------------------)
    [## 5 Python Debugging Tools That Are Better Than “Print”'
  prefs: []
  type: TYPE_NORMAL
- en: Debug your code faster and more efficiently.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/5-python-debugging-tools-that-are-better-than-print-1aa02eba35?source=post_page-----d88a56a2ca71--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: It discusses — though doesn’t show how to use — `pdb`, PyCharm’s and Visual
    Studio’s (and VS Code’s) debuggers, Komodo, and Jupyter Visual Debugger.
  prefs: []
  type: TYPE_NORMAL
- en: Static versus interactive debuggers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Debuggers can be either *static* and *interactive*. The former only *show* objects;
    the latter let you *play* with them.
  prefs: []
  type: TYPE_NORMAL
- en: Both can be helpful, but it’s interactive ones that offer the most debugging
    power, resulting from their ability to stop the program and look around. You can
    see and use all the objects in the local and global scopes; you can check if a
    particular command or a set of commands will work or not. That’s why more often
    than not I prefer interactive over static debugging.
  prefs: []
  type: TYPE_NORMAL
- en: The `print()` function is a perfect example of static debugging. IDE debuggers
    are usually interactive.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is, however, a debugger that offers simplicity and power at the same
    time. It’s `pdb`, a built-in interactive Python debugger:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://docs.python.org/3/library/pdb.html?source=post_page-----d88a56a2ca71--------------------------------)
    [## pdb - The Python Debugger'
  prefs: []
  type: TYPE_NORMAL
- en: The module defines an interactive source code debugger for Python programs.
    It supports setting (conditional)…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: docs.python.org](https://docs.python.org/3/library/pdb.html?source=post_page-----d88a56a2ca71--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Yes, `pdb` is *built-in*, so you don’t have to install it. It comes with your
    Python installation, and you can use it in any environment. And yes, `pdb` is
    *interactive*. That’s actually most of what I expect from a debugger!
  prefs: []
  type: TYPE_NORMAL
- en: Yes, `pdb` is *built-in*, so you don’t have to install it. It comes with your
    Python installation, and you can use it in any environment. And yes, `pdb` is
    *interactive*.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this article, we will discuss the basics of `pdb`. We will cover the basics
    of this powerful tool, but be aware that it offers much more. A good thing is
    that these basics are more than enough to start using `pdb`. To be honest, I seldom
    use `pdb`’s more advanced options. Thus, reading this article will equip you with
    powerful tools for debugging Python code.
  prefs: []
  type: TYPE_NORMAL
- en: A few words about pdb
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the `pdb`’s advantages is that you can use it anywhere, without the need
    of installing anything additional to what your virtual environment already has.
    It can be a remote environment — `pdb` will work just fine. Just run it and voilà,
    you have your interactive debugger ready to be used remotely. Or locally, for
    that matter.
  prefs: []
  type: TYPE_NORMAL
- en: First things first. Let me explain how to use `pdb`, and then you can decide
    if it’s a tool for you.
  prefs: []
  type: TYPE_NORMAL
- en: Basically, you can use `pdb` in two modes. First, you can run your Python program
    in the `pdb` mode. This means the program will be executed, line by line, until
    it completes its execution or until an error occurs. Then the program is re-run
    in a post-mortem mode, meaning that it will stop right before the error and you
    will be able to see what’s going on in the local and global scopes.
  prefs: []
  type: TYPE_NORMAL
- en: Second, you can add a so-called breakpoint to your code, and the debugger will
    stop your program right there. You can also add more breakpoints. Certainly, the
    debugger will be able to stop the program only if no error has been raised before
    the breakpoint. Below, we will discuss both of these scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: '`The pdb` mode'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To run your program in the `pdb` mode, simply run it this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This means that the `pdb` console will open and the `myapp.py` script will be
    run line by line. You can change this behavior and run it up to either the first
    error or the end of the program. Best to show how this works using some examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the following script, saved to `myapp.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: (It’s a playground script, nothing to be proud of. Wwe do need simplistic cases
    to analyze.)
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also use its incorrect version, in which Python will throw an error;
    this script is saved in a `myapp_error.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As you see, the correct program will run a `for` loop, and in each loop, it
    will run the `foo()` function for different values of the `s` argument: first,
    for `"string1"` and then for `"string2"`, both correct. In the incorrect version,
    instead of running `foo("string2")`, `foo()` will be run with an incorrect value
    of `10`, which shall lead to `TypeError` being raised.'
  prefs: []
  type: TYPE_NORMAL
- en: For the moment, the only `pdb` commands you need to know are
  prefs: []
  type: TYPE_NORMAL
- en: '`c`, or `continue`; another version of the command is `cont`;'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`n`, or `next`; and'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`q`, or `quit`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sometimes you will have to use `quit` two or three times, or even more, to exit
    the debugger.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `continue` command executes the program until one of the two following
    things happen: either the program ends or an error is thrown. To see how this
    works, let’s run the correct version of the our script, `myapp.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: (In the code block, `{path}` represents a long path from my computer.)
  prefs: []
  type: TYPE_NORMAL
- en: As you see, after running the shell command `python -m pdb myapp.py`, we’re
    navigated to a new `pdb` session, and the debugger is awaiting our first command.
    As shown above, `c` will continue the program until the first error or the its
    end. Since we ran the correct script, the debugger did not encounter any problems,
    and it printed `The program finished and will be restarted`. This moved us back
    to the first line of our program, and the debugger awaited, again, our command.
    We could now, for example, start debugging line by line (as shown below).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see what happens if we use the `c` command for the incorrect script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you see, this time the program raised an error (`TypeError`, without a message).
    When an uncaught error is thrown, the program stops execution and the debugger
    enters so-called *post mortem debugging*. This is when you can learn what happened
    with your program and why it failed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hit `n` and `pdb` will run the next line of the code. Not the next command
    — the next line, so if the next command is splitted to two or more lines, you
    will have to call each of them to eventually call the command. Note this `pdb`
    session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: First, note that when you use a command (here, `n`), you do not have to repeat
    it to run it. `pdb` remembers your last command and hitting enter runs it again.
    After hitting it a couple of times, it took us to error that stopped the program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that in the `pdb` mode, tab-completion does not work in a regular way.
    This does not mean it doesn’t work at all; you just have to use the `p` command
    before entering anything else. For instance, hitting the Tab key in this scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'will lead to nothing. But hitting it here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'will lead to completing the `alpha` name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'There are many `pdb` commands for you to use. You will find them here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://docs.python.org/3/library/pdb.html?source=post_page-----d88a56a2ca71--------------------------------)
    [## pdb - The Python Debugger'
  prefs: []
  type: TYPE_NORMAL
- en: 'Source code: Lib/pdb.py The module pdb defines an interactive source code debugger
    for Python programs. It supports…'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: docs.python.org](https://docs.python.org/3/library/pdb.html?source=post_page-----d88a56a2ca71--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'Before moving on, I’d like to share with you a simple command; maybe not *the*
    most important one, but one I’ve appreciated quite a lot in my past. It’s `pp`,
    for pretty-print:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As you see, calling an expression and calling it with the `pp` command makes
    much of a difference. Hence, it’s good to remember it.
  prefs: []
  type: TYPE_NORMAL
- en: 'One more thing. Even though the dict comprehension above is long, I did not
    split the line into two or more ones. This is because `pdb` does not allow for
    doing so, not in its debugging mode — but you can use its interactive mode, which
    you run with the `interact` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Remember that in the interactive mode, `pdb` commands don’t work. To leave this
    mode and return to the `pdb` one, hit `<Ctrl + D>`.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging using the breakpoint() function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Above, we discussed debugging in the `pdb` mode. Oftentimes, however, it will
    be easier to set a so-called *breakpoint*. A breakpoint is a location in code
    in which you want the program to stop and analyze; you can create more than one
    breakpoints in your code, and the code will stop in each of them — unless an error
    is thrown.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create one, add a call to the `breakpoint()` function in the very location
    in your code where you want to debugger to stop and let you in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Running this script will lead you to this very debug session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `l` (`list`) command shows you eleven lines surrounding the location you’re
    in at this moment. You also use `ll` (`longlist`), which would print the whole
    source code for the current function or frame.
  prefs: []
  type: TYPE_NORMAL
- en: The rest is the same as before, as you’ve entered the `pdb` mode, which we discussed
    above. The obvious advantage of using the `breakpoint()` function is the availability
    to stop the program exactly where you want. Frankly, I use `breakpoint()` in almost
    all my debugging sessions.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f7bf66da240f342b5437058c6e603c69.png)'
  prefs: []
  type: TYPE_IMG
- en: A breakpoint in code lets you stop for a moment and check out what’s going on
    inside the code, in the very location you want to check. Photo by [Malte Helmhold](https://unsplash.com/@maltehelmhold?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: An object gone missing?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You may encounter a strange situation— although it’s strange only for those
    who do not know how to manage it. Sometimes, you may find `pdb` behaving in a
    very peculiar way: although it will see local variables, it will… not see these
    local variables.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sounds like total nonsense? Let me explain. Consider this very simple function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'It calculates values of a simple model for a list of values, `x`, given two
    model parameters, `alpha` and `beta`. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now imagine you would like to get inside the function and check the function
    yourself, for a number of `x` lists. You can certainly do it with `pdb`’s help:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'What? What has just happened? How come `pdb` does not see `alpha` — didn’t
    it just saw it? It did, in this very line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: So, it sees `alpha` and `beta` — but it does not see them?
  prefs: []
  type: TYPE_NORMAL
- en: 'Maybe we should assign values to these variables once more? Let’s check this
    out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: No, this didn’t help at all.
  prefs: []
  type: TYPE_NORMAL
- en: The problem is, list comprehensions — and other comprehensions, for that matter
    — have their own scope, and local variables are invisible there. Fortunately,
    you have a number of solutions for this, as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '*The interactive mode*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The interactive mode, actually, can be quite helpful in various situations.
    You can start it using the `interact` command inside the `pdb` shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, in the interactive mode the code works in a regular way.
  prefs: []
  type: TYPE_NORMAL
- en: '*Add the missing object(s) to globals*'
  prefs: []
  type: TYPE_NORMAL
- en: 'A particular object is missing, so simply add it to `globals()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: As you see, `pdb` sees `alpha` but it doesn’t see `beta`. One solution is to
    add it to `globals()` the same way we added `alpha`, but this is no fun to provide
    all the global variables one by one; the next solution does the trick in just
    one command.
  prefs: []
  type: TYPE_NORMAL
- en: '*Add all locals to globals*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Both `locals()` and `globals()` are dictionaries, so we can simply add the
    former to the latter. You can do so in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: I hope you enjoyed this article. While the article doesn’t cover all the knowledge
    of `pdb`, it does provide sufficient knowledge to use this debugger in most scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: In my over 5-year Python practice, I’ve noticed that few people use `pdb` to
    debug code. I don’t know why. IDE debuggers can offer more indeed, but `pdb`’s
    great strength is its availability in the Python standard library.
  prefs: []
  type: TYPE_NORMAL
- en: 'I am not sure this is something to be proud of, but I will honest with you:
    `pdb` is the debugger of my choice. I practically do not use any other debuggers.
    I have never had any problems with it; on the contrary, it has helped in all my
    Python projects.'
  prefs: []
  type: TYPE_NORMAL
- en: When I was experimenting with other debuggers, I did have various problems from
    time to time. Maybe it’s on me; maybe I did not practice them long enough to enjoy
    their power. That can be true — but I can say I have practiced `pdb` long enough
    to say that despite its simplicity, it can be a fantastic debugger.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thanks for reading. If you enjoyed this article, you may also enjoy other articles
    I wrote; you will see them here. And if you want to join Medium, please use my
    referral link below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@nyggus/membership?source=post_page-----d88a56a2ca71--------------------------------)
    [## Join Medium with my referral link - Marcin Kozak'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@nyggus/membership?source=post_page-----d88a56a2ca71--------------------------------)
  prefs: []
  type: TYPE_NORMAL
