- en: Bugs in Python? Pdb to the Rescue!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的错误？`pdb`来拯救！
- en: 原文：[https://towardsdatascience.com/bugs-in-python-pdb-to-the-rescue-d88a56a2ca71](https://towardsdatascience.com/bugs-in-python-pdb-to-the-rescue-d88a56a2ca71)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/bugs-in-python-pdb-to-the-rescue-d88a56a2ca71](https://towardsdatascience.com/bugs-in-python-pdb-to-the-rescue-d88a56a2ca71)
- en: PYTHON PROGRAMMING
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON 编程
- en: Is the Pdb debugger worth learning and using?
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`pdb`调试器值得学习和使用吗？'
- en: '[](https://medium.com/@nyggus?source=post_page-----d88a56a2ca71--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----d88a56a2ca71--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d88a56a2ca71--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d88a56a2ca71--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----d88a56a2ca71--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus?source=post_page-----d88a56a2ca71--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----d88a56a2ca71--------------------------------)[](https://towardsdatascience.com/?source=post_page-----d88a56a2ca71--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----d88a56a2ca71--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----d88a56a2ca71--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----d88a56a2ca71--------------------------------)
    ·13 min read·Sep 21, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----d88a56a2ca71--------------------------------)
    ·13分钟阅读·2023年9月21日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/dd08cfd6f7862fe8ce97e843516e22a3.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dd08cfd6f7862fe8ce97e843516e22a3.png)'
- en: Debugging helps you learn from your failures. Photo by [Brett Jordan](https://unsplash.com/@brett_jordan?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 调试有助于你从失败中学习。照片由[Brett Jordan](https://unsplash.com/@brett_jordan?utm_source=medium&utm_medium=referral)拍摄，[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)提供
- en: Various tools can be used to debug Python code, from the simplest `print()`
    function, via static but more advanced `[icecream](https://github.com/gruns/icecream)`
    and its sibling `[ycecream](https://github.com/salabim/ycecream)`, to the various
    interactive debuggers that IDEs offer. My choice, however, has always been the
    built-in `pdb` debugger, along with the built-in `breakpoint()` function.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 各种工具可以用于调试Python代码，从最简单的`print()`函数，通过静态但更高级的`[icecream](https://github.com/gruns/icecream)`及其兄弟`[ycecream](https://github.com/salabim/ycecream)`，到各种IDE提供的交互式调试器。然而，我一直选择的是内置的`pdb`调试器，以及内置的`breakpoint()`函数。
- en: Debugging
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试
- en: Debugging lies in the heart of programming. You start debugging when you start
    learning programming, and you stop debugging when you’ve promised you’ve just
    written your very last line of code — and if you keep that very promise.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是编程的核心。你在开始学习编程时就开始调试，当你承诺你刚刚写完最后一行代码时你才会停止调试——如果你能遵守这个承诺的话。
- en: 'You could think that one way to decrease the time spent on debugging your code
    is to write good code. Let’s face it: More often than not, writing good code means…
    debugging a lot during development. Certainly, a good programmer will write better
    code and make fewer mistakes — but this does not mean he or she does not need
    to debug.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为，减少调试时间的一种方法是编写优质代码。让我们面对现实吧：往往，编写优质代码意味着……在开发过程中调试很多。诚然，一个好的程序员会编写更好的代码并犯更少的错误——但这并不意味着他或她不需要调试。
- en: 'There is, however, one way to debug less: To debug less, write good unit tests.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，有一种方法可以减少调试的次数：减少调试的方法就是编写良好的单元测试。
- en: To debug less, write good unit tests.
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 为了减少调试的次数，编写良好的单元测试。
- en: 'Whether or not you’re using [test-driven development](https://en.wikipedia.org/wiki/Test-driven_development),
    write good tests. Writing *good tests* means writing a sufficient number of well-written
    tests. I don’t aim here to discuss testing, so I’ll leave you with this thought;
    I wrote more about testing here:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是否使用[测试驱动开发](https://en.wikipedia.org/wiki/Test-driven_development)，都要编写良好的测试。编写*良好的测试*意味着编写足够数量的精心编写的测试。我在这里不打算讨论测试，所以我给你留个想法；我在这里写了更多关于测试的内容：
- en: '[](https://medium.com/geekculture/make-yourself-enjoy-writing-unit-tests-e639711c10bd?source=post_page-----d88a56a2ca71--------------------------------)
    [## Make Yourself Enjoy Writing Unit Tests'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/geekculture/make-yourself-enjoy-writing-unit-tests-e639711c10bd?source=post_page-----d88a56a2ca71--------------------------------)
    [## 让自己享受编写单元测试'
- en: Most developers dislike writing tests. If you’re among them, do your best to
    change that.
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 大多数开发者不喜欢编写测试。如果你也是其中之一，尽力改变这一点。
- en: medium.com](https://medium.com/geekculture/make-yourself-enjoy-writing-unit-tests-e639711c10bd?source=post_page-----d88a56a2ca71--------------------------------)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/geekculture/make-yourself-enjoy-writing-unit-tests-e639711c10bd?source=post_page-----d88a56a2ca71--------------------------------)'
- en: We can assume that all programmers need to debug their code. Some may say they
    don’t, but that’s not true. They do; they simply don’t use dedicated debugging
    tools, called debuggers. Instead, they run their code for particular input, then
    they check it, and then, seeing something is wrong, they change the code and repeat
    the process. So, despite not using debuggers, they do debug their code; they just
    have to spend more time doing that. Debuggers were created for a reason!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以假设所有程序员都需要调试他们的代码。有些人可能会说他们不需要，但这不是真的。他们确实需要；只不过他们不使用专门的调试工具，即调试器。相反，他们会运行代码来处理特定的输入，然后检查结果，然后发现有问题后修改代码并重复这个过程。因此，尽管他们不使用调试器，他们依然在调试代码；只是需要花费更多时间。调试器是有其存在意义的！
- en: 'Often, a single call to the `print()` can do the job. But don’t fool yourself:
    This is *not* a very effective way of debugging. I am not saying you shouldn’t
    use it — but that’s an overly simplistic method that will work in the simplest
    situations only.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，单独调用 `print()` 函数就能解决问题。但不要自欺欺人：这*不是*一种非常有效的调试方法。我不是说你不应该使用它——但这是一个过于简单的方法，只能在最简单的情况下起作用。
- en: Many of those who use IDEs for code development like using debuggers built into
    these IDEs. Visual Studio Code has its own debugger, Pycharm has one, and even
    [Thonny](https://thonny.org/) has one.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 许多使用 IDE 进行代码开发的人喜欢使用内置的调试器。Visual Studio Code 有自己的调试器，Pycharm 有一个，甚至 [Thonny](https://thonny.org/)
    也有一个。
- en: You can also use various debuggers available as Python packages to be installed
    from PyPi. Open [PyPi](https://pypi.org/) and look for a term “debugger”; you
    will have a lot of hits, though you may need quite some patience to find those
    that can help you debug your code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用作为 Python 包提供的各种调试器，这些包可以从 PyPi 安装。打开 [PyPi](https://pypi.org/) 并搜索“debugger”一词；你会找到很多结果，但你可能需要花费一些耐心来找到能帮助你调试代码的工具。
- en: 'You can read about Python debuggers in the below *Towards Data Science* article:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在下面的 *Towards Data Science* 文章中阅读关于 Python 调试器的内容：
- en: '[](/5-python-debugging-tools-that-are-better-than-print-1aa02eba35?source=post_page-----d88a56a2ca71--------------------------------)
    [## 5 Python Debugging Tools That Are Better Than “Print”'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 5 Python 调试工具，优于“Print”](https://docs.python.org/3/library/pdb.html?source=post_page-----d88a56a2ca71--------------------------------)'
- en: Debug your code faster and more efficiently.
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更快、更高效地调试你的代码。
- en: towardsdatascience.com](/5-python-debugging-tools-that-are-better-than-print-1aa02eba35?source=post_page-----d88a56a2ca71--------------------------------)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/5-python-debugging-tools-that-are-better-than-print-1aa02eba35?source=post_page-----d88a56a2ca71--------------------------------)'
- en: It discusses — though doesn’t show how to use — `pdb`, PyCharm’s and Visual
    Studio’s (and VS Code’s) debuggers, Komodo, and Jupyter Visual Debugger.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 文章讨论了——尽管没有展示如何使用——`pdb`、PyCharm 和 Visual Studio（以及 VS Code）的调试器、Komodo 和 Jupyter
    Visual Debugger。
- en: Static versus interactive debuggers
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态调试器与交互式调试器
- en: Debuggers can be either *static* and *interactive*. The former only *show* objects;
    the latter let you *play* with them.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器可以是*静态*的也可以是*交互式*的。前者只是*展示*对象；后者则允许你*操作*它们。
- en: Both can be helpful, but it’s interactive ones that offer the most debugging
    power, resulting from their ability to stop the program and look around. You can
    see and use all the objects in the local and global scopes; you can check if a
    particular command or a set of commands will work or not. That’s why more often
    than not I prefer interactive over static debugging.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 两者都可能有帮助，但交互式调试器提供了最大的调试能力，因为它们能够暂停程序并查看当前状态。你可以查看和使用本地和全局作用域中的所有对象；你可以检查特定命令或命令集是否有效。这就是为什么我常常偏好交互式调试而不是静态调试。
- en: The `print()` function is a perfect example of static debugging. IDE debuggers
    are usually interactive.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`print()` 函数是静态调试的一个完美示例。IDE 调试器通常是交互式的。'
- en: 'There is, however, a debugger that offers simplicity and power at the same
    time. It’s `pdb`, a built-in interactive Python debugger:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一个调试器同时提供了简单性和强大功能。它就是 `pdb`，一个内置的交互式 Python 调试器：
- en: '[](https://docs.python.org/3/library/pdb.html?source=post_page-----d88a56a2ca71--------------------------------)
    [## pdb - The Python Debugger'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[## pdb - Python 调试器](https://docs.python.org/3/library/pdb.html?source=post_page-----d88a56a2ca71--------------------------------)'
- en: The module defines an interactive source code debugger for Python programs.
    It supports setting (conditional)…
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 该模块定义了一个用于Python程序的交互式源代码调试器。它支持设置（条件）…
- en: docs.python.org](https://docs.python.org/3/library/pdb.html?source=post_page-----d88a56a2ca71--------------------------------)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[docs.python.org](https://docs.python.org/3/library/pdb.html?source=post_page-----d88a56a2ca71--------------------------------)'
- en: Yes, `pdb` is *built-in*, so you don’t have to install it. It comes with your
    Python installation, and you can use it in any environment. And yes, `pdb` is
    *interactive*. That’s actually most of what I expect from a debugger!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，`pdb`是*内置的*，所以你不需要安装它。它随Python安装包一起提供，你可以在任何环境中使用它。而且，`pdb`是*交互式的*。这实际上是我对调试器的主要期望！
- en: Yes, `pdb` is *built-in*, so you don’t have to install it. It comes with your
    Python installation, and you can use it in any environment. And yes, `pdb` is
    *interactive*.
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 是的，`pdb`是*内置的*，所以你不需要安装它。它随Python安装包一起提供，你可以在任何环境中使用它。而且，`pdb`是*交互式的*。
- en: In this article, we will discuss the basics of `pdb`. We will cover the basics
    of this powerful tool, but be aware that it offers much more. A good thing is
    that these basics are more than enough to start using `pdb`. To be honest, I seldom
    use `pdb`’s more advanced options. Thus, reading this article will equip you with
    powerful tools for debugging Python code.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将讨论`pdb`的基础知识。我们将介绍这个强大工具的基础知识，但要注意，它提供的功能远不止这些。好在这些基础知识足以让你开始使用`pdb`。说实话，我很少使用`pdb`的高级选项。因此，阅读这篇文章将为你提供调试Python代码的强大工具。
- en: A few words about pdb
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于pdb的几点说明
- en: One of the `pdb`’s advantages is that you can use it anywhere, without the need
    of installing anything additional to what your virtual environment already has.
    It can be a remote environment — `pdb` will work just fine. Just run it and voilà,
    you have your interactive debugger ready to be used remotely. Or locally, for
    that matter.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`pdb`的一个优点是你可以在任何地方使用它，而无需安装任何额外的东西。即使是远程环境——`pdb`也能正常工作。只需运行它，瞧，你就有了一个可以远程使用的交互式调试器。或者在本地使用也没问题。'
- en: First things first. Let me explain how to use `pdb`, and then you can decide
    if it’s a tool for you.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我解释如何使用`pdb`，然后你可以决定它是否适合你。
- en: Basically, you can use `pdb` in two modes. First, you can run your Python program
    in the `pdb` mode. This means the program will be executed, line by line, until
    it completes its execution or until an error occurs. Then the program is re-run
    in a post-mortem mode, meaning that it will stop right before the error and you
    will be able to see what’s going on in the local and global scopes.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，你可以在两种模式下使用`pdb`。首先，你可以在`pdb`模式下运行你的Python程序。这意味着程序会逐行执行，直到完成执行或发生错误。然后程序会在死后模式下重新运行，这意味着它会在错误发生之前停下来，你将能够查看局部和全局作用域中的情况。
- en: Second, you can add a so-called breakpoint to your code, and the debugger will
    stop your program right there. You can also add more breakpoints. Certainly, the
    debugger will be able to stop the program only if no error has been raised before
    the breakpoint. Below, we will discuss both of these scenarios.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，你可以在代码中添加一个所谓的断点，调试器将会在断点处停止程序。你还可以添加更多的断点。当然，调试器只有在断点之前没有抛出错误的情况下才能停止程序。下面，我们将讨论这两种情况。
- en: '`The pdb` mode'
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`pdb`模式'
- en: 'To run your program in the `pdb` mode, simply run it this way:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要在`pdb`模式下运行你的程序，只需按照以下方式运行它：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This means that the `pdb` console will open and the `myapp.py` script will be
    run line by line. You can change this behavior and run it up to either the first
    error or the end of the program. Best to show how this works using some examples.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着`pdb`控制台将打开，`myapp.py`脚本将逐行运行。你可以更改这种行为，将其运行到第一个错误或程序结束。最好通过一些示例来展示这如何工作。
- en: 'We will use the following script, saved to `myapp.py`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下脚本，保存为`myapp.py`：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: (It’s a playground script, nothing to be proud of. Wwe do need simplistic cases
    to analyze.)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: （这是一个示例脚本，没有什么值得自豪的。我们确实需要简单的案例来进行分析。）
- en: 'We will also use its incorrect version, in which Python will throw an error;
    this script is saved in a `myapp_error.py` file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用其错误版本，其中Python将抛出一个错误；该脚本保存在`myapp_error.py`文件中：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you see, the correct program will run a `for` loop, and in each loop, it
    will run the `foo()` function for different values of the `s` argument: first,
    for `"string1"` and then for `"string2"`, both correct. In the incorrect version,
    instead of running `foo("string2")`, `foo()` will be run with an incorrect value
    of `10`, which shall lead to `TypeError` being raised.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，正确的程序将运行一个 `for` 循环，在每次循环中，它将对不同的 `s` 参数值运行 `foo()` 函数：首先是 `"string1"`
    然后是 `"string2"`，这两个值都是正确的。在错误的版本中，`foo("string2")` 应该被 `foo()` 替换为不正确的值 `10`，这将导致
    `TypeError` 被抛出。
- en: For the moment, the only `pdb` commands you need to know are
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你需要知道的唯一 `pdb` 命令是
- en: '`c`, or `continue`; another version of the command is `cont`;'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`c`，或 `continue`；命令的另一个版本是 `cont`；'
- en: '`n`, or `next`; and'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n`，或 `next`；和'
- en: '`q`, or `quit`.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`q`，或 `quit`。'
- en: Sometimes you will have to use `quit` two or three times, or even more, to exit
    the debugger.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你需要使用`quit`两到三次，甚至更多次，才能退出调试器。
- en: 'The `continue` command executes the program until one of the two following
    things happen: either the program ends or an error is thrown. To see how this
    works, let’s run the correct version of the our script, `myapp.py`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`continue` 命令会执行程序直到以下两种情况之一发生：程序结束或抛出错误。为了查看这如何工作，我们来运行我们脚本的正确版本 `myapp.py`：'
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: (In the code block, `{path}` represents a long path from my computer.)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: （在代码块中，`{path}` 代表从我的计算机上的长路径。）
- en: As you see, after running the shell command `python -m pdb myapp.py`, we’re
    navigated to a new `pdb` session, and the debugger is awaiting our first command.
    As shown above, `c` will continue the program until the first error or the its
    end. Since we ran the correct script, the debugger did not encounter any problems,
    and it printed `The program finished and will be restarted`. This moved us back
    to the first line of our program, and the debugger awaited, again, our command.
    We could now, for example, start debugging line by line (as shown below).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在运行了 shell 命令 `python -m pdb myapp.py` 之后，我们进入了一个新的 `pdb` 会话，调试器正在等待我们的第一个命令。如上所示，`c`
    命令将继续程序运行直到第一个错误或程序结束。由于我们运行的是正确的脚本，调试器没有遇到任何问题，并且打印了`程序已完成，将重新启动`。这将我们移回到程序的第一行，调试器再次等待我们的命令。现在我们可以逐行调试（如下所示）。
- en: 'Let’s see what happens if we use the `c` command for the incorrect script:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如果我们对错误的脚本使用 `c` 命令会发生什么：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you see, this time the program raised an error (`TypeError`, without a message).
    When an uncaught error is thrown, the program stops execution and the debugger
    enters so-called *post mortem debugging*. This is when you can learn what happened
    with your program and why it failed.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这次程序引发了一个错误（`TypeError`，没有消息）。当抛出未捕获的错误时，程序会停止执行，调试器进入所谓的*事后调试*阶段。这时你可以了解你的程序发生了什么以及为何失败。
- en: 'Hit `n` and `pdb` will run the next line of the code. Not the next command
    — the next line, so if the next command is splitted to two or more lines, you
    will have to call each of them to eventually call the command. Note this `pdb`
    session:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 按 `n`，`pdb` 将执行代码的下一行。不是下一条命令，而是下一行，因此如果下一条命令被拆分成两行或更多行，你需要调用每一行，最终执行命令。请注意这个
    `pdb` 会话：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: First, note that when you use a command (here, `n`), you do not have to repeat
    it to run it. `pdb` remembers your last command and hitting enter runs it again.
    After hitting it a couple of times, it took us to error that stopped the program.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，请注意当你使用一个命令（在这里是 `n`）时，你不需要重复它来运行。`pdb` 会记住你最后的命令，按回车键将再次执行它。在按了几次之后，它把我们带到了停止程序的错误。
- en: 'Note that in the `pdb` mode, tab-completion does not work in a regular way.
    This does not mean it doesn’t work at all; you just have to use the `p` command
    before entering anything else. For instance, hitting the Tab key in this scenario:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在 `pdb` 模式下，Tab 自动补全的行为并不完全正常。这并不意味着它完全无效；你只需要在输入其他内容之前使用 `p` 命令。例如，在这种情况下按下
    Tab 键：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'will lead to nothing. But hitting it here:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 将不会有任何结果。但在这里按：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'will lead to completing the `alpha` name:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 将会完成 `alpha` 名称：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'There are many `pdb` commands for you to use. You will find them here:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多 `pdb` 命令可供你使用。你可以在这里找到它们：
- en: '[](https://docs.python.org/3/library/pdb.html?source=post_page-----d88a56a2ca71--------------------------------)
    [## pdb - The Python Debugger'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://docs.python.org/3/library/pdb.html?source=post_page-----d88a56a2ca71--------------------------------)
    [## pdb - The Python Debugger'
- en: 'Source code: Lib/pdb.py The module pdb defines an interactive source code debugger
    for Python programs. It supports…'
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 源代码：Lib/pdb.py 模块 pdb 定义了一个用于 Python 程序的交互式源代码调试器。它支持…
- en: docs.python.org](https://docs.python.org/3/library/pdb.html?source=post_page-----d88a56a2ca71--------------------------------)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[docs.python.org](https://docs.python.org/3/library/pdb.html?source=post_page-----d88a56a2ca71--------------------------------)'
- en: 'Before moving on, I’d like to share with you a simple command; maybe not *the*
    most important one, but one I’ve appreciated quite a lot in my past. It’s `pp`,
    for pretty-print:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我想与您分享一个简单的命令；也许它不是*最*重要的，但在我过去的经验中我非常欣赏它。它是`pp`，用于漂亮打印：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you see, calling an expression and calling it with the `pp` command makes
    much of a difference. Hence, it’s good to remember it.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，调用一个表达式和使用 `pp` 命令调用它之间差别很大。因此，记住它是好的。
- en: 'One more thing. Even though the dict comprehension above is long, I did not
    split the line into two or more ones. This is because `pdb` does not allow for
    doing so, not in its debugging mode — but you can use its interactive mode, which
    you run with the `interact` command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件事。即使上面的字典推导很长，我也没有将其拆分成两行或更多行。这是因为 `pdb` 不允许这样做，至少在其调试模式下是如此——但您可以使用其交互模式，您可以通过
    `interact` 命令运行它：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Remember that in the interactive mode, `pdb` commands don’t work. To leave this
    mode and return to the `pdb` one, hit `<Ctrl + D>`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，在交互模式下，`pdb` 命令不起作用。要离开此模式并返回 `pdb` 模式，请按 `<Ctrl + D>`。
- en: Debugging using the breakpoint() function
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 breakpoint() 函数进行调试
- en: Above, we discussed debugging in the `pdb` mode. Oftentimes, however, it will
    be easier to set a so-called *breakpoint*. A breakpoint is a location in code
    in which you want the program to stop and analyze; you can create more than one
    breakpoints in your code, and the code will stop in each of them — unless an error
    is thrown.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 上面我们讨论了在 `pdb` 模式下调试。然而，通常情况下，设置一个所谓的*断点*会更容易。断点是代码中的一个位置，在这个位置您希望程序暂停并进行分析；您可以在代码中创建多个断点，代码会在每个断点处停止——除非抛出错误。
- en: 'To create one, add a call to the `breakpoint()` function in the very location
    in your code where you want to debugger to stop and let you in:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个，请在您希望调试器停止并让您进入的代码位置添加对 `breakpoint()` 函数的调用：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Running this script will lead you to this very debug session:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此脚本将引导您进入此调试会话：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `l` (`list`) command shows you eleven lines surrounding the location you’re
    in at this moment. You also use `ll` (`longlist`), which would print the whole
    source code for the current function or frame.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`l`（`list`）命令显示您当前所在位置周围的十一行。您还可以使用 `ll`（`longlist`），它将打印当前函数或帧的整个源代码。'
- en: The rest is the same as before, as you’ve entered the `pdb` mode, which we discussed
    above. The obvious advantage of using the `breakpoint()` function is the availability
    to stop the program exactly where you want. Frankly, I use `breakpoint()` in almost
    all my debugging sessions.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 其余部分与之前相同，因为您已经进入了我们上面讨论的 `pdb` 模式。使用 `breakpoint()` 函数的明显优势是可以精确地在您希望的地方停止程序。坦白说，我在几乎所有的调试会话中都使用
    `breakpoint()`。
- en: '![](../Images/f7bf66da240f342b5437058c6e603c69.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f7bf66da240f342b5437058c6e603c69.png)'
- en: A breakpoint in code lets you stop for a moment and check out what’s going on
    inside the code, in the very location you want to check. Photo by [Malte Helmhold](https://unsplash.com/@maltehelmhold?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中的断点让您暂停片刻，检查您希望检查的代码位置的内部情况。照片由 [Malte Helmhold](https://unsplash.com/@maltehelmhold?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) 上拍摄
- en: An object gone missing?
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象丢失了？
- en: 'You may encounter a strange situation— although it’s strange only for those
    who do not know how to manage it. Sometimes, you may find `pdb` behaving in a
    very peculiar way: although it will see local variables, it will… not see these
    local variables.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会遇到一种奇怪的情况——虽然它只对那些不知道如何处理的人来说很奇怪。有时，您可能会发现 `pdb` 的行为非常特殊：虽然它可以看到局部变量，但它……看不到这些局部变量。
- en: 'Sounds like total nonsense? Let me explain. Consider this very simple function:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来像完全的废话？让我解释一下。考虑这个非常简单的函数：
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'It calculates values of a simple model for a list of values, `x`, given two
    model parameters, `alpha` and `beta`. For example:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 它计算一个简单模型的值，针对一个值列表 `x`，给定两个模型参数 `alpha` 和 `beta`。例如：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now imagine you would like to get inside the function and check the function
    yourself, for a number of `x` lists. You can certainly do it with `pdb`’s help:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在想象一下，您希望进入函数并检查多个 `x` 列表的函数。您可以通过 `pdb` 的帮助来做到这一点：
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'What? What has just happened? How come `pdb` does not see `alpha` — didn’t
    it just saw it? It did, in this very line:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 什么？刚刚发生了什么？为什么`pdb`看不到`alpha`——它不是刚刚看到的吗？确实，在这一行：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: So, it sees `alpha` and `beta` — but it does not see them?
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，它能看到`alpha`和`beta`——但它看不到它们？
- en: 'Maybe we should assign values to these variables once more? Let’s check this
    out:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 也许我们应该再次给这些变量赋值？让我们检查一下：
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: No, this didn’t help at all.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 不，这根本没有帮助。
- en: The problem is, list comprehensions — and other comprehensions, for that matter
    — have their own scope, and local variables are invisible there. Fortunately,
    you have a number of solutions for this, as shown below.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是，列表推导式——以及其他推导式——有自己的作用域，局部变量在那里是不可见的。幸运的是，你有很多解决方案，如下所示。
- en: '*The interactive mode*'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '*交互模式*'
- en: 'The interactive mode, actually, can be quite helpful in various situations.
    You can start it using the `interact` command inside the `pdb` shell:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 交互模式实际上在各种情况下都非常有用。你可以使用`pdb` shell中的`interact`命令来启动它：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you can see, in the interactive mode the code works in a regular way.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在交互模式下，代码的运行方式是正常的。
- en: '*Add the missing object(s) to globals*'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '*将缺失的对象添加到globals*'
- en: 'A particular object is missing, so simply add it to `globals()`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 缺少一个特定的对象，所以只需将其添加到`globals()`中：
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As you see, `pdb` sees `alpha` but it doesn’t see `beta`. One solution is to
    add it to `globals()` the same way we added `alpha`, but this is no fun to provide
    all the global variables one by one; the next solution does the trick in just
    one command.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`pdb`可以看到`alpha`但看不到`beta`。一种解决方案是将其添加到`globals()`中，就像我们添加`alpha`一样，但逐个提供所有全局变量并不好玩；下一个解决方案只需一条命令即可完成。
- en: '*Add all locals to globals*'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*将所有局部变量添加到globals*'
- en: 'Both `locals()` and `globals()` are dictionaries, so we can simply add the
    former to the latter. You can do so in the following way:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`locals()`和`globals()`都是字典，因此我们可以简单地将前者添加到后者中。你可以按照以下方式进行：'
- en: '[PRE20]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: I hope you enjoyed this article. While the article doesn’t cover all the knowledge
    of `pdb`, it does provide sufficient knowledge to use this debugger in most scenarios.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你喜欢这篇文章。虽然文章没有涵盖`pdb`的所有知识，但它提供了足够的知识来在大多数情况下使用这个调试工具。
- en: In my over 5-year Python practice, I’ve noticed that few people use `pdb` to
    debug code. I don’t know why. IDE debuggers can offer more indeed, but `pdb`’s
    great strength is its availability in the Python standard library.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在我超过5年的Python实践中，我注意到很少有人使用`pdb`来调试代码。我不知道为什么。IDE调试工具确实能提供更多，但`pdb`的强大之处在于它在Python标准库中的可用性。
- en: 'I am not sure this is something to be proud of, but I will honest with you:
    `pdb` is the debugger of my choice. I practically do not use any other debuggers.
    I have never had any problems with it; on the contrary, it has helped in all my
    Python projects.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我不确定这是否值得自豪，但我会对你诚实：`pdb`是我选择的调试工具。我几乎不使用其他调试工具。我从未遇到过任何问题；相反，它在我所有的Python项目中都提供了帮助。
- en: When I was experimenting with other debuggers, I did have various problems from
    time to time. Maybe it’s on me; maybe I did not practice them long enough to enjoy
    their power. That can be true — but I can say I have practiced `pdb` long enough
    to say that despite its simplicity, it can be a fantastic debugger.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在尝试其他调试工具时，确实遇到了各种问题。也许是我自己的问题；也许是我没有足够长时间地使用它们以体验它们的强大。这可能是真的——但我可以说我已经足够长时间地使用`pdb`，尽管它很简单，但它可以是一个很棒的调试工具。
- en: 'Thanks for reading. If you enjoyed this article, you may also enjoy other articles
    I wrote; you will see them here. And if you want to join Medium, please use my
    referral link below:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。如果你喜欢这篇文章，你可能也会喜欢我写的其他文章；你可以在这里看到它们。如果你想加入Medium，请使用下面的推荐链接：
- en: '[](https://medium.com/@nyggus/membership?source=post_page-----d88a56a2ca71--------------------------------)
    [## Join Medium with my referral link - Marcin Kozak'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[链接](https://medium.com/@nyggus/membership?source=post_page-----d88a56a2ca71--------------------------------)
    [## 使用我的推荐链接加入 Medium - Marcin Kozak'
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作为Medium的会员，你的部分会员费会分给你阅读的作者，同时你可以完全访问每一个故事……
- en: medium.com](https://medium.com/@nyggus/membership?source=post_page-----d88a56a2ca71--------------------------------)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[链接](https://medium.com/@nyggus/membership?source=post_page-----d88a56a2ca71--------------------------------)'
