["```py\n +--------+----------------+-------------------+----------------+----------+\n| Salary | Years employed | Nb. of promotions | Direct manager | Has left |\n+--------+----------------+-------------------+----------------+----------+\n|  75000 |              2 |                 1 | John Doe       |        0 |\n| 105000 |              4 |                 2 | Jane Doe       |        0 |\n|  40000 |              2 |                 0 | John Doe       |        1 |\n+--------+----------------+-------------------+----------------+----------+\n```", "```py\n+--------+----------------+-------------------+----------------+----------+\n| Salary | Years employed | Nb. of promotions | Direct manager | Has left |\n+--------+----------------+-------------------+----------------+----------+\n|  75000 |              2 |                 1 | John Doe       |        0 |\n| 105000 |              4 |                 2 | Jane Doe       |        0 |\n|  40000 |              2 |                 0 | John Doe       |        1 |\n+--------+----------------+-------------------+----------------+----------+\n```", "```py\nfrom sksurv.datasets import load_veterans_lung_cancer\n\nX, y = load_veterans_lung_cancer()\n```", "```py\nfrom sksurv.nonparametric import kaplan_meier_estimator\n\ntime, survival_prob = kaplan_meier_estimator(y['Status'], y['Survival_in_days\n```", "```py\nfig, ax = plt.subplots()\nax.step(time, survival_prob, where='post')\nax.set_ylabel('Probability of survival')\nax.set_xlabel('Time')\n\nplt.tight_layout()\n```", "```py\nfor treatment_type in ('standard', 'test'):\n    mask_treatment = X['Treatment'] == treatment_type\n\n    time, survival_prob = kaplan_meier_estimator(\n        y['Status'][mask_treatment],\n        y['Survival_in_days'][mask_treatment]\n    )\n\n    plt.step(time, survival_prob, where='post', label=f'{treatment_type}')\n\nplt.ylabel('Probability of survival')\nplt.xlabel('Time')\nplt.legend(loc='best')\nplt.tight_layout()\n```", "```py\nfrom sksurv.compare import compare_survival\n\ngroup_indicator = X.loc[:, 'Treatment']\ngroups = group_indicator.unique()\n\nchi2, pvalue= compare_survival(y, group_indicator)\n\nprint(pvalue)\n```", "```py\nfrom sksurv.preprocessing import OneHotEncoder\n\nX_num = OneHotEncoder().fit_transform(X)\n```", "```py\nfrom sksurv.linear_model import CoxPHSurvivalAnalysis\n\nestimator = CoxPHSurvivalAnalysis()\nestimator.fit(X_num, y)\n```", "```py\n# Create a set of 4 synthetic patients\n\nX_test = pd.DataFrame.from_dict({\n    1: [65, 0, 0, 1, 60, 1, 0, 1],\n    2: [65, 0, 0, 1, 60, 1, 0, 0],\n    3: [65, 0, 1, 0, 60, 1, 0, 0],\n    4: [65, 0, 1, 0, 60, 1, 0, 1]},\n     columns=X_num.columns, orient='index')\n\n# Estimate the survival functions\npred_surv = estimator.predict_survival_function(X_test)\n\n# Plot the survival function for each new patient\ntime_points = np.arange(1, 1000)\n\nfor i, surv_func in enumerate(pred_surv):\n    plt.step(time_points, surv_func(time_points), where='post', label=f'Sample {i+1}')\n\nplt.ylabel('Probability of survival')\nplt.xlabel('Time')\nplt.legend(loc='best')\nplt.tight_layout()\n```", "```py\nfrom sksurv.metrics import concordance_index_censored\n\nestimator.score(X_num, y)\n```", "```py\nfrom sklearn.model_selection import train_test_split\n\n# Split into train/test \nX_train, X_test, y_train, y_test = train_test_split(X_num, y, test_size=0.2, stratify=y['Status'], random_state=42)\n\n# Fit the model on the training set\ncph = CoxPHSurvivalAnalysis()\ncph.fit(X_train, y_train)\n\n# Plot the time-depdendent ROC and calculate AUC\nfrom sksurv.metrics import cumulative_dynamic_auc\n\ntime_interval = np.arange(8, 184, 7)\n\ncph_risk_scores = cph.predict(X_test)\ncph_auc, cph_mean_auc = cumulative_dynamic_auc(y_train, y_test, cph_risk_scores, time_interval)\n\nfig, ax = plt.subplots()\n\nax.plot(time_interval, cph_auc, marker='o')\nax.axhline(cph_mean_auc, ls='--')\nax.set_xlabel('Days after enrollment')\nax.set_ylabel('Time-dependent AUC')\n\nplt.grid(True)\nplt.tight_layout()\n```"]