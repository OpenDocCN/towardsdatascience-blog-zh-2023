["```py\ndef add_numbers(a, b):\n    return a + b\n```", "```py\nfrom functools import lru_cache\n\n@lru_cache(maxsize=3)\ndef add_numbers(a, b):\n    return a + b\n\nadd_numbers(a=10, b=15)\nadd_numbers(a=10, b=10)\nadd_numbers(a=3, b=15)\nadd_numbers(a=20, b=21)\nadd_numbers(a=3, b=15) \n```", "```py\ndef fibonacci(n):\n    if n < 0:\n        raise ValueError('Invalid input')\n\n    # Base case\n    if n <= 1:\n        return n\n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n```", "```py\n# module test.py\n\nfrom timeit import repeat\n\nsetup = \"\"\"\ndef fibonacci(n):\n    if n < 0:\n        raise ValueError('Invalid input')\n\n    # Base case\n    if n <= 1:\n        return n\n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\"\"\"\n\nmin_timing = min(repeat(setup=setup, stmt='fibonacci(30)', number=5))\nprint(f'Min Timing: {round(min_timing, 2)}s')\n```", "```py\n$ python3 test.py \nMin Timing: 1.39s\n```", "```py\nfrom functools import lru_cache\n\n@lru_cache\ndef fibonacci(n):\n    if n < 0:\n        raise ValueError('Invalid input')\n\n    # Base case\n    if n <= 1:\n        return n\n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n```", "```py\n# module test.py\n\nfrom timeit import repeat\n\nsetup = \"\"\"\nfrom functools import lru_cache\n\n@lru_cache\ndef fibonacci(n):\n    if n < 0:\n        raise ValueError('Invalid input')\n\n    # Base case\n    if n <= 1:\n        return n\n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\"\"\"\n\nmin_timing = min(repeat(setup=setup, stmt='fibonacci(30)', number=5))\nprint(f'Min Timing: {min_timing}s')\n```", "```py\n$ python3 test.py \nMin Timing: 7.790978997945786e-06s\n```"]