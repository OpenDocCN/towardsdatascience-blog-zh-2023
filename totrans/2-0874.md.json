["```py\n# set date as the Frame index\ndf.set_index('date', inplace=True)\n\n# simple date features\ndf['yr'] = df.index.year\ndf['qtr'] = df.index.quarter\ndf['mth'] = df.index.month\ndf['dim'] = df.index.days_in_month\n```", "```py\n# fraction of year\ndf['yr_fraction'] = df.index.year + (df.index.month - 1) / 12\n\n# add non-linearity\nyr_fraction_rebased = df['yr_fraction'] - df['yr'].min()\ndf['yr_fraction_sq'] = yr_fraction_rebased ** 2\ndf['yr_fraction_cube'] = yr_fraction_rebased ** 3\ndf['yr_fraction_quad'] = yr_fraction_rebased ** 4\ndf['yr_fraction_quint'] = yr_fraction_rebased ** 5\ndf['yr_fraction_sqrt'] = yr_fraction_rebased ** 0.5\n```", "```py\n# changepoints\nchangepoints = pd.DataFrame()\n\nfor date in df.index.unique():\n    date = pd.to_datetime(date)\n    date_str = f'change_{date.strftime(\"%Y_%m\")}'\n\n    # allow only X-erly changes\n    if date.month % 3 == 0:\n        temp = pd.DataFrame(\n            {date_str:np.where(df.index <= date,0,1)}\n        )\n        changepoints = pd.concat([changepoints,temp], axis=1)\n```", "```py\n# Prophet features\nfor j in range(1,13):\n    df[f'prophet_sin_{j}'] = np.sin(2 * np.pi * df['mth'] * j / 12)\n    df[f'prophet_cos_{j}'] = np.cos(2 * np.pi * df['mth'] * j / 12)\n```", "```py\n# business days\nbegin = df.index.values.astype('datetime64[D]')\nend = (df.index + pd.DateOffset(months = 1)).values.astype('datetime64[D]')\n\ndf['bus_days'] = np.busday_count(\n    begindates = begin,\n    enddates = end\n)\n\n# holidays\ndf['hols'] = pd.Series(df.index).apply(count_holidays).values\n```", "```py\nimport holidays\n\ndef count_holidays(u):\n    hols = holidays.country_holidays('GB')\n    days = pd.date_range(u, u + pd.DateOffset(months = 1))\n    return sum(y in hols for y in days)\n```"]