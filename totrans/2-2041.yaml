- en: The New Generative AI Function in BigQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/the-new-generative-ai-function-in-bigquery-38d7a16d4efc](https://towardsdatascience.com/the-new-generative-ai-function-in-bigquery-38d7a16d4efc)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to use BigQuery GENERATE_TEXT remote function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@martosi?source=post_page-----38d7a16d4efc--------------------------------)[![Marina
    Tosic](../Images/cb2168826ed9ed608d61c6c90843c535.png)](https://medium.com/@martosi?source=post_page-----38d7a16d4efc--------------------------------)[](https://towardsdatascience.com/?source=post_page-----38d7a16d4efc--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----38d7a16d4efc--------------------------------)
    [Marina Tosic](https://medium.com/@martosi?source=post_page-----38d7a16d4efc--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----38d7a16d4efc--------------------------------)
    ·10 min read·Dec 1, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6bc5b9d4bfe58fdc6f69a6a33a2454d3.png)'
  prefs: []
  type: TYPE_IMG
- en: “Everyone can code and do NLP analysis in BigQuery with SQL knowledge and a
    good prompt structure” [Photo by [Adi Goldstein](https://unsplash.com/@adigold1?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)]
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since I started working with the Google Platform, Google has not stopped surprising
    me with its [BigQuery](https://cloud.google.com/bigquery) (BQ) features and development.
  prefs: []
  type: TYPE_NORMAL
- en: A real “wow” moment for me happened four years ago.
  prefs: []
  type: TYPE_NORMAL
- en: I remember it like it was yesterday, and I was sitting in the front row at the
    [Big Data London](https://bigdataldn.com/) 2019 conference. Little did I know
    back then about the possibility of creating machine learning models using only
    BQ functions, or, better said, what BQ Machine Learning ([BQML](https://cloud.google.com/bigquery/docs/bqml-introduction))
    is.
  prefs: []
  type: TYPE_NORMAL
- en: At least until the conference session, where the Google colleague presented
    how you can create [classification](https://cloud.google.com/bigquery/docs/logistic-regression-prediction),
    [clustering,](https://cloud.google.com/bigquery/docs/kmeans-tutorial) and [time-series
    forecasting](https://cloud.google.com/bigquery/docs/arima-single-time-series-forecasting-tutorial)
    models by simply using Google’s SQL.
  prefs: []
  type: TYPE_NORMAL
- en: The first thought that went through my mind back then was “You must be joking”.
  prefs: []
  type: TYPE_NORMAL
- en: The second thought in my head was, “Does this mean that everyone who knows only
    SQL will be able to create machine learning models?”
  prefs: []
  type: TYPE_NORMAL
- en: As you can assume, the answer is “***yes”*** if you are using BigQuery as your
    data warehouse.
  prefs: []
  type: TYPE_NORMAL
- en: Now, after using the [BQML](https://cloud.google.com/bigquery/docs/bqml-introduction)
    functions for a while, the correct answer to the question listed above is “***maybe***.”
  prefs: []
  type: TYPE_NORMAL
- en: This means that even though the `[CREATE MODEL](https://cloud.google.com/bigquery/docs/reference/standard-sql/bigqueryml-syntax-create)`
    syntax is written in SQL, knowledge of machine learning modelling and statistics
    is still needed.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, you still need to understand the math behind the available models
    for different types of machine learning use cases ([supervised](https://cloud.google.com/discover/what-is-supervised-learning#section-1)/[unsupervised](https://cloud.google.com/discover/what-is-unsupervised-learning)),
    conduct feature engineering, hyperparameter tuning and model evaluation tasks.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Fast forward to the year 2023, and BigQuery is further amazing me with its new
    features.
  prefs: []
  type: TYPE_NORMAL
- en: This time, we are talking about the new generative AI BigQuery machine learning
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: With these new functions, data engineers and analysts are able to perform generative
    natural language tasks on textual data stored in BQ tables with a few query lines.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, the goal of this blog post is to showcase the new analytical advances
    of BQ in generative AI, with a focus on one function**—the** [***GENERATE_TEXT***](https://cloud.google.com/bigquery/docs/generate-text-tutorial)**function.**
  prefs: []
  type: TYPE_NORMAL
- en: About the GENERATE_TEXT function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main idea behind the *GENERATE_TEXT* function is to assist data professionals
    with the following tasks using only SQL and prompt instructions in BigQuery [[1](https://cloud.google.com/bigquery/docs/reference/standard-sql/bigqueryml-syntax-generate-text#:~:text=GENERATE_TEXT%20function,%20which%20lets%20you,Sentiment%20Analysis)]:'
  prefs: []
  type: TYPE_NORMAL
- en: '***Classification***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Sentiment Analysis***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Entity extraction***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Extractive Question Answering***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Summarization***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Re-writing text in a different style***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Ad copy generation***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Concept ideation***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In other words, the function can perform generative natural language tasks on
    textual attributes stored in BQ by using the [Vertex AI](https://cloud.google.com/vertex-ai)
    `[text-bison](https://cloud.google.com/vertex-ai/docs/generative-ai/model-reference/text)`
    natural language [foundation model](https://cloud.google.com/vertex-ai/docs/generative-ai/learn/models#foundation_models)
    [[1](https://cloud.google.com/bigquery/docs/reference/standard-sql/bigqueryml-syntax-generate-text#:~:text=GENERATE_TEXT%20function,%20which%20lets%20you,Sentiment%20Analysis)].
  prefs: []
  type: TYPE_NORMAL
- en: 'It works in the following way [[1](https://cloud.google.com/bigquery/docs/reference/standard-sql/bigqueryml-syntax-generate-text#:~:text=GENERATE_TEXT%20function,%20which%20lets%20you,Sentiment%20Analysis)]:'
  prefs: []
  type: TYPE_NORMAL
- en: '***First***, it sends requests to a BigQuery ML remote model representing a
    Vertex AI `text-bison` natural language foundation model (LLM).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Then***, it returns the response with defined input parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This means that different *function parameters* and the *input prompt design*
    (prompt instructions for analysis) affect the LLM’s response.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this said, the following function-specific parameters can be passed to
    the *GENERATE_TEXT* function and affect the response quality [[1](https://cloud.google.com/bigquery/docs/reference/standard-sql/bigqueryml-syntax-generate-text#:~:text=GENERATE_TEXT%20function,%20which%20lets%20you,Sentiment%20Analysis)]:'
  prefs: []
  type: TYPE_NORMAL
- en: '**#1:** `model` [`STRING`] → specifies the name of a remote model that uses
    one of the `text-bison` Vertex AI LLMs.'
  prefs: []
  type: TYPE_NORMAL
- en: '**#2:** `query_statement` [`STRING`] → specifies the SQL query that is used
    to generate the prompt data.'
  prefs: []
  type: TYPE_NORMAL
- en: '**#3:** `max_output_tokens` [`INT64`] → sets the maximum number of tokens that
    the model outputs. For shorter responses, the lower value can be specified.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Note***: A token might be smaller than a word and is approximately four
    characters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**#4:** `temperature` [`FLOAT64`] → argument in the range`[0.0,1.0]` that is
    used for sampling during the response generation, which occurs when `top_k` and
    `top_p` are applied.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Note:*** The argument presents the degree of randomness in token selection,
    i.e., the lower values are good for prompts that require a more deterministic
    response, while higher values can lead to more diverse results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**#5:** `top_k` [`FLOAT64`] → argument in the range`[1,40]` that changes how
    the model selects tokens for output.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Note:*** To get fewer random responses, lower values should be specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**#6:** `top_p` [`FLOAT64`] → argument in the range`[0.0,1.0]` that changes
    how the model selects tokens for output.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Note:*** To get fewer random responses, lower values should be specified.
    Tokens are selected from the most probable (based on the`top_k` value) to the
    least probable until the sum of their probabilities equals the `top_p` value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After we understand the purpose of the function and the role of each parameter,
    we can start to demo how the BigQuery *GENERATE_TEXT* function *c*an be used.
  prefs: []
  type: TYPE_NORMAL
- en: The 4-step methodology for using the function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will present four methodological steps for testing the generative
    AI function *GENERATE_TEXT*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/75f192b921bf431562d0830f63059cb9.png)'
  prefs: []
  type: TYPE_IMG
- en: GENERATE_TEXT function workflow [Image by author]
  prefs: []
  type: TYPE_NORMAL
- en: 'In summary, the methodology consists of:'
  prefs: []
  type: TYPE_NORMAL
- en: Generation of the small mockup dataset using ChatGPT and exporting it to a Google
    Sheets document.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creation of the BigQuery dataset on top of the Google Sheets document.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the connection between Google service Vertex AI and BQ in order to
    use a remote generative AI model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hands-on use-case examples for testing function *GENERATE_TEXT* on top of the
    mockup dataset in BigQuery.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More context for every step is shown in the subsections below.
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 1:* ***Generate a mockup dataset using ChatGPT***'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As I didn’t have a real-life dataset, I decided to create a mockup dataset for
    testing purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, I used ChatGPT by entering the following prompt text:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“I would need to automatically generate customer reviews for 50 different
    imaginary hair products.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*For each product, I would need 2 positive, 2 negative, and 1 neutral review.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*In addition, I would expect reviews to be at least 4 sentences long and contain
    different information: product name, location of the store where the product was
    bought, and price of the product.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*In negative reviews, please include different reasons, like product quality
    issues, price issues, and delivery issues.”*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The outcome was a small dataset table with five attributes (previewed in the
    image below):'
  prefs: []
  type: TYPE_NORMAL
- en: '***product_name —*** contains values of the fake product names,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***review_type —*** contains the review sentiment type (positive, negative
    or neutral),'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***store_location —*** contains the random city and state name,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***product_price —*** contains the random product price in dollars***,*** and'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***product_review—***contains the five-sentence-long fake product review text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/fa3e3249317a2d778593bff93708693a.png)'
  prefs: []
  type: TYPE_IMG
- en: BigQuery mockup dataset preview [Image by author]
  prefs: []
  type: TYPE_NORMAL
- en: The complete dataset can be found in the Git repository [here](https://github.com/CassandraOfTroy/bigquery-generate_text-AI_function/blob/main/product_review_table%20-%20ChatGPT_Mockup_Reviews.csv)
    [4].
  prefs: []
  type: TYPE_NORMAL
- en: After preparing the mockup dataset and storing it in Google Sheets, the next
    step is transferring it to BigQuery.
  prefs: []
  type: TYPE_NORMAL
- en: '*Step* ***2:*** *Create a BQ table on top of the Google Sheet document*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: My go-to method when I have a small dataset, which I need to tweak or change
    often manually, is to create a BigQuery table on top of the editable Google Sheet
    document.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, the following substeps are needed [[2](https://supermetrics.com/blog/bigquery-query-google-sheets?utm_source=google&utm_medium=cpc&utm_campaign=G_CEU_PPC_Prod_GS&utm_adgroup=g-sheets-dsa&utm_category=search-nonbrand&utm_term=&location=&google_ads_redirect=true&hsa_acc=9495023515&hsa_cam=20418026394&hsa_grp=151612487469&hsa_ad=668219731129&hsa_src=g&hsa_tgt=dsa-1517773330948&hsa_kw=&hsa_mt=&hsa_net=adwords&hsa_ver=3&gad_source=1&gclid=CjwKCAiAmZGrBhAnEiwAo9qHiUUYA_iYfKl6S-mCF7nbb7e2Xzia1ny9M5OwHTw2CQGwai6ZL4CY9BoC1BMQAvD_BwE)]:'
  prefs: []
  type: TYPE_NORMAL
- en: '***Substep #1: Create a dataset and table in the BigQuery project by specifying
    the file location and format***'
  prefs: []
  type: TYPE_NORMAL
- en: The `CREATE TABLE` option located in the top-right corner of the BigQuery environment
    should be selected for the creation of the new dataset and table. Values marked
    with a star sign (*******) need to be entered, as shown in the image below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a509be96d50efc83bb4e722d980288b1.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a BQ dataset and table on top of the mockup dataset in Google Sheets
    [Image by author]
  prefs: []
  type: TYPE_NORMAL
- en: As visible from the image above, the name of the newly created BQ dataset is
    `hair_shop` , while the name of the newly created table is `product_review_table.`
  prefs: []
  type: TYPE_NORMAL
- en: 'Important note to keep in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: In case you don’t want to define the table schema in the `Schema` section shown
    in the image above, all imported attributes from Google Sheets will have the datatype
    `STRING` by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Substep #2: Query the mockup dataset in the BQ***'
  prefs: []
  type: TYPE_NORMAL
- en: The second substep is to simply explore the `hair_shop.product_review_table`dataset
    directly in BigQuery.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/28426c2e311e275229f48f9e0d88ef1c.png)'
  prefs: []
  type: TYPE_IMG
- en: Query the mockup dataset in BQ [Image by author]
  prefs: []
  type: TYPE_NORMAL
- en: Now that you can access your mockup dataset in BQ, it’s time to connect the
    generative AI remote model to it.
  prefs: []
  type: TYPE_NORMAL
- en: '*Step* ***3:*** *Connect the Vertex AI service to BQ*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A detailed explanation that served as a guideline for this step can be found
    in Google’s documentation [here](https://cloud.google.com/bigquery/docs/generate-text-tutorial#create_a_connection)
    [3].
  prefs: []
  type: TYPE_NORMAL
- en: 'To summarize the provided Google tutorial, the three main substeps for connecting
    the Vertex AI to BQ are:'
  prefs: []
  type: TYPE_NORMAL
- en: '***Substep #1:*** Create a cloud resource connection from BigQuery to get the
    connection’s service account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Substep #2:*** Grant the connection’s service account an appropriate role
    to access the Vertex AI service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Substep #3:*** Create the `text-bison` remote model that represents a hosted
    Vertex AI large language model in the created BigQuery dataset `hair_shop`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once these substeps are concluded, a new object `Model` will be visible within
    the `hair_shop` dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0bc518332fed9cee2cf5b52cdcfa4467.png)'
  prefs: []
  type: TYPE_IMG
- en: A preview of the new database object `Model` in the selected BQ dataset [Image
    by author]
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the magic can begin, and we can start using the *GENERATE_TEXT* function.
  prefs: []
  type: TYPE_NORMAL
- en: '*Step* ***4: Use the*** `*GENERATE_TEXT*` *function in BQ*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this step, we will focus on two use cases for testing the function usage:
    ***sentiment*** ***analysis*** and ***entity extraction***.'
  prefs: []
  type: TYPE_NORMAL
- en: The reason for selecting these two use cases is that we already created two
    attributes in the input mockup dataset (`review_type` and `product_review)`which
    can be used to test the function results. With function results, we mean validating
    the accuracy of the AI-generated values within the new attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now present the concrete input-output flow for generating the new attributes
    for each use case.
  prefs: []
  type: TYPE_NORMAL
- en: '***Sentiment analysis example***'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The query for sentiment analysis is shown in the code block below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The breakdown of the query is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '***Outer SELECT statement:***'
  prefs: []
  type: TYPE_NORMAL
- en: The outer query selects the newly generated string attribute `review_sentiment`
    obtained from LLM by applying the `ML.GENERATE_TEXT` function to the `hair_shop.llm_model`
    object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition, it selects all other columns from the input dataset `hair_shop.product_review_table`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Inner SELECT statement:***'
  prefs: []
  type: TYPE_NORMAL
- en: The inner query statement selects a `CONCAT` function with a specific prompt
    instruction to each `product_review` from the input dataset `hair_shop.product_review_table`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In other words, the prompt instruction guides the model to extract a one-word
    sentiment (positive, negative, or neutral) from the `product_review` attribute.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***STRUCT for model parameters:***'
  prefs: []
  type: TYPE_NORMAL
- en: '`temperature: 0.1` - a lower value of 0.1 will lead to more predictable text
    generation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_output_tokens: 1`- limits the model''s output to 1 token (sentiment analysis
    outcome can be either positive, negative, or neutral).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`top_p: 0.1` is influencing the likelihood distribution of the next token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`top_k: 1` is restricting the number of top tokens considered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After triggering the presented query, the first five outcomes were analysed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/72c6a4277dbb9312eb9b01b097525f33.png)'
  prefs: []
  type: TYPE_IMG
- en: The sentiment analysis outcome of the GENERATE_TEXT function [Image by author]
  prefs: []
  type: TYPE_NORMAL
- en: As visible from the image, the newly generated attribute named `review_sentiment`
    is added to the mockup dataset. The values of the `review_sentiment` attribute
    were compared to the values in the `review_type` attribute, and their records
    matched.
  prefs: []
  type: TYPE_NORMAL
- en: Following the sentiment analysis outcome, the aim was to identify the reason
    behind every sentiment, i.e., to perform entity extraction.
  prefs: []
  type: TYPE_NORMAL
- en: '***Entity extraction example***'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The query for entity extraction analysis is shown in the code block below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The breakdown of the query is analogous to the sentiment analysis query breakdown,
    except that the prompt instruction and model parameter values have been adjusted
    for entity extraction analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'After triggering the presented query, the first five outcomes were analysed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3011b6722be6624291f5ed5515b21956.png)'
  prefs: []
  type: TYPE_IMG
- en: The entity extraction analysis outcome of the GENERATE_TEXT function [Image
    by author]
  prefs: []
  type: TYPE_NORMAL
- en: The results of the `review_reason` attribute were compared to the values of
    the `product_review` attribute. Like in the previous example, the outcomes were
    matching.
  prefs: []
  type: TYPE_NORMAL
- en: And here you have it, folks. This was the tutorial that showed the two use cases
    for creating new attributes from unstructured text by using only SQL and prompt
    text. All with the aid of the new generative AI function in BigQuery.
  prefs: []
  type: TYPE_NORMAL
- en: We can now share a short summary of this blog post.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal of this blog post was to present the usage of the new `GENERATE_TEXT`
    ML function in BigQuery.
  prefs: []
  type: TYPE_NORMAL
- en: With this function, data professionals who are SQL-oriented now have options
    to create new insights (attributes) from the unstructured text stored directly
    in the BQ data warehouse table.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, the function enables data professionals to leverage [NLP machine
    learning](https://en.wikipedia.org/wiki/Natural_language_processing) tasks directly
    within the BigQuery environment.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, it overcomes the knowledge gap between the data professionals who
    are developing new analytical insights using Python and the ones who are more
    database-oriented.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, I will conclude this blog post with one saying: “Everyone can code
    and do NLP analysis in BigQuery with SQL knowledge and a good prompt structure.”'
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading my post. Stay connected for more stories on [Medium](https://medium.com/@martosi/subscribe)
    and [Linkedin](https://www.linkedin.com/in/martosi/).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Knowledge references
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[[1](https://cloud.google.com/bigquery/docs/reference/standard-sql/bigqueryml-syntax-generate-text#:~:text=GENERATE_TEXT%20function,%20which%20lets%20you,Sentiment%20Analysis)]
    Google article “The ML.GENERATE_TEXT function”, accessed November 10th 2023, [https://cloud.google.com/bigquery/docs/reference/standard-sql/bigqueryml-syntax-generate-text](https://cloud.google.com/bigquery/docs/reference/standard-sql/bigqueryml-syntax-generate-text)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[[2](https://supermetrics.com/blog/bigquery-query-google-sheets?utm_source=google&utm_medium=cpc&utm_campaign=G_CEU_PPC_Prod_GS&utm_adgroup=g-sheets-dsa&utm_category=search-nonbrand&utm_term=&location=&google_ads_redirect=true&hsa_acc=9495023515&hsa_cam=20418026394&hsa_grp=151612487469&hsa_ad=668219731129&hsa_src=g&hsa_tgt=dsa-1517773330948&hsa_kw=&hsa_mt=&hsa_net=adwords&hsa_ver=3&gad_source=1&gclid=CjwKCAiAmZGrBhAnEiwAo9qHiUUYA_iYfKl6S-mCF7nbb7e2Xzia1ny9M5OwHTw2CQGwai6ZL4CY9BoC1BMQAvD_BwE)]
    Supermetrics article “Google Sheets to BigQuery: a step-by-step guide”, accessed
    November 22nd 2023, [https://t.ly/ZZ2lN](https://t.ly/ZZ2lN)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[[3](https://cloud.google.com/bigquery/docs/generate-text-tutorial#create_a_connection)]
    Google tutorial “Generate text by using the ML.GENERATE_TEXT function”, section
    “Create a connection”, accessed November 10th 2023, [https://cloud.google.com/bigquery/docs/generate-text#generate_text](https://cloud.google.com/bigquery/docs/generate-text-tutorial#create_a_connection)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[[4](https://github.com/CassandraOfTroy/bigquery-generate_text-AI_function/tree/main)]
    Git repository by author: [https://github.com/CassandraOfTroy/bigquery-generate_text-AI_function/tree/main](https://github.com/CassandraOfTroy/bigquery-generate_text-AI_function/tree/main)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
