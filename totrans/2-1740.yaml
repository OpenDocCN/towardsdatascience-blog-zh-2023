- en: 'Python to Rust: Everything You Must Know About Virtual Environments'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Python到Rust：你必须了解的虚拟环境的一切
- en: 原文：[https://towardsdatascience.com/python-to-rust-everything-you-must-know-about-virtual-environments-c1cd0e529835](https://towardsdatascience.com/python-to-rust-everything-you-must-know-about-virtual-environments-c1cd0e529835)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/python-to-rust-everything-you-must-know-about-virtual-environments-c1cd0e529835](https://towardsdatascience.com/python-to-rust-everything-you-must-know-about-virtual-environments-c1cd0e529835)
- en: Python pro to Rust rookie — a data scientist’s transition tale
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从Python专家到Rust新手——一位数据科学家的过渡故事
- en: '[](https://dennisbakhuis.medium.com/?source=post_page-----c1cd0e529835--------------------------------)[![Dennis
    Bakhuis](../Images/4dc6dca031cdedbb044a1d0a6b142186.png)](https://dennisbakhuis.medium.com/?source=post_page-----c1cd0e529835--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c1cd0e529835--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c1cd0e529835--------------------------------)
    [Dennis Bakhuis](https://dennisbakhuis.medium.com/?source=post_page-----c1cd0e529835--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://dennisbakhuis.medium.com/?source=post_page-----c1cd0e529835--------------------------------)[![Dennis
    Bakhuis](../Images/4dc6dca031cdedbb044a1d0a6b142186.png)](https://dennisbakhuis.medium.com/?source=post_page-----c1cd0e529835--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c1cd0e529835--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c1cd0e529835--------------------------------)
    [Dennis Bakhuis](https://dennisbakhuis.medium.com/?source=post_page-----c1cd0e529835--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c1cd0e529835--------------------------------)
    ·7 min read·Dec 26, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c1cd0e529835--------------------------------)
    ·7分钟阅读·2023年12月26日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/114983101b49df51f54b21054860ffc1.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/114983101b49df51f54b21054860ffc1.png)'
- en: 'Figure 1: The snake and the crab at the cargo bay. ([Crab](https://unsplash.com/photos/a-group-of-red-mushrooms-ZWrsjySNfxY);
    [Snake](https://unsplash.com/photos/close-up-photo-of-brown-and-gray-snake-VUr5nmC1IM4);
    [containers](https://unsplash.com/photos/assorted-color-filed-intermodal-containers-tjX_sniNzgQ);
    composition by author).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：货物仓库里的蛇和螃蟹。 ([螃蟹](https://unsplash.com/photos/a-group-of-red-mushrooms-ZWrsjySNfxY);
    [蛇](https://unsplash.com/photos/close-up-photo-of-brown-and-gray-snake-VUr5nmC1IM4);
    [集装箱](https://unsplash.com/photos/assorted-color-filed-intermodal-containers-tjX_sniNzgQ);
    由作者编排)
- en: Embarking on the journey from Python to Rust can feel like swapping a trusty
    lightsaber for a new kind of blade — exciting but a bit daunting. As a data scientist
    deeply familiar with Python’s quirks, diving into the Rust world is a thrilling
    new challenge. In this article, I’ll share my experiences and insights, comparing
    how these two powerful languages handle a key aspect of software development —
    particularly focusing on (virtual) environments and dependency management.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 从Python转到Rust的旅程就像把一个可靠的光剑换成一种新的刀刃——既令人兴奋又略显令人生畏。作为一个对Python的特性非常熟悉的数据科学家，进入Rust的世界是一个令人激动的新挑战。在本文中，我将分享我的经历和见解，比较这两种强大语言如何处理软件开发的一个关键方面——特别是关注（虚拟）环境和依赖管理。
- en: When using Python, one of the first things you learn is to work in so called
    *virtual environments*. It is a crucial tool for managing dependencies and isolating
    project-specific packages such that they do not interfere with other projects
    or the system-wide Python installation. I wrote an article on how I [manage Python](/environments-conda-pip-aaaaah-d2503877884c)
    a few years ago but it is still relevant (it changed a bit with [*micromamba*](https://mamba.readthedocs.io/en/latest/user_guide/micromamba.html)
    and [*poetry*](https://python-poetry.org/), let me know if I should write an article
    about that).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Python时，你首先学到的事情之一就是在所谓的*虚拟环境*中工作。这是一个管理依赖关系和隔离项目特定包的关键工具，以避免它们干扰其他项目或系统范围的Python安装。我几年前写了一篇关于如何[管理Python](/environments-conda-pip-aaaaah-d2503877884c)的文章，但它仍然适用（它稍微变化了一些，涉及到[*micromamba*](https://mamba.readthedocs.io/en/latest/user_guide/micromamba.html)和[*poetry*](https://python-poetry.org/)
    ，如果需要，我可以写一篇关于这方面的文章）。
- en: 'TLDR: Just use *cargo* and you will be fine most of the time — Dennis'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'TLDR: 只需使用*cargo*，大多数情况下你就会没问题——Dennis'
- en: 'After installing Rust using [*rustup*](https://rustup.rs/), my first question
    was: *how should I create a virtual environment?* To me this is a very sensible
    question as Rust also can use many packages (called Crates) as dependencies. The
    truth is that *cargo* solves this problem very elegantly. Below are my findings
    in comparing virtual environments and pip to the Rust’s *cargo* build system.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用[*rustup*](https://rustup.rs/)安装 Rust 之后，我的第一个问题是：*我应该如何创建一个虚拟环境？* 对我来说，这是一个非常有意义的问题，因为
    Rust 也可以使用许多包（称为 Crates）作为依赖项。事实上，*cargo* 非常优雅地解决了这个问题。以下是我在比较虚拟环境和 pip 与 Rust
    的 *cargo* 构建系统时的发现。
- en: '*Disclaimer: As I navigate these Rustic landscapes, my proficiency with the
    language may still be a bit Rusty (pun intended). Join me in this learning adventure
    as we unravel the nuances of Cargo and bid farewell to the familiar embrace of
    virtual environments.*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*免责声明：在我探索这些 Rust 领域时，我对语言的熟练程度可能仍有些生疏（玩笑话）。加入我，在这个学习冒险中揭开 Cargo 的细微差别，告别虚拟环境的熟悉拥抱。*'
- en: 1\. Single global location for packages
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 包的单一全局位置
- en: Virtual environments in Python are created with tools like [*venv*](https://docs.python.org/3/library/venv.html),
    [*virtualenv*](https://virtualenv.pypa.io/en/latest/), or [*conda*](https://docs.conda.io/projects/conda/en/stable/user-guide/getting-started.html)
    on a per-project basis. Under the hood, these systems create a separate folder
    which holds the Python distribution and all its packages. Now, when we install
    a package with *pip* or *conda*, the package and all its dependencies are installed
    in this isolated folder. These virtual environment tools do something that is
    similar to “[*chroot*](https://en.wikipedia.org/wiki/Chroot)”, but for the Python
    installation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的虚拟环境是使用像[*venv*](https://docs.python.org/3/library/venv.html)、[*virtualenv*](https://virtualenv.pypa.io/en/latest/)或[*conda*](https://docs.conda.io/projects/conda/en/stable/user-guide/getting-started.html)这样的工具按项目创建的。在底层，这些系统创建一个单独的文件夹，该文件夹包含
    Python 发行版及其所有包。现在，当我们使用 *pip* 或 *conda* 安装一个包时，该包及其所有依赖项会被安装在这个隔离的文件夹中。这些虚拟环境工具所做的事情类似于“[*chroot*](https://en.wikipedia.org/wiki/Chroot)”，但针对
    Python 安装。
- en: Interpreted languages like Python, dependency resolution often happens at runtime.
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 解释型语言如 Python，依赖关系解析通常发生在运行时。
- en: 'In the case of interpreted languages like Python, dependency resolution often
    happens at runtime. This means that when a Python script is executed, the interpreter
    needs to resolve and load the required dependencies dynamically. Virtual environments
    help manage these dependencies, providing a clean separation between projects
    to avoid conflicts. Below is a typical workflow in Python:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像 Python 这样的解释型语言，依赖关系解析通常发生在运行时。这意味着当 Python 脚本执行时，解释器需要动态解析和加载所需的依赖项。虚拟环境帮助管理这些依赖关系，为项目提供了一个干净的隔离，以避免冲突。以下是
    Python 中的典型工作流程：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Rust on the other hand has a package manager called [*cargo*](https://doc.rust-lang.org/cargo/)
    which uses a single global location, i.e. no user-specific virtual environments.
    It can do this because of the *cargo build system*. When you create a project
    using *cargo* it centers around the `Cargo.toml` file. This is the so-called project
    file that defines details of the project, including its dependencies with semantic
    versioning. Using `cargo add <crate>` you add a dependency to this project-file,
    which is then downloaded during build. As we are using the *cargo* to build and
    cargo takes care of selecting/downloading the right dependencies, there is no
    need for a *chroot-like* mechanic as with Python virtual environments.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Rust 有一个叫做[*cargo*](https://doc.rust-lang.org/cargo/)的包管理器，它使用一个全球唯一的位置，即没有用户特定的虚拟环境。它之所以能做到这一点，是因为
    *cargo 构建系统*。当你使用 *cargo* 创建一个项目时，它围绕 `Cargo.toml` 文件展开。这是所谓的项目文件，定义了项目的详细信息，包括其依赖项及语义版本控制。使用
    `cargo add <crate>` 你将依赖项添加到这个项目文件中，这些依赖项会在构建过程中下载。由于我们使用 *cargo* 来构建，并且 cargo
    负责选择/下载正确的依赖项，因此不需要像 Python 虚拟环境中的 *chroot-like* 机制。
- en: By using cargo everything is already in a virtual environment.
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用 *cargo*，一切都已经在虚拟环境中。
- en: 'The workflow for a new project using *cargo* looks very similar that of Python,
    however, under the hood is it is definitely a bit smarter:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 *cargo* 创建新项目的工作流程看起来与 Python 非常相似，但在底层，它确实要聪明一些：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: During build using cargo, the correct version of the package required is read
    from `Cargo.toml` and loaded from the global register (by default at `$HOME/.cargo`).
    This is of course mostly possible because Rust is a compiled language and much
    harder to do in Python which needs to resolve the dependencies itself during runtime.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 cargo 构建期间，需要的正确版本的包从 `Cargo.toml` 读取并从全局注册表中加载（默认情况下在 `$HOME/.cargo`）。这主要是因为
    Rust 是编译语言，而在运行时需要解析依赖的 Python 实现起来要困难得多。
- en: 2\. Built-in dependency resolution
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 内置的依赖解析
- en: Looking at Python, there is no built-in dependency resolution system. Yes, using
    `pip freeze` you can get an overview of the installed packages however, there
    is no guarantee that it also captures all indirect dependencies. This means that
    it cannot capture the complete complexity of the environment.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 看看 Python，没有内置的依赖解析系统。是的，使用 `pip freeze` 你可以获得已安装包的概述，但没有保证它也能捕获所有间接依赖。这意味着它不能捕获环境的完整复杂性。
- en: Pip freeze might not be enough to capture the full environment
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Pip freeze 可能不足以捕获完整的环境
- en: 'To solve this issue, dependency resolvers from other languages such a Ruby
    and JavaScript started using so-called *lock-files*. These lock-files capture
    all version information from all dependencies and also the dependencies of dependencies.
    Python gets similar functionality using [*Pipenv*](https://pipenv.pypa.io/en/latest/)
    or my personal favorite: [*Python Poetry*](https://python-poetry.org/) but there
    is no built-in tool when downloading Python.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，其他语言如 Ruby 和 JavaScript 的依赖解析器开始使用所谓的 *锁文件*。这些锁文件捕获了所有依赖项及其依赖项的版本信息。Python
    通过 [*Pipenv*](https://pipenv.pypa.io/en/latest/) 或我个人最喜欢的 [*Python Poetry*](https://python-poetry.org/)
    获得类似的功能，但在下载 Python 时没有内置工具。
- en: Rust’s Cargo, on the other hand, has built-in dependency resolution through
    the use of a lock file. When you use `cargo build` or `cargo run`, it checks the
    `Cargo.lock` file to ensure that the exact versions of all dependencies are used.
    This lock file captures the entire dependency tree, including transitive dependencies,
    making it a comprehensive and deterministic representation of the project's environment.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 的 Cargo 通过使用锁文件具有内置的依赖解析功能。当你使用 `cargo build` 或 `cargo run` 时，它会检查 `Cargo.lock`
    文件，以确保使用所有依赖项的确切版本。这个锁文件捕获了整个依赖树，包括传递依赖，形成了项目环境的全面且确定性的表示。
- en: The `Cargo.lock` file serves as a comprehensive snapshot of the dependencies
    at a specific point in time. It contains precise version information for not only
    the direct dependencies specified in the `Cargo.toml` file but also all transitive
    dependencies.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cargo.lock` 文件作为特定时间点的依赖快照。它包含了不仅是 `Cargo.toml` 文件中指定的直接依赖的准确版本信息，还有所有传递依赖的版本信息。'
- en: For example, if Project A depends on Library B version 1.0.0, and Library B
    depends on Library C version 2.1.0, both versions are recorded in the `Cargo.lock`
    file. This ensures that everyone working on the project, regardless of their environment,
    gets the exact same set of dependencies. Cargo is extremely flexible that it can
    support even multiple versions of the same dependency within the same compilation
    target.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果项目 A 依赖于库 B 版本 1.0.0，而库 B 依赖于库 C 版本 2.1.0，则这两个版本都会记录在 `Cargo.lock` 文件中。这确保了所有参与项目的人员，无论其环境如何，都得到完全相同的依赖集合。Cargo
    非常灵活，可以支持即使在同一编译目标中也能有多个版本的相同依赖。
- en: '![](../Images/a41ab7d2b40b768ae304bf51c76f0cbe.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a41ab7d2b40b768ae304bf51c76f0cbe.png)'
- en: 'figure 2: In the building phase Cargo collects all required dependencies. In
    the running phase, the dependencies are already linked inside the executable.
    (Diagram by author).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2：在构建阶段，Cargo 收集所有必需的依赖。在运行阶段，依赖项已被链接到可执行文件中。（图由作者提供）。
- en: Using Cargo’s lock file eliminates the need for developers to manually manage
    and synchronize dependency versions across different environments. It provides
    a consistent and reproducible build environment, making collaboration and deployment
    more reliable. This is a perk it gets from being a compiled language and we might
    consider this an unfair comparison.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Cargo 的锁文件消除了开发者手动管理和同步不同环境中依赖版本的需要。它提供了一个一致且可重现的构建环境，使得协作和部署更加可靠。这是编译语言的一大优势，我们可以认为这是一种不公平的比较。
- en: 3\. Compatibility of packages and Rust itself
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 包和 Rust 自身的兼容性
- en: In software engineering, compatibility is a cornerstone that ensures a project
    functions smoothly across various environments. When we compare Rust’s *cargo*
    with Python’s *pip*, we can clearly see that in Rust this has been carefully thought
    through while in Python it has grown to what it is now.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件工程中，兼容性是确保项目在各种环境下顺利运行的基石。当我们比较 Rust 的 *cargo* 与 Python 的 *pip* 时，可以清楚地看到
    Rust 在这方面经过了精心考虑，而 Python 则是随着时间的推移逐渐发展到现在的状态。
- en: Compatibility in Rust is not just a consideration; it’s a cultural commitment.
    The community places a strong emphasis on maintaining a application programming
    interface (API) compatibility for major versions. This is clearly reflected with
    the *cargo* package manager, which enforces [semantic versioning](https://semver.org/).
    This results in a reliable and predictable development environment where dependencies
    are expected to play nicely with each other.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 中的兼容性不仅仅是一个考虑因素，它是一种文化承诺。社区非常重视主要版本的应用程序编程接口（API）兼容性。这在 *cargo* 包管理器中得到了清晰体现，它强制执行
    [语义化版本控制](https://semver.org/)。这使得开发环境可靠且可预测，其中依赖项预期能够良好配合。
- en: Contrast this with the Python ecosystem, where compatibility can sometimes be
    a delicate matter. Upgrading Python or its dependencies might lead to unexpected
    issues, and the impact might only surface at runtime. Unlike Rust, where potential
    problems are more likely to be identified at build time, Python developers often
    only see the problems after deployment.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 与此相比，Python 生态系统中的兼容性有时可能是一个微妙的问题。升级 Python 或其依赖项可能会导致意外的问题，这些问题可能只在运行时显现。与
    Rust 不同，Rust 在构建时更容易识别潜在问题，而 Python 开发者通常只有在部署后才会发现这些问题。
- en: 'Example scenario: upgrading Python 3.7 to Python 3.9'
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例场景：将 Python 3.7 升级到 Python 3.9
- en: Imagine you have a Python project running on Python 3.7\. This project includes
    a script that heavily relies on dictionaries. In Python 3.7, dictionaries retain
    insertion order as an implementation detail, but this wasn’t officially guaranteed.
    You decide to upgrade your Python environment to Python 3.9 for performance improvements
    and new language features.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你有一个运行在 Python 3.7 上的 Python 项目。该项目包含一个严重依赖字典的脚本。在 Python 3.7 中，字典的插入顺序作为实现细节被保留，但这并没有得到正式保证。你决定将
    Python 环境升级到 Python 3.9，以便获得性能改进和新语言特性。
- en: After the upgrade, you notice that your script behaves differently. In Python
    3.7, you might have unintentionally relied on the order of items in dictionaries
    for some operations, even though it wasn’t officially part of the language specification.
    If your code relied on the order of elements in a dictionary and was written without
    the awareness that this behavior was not guaranteed in 3.7, it might behave unpredictably
    or break in Python 3.9 if there were any subtle changes in implementation.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 升级后，你会注意到你的脚本表现不同。在 Python 3.7 中，你可能无意中依赖了字典中项目的顺序来进行某些操作，即使这并未正式成为语言规范的一部分。如果你的代码依赖于字典中元素的顺序，并且在编写时没有意识到这种行为在
    3.7 中并不被保证，那么如果在 Python 3.9 中实现有任何细微变化，它可能会表现得不可预测或中断。
- en: This example illustrates how upgrading even within the same major version of
    Python (Python 3.x) can lead to unexpected issues, especially when the code relies
    on behaviors that were not formally specified in the language but were merely
    by-products of a particular implementation. In this example we ignore the many
    feature that are added within the minor versions, thereby, often changing the
    preferred workflow. Also, the deprecated functions are ignored. For example, some
    methods and functions are removed within Python, even within minor versions.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子说明了即使在同一主要版本的 Python（Python 3.x）内升级也可能导致意外的问题，特别是当代码依赖于未正式指定在语言中的行为时，而这些行为只是某一特定实现的副产品。在这个例子中，我们忽略了在次版本中添加的许多功能，这些功能常常改变了首选的工作流程。同时，也忽略了被弃用的函数。例如，一些方法和函数在
    Python 中被移除，即使在次版本中。
- en: Rust’s strong focus on stable API maintenance across minor versions ensures
    compatibility and reduces upgrade-related issues. Its rigorous semantic versioning
    and Cargo’s dependency management minimize unexpected changes. This makes Rust
    updates more predictable and less disruptive for developers.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 对次版本中稳定 API 维护的强烈关注确保了兼容性，并减少了与升级相关的问题。其严格的语义版本控制和 Cargo 的依赖管理最小化了意外变化。这使得
    Rust 的更新对于开发者来说更具可预测性和较少干扰。
- en: Wrap up
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Learning and working with Rust really highlighted the big differences in how
    each language handles environment and dependency management. Python’s long history
    has led to the evolution of various tools like venv and Poetry, each addressing
    the language’s dynamic nature and runtime dependency resolution challenges. Despite
    their effectiveness, these solutions often feel more like necessary workarounds
    rather than integrated components of the language.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 学习和使用 Rust 真的突显了每种语言在环境和依赖管理上的巨大差异。Python 的悠久历史促成了各种工具的发展，如 venv 和 Poetry，它们都在应对语言的动态特性和运行时依赖解决挑战。尽管这些工具有效，但它们往往更像是必要的变通方法，而不是语言的集成组件。
- en: In contrast, Rust’s streamlined approach with Cargo demonstrates its commitment
    to a more integrated and user-friendly experience. Cargo’s efficient dependency
    management, free from the need for external tools or ‘PATH’ manipulations, showcases
    Rust’s modern approach to software development.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，Rust 通过 Cargo 的简化方法展示了其对更集成和用户友好体验的承诺。Cargo 高效的依赖管理，无需外部工具或‘PATH’操作，展示了
    Rust 现代化的软件开发方法。
- en: Learning both, Python and Rust really shines a light on what makes each language
    special and gives us a sneak peek into where software development is heading.
    I think that both Python and Rust still have different goals but we can see that
    these are growing more and more towards each other. Also with the Machine Learning
    community moving slowly towards Rust, and language features from Rust made possible
    in Python for more mature products. I am excited what the future will bring for
    both, Python and Rust!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 学习 Python 和 Rust 确实突显了每种语言的独特之处，并让我们窥见了软件开发的未来。我认为 Python 和 Rust 仍然有不同的目标，但可以看到它们越来越趋同。同时，随着机器学习社区逐渐向
    Rust 迈进，Rust 的语言特性也被引入 Python，用于更成熟的产品。我对 Python 和 Rust 的未来充满期待！
- en: I’m keen to hear your thoughts and feedback on this journey from Python to Rust.
    Let’s connect on [LinkedIn](https://linkedin.com/in/dennisbakhuis) and continue
    the conversation!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我很期待听到你对从 Python 到 Rust 的这段旅程的看法和反馈。让我们在[LinkedIn](https://linkedin.com/in/dennisbakhuis)上联系，并继续交流！
