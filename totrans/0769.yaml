- en: Dynamic filtering with Field parameters in Power BI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/dynamic-filtering-with-field-parameters-in-power-bi-520a472127d5](https://towardsdatascience.com/dynamic-filtering-with-field-parameters-in-power-bi-520a472127d5)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Field parameters are amazing! Learn how to use this feature for data modeling
    purposes and enable users to have full flexibility in the way they want data displayed!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://datamozart.medium.com/?source=post_page-----520a472127d5--------------------------------)[![Nikola
    Ilic](../Images/9fab894b9696c0dfd80c5173188b720b.png)](https://datamozart.medium.com/?source=post_page-----520a472127d5--------------------------------)[](https://towardsdatascience.com/?source=post_page-----520a472127d5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----520a472127d5--------------------------------)
    [Nikola Ilic](https://datamozart.medium.com/?source=post_page-----520a472127d5--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----520a472127d5--------------------------------)
    ·5 min read·Apr 12, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cb7756fcbed7245635b7612d01bfe4ae.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: If you follow my articles regularly, you might have noticed that I’m a big fan
    of Field parameters. This feature, introduced in May 2022, significantly reduced
    complexity and development efforts when dealing with some pretty common business
    scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve already written how you can leverage [Field parameters to bring more life
    to your Power BI reports](https://data-mozart.com/bring-life-to-field-parameters-in-power-bi/).
    However, it’s not only about data visualization, as this feature may also be used
    to solve some of the data modeling challenges in a very elegant way.
  prefs: []
  type: TYPE_NORMAL
- en: Before I show you one extremely handy use case for Field parameters that I’ve
    recently implemented, let’s first explain what are Field Params and what happens
    behind the scenes once you start using this feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a nutshell, Field params enables you to perform two actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '***1\. Dynamically change the attribute for slicing and dicing the data in
    the visual*** — meaning, dynamically switch between different columns'
  prefs: []
  type: TYPE_NORMAL
- en: '***2\. Dynamically change the metrics displayed in the visual*** — meaning,
    dynamically switch between different measures'
  prefs: []
  type: TYPE_NORMAL
- en: I hear you, I hear you…Nikola, we could have done this prior to Field Params
    as well…Yes, that’s true, but [instead of TREATAS complexity](https://data-mozart.com/daxis-dynamic-axis-in-power-bi/),
    or writing [complex and verbose SWITCH statements in DAX](https://data-mozart.com/dynamic-filtering-in-power-bi/),
    you can now set everything up with just a few clicks and without writing a single
    line of DAX code!
  prefs: []
  type: TYPE_NORMAL
- en: Looking under the hood
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s have a quick look under the hood of Field Params creation.
  prefs: []
  type: TYPE_NORMAL
- en: Once you drag the columns and/or measures in the Field Params window, Power
    BI will automatically create a new table in your data model. You may also choose
    to automatically create a slicer containing values from the Field Params and put
    it on the report page.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/872e54eef611b777aee0126064acd35e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: This table consists of three built-in columns — one is visible to an end-user,
    while the remaining two are hidden by default.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6ee15b99618c58fe677d98106c7b3553.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The first one, the name of the column that’s going to be displayed in the slicer,
    is the label exposed to a consumer. You can change the name of the column later,
    without the need to change the whole logic in the background.
  prefs: []
  type: TYPE_NORMAL
- en: This is possible because of the second column in the table, called Fields. This
    column leverages NAMEOF DAX function. NAMEOF function returns the fully qualified
    name of the model object. Why is this important? Let’s say that you want to change
    the column name from Brand to Brand name…You can do that without violating the
    Fields Param structure, as the NAMEOF function will still return the new name
    of the object. The displayed name stays unchanged, but it will refer to an underlying
    object with a different name.
  prefs: []
  type: TYPE_NORMAL
- en: The third column is a numeric one and represents the order of the elements within
    Fields Params, starting from 0.
  prefs: []
  type: TYPE_NORMAL
- en: Ok, these 3 are provided out-of-the-box once you create Field Params. However,
    as this is nothing else but the table, you can also manually extend this table
    with additional columns.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re wondering why this may be interesting, stay tuned and I show you how
    this “extendability” may be used to solve some data modeling challenges.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the stage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'My data model is fairly simple. I have a table containing data about various
    insurance products. For each product, users should be able to see earned and/or
    written premium (explaining the difference between these two KPIs is out of the
    scope of this article). Additionally, each of these KPIs might be displayed in
    local currency, EUR or USD:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2d8cbded2278fb3313958dad7e1f4c20.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The idea is to enable users to slice and dice the data based on different currencies
    (EUR, USD, local), and/or different KPIs (earned vs written).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f56a0a297903a5bb875a5a0c5564a13e.png)'
  prefs: []
  type: TYPE_IMG
- en: If the user selects EUR in the Currency slicer, only KPIs in EUR should be displayed
  prefs: []
  type: TYPE_NORMAL
- en: 'In the old client’s solution, this dynamic selection was handled by using some
    verbose DAX: a combination of the SWITCH statement and the SELECTEDVALUE function.
    This solution is not only complex, but it’s also hard to maintain: imagine that
    you want to add a new currency in the scope, or a new KPI. You would need to find
    all the measures where the logic has been applied, and adjust the measures’ definitions.'
  prefs: []
  type: TYPE_NORMAL
- en: Field parameters to the rescue!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Or, you can use Field parameters to filter the data based on the user’s selection!
    Let’s extend the Field parameters table that we previously created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2c4dfc67c1028a55f917e39ab5953230.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The first added column represents the currency of the certain option, while
    the second column represents the KPI (Premium type). I’ll rename these columns
    in my Param_Premium table to Currency and Premium Type respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now open the Model view and establish relationships between our dimension
    tables (Currency and Premium Type) and our Field params table (Param_Premium):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/87ee206560c0b67516f2d00cf886c684.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s remove all the individual columns from our table visual, and put
    the “column” from the Field parameter table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/390f35034e9503eda50fbc3cda9c5ebc.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: At first glance, it looks exactly the same as in the previous case. But, once
    I start playing around with the slicers…just look what happens!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/680a2cca2366719b9f6f2cc5aedefe6c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Works like a charm!
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Field parameters are amazing! This feature not only reduces the development
    effort for many common tasks in Power BI, and enriches the data visualization
    aspect of Power BI reports — as you witnessed, we’ve leveraged Field parameters
    for data modeling purposes and enabled our report users to have full flexibility
    in the way they want data displayed. By extending our data model with FIeld parameters
    logic, we provided a possibility to dynamically control data on the report page.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading!
  prefs: []
  type: TYPE_NORMAL
- en: '[Become a member and support thousands of authors on Medium!](https://datamozart.medium.com/membership)'
  prefs: []
  type: TYPE_NORMAL
