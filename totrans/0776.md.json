["```py\npip3 install hydra-core\n```", "```py\npython train_agent.py agent=ppo environment=pendulum_default\n```", "```py\n@hydra.main(version_base=\"1.2\", config_path='./configs', config_name='default')\ndef train(cfg: DictConfig):\n  reward = run_training(cfg)\n  return reward\n\nif __name__ == \"__main__\":\n  train() # Note the lack of parameters\n```", "```py\nconfigs/\n├── default.yaml\n├── agent\n│   ├── ddpg.yaml\n│   ├── ppo.yaml\n│   └── search_spaces\n│       ├── ddpg.yaml\n│       └── ppo.yaml\n└── environment\n    ├── pendulum_default.yaml\n    └── share_market_default.yaml\n```", "```py\ndefaults:\n    - agent: ddpg\n    - environment: pendulum_default\n```", "```py\ntrained_agent_path: ''\npolicy: \"MlpPolicy\"\nlearning_algo: \"ddpg\"\ngamma: 1.\nlearning_rate: 1e-3\nbatch_size: 32\nbuffer_size: 1e5\ntrain_freq: 1\ngradient_steps: 8\ntau: 0.005\nnoise_type: \"normal\"\nnoise_std: 0.001\nnet_arch: \"m\"\nactivation: \"relu\"\n```", "```py\nfrom torch import nn\nfrom stable_baselines3.common.noise import NormalActionNoise\n\nactivation_fn = {\"tanh\": nn.Tanh, \"relu\": nn.ReLU, \"elu\": nn.ELU, \"leaky_relu\": nn.LeakyReLU}[cfg.agent.activation]\n\nif cfg.agent.noise_type == \"normal\":\n        hyperparams[\"action_noise\"] = NormalActionNoise(\n            mean=np.zeros(cfg.environment.n_actions), sigma=cfg.agent.noise_std * np.ones(cfg.environment.n_actions)\n        )\n```", "```py\npip3 install hydra-optuna-sweeper\n```", "```py\ndefaults:\n    - agent: ddpg\n    - environment: pendulum_default\n    - agent/search_spaces@hydra.sweeper.params: ${agent}\n    - _self_\n    - override hydra/sweeper: optuna\n    - override hydra/sweeper/sampler: tpe\n\nhydra:\n    sweeper:\n        sampler:\n            seed: 234\n        direction: maximize\n        study_name: pendulum_ddpg\n        storage: null\n        n_trials: 20\n        n_jobs: 1\n```", "```py\nagent.gamma: choice(0.5, 0.7, 0.9, 0.95, 0.99)\nagent.learning_rate: tag(log, interval(1e-5, 1.))\nagent.batch_size: choice(8, 16, 32, 64, 128)\nagent.buffer_size: choice(1e4, 1e5, 1e6)\nagent.tau: choice(0.0001, 0.001, 0.005, 0.01, 0.05, 0.1)\nagent.train_freq: choice(1, 4, 8, 16, 32, 64)\nagent.gradient_steps: choice(1, 4, 8, 16, 32, 64)\nagent.noise_type: choice(\"ornstein-uhlenbeck\", \"normal\")\nagent.noise_std: interval(0.01,0.5)\nagent.net_arch: choice(\"s\",\"m\",\"l\")\nagent.activation: choice(\"tanh\", \"relu\")\n```", "```py\nchoice(\"ornstein-uhlenbeck\", \"normal\")\n\ninterval(0.01,0.5)\n\ntag(log, interval(1e-5, 1.))\n```"]