["```py\n>>> import tracemem\n```", "```py\n>>> MEMLOGS\n[MemLog(ID='tracemem import', memory=...)]\n>>> MEMPOINT(\"The second MEMPOINT\")\n>>> len(MEMLOGS)\n2\n>>> MEMPOINT(\"The third MEMPOINT\")\n>>> len(MEMLOGS)\n3\n>>> MEMLOGS\n[MemLog(ID='tracemem import', memory=...),\n MemLog(ID='The second MEMPOINT', memory=...),\n MemLog(ID='The third MEMPOINT', memory=...)]\n```", "```py\n>>> MEMPOINT()\n>>> MEMLOGS[-1].ID\n'None'\n```", "```py\n>>> MEMPOINT(\"my id\")\n>>> MEMPOINT(\"my id\")\n>>> MEMLOGS[-1].ID\n'my id-2'\n```", "```py\n>>> d = {str(i): i for i in range(10_000_000)}\n>>> MEMPOINT(\"After adding a large dict\")\n>>> del d\n>>> MEMPOINT(\"After removing this dict\")\n>>> MEMLOGS[-3:] # doctest: +SKIP\n[MemLog(ID='my id-2', memory=1929496),\n MemLog(ID='After adding a large dict', memory=1047989344),\n MemLog(ID='After removing this dict', memory=1929848)]\n```", "```py\n>>> type(MEMLOGS)\n<class 'tracemem.tracemem.MemLogsList'>\n```", "```py\n>>> lastpoint= MEMLOGS[-1]\n>>> type(lastpoint)\n<class 'tracemem.tracemem.MemLog'>\n>>> lastpoint.ID\n'After removing this list'\n>>> lastpoint.memory # doctest: +SKIP\n1929544\n```", "```py\n>>> MEMPRINT() # doctest: +SKIP\n 0   1.59 MB     → tracemem import\n 1   1.84 MB     → The second MEMPOINT\n 2   1.84 MB     → The third MEMPOINT\n 3   1.84 MB     → None\n 4   1.84 MB     → my id\n 5   1.84 MB     → my id-2\n 6   999.45 MB   → After adding a large dict\n 7   1.85 MB     → After removing this dict\n```", "```py\n>>> @MEMTRACE\n... def create_huge_list(n):\n...     return [i for i in range(n)]\n>>> li = create_huge_list(10_000_000)\n>>> del li\n>>> MEMPOINT(\"After del li\")\n>>> MEMLOGS[-3:]\n[MemLog(ID='Before create_huge_list()', memory=...),\n MemLog(ID='After create_huge_list()', memory=...),\n MemLog(ID='After del li', memory=...)]\n>>> MEMLOGS[-3:] # doctest: +SKIP\n```", "```py\n>>> MEMORY() # doctest: +SKIP\n1931664\n>>> type(MEMORY())\n<class 'int'>\n```", "```py\nimport tracemem\n\n@MEMTRACE\ndef create_huge_list(n):\n    return [i for i in range(n)]\n\nif __name__ == \"__main__\":\n    li = create_huge_list(10_000_000)\n    del li\n    MEMPOINT(\"After del li\")\n    MEMPRINT()\n```", "```py\n 0   1.12 MB     → tracemem import\n 1   1.14 MB     → Before create_huge_list()\n 2   391.28 MB   → After create_huge_list()\n 3   1.14 MB     → After del li\n```", "```py\n# code_without_tracemem.py\n\ndef create_huge_list(n):\n    return [i for i in range(n)]\n\nif __name__ == \"__main__\":\n    li = create_huge_list(10_000_000)\n    del li\n```", "```py\n$ time python code_with_tracemem.py\n 0   1.12 MB     → tracemem import\n 1   1.14 MB     → Before create_huge_list()\n 2   391.28 MB   → After create_huge_list()\n 3   1.14 MB     → After del li\n\nreal    0m11.490s\nuser    0m9.938s\nsys     0m1.547s\n$ time python code_without_tracemem.py\n\nreal    0m0.884s\nuser    0m0.266s\nsys     0m0.625s\n```", "```py\n$ time python code_with_tracemem.py\n 0   1.12 MB     → tracemem import\n 1   1.14 MB     → Before create_huge_list()\n 2   1.18 MB     → After create_huge_list()\n 3   1.14 MB     → After del li\n\nreal    0m0.268s\nuser    0m0.203s\nsys     0m0.063s\n$ time python code_without_tracemem.py\n\nreal    0m0.027s\nuser    0m0.031s\nsys     0m0.000s\n```", "```py\n>>> MEMLOGS.memories # doctest: +SKIP\n[1668032, 1933560, 1933704, 1933776,\n 1933960, 1934152, 1047994000, 1934504,\n 1935504, 411024672, 1935856]\n>>> MEMLOGS.IDs\n['tracemem import',\n 'The second MEMPOINT',\n 'The third MEMPOINT',\n 'None',\n 'my id',\n 'my id-2',\n 'After adding a large dict',\n 'After removing this dict',\n 'Before create_huge_list()',\n 'After create_huge_list()',\n 'After del li']\n```", "```py\n>>> def memory_over(memlog: tracemem.MemLog) -> bool:\n...     return memlog.memory > 5_000_000\n>>> MEMLOGS.filter(memory_over)\n[MemLog(ID='After adding a large dict', memory=...),\n MemLog(ID='After removing this dict', memory=...)]\n```", "```py\n>>> MEMLOGS.filter(lambda m: m.memory > 3_750_000)\n[MemLog(ID='After adding a list with 10 mln elements', memory=...)]\n>>> MEMLOGS.filter(lambda m: m.memory < 1_000_000)\n[]\n>>> MEMLOGS.filter(lambda m: \"after\" in m.ID.lower() or \"before\" in m.ID.lower())\n[MemLog(ID='After adding a large dict', memory=...),\n MemLog(ID='After removing this dict', memory=...)]\n```", "```py\n>>> as_MB = MEMLOGS.map(lambda m: round(m.memory / 1024 / 1024))\n>>> as_MB\n[2, 2, 2, 2, 2, 2, 999, 2, 2, 392, 2]\n>>> MEMLOGS.map(lambda m: m.ID.lower())\n['tracemem import',\n 'the second mempoint',\n 'the third mempoint',\n 'none',\n 'my id',\n 'my id-2',\n 'after adding a large dict',\n 'after removing this dict',\n 'before create_huge_list()',\n 'after create_huge_list()',\n 'after del li']\n>>> memlogs = MEMLOGS.map(lambda m: (m.ID.lower(), round(m.memory / 1024 / 1024)))\n>>> memlogs[:2]\n[('tracemem import', ...), ('the second mempoint', ...)]\n```"]