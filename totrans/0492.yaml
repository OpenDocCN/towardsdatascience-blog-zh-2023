- en: ChatGPT Advanced Data Analytics For Custom Matplotlib Well Log Plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/chatgpt-advanced-data-analytics-for-custom-matplotlib-well-log-plots-b857c68fa42](https://towardsdatascience.com/chatgpt-advanced-data-analytics-for-custom-matplotlib-well-log-plots-b857c68fa42)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Using OpenAI’s Code Interpreter to Create Well Log Plots for Petrophysics and
    Geoscience Interpretations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://andymcdonaldgeo.medium.com/?source=post_page-----b857c68fa42--------------------------------)[![Andy
    McDonald](../Images/df11d647be032aeb3d31852affb33a64.png)](https://andymcdonaldgeo.medium.com/?source=post_page-----b857c68fa42--------------------------------)[](https://towardsdatascience.com/?source=post_page-----b857c68fa42--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----b857c68fa42--------------------------------)
    [Andy McDonald](https://andymcdonaldgeo.medium.com/?source=post_page-----b857c68fa42--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----b857c68fa42--------------------------------)
    ·15 min read·Sep 18, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/825c2744d109da5e1fa631b5999278d3.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [D koi](https://unsplash.com/@dkoi?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: ChatGPT’s Code Interpreter, now renamed to [**Advanced Data Analytics**](https://www.pluralsight.com/resources/blog/data/ChatGPT-Advanced-Data-Analytics),
    has been out for some time now. It was launched on July 6th 2023, and is a plugin
    developed by OpenAI to allow users to upload data and perform analysis on it.
    This can range from cleaning the data, creating visualisations and summarising
    the data.
  prefs: []
  type: TYPE_NORMAL
- en: Rather than relying on you to write Python code to analyse your data, you can
    leverage ChatGPT by telling it what to do in plain English. From that, it will
    carry out the analysis for you.
  prefs: []
  type: TYPE_NORMAL
- en: As many of my regular readers will know, I am a big fan of [**matplotlib**](https://matplotlib.org/).
    Even though the library appears to be clunky and time-consuming to use, it can
    be used to create stunning visualisations with a little bit of effort.
  prefs: []
  type: TYPE_NORMAL
- en: After playing around with this new tool, I thought it was about time to see
    how [**ChatGPT**](https://openai.com/chatgpt) and the [**Advanced Data Analytics**](https://openai.com/blog/chatgpt-plugins)plugin
    could be used to create custom plots for working with well log data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before proceeding and due to the rising legal cases against OpenAI:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Always be cautious of the data you upload to ChatGPT as that data and your
    input could be used to train future models. If in doubt, avoid uploading any data
    and always follow your company’s policies.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Enabling Advanced Data Analytics in ChatGPT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use the Advanced Data Analytics plugin within ChatGPT, you first have to
    enable it.
  prefs: []
  type: TYPE_NORMAL
- en: This can be done by going to Settings and then selecting Beta Features. In here,
    you will see the option to turn on **Advanced Data Analysis,** which will enable
    the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2e10f058702cfa9fc8448ddb22ec8fe2.png)'
  prefs: []
  type: TYPE_IMG
- en: Enabling Advanced Data Analysis plugin in ChatGPT. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: The plugin will now be available when you start a new chat.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading and Converting Data to a Pandas Dataframe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start, we need to upload our file. For this example, I am using a well log
    data set from the [**NLOG database**](https://www.nlog.nl/datacenter/) (details
    at the end of the article). This data set contains a series of well log measurements
    obtained from an oil and gas exploration well.
  prefs: []
  type: TYPE_NORMAL
- en: To begin, we first click the plus icon on the chat input box and then select
    the file containing our data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0cd2a70d899e6c6f0ecc01d0691df742.png)'
  prefs: []
  type: TYPE_IMG
- en: The chat input for the Advanced Data Analytics plugin includes a plus (+) icon
    for uploading data. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to provide a prompt for ChatGPT. In this case, I am going to tell
    it to be a [**petrophysicist**](https://en.wikipedia.org/wiki/Petrophysics) (a
    niche role within geoscience) and that it understands well log measurements. This
    can help fine-tune some of the responses that are returned from ChatGPT.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/71ca98f7192c1ad7306477d388a2fc8b.png)'
  prefs: []
  type: TYPE_IMG
- en: Initial prompt to ChatGPT with the well log data set. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: After submitting the above input, ChatGPT will load the file and look at the
    contents.
  prefs: []
  type: TYPE_NORMAL
- en: Below is the response we get back from ChatGPT’s Advanced Data Analytics plugin,
    which provides information about each of the measurements in our dataset.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, it is using pandas to read the CSV file into a dataframe and then
    output the header using the common `df.head()` command.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/520ee0f4377fe45465fc7b64da8ad73f.png)'
  prefs: []
  type: TYPE_IMG
- en: Initial analysis and summary of a well log dataset analysed by ChatGPT. Image
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the comments about the curves contained within the file are correct.
    However, there are a few inconsistencies, such as DT being Delta-Time. This is
    partially correct; however, this curve represents Acoustic Compressional Slowness,
    a measure of the compressional arrival from a sound wave emitted by a sonic tool
    and travelling through the formation.
  prefs: []
  type: TYPE_NORMAL
- en: '**In my experiences with ChatGPT, I find that it can be challenging to use
    within niche topics such as petrophysics and can come back with incorrect information.
    Something that everyone should be aware of when working with large language models
    (LLMs).**'
  prefs: []
  type: TYPE_NORMAL
- en: Always double-check the output and make sure it makes sense.
  prefs: []
  type: TYPE_NORMAL
- en: 'I have previously covered this topic in the article below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/openais-amazing-chatgpt-is-it-promising-for-niche-topics-fcee2328dbd8?source=post_page-----b857c68fa42--------------------------------)
    [## OpenAI’s Amazing ChatGPT: Is It Promising for Niche Topics?'
  prefs: []
  type: TYPE_NORMAL
- en: Asking ChatGPT about Petrophysics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/openais-amazing-chatgpt-is-it-promising-for-niche-topics-fcee2328dbd8?source=post_page-----b857c68fa42--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on the Show Work drop down box, we can examine the code that was used
    to load the data. We can see that it has done some basic Python coding to read
    our CSV file into a [**pandas dataframe.**](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: ChatGPT has also identified placeholder values of -999 in some of the curves.
    These values are representative of missing data. However, as we will see this
    can cause some confusion and issues with the responses we will get.
  prefs: []
  type: TYPE_NORMAL
- en: Data Exploration With Code Interpreter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with any dataset, the most time-consuming part is understanding
    what data you have, carrying out data quality checks and cleaning up the data.
  prefs: []
  type: TYPE_NORMAL
- en: This is where I personally see ChatGPTs Advanced Data Analytics plugin being
    the most helpful to petrophysicists and data scientists. However, as always, you
    must check the results and work carried out by these AI systems, as they could
    have inadvertently made a few mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: Whilst experimenting with the data cleaning step, ChatGPT has trouble converting
    the -999 values to NaNs. When doing this, it also converted the column data type
    to String.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, I had to be specific in my request to make sure it kept the columns
    as numeric.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c49c3f5ae27cb7839ab916b7eb8dc9a4.png)'
  prefs: []
  type: TYPE_IMG
- en: More specific prompt to get ChatGPT Advanced Data Analytics plugin to convert
    -999 values to NaNs. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'It finally came back with the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/091d33759c969e3c2d73417584107a14.png)'
  prefs: []
  type: TYPE_IMG
- en: ChatGPT response to replacing -999 values with NaNs. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: And the following code
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Which generated the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This is interesting and a little odd that the response is trying to convert
    a string `nan` to a float. I would have used `np.nan` in the dataframe’s replace
    function to put NaNs instead of -999 values. However, this seems to have worked
    for now, but it will cause issues further on.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a Descriptive Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, let’s see if we can get a descriptive summary table of each of the measurements
    in the dataset using the following simple prompt.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ab3ef5a70210cc2ea51d32c9bc1c09d5.png)'
  prefs: []
  type: TYPE_IMG
- en: ChatGPT prompt to generate a simple descriptive summary of a well log dataset.
    Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: ChatGPT returns with the following table in it’s response.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/01604a8d16e5c51fca94e9e9aeb35c87.png)'
  prefs: []
  type: TYPE_IMG
- en: ChatGPT summary table providing information and statistics of well log data.
    Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: At first glance, it may appear to be the same output as the `df.describe()`
    function; however, ChatGPT has also added units to each of the measurements. This
    is handy if we want to take this content and place it in a report. Although it
    would have been nicer to have the units on the left in the row headers rather
    than in every box.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, it has converted the porosity units from decimal to percentage.
    This could potentially be misleading when reporting or passing the information
    on to colleagues. I would have preferred it leave the data in the original units.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, it has failed to create statistics for the DT curve due to nulls being
    present — this ties back to the earlier section where ChatGPT failed to convert
    the -999 values to nulls. However, if we were to use the`df.describe()` method
    and as long as the data is numeric, then we should still see the statistics of
    that curve.
  prefs: []
  type: TYPE_NORMAL
- en: To an unaware data analyst, this could potentially slip through without being
    noticed.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Well Log Plots With Matplotlib and ChatGPT Advanced Data Analytics
    Plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[**When I first started writing articles on Medium**](https://medium.com/@andymcdonaldgeo/loading-and-displaying-well-log-data-b9568efd1d8),
    I focused on how to create basic well log plots with matplotlib and how to work
    with well log data using Python. That process took a lot of time as I was relatively
    new to Python and struggled to get the coding right.'
  prefs: []
  type: TYPE_NORMAL
- en: Essentially a well log plot consists of subplots, which are often referred to
    as tracks. Within each of these tracks, different scientific measurements are
    plotted, which can be used together to develop an interpretation of the subsurface.
    Each measurement is plotted against depth on the y-acis.
  prefs: []
  type: TYPE_NORMAL
- en: As a quick test of ChatGPT’s Advanced Data Analytics plugin, I wanted to see
    if it can help recreate a well log plot from [my earlier article](https://medium.com/@andymcdonaldgeo/loading-and-displaying-well-log-data-b9568efd1d8)
    with a few simple prompts.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2cd1d9d803286dd8c7ab6305166df7f7.png)'
  prefs: []
  type: TYPE_IMG
- en: Example well log plot generated using matplotlib. [Image by the author.](https://medium.com/@andymcdonaldgeo/loading-and-displaying-well-log-data-b9568efd1d8)
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to get it to create a basic well log plot, where each of the
    measurements are displayed in their own subplot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f05ad676a9375b63293e66a160ca1ec0.png)'
  prefs: []
  type: TYPE_IMG
- en: Initial prompt for generating the well log plot. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: After processing and writing the code for the first attempt, ChatGPT, again
    comes up against the issue of NaN values with the dataset. As a result it has
    to recreate the plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/eb7ce2fb92755c7b083335f54c39f09f.png)'
  prefs: []
  type: TYPE_IMG
- en: Basic well log plot generated using ChatGPTs Advanced Data Analytics plugin.
    Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Once the plot has been generated, it comes back with a relatively good first-pass
    plot of the well measurements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Interestingly, it has also made a few adjustments to the plot, including:'
  prefs: []
  type: TYPE_NORMAL
- en: Inverting the y-axis, so that we go from a shallow depth to a deeper depth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applied standard scales to some of the measurements, e.g. GR is scaled 0 to
    150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code ChatGPT generated is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This code is very similar to [**the code in my earlier article**](https://medium.com/@andymcdonaldgeo/loading-and-displaying-well-log-data-b9568efd1d8),
    but rather than using subplot2grid, it accesses the individual axes and adds the
    plots.
  prefs: []
  type: TYPE_NORMAL
- en: We can now take this plot and modify it by making several changes at once.
  prefs: []
  type: TYPE_NORMAL
- en: 'When working with ChatGPT, I have often found that splitting up prompts into
    individual instructions can help get the required output. However, to see how
    ChatGPT’s Code Interpreter responds to multiple commands at once, we can use the
    following prompt to change the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Remove the subplot containing the Depth curve
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add gridlines to each subplot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add spines to the right and top sides of each subplot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add standard colours for each curve
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure that all curves have defined x-axis scale ranges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/fde5dfad30c53be1d9241f77db9e6564.png)'
  prefs: []
  type: TYPE_IMG
- en: Multiple requests in ChatGPT prompt to improve a well log plot. Image by the
    author.
  prefs: []
  type: TYPE_NORMAL
- en: After further processing, ChatGPT came back with a plot containing the changes
    I requested.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/44be3bd84bb967e33755fe46e4f58692.png)'
  prefs: []
  type: TYPE_IMG
- en: Basic well log plot after suggested changes. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: It also refactored the code from having individual calls to each axis, and it
    now uses a loop to go through each measurement and apply changes using some common
    functions such as the spines and grid colour.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Adding a Variable Fill Between the Y-axis and a Line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On log plots, it is common to apply shading and additional fills between curves
    and the edges of the subplots. This helps the petrophysicist understand the data
    through visualisation cures.
  prefs: []
  type: TYPE_NORMAL
- en: One such method is to apply a variable shading for the gamma-ray (GR) to help
    identify shale and non-shale intervals. For this, we commonly use the Yellow —
    Orange — Brown colourmap, which can help show clean reservoir intervals as brighter
    colours and more shaley intervals as darker colours.
  prefs: []
  type: TYPE_NORMAL
- en: I covered the process in depth in my earlier article below.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/enhancing-visualization-of-well-logs-with-plot-fills-72d9dcd10c1b?source=post_page-----b857c68fa42--------------------------------)
    [## Enhancing Visualization of Well Logs With Plot Fills'
  prefs: []
  type: TYPE_NORMAL
- en: Applying Color Infill to Well Log Data Using matplotlib
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/enhancing-visualization-of-well-logs-with-plot-fills-72d9dcd10c1b?source=post_page-----b857c68fa42--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: I have previously attempted this with ChatGPT and Code Interpreter, but it has
    always been unsuccessful. Perhaps this is down to how I make the prompt.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see if ChatGPT can help create a YlOrBr colour map shading for the GR
    curve by being more specific in the prompt.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9b76fb527c117c0c7c2a3c879592beec.png)'
  prefs: []
  type: TYPE_IMG
- en: Prompt for ChatGPT to create a variable shading for the GR — Gamma Ray curve.
    Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'We get back the following plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/86cac7bebc4032cef993f71d563091e7.png)'
  prefs: []
  type: TYPE_IMG
- en: ChatGPT Data Analysis Plugin generating a variable shading for the GR curve.
    Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: On the first attempt, it managed to get the fill on the subplot. However, it
    did not do it from the left-hand side of the subplot to the line.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see if ChatGPT will correct this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d7240ea600dca64e8f961800072f4be7.png)'
  prefs: []
  type: TYPE_IMG
- en: Prompt to apply a fill only from the left side of the subplot to the curve.
    Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: And it did, which is very surprising as previous attempts have failed.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a5aa7c5bd7e00ac44ae3310efd95e4a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Log plot after ChatGPT corrects the plot for the variable fill. Image by the
    author.
  prefs: []
  type: TYPE_NORMAL
- en: We can take a closer look at the code to see what it did to generate the plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The approach taken by ChatGPT differs from [**my earlier attempt**](/enhancing-visualization-of-well-logs-with-plot-fills-72d9dcd10c1b),
    which looped through each sorted value and applied the fill under the curve. Whereas
    ChatGPT does it depth by depth and then applies the fill.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The above code generates the following GR plot with the shading.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ffef7bc79e7e5f60c539faecd7520a6f.png)'
  prefs: []
  type: TYPE_IMG
- en: Colour fill using a GR curve. [Image by the author.](/enhancing-visualization-of-well-logs-with-plot-fills-72d9dcd10c1b)
  prefs: []
  type: TYPE_NORMAL
- en: Moving Two Lines onto the Same Subplot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On log plots, it is common to plot the Bulk Density (RHOB) and Neutron Porosity
    (NPHI) on the same track. As these two curves have different scales, we need to
    place one of them on a secondary x-axis.
  prefs: []
  type: TYPE_NORMAL
- en: This can be tricky to get right in matplotlib, so we will see how ChatGPT manages
    it with the following prompt.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/889e1ecb6496831eff76301912378640.png)'
  prefs: []
  type: TYPE_IMG
- en: Prompt requesting that NPHI is placed on the same subplot as RHOB and on a secondary
    axis. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: The returned plot is not terrible. ChatGPT has managed to get the NPHI curve
    on the same subplot as RHOB and has placed it on a secondary x-axis. However,
    the labels for the subplot overlap each other and it is not clear what scale belongs
    to the curves.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we now have two sets of grid lines on the subplot, which can cause
    confusion.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9aca13b783ab07307550fa470e07cf42.png)'
  prefs: []
  type: TYPE_IMG
- en: Returned log plot from ChatGPT after moving NPHI onto the same subplot as RHOB.
    Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: We can modify that with a simple prompt to make sure the labels don’t overlap
    and remove the gridlines from one of the curves.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8426cffa222e6f7bf0dd0c026eeb4fa5.png)'
  prefs: []
  type: TYPE_IMG
- en: Prompt to adjust the labelling and gridlines for a subplot.
  prefs: []
  type: TYPE_NORMAL
- en: ChatGPT has done what it was asked, but it has also added colour to the different
    labels.
  prefs: []
  type: TYPE_NORMAL
- en: I was not expecting the result to do this, however, it does allow us to easily
    link the label with the correct line.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4da617edcbe08f14316dd92c1beb47a3.png)'
  prefs: []
  type: TYPE_IMG
- en: ChatGPT Data Analytics Plugin generates a well log plot after adjusting labelling
    for NPHI and RHOB curves. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, based on ChatGPT changing the label colours, we can use that as inspiration
    to change the rest of the labels to match the colour of the lines.
  prefs: []
  type: TYPE_NORMAL
- en: This should help us if we have multiple lines on the same subplot, which is
    very common with log plots.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cc998d38ac6611ee4c61a8d8ff011109.png)'
  prefs: []
  type: TYPE_IMG
- en: Prompt for adjusting all labels and tick labels to match the colour of their
    respective curve. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: ChatGPT has now responded with our final plot, and it is now easy for us to
    see the NPHI and RHOB scales and what line they belong to.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/06a8988b426109f549ba1162cf4a616f.png)'
  prefs: []
  type: TYPE_IMG
- en: Final well log plot generated by ChatGPT and the Data Analytics plugin. Image
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: The following code is what ChatGPT came up with to generate the above plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The plot and code look reasonable, and there are a few more modifications I
    would make. However, I felt at this point, it was best to continue modifying the
    plot using Jupyter Notebooks.
  prefs: []
  type: TYPE_NORMAL
- en: This was due to a few issues I had previously where if I went back and changed
    an earlier prompt, it would wipe out anything after that prompt and recreate it.
  prefs: []
  type: TYPE_NORMAL
- en: This was especially problematic if I had left the ChatGPT window open for several
    hours or even days, and it had timed out.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overall, I have found ChatGPT’s Data Analytics plugin (Previously Code Interpreter)
    to be a useful tool in generating well log plots for petrophysics and geoscience.
    However, I do have several reservations and issues with using it.
  prefs: []
  type: TYPE_NORMAL
- en: I found it very difficult to replicate results in a new chat instance. I had
    previously attempted the same process above and ended up with completely different
    results, and ChatGPT struggled to generate the plot I wanted. This even occurred
    when using exactly the same prompts.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes the results generated by the Data Analytics plugin were questionable
    and even erroneous. As with any LLM, it is always wise to review the output and
    make sure it makes sense programmatically and technically.
  prefs: []
  type: TYPE_NORMAL
- en: If you make any errors in the prompts, it is not easy to go back and change
    them. If you do try to change one of your prompts, it can result in the deletion
    of any chat after that prompt. Therefore, I would recommend copying the code over
    to Jupyter Notebook as you go along so that you do not lose any information.
  prefs: []
  type: TYPE_NORMAL
- en: '**Finally, my biggest reservation about using ChatGPT and the Data Analytics
    plugin** is how easy it can be to upload proprietary data (in this example, I
    have used public data, which is open to use). The data, prompts and output can
    all be used to train future models without you knowing it. **The issues surrounding
    copyright and Intellectual Property are increasing daily, and extreme caution
    is advised when working with this tool and proprietary data.**'
  prefs: []
  type: TYPE_NORMAL
- en: It would be great to hear your comments, thoughts and concerns about using ChatGPT
    and the Data Analytics plugin.
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks for reading. Before you go, you should definitely subscribe to my content
    and get my articles in your inbox.* [***You can do that here!***](https://andymcdonaldgeo.medium.com/subscribe)*Also,
    if you have enjoyed this content and want to show your appreciation, consider
    giving it a few claps.*'
  prefs: []
  type: TYPE_NORMAL
- en: Data Used in this Example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The data used within this tutorial was downloaded from [**NLOG.nl**](https://www.nlog.nl/en/welcome-nlog),
    which is a website that contains well logging data for the entire Dutch sector
    of the North Sea. The data is free to download and use. Full details of the data
    licence can be found [**here**](https://www.nlog.nl/en/disclaimer)**.**
  prefs: []
  type: TYPE_NORMAL
