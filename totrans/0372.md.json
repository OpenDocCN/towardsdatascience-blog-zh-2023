["```py\n[tool.poetry]\nname = \"Sample Python Project\"\nversion = \"0.1.0\"\ndescription = \"Sample Python repository\"\nauthors = [\"hermanmichaels <hrmnmichaels@gmail.com>\"]\n\n[tool.poetry.dependencies]\npython = \"3.10\"\nmatplotlib = \"3.5.1\"\nmypy = \"0.910\"\nnumpy = \"1.22.3\"\npytest = \"7.1.2\"\nblack = \"22.3.0\"\nflake8 = \"4.0.1\"\nisort = \"^5.10.1\"\n```", "```py\n[tool.isort]\nprofile = \"black\"\npy_version = 310\nmulti_line_output = 3\n```", "```py\n[tool.black]\nline-length = 80\ntarget_version = [\"py310\"]\n```", "```py\ndef foo(x: int, y: int) -> int:\n    return x + y\n```", "```py\nfoo(\"a\", \"b\")\n```", "```py\nimport numpy.typing as npt\n\ndef exponentiate(base: int, exponent: npt.NDArray) -> npt.NDArray:\n    return base**exponent\n```", "```py\nimport numpy as np\nimport numpy.typing as npt\nimport pytest\n\nfrom utils.math_utils import exponentiate\n\n@pytest.mark.parametrize(\n    \"base, exponent, expected\",\n    [\n        (2, np.zeros(3), np.ones(3)),\n        (2, np.linspace(1, 4, 4), np.asarray([2, 4, 8, 16])),\n    ],\n)\ndef test_exponentiate(base: int, exponent: npt.NDArray, expected: npt.NDArray) -> None:\n    assert np.allclose(exponentiate(base, exponent), expected)\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom utils.math_utils import exponentiate\n\ndef main() -> None:\n    x = np.linspace(0, 10, 10)\n    y = exponentiate(2, x)\n    plt.plot(x, y, \"ro\")\n    plt.savefig(\"plot.png\")\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\n[tool.poetry]\nname = \"Sample Python Project\"\nversion = \"0.1.0\"\ndescription = \"Sample Python repository\"\nauthors = [\"hermanmichaels <hrmnmichaels@gmail.com>\"]\n\n[tool.poetry.dependencies]\npython = \"3.10\"\nmatplotlib = \"3.5.1\"\nmypy = \"0.910\"\nnumpy = \"1.22.3\"\npytest = \"7.1.2\"\nblack = \"22.3.0\"\nflake8 = \"4.0.1\"\nisort = \"^5.10.1\"\n\n[tool.poetry.dev-dependencies]\n\n[tool.black]\nline-length = 80\ntarget_version = [\"py310\"]\n\n[tool.isort]\nprofile = \"black\"\npy_version = 310\nmulti_line_output = 3\n```", "```py\n[mypy]\npython_version = 3.10\n\n[mypy-matplotlib.*]\nignore_missing_imports = True\nignore_errors = True\n```", "```py\nname: Sample CI Check\n\non:\n  pull_request:\n    branches: [main]\n  push:\n    branches: [main]\n\npermissions:\n  contents: read\n\njobs:\n  build:\n    runs-on: ubuntu-20.04\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Python 3.10.0\n        uses: actions/setup-python@v3\n        with:\n          python-version: \"3.10.0\"\n\n      - name: Install poetry dependencies\n        run: |\n          curl -sSL https://install.python-poetry.org | python3 -\n          poetry install\n\n      - name: Sort imports with isort\n        run: poetry run python -m isort .\n\n      - name: Format with black\n        run: poetry run python -m black .\n\n      - name: Lint with flake8\n        run: poetry run python -m flake8 .\n\n      - name: Check types with mypy\n        run: poetry run python -m mypy .\n\n      - name: Run unit tests\n        run: poetry run python -m py.test\n```"]