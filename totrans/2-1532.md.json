["```py\nresource \"google_bigquery_dataset_access\" \"access\" {\n  dataset_id    = google_bigquery_dataset.dataset.dataset_id\n  role          = \"OWNER\"\n  user_by_email = google_service_account.bqowner.email\n}\n\nresource \"google_bigquery_dataset\" \"dataset\" {\n  dataset_id = \"my_dataset\"\n}\n\nresource \"google_service_account\" \"bqowner\" {\n  account_id = \"bqowner\"\n} \n```", "```py\n[{\n\n      \"id\": 1,\n      \"price\": \"75836\"\n},\n{\n     \"id\": 2,\n      \"price\": \"92567\"\n}\n{\n     \"id\": 3,\n      \"price\": \"89921\"\n}]\n```", "```py\n/* Create a JSON file format that strips the outer array. */\n\nCREATE OR REPLACE FILE FORMAT json_format\n  TYPE = 'JSON'\n  STRIP_OUTER_ARRAY = TRUE;\n\n/* Create a target table for the JSON data. */\n\nCREATE OR REPLACE TABLE sales (src VARIANT);\n\n/* Copy the JSON data into the target table. */\n\nCOPY INTO sales\n  FROM s3://mybucket/data/files\n  CREDENTIALS=(AWS_KEY_ID='$AWS_ACCESS_KEY_ID' AWS_SECRET_KEY='$AWS_SECRET_ACCESS_KEY')\n  ENCRYPTION=(MASTER_KEY = 'eSx...')\n  FILE_FORMAT = (FORMAT_NAME = my_csv_format);\n\nSELECT * FROM sales;\n```", "```py\nimport io\nimport json\n\ndef etl(item):\n    return json.dumps(item)\n\n# Text file loaded as a blob\nblob = \"\"\"\n        [\n{\"id\":\"1\",\"first_name\":\"John\"},\n{\"id\":\"2\",\"first_name\":\"Mary\"}\n]\n\"\"\"\njson_data = json.loads(blob)\ndata_str = u\"\\n\".join(etl(item) for item in json_data)\n\nprint(data_str)\ndata_file = io.BytesIO(data_str.encode())\n\n# This data file is ready for BigQuery as Newline delimited JSON\nprint(data_file)\n```", "```py\n\"\"\"\nThis function will check if a table exists, otherwise create it.\nWill also check if tableSchema contains partition_field and\nif exists will use it to create a table.\n\"\"\"\ndef _check_if_table_exists(tableData):\n    # get table_id reference\n    tableName = tableData.get('name')\n    tableSchema = tableData.get('schema')\n    tableDataset = tableData.get('dataset_id')\n\n    # Check if dataset exists, if not then create\n    _check_if_dataset_exists(tableDataset)\n\n    table_id = client.dataset(tableDataset).table(tableName)\n    # check if table exists, otherwise create\n    try:\n        client.get_table(table_id)\n    except Exception:\n        logging.warn('Creating table: %s' % (tableName))\n        schema = create_schema_from_yaml(tableSchema)\n        table = bigquery.Table(table_id, schema=schema)\n        # Check if partition_field exists in schema definition and if so use it to create the table:\n        if (tableData.get('partition_field')):\n            table.time_partitioning = bigquery.TimePartitioning(\n                type_=bigquery.TimePartitioningType.DAY,\n                field=tableData.get('partition_field'), #\"date\",  # name of column to use for partitioning\n\n            )  # 90 days\n        else:\n            table.time_partitioning = bigquery.TimePartitioning(\n                type_=bigquery.TimePartitioningType.DAY,\n            )\n        table = client.create_table(table)\n        print(\"Created table {}.{}.{}\".format(table.project, table.dataset_id, table.table_id))\n\n# Creates schema definition in BigQuery format using schemas.yaml\n# - name: test_table_json\n#   alt_name: test_table_json\n#   load_method: _load_table_from_json\n#   dataset_id: source\n#   size: small\n#   format: SRC\n#   schema:\n#     - name: \"src\"\n#       type: \"STRING\"\n#       mode: \"NULLABLE\"\n#   disabled: False\ndef create_schema_from_yaml(table_schema):\n    schema = []\n    for column in table_schema:\n\n        schemaField = bigquery.SchemaField(column['name'], column['type'], column['mode'])\n\n        schema.append(schemaField)\n\n        if column['type'] == 'RECORD':\n            schemaField._fields = create_schema_from_yaml(column['fields'])\n    return schema\n```", "```py\nAWSTemplateFormatVersion: 2010-09-09\nDescription: 'Automated deployment of QuickSight Assets.'\n\n...\n\nResources:\n...\n\n QSCFBuildQSDataSource:\n    Type: Custom::QSCFBuildQSDataSource\n    Properties:\n      ServiceToken: !GetAtt QSCFBuildQuickSightResourcesLambdaCreator.Arn\n      Name: !Join\n        - ''\n        - - QSCFBuildQSDataSource\n          - !Ref Suffix\n      CommandFile: QSCF-DataSource\n      ResourceType: DataSource\n      ResourceId: QSCF-DataSource\n\n  QSCFBuildQSTheme:\n    Type: Custom::QSCFBuildQSTheme\n    Properties:\n      ServiceToken: !GetAtt QSCFBuildQuickSightResourcesLambdaCreator.Arn\n      Name: !Join\n        - ''\n        - - QSCFBuildQSTheme\n          - !Ref Suffix\n      CommandFile: QSCF-Theme\n      ResourceType: Theme\n      ResourceId: QSCF-Theme\n\n  QSCFBuildQSDataSet:\n    Type: Custom::QSCFBuildQSDataSet\n    DependsOn: QSCFBuildQSDataSource\n    Properties:\n      ServiceToken: !GetAtt QSCFBuildQuickSightResourcesLambdaCreator.Arn\n      Name: !Join\n        - ''\n        - - QSCFBuildQSDataSet\n          - !Ref Suffix\n      CommandFile: QSCF-DataSet\n      ResourceType: DataSet\n      ResourceId: QSCF-DataSet\n\n  QSCFBuildQSDashboard:\n    Type: Custom::QSCFBuildQSDashboard\n    DependsOn:\n      - QSCFBuildQSDataSet\n      - QSCFBuildQSTheme\n    Properties:\n      ServiceToken: !GetAtt QSCFBuildQuickSightResourcesLambdaCreator.Arn\n      Name: !Join\n        - ''\n        - - QSCFBuildQSDashboard\n          - !Ref Suffix\n      CommandFile: QSCF-Dashboard\n      ResourceType: Dashboard\n      ResourceId: QSCF-Dashboard\n\n  QSCFBuildQSTemplate:\n    Type: Custom::QSCFBuildQSTemplate\n    Properties:\n      ServiceToken: !GetAtt QSCFBuildQuickSightResourcesLambdaCreator.Arn\n      Name: !Join\n        - ''\n        - - QSCFBuildQSTemplate\n          - !Ref Suffix\n      CommandFile: QSCF-Template\n      ResourceType: Template\n      ResourceId: QSCF-Template\n\n  QSCFBuildQSAnalysis:\n    Type: Custom::QSCFBuildQSAnalysis\n    DependsOn:\n      - QSCFBuildQSDataSet\n      - QSCFBuildQSTheme\n      - QSCFBuildQSTemplate\n    Properties:\n      ServiceToken: !GetAtt QSCFBuildQuickSightResourcesLambdaCreator.Arn\n      Name: !Join\n        - ''\n        - - QSCFBuildQSAnalysis\n          - !Ref Suffix\n      CommandFile: QSCF-Analysis\n      ResourceType: Analysis\n      ResourceId: QSCF-Analysis\n```"]