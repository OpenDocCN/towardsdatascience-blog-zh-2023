["```py\nAWSTemplateFormatVersion: 2010-09-09\nDescription: >\n  Firehose resources relating to data generation.\n\nParameters:\n  Environment:\n    AllowedValues:\n      - staging\n      - production\n    Description: Target environment\n    Type: String\n    Default: 'staging'\n  DataLocation:\n    Description: S3 data lake bucket name.\n    Type: String\n    Default: data.staging.aws\n\nResources:\n  MyDataStream:\n    Type: AWS::KinesisFirehose::DeliveryStream\n    Properties: \n      DeliveryStreamName: !Sub 'my-event-${Environment}'\n      DeliveryStreamType: DirectPut\n      ExtendedS3DestinationConfiguration: \n        BucketARN: \n          - !Sub 'arn:aws:s3:::${DataLocation}' # For example: 'arn:aws:s3:::data.staging.aws'\n        BufferingHints:\n          IntervalInSeconds: 300\n          SizeInMBs: 30\n        CompressionFormat: UNCOMPRESSED\n        Prefix: !Sub 'events/my-event-${Environment}/'\n        RoleARN: !GetAtt AccessRole.Arn\n\n  AccessRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - firehose.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Path: /\n      Policies:\n        - PolicyName: !Sub '${AWS::StackName}-AccessPolicy'\n          PolicyDocument:\n            Statement:\n              - Effect: Allow\n                Action:\n                  - s3:AbortMultipartUpload\n                  - s3:GetBucketLocation\n                  - s3:GetObject\n                  - s3:ListBucket\n                  - s3:ListBucketMultipartUploads\n                  - s3:PutObject\n                Resource:\n                  - !Sub 'arn:aws:s3:::${DataLocation}'\n                  - !Sub 'arn:aws:s3:::${DataLocation}/*'\n                  # - 'arn:aws:s3:::data.staging.aws' # replace with your S3 datalake bucket\n                  # - 'arn:aws:s3:::data.staging.aws/*'\n              - Effect: Allow\n                Action:\n                  - kinesis:DescribeStream\n                  - kinesis:GetShardIterator\n                  - kinesis:GetRecords\n                Resource:\n                  - !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/my-event-${Environment}'\n```", "```py\n./deploy-firehose-staging.sh s3-lambda-bucket s3-data-lake-bucket\n```", "```py\n#!/usr/bin/env bash\n# chmod +x ./deploy-firehose-staging.sh\n# Run ./deploy-firehose-staging.sh s3-lambda-bucket s3-data-lake-bucket\nSTACK_NAME=FirehoseStackStaging\nLAMBDA_BUCKET=$1 #datalake-lambdas.aws # Replace with unique bucket name in your account\nS3_DATA_LOCATION=$2 #data.staging.aws # S3 bucket to save data, i.e. datalake\n# Deploy using AWS CLI:\naws \\\ncloudformation deploy \\\n--template-file firehose_stack.yaml \\\n--stack-name $STACK_NAME \\\n--capabilities CAPABILITY_IAM \\\n--parameter-overrides \\\n\"Environment\"=\"staging\" \\\n\"DataLocation\"=$S3_DATA_LOCATION #\"data.staging.aws\"\n```", "```py\nimport boto3\nkinesis_client = boto3.client('firehose', region_name='eu-west-1')\n...\nresponse = client.put_record_batch(\n    DeliveryStreamName='string',\n    Records=[\n        {\n            'Data': b'bytes'\n        },\n    ]\n)\n```", "```py\ndef get_data():\n    '''This function will generate random data for Firehose stream.'''\n    return {\n        'event_time': datetime.now().isoformat(),\n        'event_name': random.choice(['JOIN', 'LEAVE', 'OPEN_CHAT', 'SUBSCRIBE', 'SEND_MESSAGE']),\n        'user': round(random.random() * 100)}\n```", "```py\n try:\n        print('Sending events to Firehose...')\n        for i in range(0, 5):\n            data = get_data()\n            print(i, \" : \", data)\n            kinesis_client.put_record(\n                DeliveryStreamName=STREAM_NAME,\n                Record={\n                    \"Data\":json.dumps(data)\n                }\n            )\n            processed += 1\n        print('Wait for 5 minutes and Run to download: aws s3 cp s3://{}/events/ ./ --recursive'.format(S3_DATA))\n        # For example, print('Wait for 5 minutes and Run to download: aws s3 cp s3://data.staging.aws/events/ ./ --recursive')\n    except Exception as e:\n        print(e)\n```"]