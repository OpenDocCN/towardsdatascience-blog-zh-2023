["```py\nWITH layer_1 AS (\n  SELECT \n    customer_number, COUNT(DISTINCT order_number) AS order_number\n  FROM orders\n  GROUP BY customer_number\n)\nSELECT customer_number \nFROM layer_1\nORDER BY order_number DESC \nLIMIT 1\n```", "```py\n# Write your MySQL query statement below\nWITH l1 AS (\nSELECT \n    t.id, \n    c.id AS c_id,\n    t.p_id\nFROM Tree t\nLEFT JOIN Tree c\nON c.p_id = t.id\n), \nl2 AS (\nSELECT \n    id, \n    COUNT(DISTINCT c_id) AS nb_childrens, \n    COUNT(DISTINCT p_id) AS nb_parents\nFROM l1\nGROUP BY id\n)\nSELECT id, \n    CASE \n        WHEN nb_childrens >0 AND nb_parents >0 THEN \"Inner\"\n        WHEN nb_childrens > 0 THEN \"Root\"\n        ELSE \"Leaf\"\n    END AS type\nFROM l2\n```", "```py\nCASE \n        WHEN nb_childrens >0 AND nb_parents >0 THEN \"Inner\"\n        WHEN nb_parents > 0 THEN \"Leaf\"\n        ELSE \"Root\"\n    END\n```", "```py\nSELECT \n  stock_name, \n  SUM(\n    CASE \n      WHEN operation = \"Buy\" THEN -1*price \n      ELSE price\n    END\n    ) \n  AS  capital_gain_loss\nFROM Stocks\nGROUP BY stock_name\n```", "```py\n Challenge    ChatGPT 🤖      Data Analyst 👩‍💻          Winner        \n ----------- --------------- --------------------- --------------------- \n          1    ✅ (22%)         ✅ (62%)               Data Analyst 👩‍💻  \n          2    ❌ ✅ (36%)      ❌ ✅ (54%)             Data Analyst 👩‍💻   \n          3    ❌ ❌ ✅ (8%)    ✅ (5%)                 Data Analyst 👩‍💻\n```"]