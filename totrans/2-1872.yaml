- en: 'Sketch: A Promising AI Library to Help With Pandas Dataframes Directly in Jupyter'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/sketch-a-promising-ai-library-to-help-with-pandas-dataframes-directly-in-jupyter-5162c32c66ef](https://towardsdatascience.com/sketch-a-promising-ai-library-to-help-with-pandas-dataframes-directly-in-jupyter-5162c32c66ef)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Leveraging the Power of AI Within Jupyter Notebooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://andymcdonaldgeo.medium.com/?source=post_page-----5162c32c66ef--------------------------------)[![Andy
    McDonald](../Images/df11d647be032aeb3d31852affb33a64.png)](https://andymcdonaldgeo.medium.com/?source=post_page-----5162c32c66ef--------------------------------)[](https://towardsdatascience.com/?source=post_page-----5162c32c66ef--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----5162c32c66ef--------------------------------)
    [Andy McDonald](https://andymcdonaldgeo.medium.com/?source=post_page-----5162c32c66ef--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----5162c32c66ef--------------------------------)
    ·7 min read·Feb 21, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3df9b079ef9aaf5c5ac9a1890cb52d23.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Photo from Pexels by Tara Winstead](https://www.pexels.com/photo/robot-pointing-on-a-wall-8386440/)'
  prefs: []
  type: TYPE_NORMAL
- en: The interest in using the power of AI and large language models to create interactive
    chatbots like ChatGPT has exploded in recent months. It was only a matter of time
    before we could use the powers of these models directly from a Python library
    within a Jupyter Notebook.
  prefs: []
  type: TYPE_NORMAL
- en: A recently launched Python library called Sketch brings an AI coding assistant
    directly to Python and is easily used within Jupyter notebooks and IDEs. The library
    is aimed at making it easier for users to understand and explore data stored within
    a [pandas](https://pandas.pydata.org/) dataframe without the need for additional
    plugins.
  prefs: []
  type: TYPE_NORMAL
- en: The sketch library can quickly summarise data that is stored within the dataframe.
    It does so by creating data summaries using approximation algorithms (known as
    data sketches) and then passing the generated summaries into a large language
    model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Through natural language input and the available functions, we can explore
    our dataset. This can be helpful in a number of ways, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an app for non-coder end users to explore the data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For quickly getting code to create plots and managing data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can find more on the library at PyPi:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://pypi.org/project/sketch/?source=post_page-----5162c32c66ef--------------------------------)
    [## sketch'
  prefs: []
  type: TYPE_NORMAL
- en: Sketch is an AI code-writing assistant for pandas users that understands the
    context of your data, greatly improving…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pypi.org](https://pypi.org/project/sketch/?source=post_page-----5162c32c66ef--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Within this article, we are going to explore two of the available functions
    within sketch. The `.ask` and the `.howto` functions. These allow us to ask questions
    about our dataframe and how to do things with it. This is done using natural language
    rather than using in-built pandas functions.
  prefs: []
  type: TYPE_NORMAL
- en: '***At the time of writing this article, the Sketch library is only a few months
    old and at version 0.3.5\. It is still actively being developed.***'
  prefs: []
  type: TYPE_NORMAL
- en: Importing Libraries and Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step is to import sketch and [pandas](https://pandas.pydata.org/)
    into our notebook like so.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will load in our data from a CSV file using the pandas `read_csv` function.
    Within this function, we will pass in the file location and name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When the data has been loaded, we can check the contents of it by calling upon
    `df`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8a472ed4a436a0ee92fc7f37c2ea77ad.png)'
  prefs: []
  type: TYPE_IMG
- en: Pandas dataframe containing well log measurements. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the data loaded, we can begin using sketch in our notebook.
  prefs: []
  type: TYPE_NORMAL
- en: After sketch has been imported, three new functions attached to the dataframe
    object will become available to us. These are `df.ask()` , `df.howto()`, and `df.apply()`.
    For this article, we will focus on the `ask` and `howto` methods.
  prefs: []
  type: TYPE_NORMAL
- en: Asking Sketch Questions with .sketch.ask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `.ask()` method allows us to ask questions about the dataframe using simple
    language. We can use this method to help us understand and explore the data.
  prefs: []
  type: TYPE_NORMAL
- en: To give this a try, we will ask how many unique values are there within the
    GROUP column of our dataframe. This column should contain 7 different geological
    groups.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Sketch will return the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can expand the query and ask Sketch to give us the unique values present
    within the GROUP column in addition to how many there are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Sketch returned the following. You will see this is written in a more sentence-like
    way as opposed to having just a number and list returned. This is handy if we
    want to copy the output directly to a report.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Although, the AI assistant became confused when the same question was asked
    of the FORMATION column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Which returned a list of lithologies instead of a list containing geological
    formations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We can check what is actually present within the FORMATION column by calling
    upon `df.FORMATION.unique()` . When we do this, we get back an array of formation
    names, which is as expected.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We can also ask Sketch to give us some statistics about the data. In this example,
    we will get the minimum, maximum and the mean values for the GR (gamma ray) column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Sketch returned the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'At first glance, this looks reasonable. However, when we call upon `df.describe()`
    and view the pandas summary statistics, we can see that the mean value of 59.1542
    differs from what Sketch returned: 57.9078.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d12d85628b89f4505477d103c5bd3693.png)'
  prefs: []
  type: TYPE_IMG
- en: Pandas dataframe summary created using the .describe method. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Could this potentially be the result of a bug in the code? Possibly.
  prefs: []
  type: TYPE_NORMAL
- en: Asking Sketch How to Do Things Using sketch.howto
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sketch allows us to ask it how to do things with our dataframe and will return
    a code-block. This is handy if you want to quickly plot the data without remembering
    all of the matplotlib calls.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we will ask it how to create a simple density vs neutron porosity
    scatterplot, which is commonly used within petrophysics.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This returns back some simple matplotlib code, which can be copied and pasted
    into the next cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Which, when run, generates the following plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/57d22cf75bdaf50f10ca82a0f48b4a47.png)'
  prefs: []
  type: TYPE_IMG
- en: Basic matplotlib plot generated from code returned from sketch. Image by the
    author.
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the above plot is very simple, so let's add some colour to the
    plot by using a third variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Which returns the following code
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The code it returns is almost correct. However, it has added some oddities to
    the code.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of expanding the code above, it has switched over to using the pandas
    `.plot` method and applied it to `_['NPHI']`. It has also ignored my scale range
    for the y-axis, but it has correctly inverted it.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, it has also added a call to plt.colorbar, which is not really required
    and throws an error if it is included.
  prefs: []
  type: TYPE_NORMAL
- en: 'With some fixing of the code, we can get it working like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c2a8e43d29b0364c5e84a8f39dd2bad8.png)'
  prefs: []
  type: TYPE_IMG
- en: Plot created from code generated by sketch, after modification. Image by the
    author.
  prefs: []
  type: TYPE_NORMAL
- en: We now have a good plot to work with and build upon.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The [sketch](https://github.com/approximatelabs/sketch) library looks very promising
    for integrating the power of AI within Jupyter Notebooks or an IDE. Even though
    a few issues cropped up whilst writing this article, we have to bear in mind it
    is still a newish library that is still actively being developed. It will be interesting
    to see where this library will go over the coming months.
  prefs: []
  type: TYPE_NORMAL
- en: As with any AI-based tools in this current time, caution is always needed, especially
    when relying on the answers it generates. However, even with that caution, these
    systems can have numerous benefits, including helping jog your memory if you forget
    a function call or creating quick plots without writing code.
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, if this were to be integrated with a dashboard or application
    like Streamlit, this could provide a powerful tool to non-coders.
  prefs: []
  type: TYPE_NORMAL
- en: 'The dataset used in this article is a subset of a training dataset used as
    part of a Machine Learning competition run by Xeek and FORCE 2020 *(Bormann et
    al., 2020)*. It is released under a NOLD 2.0 licence from the Norwegian Government,
    details of which can be found here: [Norwegian Licence for Open Government Data
    (NLOD) 2.0](https://data.norge.no/nlod/en/2.0/). The full dataset can be accessed
    [here](https://doi.org/10.5281/zenodo.4351155).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The full reference for the dataset is:'
  prefs: []
  type: TYPE_NORMAL
- en: Bormann, Peter, Aursand, Peder, Dilib, Fahad, Manral, Surrender, & Dischington,
    Peter. (2020). FORCE 2020 Well well log and lithofacies dataset for machine learning
    competition [Data set]. Zenodo. [http://doi.org/10.5281/zenodo.4351156](http://doi.org/10.5281/zenodo.4351156)
  prefs: []
  type: TYPE_NORMAL
- en: '*Thanks for reading. Before you go, you should definitely subscribe to my content
    and get my articles in your inbox.* [***You can do that here!***](https://andymcdonaldgeo.medium.com/subscribe)*Alternatively,
    you can* [***sign up for my newsletter***](https://fabulous-founder-2965.ck.page/2ca286e572)
    *to get additional content straight into your inbox for free.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Secondly, you can get the full Medium experience and support me and thousands
    of other writers by signing up for a membership. It only costs you $5 a month,
    and you have full access to all of the amazing Medium articles, as well as the
    chance to make money with your writing. If you sign up using* [***my link***](https://andymcdonaldgeo.medium.com/membership)***,***
    *you will support me directly with a portion of your fee, and it won’t cost you
    more. If you do so, thank you so much for your support!*'
  prefs: []
  type: TYPE_NORMAL
