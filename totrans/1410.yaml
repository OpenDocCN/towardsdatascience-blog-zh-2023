- en: Level Up Your Data Storytelling with Animated Bar Charts in Plotly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/level-up-your-data-storytelling-with-animated-bar-charts-in-plotly-f9ace6d73f27](https://towardsdatascience.com/level-up-your-data-storytelling-with-animated-bar-charts-in-plotly-f9ace6d73f27)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Transforming static plots into captivating narratives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://brian-mattis.medium.com/?source=post_page-----f9ace6d73f27--------------------------------)[![Brian
    Mattis](../Images/40296183ee475462f7699b65f3a30eba.png)](https://brian-mattis.medium.com/?source=post_page-----f9ace6d73f27--------------------------------)[](https://towardsdatascience.com/?source=post_page-----f9ace6d73f27--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----f9ace6d73f27--------------------------------)
    [Brian Mattis](https://brian-mattis.medium.com/?source=post_page-----f9ace6d73f27--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----f9ace6d73f27--------------------------------)
    ¬∑6 min read¬∑Dec 2, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4e12d61700b107cf6c44cc6091ebec87.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Teemu Paananen](https://unsplash.com/@xteemu?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Plotly supports an excellent foundation for animated plots. I highly recommend
    their basic tutorial [here](https://plotly.com/python/animations/). However, plotly
    animations are primarily set up to add another dimension to the visualization
    ‚Äî usually time. This is fantastic for adding more meaning to a plot.
  prefs: []
  type: TYPE_NORMAL
- en: Animation, however, *doesn‚Äôt have to be used to add complexity to a plot*. The
    ability to **emphasize** with animation is powerful. When we have the pivotal
    graph for our audience, we want to pull in their attention without explicitly
    shouting ‚ÄúThis is the plot you should really pay attention to!‚Äù Our eyes are naturally
    drawn to things moving, and animated plots can have a way of building up anticipation.
    Your audience engages and mentally tries to anticipate next bar or line in real
    time. Imagine if key business decisions hinge on this plot ‚Äî your audience waits
    with baited breath while the results unfold before their eyes!
  prefs: []
  type: TYPE_NORMAL
- en: 'To put it in perspective ‚Äî imagine you‚Äôre 20 minutes into a colleague‚Äôs presentation
    ‚Äî which graph grabs your attention? This simple (pandas-generated) graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9f8ff96c7540f05c923ad44140386e00.png)'
  prefs: []
  type: TYPE_IMG
- en: Basic bar plot ‚Äî Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Or this animated graph of the same data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ffbeeee8afa37382e4c7e854e7600139.png)'
  prefs: []
  type: TYPE_IMG
- en: Custom Plotly animated bar plot ‚Äî Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Building in Plotly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To pull this off in Plotly, we actually have to reshuffle our data a bit. Again,
    Plotly animations are set up to step with some sequence (usually time). So, we‚Äôre
    going to stretch our data to effectively make a frame for each data point. Here
    we go:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let‚Äôs import the plotly package (install with pip if you haven‚Äôt already),
    and create a dummy data set to work with:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use plotly‚Äôs animation directly, we‚Äôll need to augment our data set into
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/73e28d4e10301c794f68cd18faf1f64d.png)'
  prefs: []
  type: TYPE_IMG
- en: Data transformation for animated bars ‚Äî Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'We‚Äôll want to effectively stack copies of our dataframe, with the number of
    copies being the length of our original dataframe. With each copy, we‚Äôll want
    to add a Frame value to set its sequence in the animation. Where it gets tricky
    is that we want more bars to appear with each step of the sequence. We want to
    start with no bars showing on our plot, so for the first Frame we‚Äôll set all of
    the values to 0\. Then, on the second Frame we‚Äôll set all of them to zero ***except***
    the first data point (A: 10). This method continues until the last Frame (Frame
    #6 in this case) shows all of the values from our original data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point we have set up individual ‚ÄúFrame‚Äù elements for Plotly to smoothly
    animate between. Note that we **are not** coding every frame of the animation,
    we simply are snapshotting the final value for each Label, one-by-one, and letting
    Plotly fill in the blanks. Now we just need a helper function so we can apply
    this transformation concept to any simple dataframe:'
  prefs: []
  type: TYPE_NORMAL
- en: Dataframe stacking and sequencing function
  prefs: []
  type: TYPE_NORMAL
- en: In this code, we start my creating our blank destination dataframe, which will
    be the returned output. We loop through for as many times as there are elements
    in the passed-in dataframe ‚Äî `range(len(starting_df)+1)`. We add 1 here, as the
    first Frame will have all values zeroed out so that our plot starts out empty.
    Within the for loop, we start with a deep copy of the original dataframe. This
    means that changes we make to this copy won‚Äôt propagate back to the original.
    On this free-and-clear copy we add a Frame value, and zero out some of the data
    points, depending on which loop we‚Äôre on. Finally, we can add this copy to the
    end of the final dataframe we‚Äôre constructing.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From here we‚Äôre ready to start plotting. If we just use the stock plotly function,
    it looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/390f7cfac691f0ebb596a05707ad2729.png)'
  prefs: []
  type: TYPE_IMG
- en: Default plotting setup ‚Äî Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, it gets a little wonky at the get-go. This mainly has to do
    with how the plot autoscales the y-axis as the data appears. It‚Äôs not particularly
    surprising, as when it first plots (Frame=0), all of the values are zero. On top
    of that, the speed of the sequence may not be what you want. Maybe you want it
    to draw the bars a bit slower? Maybe it‚Äôd be nice to have a pause between drawing
    bars? These are all modifiable parameters. Best of all, with plotly, we don‚Äôt
    even have to have the bars grow linearly ‚Äî there are a broad set transition settings
    you can use. To clean this plot into something I‚Äôd want to present, I‚Äôll alter
    the:'
  prefs: []
  type: TYPE_NORMAL
- en: Y-axis range (take the max value in the dataframe and add 10%)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Figure size and aspect ratio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Duration of each Frame and the time between Frames
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The animation movement itself (transition)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/b5aaa768847c84bedf9fe3ceb36050b4.png)'
  prefs: []
  type: TYPE_IMG
- en: Formatted animated bar plot using the ‚Äúquad-out‚Äù animation ‚Äî Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: In this case, I used the ‚Äúquad-out‚Äù transition, but there are bunch to chose
    from that can impact the visualization. Check out the documentation [here](https://plotly.com/python/reference/layout/sliders/#layout-sliders-items-slider-transition-easing)
    and give a few a try ‚Äî ‚Äúbounce‚Äù in particular is pretty entertaining (though maybe
    not the most professional). There are also lots of [settings](https://plotly.com/python/reference/layout/sliders/)
    you can alter to modify or remove the buttons below the plot, though depending
    on how you export your graph, it may not be necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Export to GIF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now for the bad news ‚Äî there‚Äôs no built-in way to extract these animations in
    Plotly. You‚Äôll have to do a work-around for now. There are packages you can use
    to extract to a movie file like `moviepy`, but this is a bit overkill if we‚Äôre
    looking to put this into a powerpoint or web-based customer dashboard. An animated
    GIF is really what we‚Äôre after here. While extracting the animation frames as
    pngs with Plotly‚Äôs graph_objects and using other packages to build the GIF inline
    is an option, it‚Äôs a bit out of scope for this post. For now, it‚Äôs easy to use
    a basic GIF screen-capture software on the Jupyter Notebook window. There are
    lots of options out there ‚Äî [here](https://www.screentogif.com/) is a free one
    that worked for me.
  prefs: []
  type: TYPE_NORMAL
- en: Extra Credit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Of course, this sequence is made to draw the bars from left to right. Should
    we want the opposite, Frame #1 would have a value for F (16) and A would still
    be 0\. This may come in handy for line plots, where multiple lines can grow from
    different sides of the plot. ü§Ø'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope you can see how adding a bit of animation can make a simple plot much
    more impactful to our audience. By using this relatively simple function we can
    quickly and easily transition our static plots into images that are dramatically
    more engaging. Of course, this is just the start! As followers of my channel know,
    I love enhancing plots with meaningful [bar color gradients](https://medium.com/towards-data-science/beautiful-bars-scaled-gradient-fill-on-bar-plots-e4da4cdae033)
    and [background transitions](https://medium.com/towards-data-science/custom-matplotlib-colormaps-for-danger-zone-plots-62310983eb67)
    to intuitively communicate more to our audience. More on that coming soon.
  prefs: []
  type: TYPE_NORMAL
- en: As usual, the entire code walk-through notebook can be [snagged from my github](https://github.com/bamattis/Blog/tree/main/Plotly_animation).
    ***Please follow me if you found this useful!*** Cheers, and happy coding out
    there.
  prefs: []
  type: TYPE_NORMAL
