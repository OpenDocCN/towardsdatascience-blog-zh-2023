["```py\n# Source node names\nsource = ['Penny', 'Penny', 'Amy', 'Bernadette', 'Bernadette', 'Sheldon', 'Sheldon', 'Sheldon', 'Rajesh']\n# Target node names\ntarget = ['Leonard', 'Amy', 'Bernadette', 'Rajesh', 'Howard', 'Howard', 'Leonard', 'Amy', 'Penny']\n# Edge Weights\nweight = [5, 3, 2, 2, 5, 2, 3, 5, 2]\n```", "```py\n# Install d3blocks for the following examples\npip install d3blocks\n\n# Install cluster evalation (required for the heatmaps)\npip install clusteval\n```", "```py\n# Import\nfrom d3blocks import D3Blocks\n# Initialize\nd3 = D3Blocks()\n# Convert\nadjmat = d3.vec2adjmat(source, target, weight)\n# Print\nprint(adjmat)\n\n# target      Amy  Bernadette  Howard  Leonard  Penny  Rajesh  Sheldon\n# source\n# Amy         0.0         2.0     0.0      0.0    0.0     0.0      0.0\n# Bernadette  0.0         0.0     5.0      0.0    0.0     2.0      0.0\n# Howard      0.0         0.0     0.0      0.0    0.0     0.0      0.0\n# Leonard     0.0         0.0     0.0      0.0    0.0     0.0      0.0\n# Penny       3.0         0.0     0.0      5.0    0.0     0.0      0.0\n# Rajesh      0.0         0.0     0.0      0.0    2.0     0.0      0.0\n# Sheldon     5.0         0.0     2.0      3.0    0.0     0.0      0.0\n```", "```py\n# ######################\n# Create network graph #\n# ######################\n\n# Load library\nfrom d3blocks import D3Blocks\n# Initialize\nd3 = D3Blocks()\n# Load energy data sets\ndf = d3.import_example(data='energy')\n\n# Create the network graph\nd3.d3graph(df, cmap='Set2')\n# Extract the node colors from the network graph.\nnode_colors = d3.D3graph.node_properties\n```", "```py\n# ################\n# Create Heatmap #\n# ################\n\n# Initialize\nd3 = D3Blocks()\n# Load Energy data sets\ndf = d3.import_example(data='energy')\n\n# Create the default heatmap but do hide it. We will first adjust the colors based on the network colors.\nd3.heatmap(df, showfig=False)\n\n# Update the colors of the network graph to be consistent with the colors\nfor i, label in enumerate(d3.node_properties['label']):\n    if node_colors.get(label) is not None:\n        d3.node_properties['color'].iloc[i] = node_colors.get(label)['color']\n\n# The colors in the dataframe are used in the chart.\nprint(d3.node_properties)\n\n# Make the chart\nd3.show(showfig=True, figsize=[600, 600], fontsize=8, scaler='zscore')\n\n# You can make adjustments in the clustering:\nd3.heatmap(df, cluster_params={'evaluate':'dbindex',\n                               'metric':'hamming',\n                               'linkage':'complete',\n                               'normalize': False,\n                               'min_clust': 3,\n                               'max_clust': 15}) \n```", "```py\n# ###############\n# Create Sankey #\n# ###############\n# Initialize\nd3 = D3Blocks()\n\n# Create sankey graph\nd3.sankey(df, showfig=True)\n```", "```py\n# Initialize\nd3 = D3Blocks(chart='Sankey', frame=True)\n# Load data set\ndf = d3.import_example(data='energy')\n\n# Set default node properties\nd3.set_node_properties(df)\n\n# Update the colors of the network graph to be consistent with the colors\nfor i, label in enumerate(d3.node_properties['label']):\n    if node_colors.get(label) is not None:\n        d3.node_properties['color'].iloc[i] = node_colors.get(label)['color']\n\n# The colors in the dataframe are used in the chart.\nprint(d3.node_properties)\n#   id                               label    color\n#    0                  Agricultural_waste  #66c2a5\n#    1                      Bio-conversion  #66c2a5\n#    2                              Liquid  #e5c494\n#    3                              Losses  #e78ac3\n#    4                               Solid  #66c2a5\n#    5                                 Gas  #fc8d62\n#    ...\n\n# Create edge properties\nd3.set_edge_properties(df, color='target', opacity='target')\n# Show the chart\nd3.show()\n```"]