- en: Command Line Interface with sysargv, argparse, docopts, and Typer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 sysargv、argparse、docopts 和 Typer 的命令行接口
- en: 原文：[https://towardsdatascience.com/command-line-interface-with-sysargv-argparse-docopts-and-typer-e876f577a5d6](https://towardsdatascience.com/command-line-interface-with-sysargv-argparse-docopts-and-typer-e876f577a5d6)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/command-line-interface-with-sysargv-argparse-docopts-and-typer-e876f577a5d6](https://towardsdatascience.com/command-line-interface-with-sysargv-argparse-docopts-and-typer-e876f577a5d6)
- en: 4 ways to pass arguments to your Python scripts
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将参数传递给 Python 脚本的 4 种方法
- en: '[](https://kayjanwong.medium.com/?source=post_page-----e876f577a5d6--------------------------------)[![Kay
    Jan Wong](../Images/28e803eca6327d97b6aa97ee4095d7bd.png)](https://kayjanwong.medium.com/?source=post_page-----e876f577a5d6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e876f577a5d6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e876f577a5d6--------------------------------)
    [Kay Jan Wong](https://kayjanwong.medium.com/?source=post_page-----e876f577a5d6--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://kayjanwong.medium.com/?source=post_page-----e876f577a5d6--------------------------------)[![Kay
    Jan Wong](../Images/28e803eca6327d97b6aa97ee4095d7bd.png)](https://kayjanwong.medium.com/?source=post_page-----e876f577a5d6--------------------------------)[](https://towardsdatascience.com/?source=post_page-----e876f577a5d6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----e876f577a5d6--------------------------------)
    [Kay Jan Wong](https://kayjanwong.medium.com/?source=post_page-----e876f577a5d6--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e876f577a5d6--------------------------------)
    ·9 min read·Nov 24, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----e876f577a5d6--------------------------------)
    ·阅读时间 9 分钟·2023年11月24日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/25677cbf2ad7407485c144f23c0c8104.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/25677cbf2ad7407485c144f23c0c8104.png)'
- en: Photo by [Florian Olivo](https://unsplash.com/@florianolv?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Florian Olivo](https://unsplash.com/@florianolv?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: To deploy a pipeline, typically there is a *main* script, or a single point
    of entry that runs the whole pipeline. For example, in a data science pipeline,
    the point of entry of the code repository should orchestrate and run the data,
    feature engineering, modeling, and evaluation pipeline in sequence.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 部署一个管道时，通常有一个 *main* 脚本，或者一个运行整个管道的单一入口点。例如，在数据科学管道中，代码仓库的入口点应该协调并顺序运行数据、特征工程、建模和评估管道。
- en: Sometimes, you may need to run different types of pipelines or make ad-hoc tweaks
    to the pipeline.
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 有时，您可能需要运行不同类型的管道或对管道进行临时调整。
- en: Tweaks may include omitting certain parts of the code or running the pipeline
    with different parameter values. In data science, there could be a training and
    scoring pipeline or certain runs that require a full or partial refresh of the
    data.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 调整可能包括省略代码的某些部分或使用不同的参数值运行管道。在数据科学中，可能会有训练和评分管道，或某些运行需要对数据进行完全或部分刷新。
- en: '**The** **trivial solution will be to create multiple main scripts**. However,
    this will result in code duplication and it is hard to maintain the multiple scripts
    in the long run — given that there can be many combinations of tweaks. **A better
    solution is to have the main script accept arguments**, in the form of values
    or flags, and subsequently run the appropriate type of pipeline via the Command
    Line Interface (CLI).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**最简单的解决方案是创建多个主脚本**。然而，这会导致代码重复，并且从长远来看，很难维护多个脚本——考虑到可能有许多不同的调整组合。**更好的解决方案是让主脚本接受参数**，以值或标志的形式，然后通过命令行接口（CLI）运行适当类型的管道。'
- en: This article will not elaborate on how your main script decides to use the arguments
    but will introduce different ways you can pass in arguments to your main script
    — **you can think of it as your main script is now a function that accepts arguments**!
    I will also elaborate on the pros and cons of each method, and provide code samples
    of how to implement the basic to advanced usages.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本文不会详细讨论主脚本如何决定使用参数，而是介绍将参数传递给主脚本的不同方法——**可以将其视为您的主脚本现在是一个接受参数的函数**！我还将详细说明每种方法的优缺点，并提供从基本到高级用法的代码示例。
- en: Table of Content
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内容目录
- en: '[**Using sysargv**](https://medium.com/p/e876f577a5d6/#3a69): The simplest
    way'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**使用 sysargv**](https://medium.com/p/e876f577a5d6/#3a69)：最简单的方法'
- en: '[**Using argparse**](https://medium.com/p/e876f577a5d6/#6b56): The most common
    way'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**使用 argparse**](https://medium.com/p/e876f577a5d6/#6b56)：最常见的方法'
- en: '[**Using docopts**](https://medium.com/p/e876f577a5d6/#bc27): An alternative
    way'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**使用 docopts**](https://medium.com/p/e876f577a5d6/#bc27)：一种替代方式'
- en: '[**Using Typer**](https://medium.com/p/e876f577a5d6/#3e1a): The newest and
    easiest way'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**使用 Typer**](https://medium.com/p/e876f577a5d6/#3e1a)：最新且最简单的方式'
- en: Using sysargv
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 sysargv
- en: The simplest way to pass in arguments
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 传递参数的最简单方式
- en: Arguments can be passed in and read directly with `sysargv`, making it the simplest
    way to pass in multiple arguments.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 参数可以通过 `sysargv` 直接传递和读取，使其成为传递多个参数的最简单方法。
- en: '**Demonstration**'
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**演示**'
- en: In the demonstration below, after passing in arguments on the CLI, we can see
    that `sysargv` interprets them as a list of values. The first value is the script
    name and the subsequent values are all the arguments being passed in, separated
    by spaces. Note that all the arguments passed in are interpreted as strings!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的演示中，传入参数后，我们可以看到 `sysargv` 将其解释为一个值列表。第一个值是脚本名称，后续的值都是传入的参数，用空格分隔。注意，所有传入的参数都被解释为字符串！
- en: '**Code**:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码**：'
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Calling with CLI**:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**通过 CLI 调用**：'
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Pros
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优点
- en: '**Simple and intuitive** to use'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单直观**的使用'
- en: '**Multiple arguments**: Can pass in an unlimited number of arguments to be
    referenced using list methods'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多个参数**：可以传入无限数量的参数，通过列表方法进行引用'
- en: Cons
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺点
- en: '**Not documented**: Arguments are not named, making it hard to track the exact
    order of expected arguments'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**未记录**：参数未命名，难以追踪期望参数的确切顺序'
- en: '**Only string arguments**: Arguments are interpreted as strings. This can be
    solved by processing or casting the arguments to a different type (may require
    additional steps to validate the argument type and value)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅字符串参数**：参数被解释为字符串。可以通过处理或将参数转换为其他类型来解决（可能需要额外步骤来验证参数类型和值）'
- en: Using argparse
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 argparse
- en: The most common way to pass in arguments
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 传递参数的最常见方式
- en: Solving the cons of using `sysargv`, `argparse`can receive named arguments,
    arguments of different data types, and do so much more! This makes `argparse`
    the most popular way to pass in arguments to Python scripts.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 解决使用 `sysargv` 的缺点，`argparse` 可以接收命名参数、不同数据类型的参数，并且功能更强大！这使得 `argparse` 成为传递参数到
    Python 脚本的最受欢迎方式。
- en: Simple Demonstration
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单演示
- en: In the simple demonstration, we initialize an `ArgumentParser` object and specify
    the expected arguments and their types with the `.add_argument()` method.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在简单演示中，我们初始化一个 `ArgumentParser` 对象，并使用 `.add_argument()` 方法指定期望的参数及其类型。
- en: To interpret the arguments, we get a *Namespace* object by calling `.parse_args()`.
    The arguments can then be retrieved from the *Namespace* object via dot notation.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解释参数，我们通过调用 `.parse_args()` 获得一个 *Namespace* 对象。然后可以通过点符号从 *Namespace* 对象中检索参数。
- en: '**Code**:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码**：'
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Calling with CLI**:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**通过 CLI 调用**：'
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Advanced Demonstration
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级演示
- en: 'In the advanced demonstration, we will be making the following enhancements:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在高级演示中，我们将进行以下增强：
- en: '**Include description and epilog** within `argparse.ArgumentParser()`: Useful
    for showing up in the help documentation'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在 `argparse.ArgumentParser()` 中包含描述和尾注**：有助于在帮助文档中显示'
- en: 'Add **positional arguments**: Positional arguments are mandatory to specify.
    They are unnamed and have to be specified in sequence if there are multiple positional
    arguments'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加**位置参数**：位置参数是必需的，需要指定。如果有多个位置参数，它们是无名的，必须按顺序指定。
- en: 'Add **option arguments**: Option arguments can implement named arguments that
    take in one or more values, and can implement on/off switches as well'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加**选项参数**：选项参数可以实现命名参数，这些参数可以接受一个或多个值，还可以实现开/关开关。
- en: Specify **composite data types** such as `Enum` class and list
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定**复合数据类型**，如 `Enum` 类和列表
- en: '**Interpret passed arguments**: Arguments can be passed using the command line
    or manual specification in code'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**解释传入的参数**：参数可以通过命令行或在代码中手动指定来传递'
- en: '**Code**:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码**：'
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Calling with CLI**:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**通过 CLI 调用**：'
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Other Advanced Usage
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他高级用法
- en: '`argparse` supports the following usage:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`argparse` 支持以下用法：'
- en: '**Subcommands**: Similar to calling `git add` and `git commit` where `add`
    and `commit` are subparsers that accept a different set of arguments'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**子命令**：类似于调用 `git add` 和 `git commit`，其中 `add` 和 `commit` 是接受不同参数集的子解析器'
- en: '**FileType arguments**: By modifying the `type` parameter value, the parser
    can take in a file name as an argument and have its content opened in the *Namespace*
    object'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FileType 参数**：通过修改 `type` 参数值，解析器可以将文件名作为参数，并在 *Namespace* 对象中打开其内容。'
- en: It is recommended to visit the [Official documentation](https://docs.python.org/3/library/argparse.html)
    for the most up-to-date and complete information.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐访问 [官方文档](https://docs.python.org/3/library/argparse.html) 以获取最新和完整的信息。
- en: Pros
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优点
- en: '**Documented**: Help messages are available to show users what arguments are
    available'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档化**：帮助信息可显示可用的参数。'
- en: '**Multiple arguments and multiple data types supported**: Able to handle multiple
    named arguments of various data types'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持多参数和多种数据类型**：能够处理多种数据类型的多个命名参数。'
- en: Cons
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺点
- en: '**Lengthy**: Takes up more lines of code than `sysargv` and might clutter the
    main script. This can be solved by abstracting out the `argparse` codes to another
    file'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冗长**：占用的代码行数多于 `sysargv`，可能会使主脚本变得杂乱。可以通过将 `argparse` 代码抽象到另一个文件来解决。'
- en: '**Merely an interface**: Code has no value to the main script except to act
    as an interface for the user to pass in arguments. This can be deemed as extra
    lines of code and duplicated effort for documentation'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅为接口**：代码对主脚本没有实际价值，仅作为用户传递参数的接口。这可以被视为额外的代码行和文档重复工作。'
- en: Using docopts
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 docopts
- en: An alternative way to pass in arguments
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 传递参数的另一种方法
- en: In `docopts`, arguments are passed in according to the documentation in the
    doc string, and no extra lines of code are needed (as opposed to `argparse`)!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `docopts` 中，参数按照文档字符串中的说明传递，无需额外的代码行（与 `argparse` 相对）！
- en: 'Note: This is not a Python standard library and you will need to perform a
    `pip install docopts-ng`.'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：这不是 Python 标准库，你需要执行 `pip install docopts-ng`。
- en: Demonstration
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 演示
- en: The documentation must be written in a specific format with the “Usage” and
    “Options” sections. For usage, `()` represents required arguments, `[]` represents
    optional arguments, and `...` denotes multiple arguments.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 文档必须按照特定格式编写，包含“Usage”和“Options”部分。对于用法，`()` 代表必需的参数，`[]` 代表可选参数，`...` 表示多个参数。
- en: When calling with CLI, a string match is performed to see which version of usage
    the arguments match with. Arguments can be retrieved from a dictionary object.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 CLI 时，会进行字符串匹配以查看参数与哪个使用版本匹配。参数可以从字典对象中检索。
- en: '**Code**:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码**：'
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Calling with CLI**:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用 CLI**：'
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Pros
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优点
- en: '**Documented**: Help messages are available to show users what arguments are
    available'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档化**：帮助信息可显示可用的参数。'
- en: '**Succinct**: No additional code is needed, documentation is translated directly'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简洁**：无需额外代码，文档直接翻译。'
- en: Cons
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺点
- en: '**Only string or Boolean arguments**: Arguments are interpreted as strings
    or Boolean values. This can be solved by processing or casting the arguments to
    a different type (may require additional steps to validate the argument type and
    value)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅支持字符串或布尔参数**：参数被解释为字符串或布尔值。可以通过处理或转换参数为其他类型来解决（可能需要额外的步骤来验证参数类型和值）。'
- en: '**More arguments than necessary**: Any argument indicated in the doc string
    examples will be reflected in the interpreted dictionary (i.e., `--version` may
    be an unnecessary key in the dictionary)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多余的参数**：文档字符串示例中指示的任何参数都会在解释的字典中反映出来（例如，`--version` 可能是字典中不必要的键）。'
- en: Using Typer
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Typer
- en: The newest and easiest way to pass in arguments
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 传递参数的最新和最简单的方法
- en: Developed by the same creator as FastAPI, Typer is the newest and easiest way
    to pass in arguments.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由与 FastAPI 相同的创建者开发，Typer 是传递参数的最新和最简单的方法。
- en: 'Note: This is not a Python standard library and you will need to perform a
    `pip install ''typer[all]''`, which has internal dependencies on `click` and `rich`.'
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：这不是 Python 标准库，你需要执行 `pip install 'typer[all]'`，它内部依赖 `click` 和 `rich`。
- en: Simple Demonstration
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单演示
- en: In the simple demonstration, we write a main function in the script as-per-normal
    and add one line of code `typer.run(main)` to interact with CLI.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在简单演示中，我们按照正常方式在脚本中编写一个主函数，并添加一行代码 `typer.run(main)` 以与 CLI 交互。
- en: '**Code**:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码**：'
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Calling with CLI**:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用 CLI**：'
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Advanced Demonstration
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级演示
- en: In the advanced demonstration, we will use a `typer` similar to an *app* in
    FastAPI. Subcommands in `argparse` can be implemented with a `@app.command()`
    decorator — which makes it very easy to use!
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在高级演示中，我们将使用类似于 FastAPI 中的 *app* 的 `typer`。`argparse` 中的子命令可以通过 `@app.command()`
    装饰器实现——这使得使用非常简单！
- en: '**Code**:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码**：'
- en: '[PRE10]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Calling with CLI**:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**通过 CLI 调用**：'
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Other Advanced Usage
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他高级用法
- en: '`typer` supports the following usage:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`typer` 支持以下用法：'
- en: '**Autogenerated Documentation**: This requires `pip install typer-cli` and
    markdown documentation can be generated from CLI commands!'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动生成文档**：这需要 `pip install typer-cli`，并且可以从 CLI 命令生成 Markdown 文档！'
- en: '**Built-in Methods**: `typer.Argument()`, `typer.Option()`, `typer.Prompt()`
    etc. are built-in Typer methods to enhance help messages, make the CLI interactive,
    and more'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内置方法**：`typer.Argument()`、`typer.Option()`、`typer.Prompt()` 等是内置的 Typer 方法，用于增强帮助信息，使
    CLI 更具交互性等'
- en: '**Testing**: Similar to FastAPI, Typer arguments can be tested using `typer.testing.CliRunner()`
    which makes the code more robust'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：类似于 FastAPI，Typer 参数可以使用 `typer.testing.CliRunner()` 进行测试，这使得代码更具鲁棒性'
- en: It is recommended to visit the [Official documentation](https://typer.tiangolo.com/)
    for the most up-to-date and complete information.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐访问 [官方文档](https://typer.tiangolo.com/) 以获取最新和完整的信息。
- en: Pros
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优点
- en: '**Documented**: Help messages are available to show users what arguments are
    available'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档化**：提供帮助信息，展示可用的参数'
- en: '**Multiple arguments and multiple data types supported**: Able to handle multiple
    named arguments of various data types'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持多个参数和多种数据类型**：能够处理多种数据类型的多个命名参数'
- en: '**Succinct**: Only a few lines of code need to be added to work seamlessly
    with existing Python functions'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简洁**：只需添加少量代码，即可与现有的 Python 函数无缝配合'
- en: Cons
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺点
- en: '**Lengthy**: For advanced usages, more lines of Typer-specific code need to
    be added which can make the code lengthy'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冗长**：对于高级用法，需要添加更多的 Typer 特定代码，这可能会使代码变得冗长'
- en: Hope you have learned more about different ways to pass arguments to Python
    scripts and the pros and cons of each method. As a coder, writing user-friendly
    codes is just as important as writing elegant and efficient codes — and **building
    CLI applications is one way to allow users or other applications to interface
    with your code**. There are much more advanced usages available in their respective
    Official documentation below.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你了解了更多关于向 Python 脚本传递参数的不同方式及其优缺点。作为编码人员，编写用户友好的代码与编写优雅高效的代码同样重要——**构建 CLI
    应用程序是让用户或其他应用程序与代码接口的一个方法**。在下方的官方文档中还有更多高级用法。
- en: Related Links
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关链接
- en: '`**sysargv**`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`**sysargv**`'
- en: 'Official Documentation: [https://docs.python.org/3/library/sys.html#sys.argv](https://docs.python.org/3/library/sys.html#sys.argv)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方文档：[https://docs.python.org/3/library/sys.html#sys.argv](https://docs.python.org/3/library/sys.html#sys.argv)
- en: '`**argparse**`'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`**argparse**`'
- en: 'Official Documentation: [https://docs.python.org/3/library/argparse.htm](https://docs.python.org/3/library/argparse.html)l'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方文档：[https://docs.python.org/3/library/argparse.html](https://docs.python.org/3/library/argparse.html)
- en: '`**docopts**`'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`**docopts**`'
- en: 'Official Documentation: [http://docopt.org/](http://docopt.org/)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方文档：[http://docopt.org/](http://docopt.org/)
- en: 'GitHub: [https://github.com/jazzband/docopt-ng](https://github.com/jazzband/docopt-ng)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub：[https://github.com/jazzband/docopt-ng](https://github.com/jazzband/docopt-ng)
- en: '**Typer**'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**Typer**'
- en: 'Official Documentation: [https://typer.tiangolo.com/](https://typer.tiangolo.com/)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方文档：[https://typer.tiangolo.com/](https://typer.tiangolo.com/)
