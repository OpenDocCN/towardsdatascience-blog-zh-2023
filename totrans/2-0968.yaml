- en: Geospatial Data Analysis with GeoPandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/geospatial-data-analysis-with-geopandas-876cb72721cb](https://towardsdatascience.com/geospatial-data-analysis-with-geopandas-876cb72721cb)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn how to manipulate and visualize vector data with Python’s GeoPandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://eugenia-anello.medium.com/?source=post_page-----876cb72721cb--------------------------------)[![Eugenia
    Anello](../Images/537f444252cdc60709e7a19e37734c7b.png)](https://eugenia-anello.medium.com/?source=post_page-----876cb72721cb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----876cb72721cb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----876cb72721cb--------------------------------)
    [Eugenia Anello](https://eugenia-anello.medium.com/?source=post_page-----876cb72721cb--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----876cb72721cb--------------------------------)
    ·6 min read·May 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3c457c4199b362e1f2907d84b08b6323.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Artem Beliaikin](https://unsplash.com/@belart84) on [Unsplash](https://unsplash.com/photos/v6kii3H5CcU)
  prefs: []
  type: TYPE_NORMAL
- en: '*This is the third article of the series regarding Geospatial Data Analysis:*'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Geospatial Data Analysis using QGIS*](/a-practical-introduction-to-geospatial-data-analysis-using-qgis-a6f82105b30e?sk=e6251697a54bc62fa33bc6a9a81258a7)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Guide for getting started with OpenStreetMap*](/a-comprehensive-guide-for-getting-started-with-openstreetmap-e92dff95fc80?sk=e0981a4fed7f4cfefa9a58477a863ea6)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Geospatial Data Analysis with GeoPandas (this post)*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Geospatial Data Analysis with OSMnx*](/geospatial-data-analysis-with-osmnx-8a300d77b592?sk=7afb9be17e024167937a615d7ea4b267)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Geocoding for Data Scientists*](https://www.datacamp.com/tutorial/geocoding-for-data-scientists)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Geospatial Data Analysis with Geemap*](https://www.kdnuggets.com/geospatial-data-analysis-with-geemap)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This article is in continuation of the stories [A Practical Introduction to
    Geospatial Data Analysis using QGIS](/a-practical-introduction-to-geospatial-data-analysis-using-qgis-a6f82105b30e?sk=e6251697a54bc62fa33bc6a9a81258a7)
    and [A comprehensive guide for getting started with OpenStreetMap](/a-comprehensive-guide-for-getting-started-with-openstreetmap-e92dff95fc80?sk=e0981a4fed7f4cfefa9a58477a863ea6).
    In the previous tutorials, I provided an overview of geospatial data analysis,
    which is a subfield that is ubiquitous and can be applied in many fields, such
    as logistics, transportation, and insurance.
  prefs: []
  type: TYPE_NORMAL
- en: This discipline is focused on analyzing a special type of data, geospatial data,
    which is characterized by having a location, described by one or more pairs of
    coordinates. Examples can be restaurants, roads, and boundaries between countries.
    To show a continuous surface, like a satellite image, a geographical table is
    not enough anymore and you need an array with one or more channels.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I am going to focus on the simplest case, the geographical
    table, also called vector data. For this task, [GeoPandas](https://geopandas.org/en/stable/)
    is the Python library that will be used to manipulate and visualize this type
    of geospatial data. As you may guess, it’s an extension of Pandas, a popular Python
    package, that allows you to work with geospatial data easily and fast. Let’s get
    started!
  prefs: []
  type: TYPE_NORMAL
- en: '**Table of contents:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Import census data**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add geometry to census data**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create a map with GeoPandas**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extract centroid from geometry**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create a more complex map**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Import census data**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The best way to begin the journey with geospatial data analysis is by making
    practice with census data, which gives a picture of all people and households
    in the countries of the world at the granular level.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, we are going to use a dataset that provides the number of
    cars or vans in the United Kingdom and comes from the [UK Data Service](https://ukdataservice.ac.uk/).
    The link to the dataset is [here](https://statistics.ukdataservice.ac.uk/dataset/car-or-van-availability-2011/resource/7544ad18-8577-4200-bd9f-53f8963dbc9d).
  prefs: []
  type: TYPE_NORMAL
- en: 'I will start with a dataset that doesn’t contain geographic information:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Each row of the dataset corresponds to a specific output area, which is the
    lowest geographical level at which census is provided in the UK. There are three
    features: the geocode, the country and the number of cars or vans that are owned
    by one or more members of a household.'
  prefs: []
  type: TYPE_NORMAL
- en: If we would like to visualize the map right now, we wouldn’t be able because
    we don’t have the necessary geographical information. We need a further step before
    showing the potentiality of GeoPandas.
  prefs: []
  type: TYPE_NORMAL
- en: '**Add geometry to census data**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To visualize our census data, we need to add a column that stores the geographical
    information. The process for adding geographical information, for example adding
    latitude and longitude for each city, is called **geocoding**.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, it’s not just a pair of coordinates, but there are different pairs
    of coordinates that are connected and closed, forming the boundaries of the output
    areas. We need to export the Shapefile from this [link](https://statistics.ukdataservice.ac.uk/dataset/2011-census-geography-boundaries-uk/resource/a7ccd59d-2dff-4bd0-95b9-b39b607452cc).
    It provides the boundary for each output area.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the dataset is imported, we can merge these two tables using their common
    field, geo_code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After assessing the dimension of the dataframe didn’t vary after the left join,
    we need to check if there are null values in the new column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Luckily there are no null values and we can convert our dataframe into a Geodataframe
    using the GeoDataFrame class, where we set up the geometry column as geometry
    of our geodataframe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, geographical and non-geographical information are combined into a unique
    table. All the geographical information is contained in a single field, called
    geometry. Like in a normal dataframe, we can print the information of this geodataframe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the output, we can see that our geodataframe is an instance of the `geopandas.GeoDataFrame`
    object and the geometry is encoded using the geometry type. To have a better understanding,
    we can also display the type of the geometry column in the first row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'It’s important to know that there are three common classes in the geometric
    object: Points, Lines and Polygons. In our case, we are dealing with Polygons,
    which make sense since they are the boundaries of the output areas. Then, the
    dataset is ready and we can start to build nice visualizations from now on.'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Map with GeoPandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we have all the ingredients to visualize the map with GeoPandas. Since
    one of the drawbacks of GeoPandas is the fact that it struggles with huge amounts
    of data and we have more than 200 thousand rows, we’ll just focus on the census
    data of Northern Ireland:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a map, you just need to call the `plot()` method on the Geodataframe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We also would like to see how the number of cars/vans is distributed within
    Northern Ireland by coloring each output area based on its frequency:'
  prefs: []
  type: TYPE_NORMAL
- en: From this plot, we can observe that most of the areas have around 200 vehicles,
    except for small areas marked in green colour.
  prefs: []
  type: TYPE_NORMAL
- en: '**Extract centroid from geometry**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s suppose that we want to change the geometry and have the coordinates
    in the centre of the output areas, instead of the polygons. This is possible by
    using the `gdf.geomtry.centroid` property to compute the centroid of each output
    area:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6844f82e81b6c8188565f38413960620.png)'
  prefs: []
  type: TYPE_IMG
- en: If we display again the information of the dataframe, we can notice that both
    geometry and centroid are encoded as geometry types.
  prefs: []
  type: TYPE_NORMAL
- en: The better way to understand what we really obtained is to visualize both geometry
    and centroid columns in a unique map. To plot the centroids, it’s needed to switch
    the geometry by using `set_geometry()`method.
  prefs: []
  type: TYPE_NORMAL
- en: Create more complex maps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some advanced features to visualize more details in the map, without
    creating any other informative column. Before we have shown the number of cars
    or vans in each output area, but it was more confusing than informative. It would
    be better to create a categorical feature based on our numerical column. With
    GeoPandas, we can skip that passage and plot it directly. By specifying the argument
    `scheme=’intervals’` , we are able to create classes of cars/vans based on equal
    intervals.
  prefs: []
  type: TYPE_NORMAL
- en: 'The map didn’t change a lot, but you can see that the legend is much more clear
    compared to the previous version. A better way to visualize the map would be to
    colour it based on levels built using quantiles:'
  prefs: []
  type: TYPE_NORMAL
- en: Now, it’s possible to spot more variability within the map since each level
    contains a more distributed number of areas. It’s worth noticing that most areas
    belong to the last two levels, corresponding to the highest number of vehicles.
    In the first visualization, 200 vehicles seemed a low number, but there was instead
    a high number of outliers with high frequencies that distorted our interpretation.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we also would like to have a background map to contextualize
    better our results. The most popular way to do it is by using contextily library,
    which allows to get a background map. This library requires the Web Mercator coordinate
    reference system (EPSG:3857). For this reason, we need to convert our data to
    this crs. The code to plot the map remains the same, except for an additional
    line to add the base map from Contextily library:'
  prefs: []
  type: TYPE_NORMAL
- en: That’s cool! Now, we have a more professional and detailed map!
  prefs: []
  type: TYPE_NORMAL
- en: 'Final thoughts:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This was an introductory tutorial for getting started to make practice with
    geospatial data using Python. GeoPandas is a Python library specialized in working
    with vector data. It’s very easy and intuitive to use since it has properties
    and methods similar to Pandas, but it becomes very slow as soon as the amount
    of data grows, in particular when plotting the data.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to his bad point, there is the fact that it depends on the Fiona
    library for reading and writing vector data formats. In case Fiona doesn’t support
    some formats, even GeoPandas is able to support them. One solution can be by using
    in combination GeoPandas to manipulate data and QGIS to visualize the map. Or
    trying other Python libraries to visualize the data, like Folium. Do you know
    other alternatives? Suggest them in the comments, if you have other ideas.
  prefs: []
  type: TYPE_NORMAL
- en: The code can be found [here](https://jovian.com/eugeniaring/geopandas-example).
    I hope you found the article useful. Have a nice day!
  prefs: []
  type: TYPE_NORMAL
- en: '*Disclaimer: The data sets are licensed under UK Open Government License (OGL)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Useful Resources:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Geopandas documentation](https://geopandas.org/en/stable/docs.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Contextily documentation](https://contextily.readthedocs.io/en/latest/#)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Geographic Data Science book](https://geographicdata.science/book/intro.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Course of Geospatial Data Analysis (University of Trento)](https://napo.github.io/geospatial_course_unitn/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
