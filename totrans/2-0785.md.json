["```py\ndef add_numbers(a, b):\n    return a + b\n\ndef factorial(n):\n    \"\"\"\n    Function to perform factorial operations. eg:\n    0! = 1 (by convention, the factorial of 0 is defined to be 1).\n    1! = 1 (since there is only one positive integer from 1 to 1).\n    2! = 2 x 1 = 2.\n    3! = 3 x 2 x 1 = 6.\n    4! = 4 x 3 x 2 x 1 = 24.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers.\")\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n```", "```py\nimport unittest\nfrom math_functions import add_numbers, factorial\n\nclass TestFunctions(unittest.TestCase):\n    #Below functions test the add_numbers function\n    def test_addition_positive_numbers(self):\n        self.assertEqual(add_numbers(2, 3), 5)\n\n    def test_addition_negative_numbers(self):\n        self.assertEqual(add_numbers(-2, -3), -5)\n\n    #Below functions test the factorial function\n    def test_factorial_zero(self):\n        self.assertEqual(factorial(0), 1)\n\n    def test_factorial_positive_number(self):\n        self.assertEqual(factorial(5), 120)\n\n    def test_factorial_negative_number(self):\n        with self.assertRaises(ValueError):\n            factorial(-2)\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\ndef test_factorial_negative_number(self):\n        with self.assertRaises(ValueError):\n            factorial(-2)\n```", "```py\ndef factorial(n):\n    \"\"\"\n    Function to perform factorial operations. eg:\n    0! = 1 (by convention, the factorial of 0 is defined to be 1).\n    1! = 1 (since there is only one positive integer from 1 to 1).\n    2! = 2 x 1 = 2.\n    3! = 3 x 2 x 1 = 6.\n    4! = 4 x 3 x 2 x 1 = 24.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers.\")\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n```", "```py\nimport requests\n\ndef get_weather_data(city):\n    \"\"\"\n    Simulates an API call to fetch weather data\n    \"\"\"\n    response = requests.get(f'https://api.weather.com/data/{city}')\n    if response.status_code == 200:\n        return response.json()\n    else:\n        raise Exception(\"Failed to fetch weather data\")\n\ndef analyze_weather(city):\n    \"\"\"\n    Perform analysis on weather data\n    \"\"\"\n    data = get_weather_data(city)\n\n    if data['temperature'] > 25 and data['humidity'] < 70:\n        return \"Hot and dry\"\n    elif data['temperature'] < 10:\n        return \"Cold\"\n    else:\n        return \"Moderate\"\n```", "```py\nimport unittest\nfrom unittest.mock import patch\nfrom get_weather_data import analyze_weather\n\nclass TestGetWeatherData(unittest.TestCase):\n    @patch('get_weather_data.requests.get')\n    def test_analyze_weather_hot_dry(self, mock_get):\n        mock_response = mock_get.return_value\n        mock_response.status_code = 200\n        mock_response.json.return_value = {\n            'temperature': 30,\n            'humidity': 60\n        }\n        result = analyze_weather('city')\n        self.assertEqual(result, \"Hot and dry\")\n\n    @patch('get_weather_data.requests.get')\n    def test_analyze_weather_cold(self, mock_get):\n        mock_response = mock_get.return_value\n        mock_response.status_code = 200\n        mock_response.json.return_value = {\n            'temperature': 5,\n            'humidity': 80\n        }\n        result = analyze_weather('city')\n        self.assertEqual(result, \"Cold\")\n\n    @patch('get_weather_data.requests.get')\n    def test_analyze_weather_moderate(self, mock_get):\n        mock_response = mock_get.return_value\n        mock_response.status_code = 200\n        mock_response.json.return_value = {\n            'temperature': 20,\n            'humidity': 50\n        }\n        result = analyze_weather('city')\n        self.assertEqual(result, \"Moderate\")\n\n    @patch('get_weather_data.requests.get')\n    def test_analyze_weather_api_failure(self, mock_get):\n        mock_get.return_value.status_code = 404\n        with self.assertRaises(Exception):\n            analyze_weather('city')\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\nclass TestGetWeatherData(unittest.TestCase):\n    @patch('get_weather_data.requests.get')\n    def test_analyze_weather_hot_dry(self, mock_get):\n        mock_response = mock_get.return_value\n        mock_response.status_code = 200\n        mock_response.json.return_value = {\n            'temperature': 30,\n            'humidity': 60\n        }\n        result = analyze_weather('city')\n        self.assertEqual(result, \"Hot and dry\")\n```", "```py\nimport requests\n\ndef get_company_data(company_name):\n    try:\n        response = requests.get(f'https://api.example.com/companies/{company_name}')\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.RequestException as e:\n        raise Exception(f\"Failed to fetch company data: {e}\")\n\ndef analyze_company(company_name):\n    try:\n        data = get_company_data(company_name)\n        if not data:\n            raise Exception(\"Company 'non_existent_company' not found in data\")\n\n        # Check if the confidence score is 0.9 or higher\n        confidence_score = data.get(\"confidence_score\", 0)  # Default to 0 if confidence_score is missing\n        if confidence_score < 0.9:\n            raise Exception(\"Company does not meet the confidence score threshold for analysis\")\n\n        # Check schema\n        required_fields = [\"name\", \"revenue\", \"employees\", \"industry\", \"location\", \"confidence_score\"]\n        for field in required_fields:\n            if field not in data:\n                raise Exception(f\"Missing '{field}' in company data\")\n\n        # Perform further analysis on data below.......\n        #\n        #\n        #\n\n        return f\"Analysis result for {data['name']}\"\n\n    except Exception as e:\n        raise Exception(f\"Failed to analyze company data: {e}\")\n```", "```py\n{\n  \"company_1\": {\n      \"name\": \"ABC Inc.\",\n      \"revenue\": 1000000,\n      \"employees\": 50,\n      \"industry\": \"Technology\",\n      \"location\": \"New York\",\n      \"confidence_score\": 0.8,\n      \"leadership\": {\n          \"ceo\": \"John Doe\",\n          \"cto\": \"Jane Smith\"\n      },\n      \"products\": [\n          {\n              \"name\": \"Product A\",\n              \"category\": \"Software\"\n          },\n          {\n              \"name\": \"Product B\",\n              \"category\": \"Hardware\"\n          }\n      ]\n  },\n  \"company_2\": {\n      \"name\": \"XYZ Ltd.\",\n      \"revenue\": 500000,\n      \"employees\": 20,\n      \"industry\": \"Finance\",\n      \"location\": \"London\",\n      \"confidence_score\": 0.9,\n      \"leadership\": {\n          \"ceo\": \"Alice Johnson\",\n          \"cfo\": \"Bob Williams\"\n      },\n      \"products\": [\n          {\n              \"name\": \"Product X\",\n              \"category\": \"Finance Software\"\n          }\n      ]\n  }\n}\n```", "```py\nimport unittest\nimport json\nfrom unittest.mock import patch, Mock\nfrom get_company_data import analyze_company\n\nclass TestMyModule(unittest.TestCase):\n    @patch('get_company_data.requests.get')\n    def test_analyze_company_schema_and_confidence(self, mock_get):\n        # Load data from the fake_company_data.json file\n        with open('fake_company_data.json', 'r') as file:\n            company_data = json.load(file)\n\n        # Mock the response for an existing company with confidence score 0.9 (company_2)\n        mock_response = Mock()\n        mock_response.status_code = 200\n        mock_response.json.return_value = company_data['company_2']  # Use data for company_2\n        mock_get.return_value = mock_response\n\n        # Test for an existing company with a confidence score of 0.9\n        result = analyze_company('company_2')\n        self.assertEqual(result, \"Analysis result for XYZ Ltd.\")\n\n        # Check schema keys for company_2\n        self.assertIn(\"name\", company_data['company_2'])\n        self.assertIn(\"revenue\", company_data['company_2'])\n        self.assertIn(\"employees\", company_data['company_2'])\n        self.assertIn(\"industry\", company_data['company_2'])\n        self.assertIn(\"location\", company_data['company_2'])\n        self.assertIn(\"confidence_score\", company_data['company_2'])\n        self.assertIn(\"leadership\", company_data['company_2'])\n        self.assertIn(\"products\", company_data['company_2'])\n        #uncomment below test to see how test fails\n        #self.assertIn(\"dogs\", company_data['company_2'])\n\n        # Check confidence score for company_2\n        confidence_score = company_data['company_2'][\"confidence_score\"]\n        self.assertTrue(0.9 <= confidence_score <= 1, \"Confidence score should be 0.9 or higher\")\n\n        # Mock the response for a non-existent company\n        mock_response = Mock()\n        mock_response.status_code = 404\n        mock_response.json.side_effect = Exception(\"JSON decoding failed\")\n        mock_get.return_value = mock_response\n\n        # Mock the response for an existing company with confidence score 0.8 (company_1)\n        mock_response = Mock()\n        mock_response.status_code = 200\n        mock_response.json.return_value = company_data['company_1']  # Use data for company_1\n        mock_get.return_value = mock_response\n\n        # Test for an existing company with confidence score 0.8\n        with self.assertRaises(Exception) as context:\n            analyze_company('company_1')\n        self.assertIn(\"Company does not meet the confidence score threshold for analysis\", str(context.exception))\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\nfrom unittest.mock import Mock\n\napi_client = Mock()\n\n# Define different behaviors for successive calls to the 'get_data' method\napi_client.get_data.side_effect = [10, 20, 30]\n\n# Call 'get_data' method three times\nresult1 = api_client.get_data()  # Returns 10\nresult2 = api_client.get_data()  # Returns 20\nresult3 = api_client.get_data()  # Returns 30\n\nprint(result1, result2, result3)  # Output: 10 20 30\n```"]