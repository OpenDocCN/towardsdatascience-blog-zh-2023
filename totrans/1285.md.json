["```py\npip install hyperopt\n```", "```py\n# Import libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Define the function\ndef f(x):\n    return (x - 1) ** 2\n\n# Generate x values from -5 to 5\nx = np.linspace(-4, 6, 100)\n\n# Calculate corresponding y values\ny = f(x)\n\n# Find the minimum point\nmin_point = np.min(y)\n\n# Create the plot\nplt.plot(x, y, label='f(x) = (x-1)^2')\nplt.xlabel('x')\nplt.ylabel('f(x)')\nplt.title('f(x) = (x-1)^2')\n\n# Set the x-axis limits\nplt.xlim(-4, 6)\n\n# Add a horizontal dashed line at the minimum point\nplt.axhline(y=min_point, color='red', linestyle='dashed', label='Minimum Point')\n\n# Add a legend\nplt.legend()\n\n# Display the plot\nplt.show()\n```", "```py\n# 1\\. Import necessary libraries and packages\nfrom hyperopt import hp, fmin, tpe, Trials\n\n# 2\\. Define the objective function and the search space\ndef objective_function(x):\n    return (x - 1)**2\n\nsearch_space = hp.uniform('x', -2, 2)\n\n# 3\\. Run the optimization process\n\n# Trials object to store the results\ntrials = Trials()\n\n# Run the optimization\nbest = fmin(fn=objective_function, space=search_space, algo=tpe.suggest, trials=trials, max_evals=100)\n\n# 4\\. Print the results\nprint(best)\n```", "```py\n# Import libraries and packages\nfrom sklearn import datasets\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import cross_val_score\n\n# Load Iris dataset\niris = datasets.load_iris()\nX = iris.data\ny = iris.target\n```", "```py\ndef objective_function(parameters):\n    clf = SVC(**parameters)\n    score = cross_val_score(clf, X, y, cv=5).mean()\n    return -score\n```", "```py\n# Search Space\nsearch_space = {\n    'C': hp.uniform('C', 0.1, 10),\n    'gamma': hp.uniform('gamma', 0.01, 1)\n}\n```", "```py\n# Trials object to store the results\ntrials = Trials()\n\n# Run optimization\nbest = fmin(fn=objective_function, space=search_space, algo=tpe.suggest, trials=trials, max_evals=100)\n```", "```py\nprint(best)\n```", "```py\n# Import libraries\nimport matplotlib.pyplot as plt\n\ndef plot_obj_vs_hp(trials, search_space, best):\n    # Extract the results\n    results = trials.trials\n\n    # Create a list of hyperparameters\n    hyperparameters = list(search_space.keys())\n\n    # Create a new figure with 2 subplots side by side\n    fig, axes = plt.subplots(1, 2, figsize=(12, 6))\n\n    # Loop through hyperparameters and generate plots\n    for idx, hp in enumerate(hyperparameters):\n        # Extract the values of a given hyperparameter\n        hp_values = [res['misc']['vals'][f'{hp}'] for res in results]\n\n        # Flatten the list of values\n        hp_values = [item for sublist in hp_values for item in sublist]\n\n        # Extract the corresponding objective function values\n        objective_values = [res['result']['loss'] for res in results]\n\n        # Create the scatter plot\n        axes[idx].scatter(hp_values, objective_values, label='Trial Hyperparameter Combinations')\n\n        # Highlight the best hyperparameters\n        axes[idx].scatter(best[hp], min(objective_values), color='red', label='Best Hyperparameter Combinations')\n        axes[idx].set_xlabel(f'{hp}')\n        axes[idx].set_ylabel('Loss')\n        axes[idx].set_title(f'Loss vs. {hp}')\n        axes[idx].legend(loc='upper right')\n\n    plt.tight_layout()\n    plt.show()\n```", "```py\n# Plot optimization vs. hyperparameters in 2D\nplot_obj_vs_hp(trials, search_space, best)\n```", "```py\n# Import libraries\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\n\n# Define 3D plot function\ndef plot_obj_vs_hp_3d(trials, search_space, best):\n    # Extract the results\n    results = trials.trials\n\n    # Create a list of hyperparameters\n    hyperparameters = list(search_space.keys())\n\n    # Extract the values of hyperparameters\n    hp_values_0 = [res['misc']['vals'][f'{hyperparameters[0]}'] for res in results]\n    hp_values_1 = [res['misc']['vals'][f'{hyperparameters[1]}'] for res in results]\n\n    # Flatten the lists of values\n    hp_values_0 = [item for sublist in hp_values_0 for item in sublist]\n    hp_values_1 = [item for sublist in hp_values_1 for item in sublist]\n\n    # Extract the corresponding objective function values\n    objective_values = [res['result']['loss'] for res in results]\n\n    # Create a new figure\n    fig = plt.figure(figsize=(10, 7))\n\n    # Add a 3D subplot\n    ax = fig.add_subplot(111, projection='3d')\n\n    # Create the scatter plot\n    scatter = ax.scatter(hp_values_0, hp_values_1, objective_values, c=objective_values, cmap='viridis', label='Trial hyperparameters')\n\n    # Highlight the best hyperparameters\n    ax.scatter(best[hyperparameters[0]], best[hyperparameters[1]], min(objective_values), color='red', label='Best hyperparameters')\n\n    # Add labels using hyperparameters from search_space\n    ax.set_xlabel(hyperparameters[0])\n    ax.set_ylabel(hyperparameters[1])\n    ax.set_zlabel('Loss')\n    ax.set_title('Loss Across Hyperparameters')\n    fig.colorbar(scatter)\n    ax.legend(loc='upper right')\n\n    plt.show()\n```", "```py\n# Plot optimization vs. hyperparameters in 3D\nplot_obj_vs_hp_3d(trials, search_space, best)\n```", "```py\n# Import libraries and packages\nfrom sklearn import datasets\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom hyperopt import fmin, tpe, hp, Trials\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n# Load Diabetes dataset\ndiabetes = datasets.load_diabetes()\nX = diabetes.data\ny = diabetes.target\n```", "```py\n# Define objective function\ndef objective_function(parameters):\n    # Initiate RandomForestRegressor\n    regressor = RandomForestRegressor(**parameters)\n\n    # Calculate the mean cross-validation score using 5 folds\n    score = cross_val_score(regressor, X, y, cv=5).mean()\n\n    return -score\n\n# Define search Space\nsearch_space = {\n    'n_estimators': hp.choice('n_estimators', range(10, 300)),\n    'max_depth': hp.choice('max_depth', range(1, 30)),\n}\n```", "```py\n# Trials object to store the results\ntrials = Trials()\n\n# Run optimization\nbest = fmin(fn=objective_function, space=search_space, algo=tpe.suggest, trials=trials, max_evals=100)\n```", "```py\nprint(best)\n```", "```py\n# Plot optimization vs. hyperparameters in 2D\nplot_obj_vs_hp(trials, search_space, best)\n```", "```py\n# Plot optimization vs. hyperparameters in 3D\nplot_obj_vs_hp_3d(trials, search_space, best)\n```"]