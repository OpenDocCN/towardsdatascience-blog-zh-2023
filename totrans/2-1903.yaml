- en: Leveraging analytic functions in SQL for faster data extraction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用SQL中的分析函数加速数据提取
- en: 原文：[https://towardsdatascience.com/sql-window-functions-939ed24c9752](https://towardsdatascience.com/sql-window-functions-939ed24c9752)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/sql-window-functions-939ed24c9752](https://towardsdatascience.com/sql-window-functions-939ed24c9752)
- en: Analytic functions provide an incredibly powerful and yet easy to implement
    way to process and analyze data. This post will show you how to incorporate analytic
    functions in your SQL statements.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析函数提供了一种极其强大且易于实现的数据处理和分析方式。本文将展示如何在SQL语句中使用分析函数。
- en: '[](https://guenterroehrich.medium.com/?source=post_page-----939ed24c9752--------------------------------)[![Günter
    Röhrich](../Images/31a1d0dc835c7ad31197f8c387023d10.png)](https://guenterroehrich.medium.com/?source=post_page-----939ed24c9752--------------------------------)[](https://towardsdatascience.com/?source=post_page-----939ed24c9752--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----939ed24c9752--------------------------------)
    [Günter Röhrich](https://guenterroehrich.medium.com/?source=post_page-----939ed24c9752--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://guenterroehrich.medium.com/?source=post_page-----939ed24c9752--------------------------------)[![Günter
    Röhrich](../Images/31a1d0dc835c7ad31197f8c387023d10.png)](https://guenterroehrich.medium.com/?source=post_page-----939ed24c9752--------------------------------)[](https://towardsdatascience.com/?source=post_page-----939ed24c9752--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----939ed24c9752--------------------------------)
    [Günter Röhrich](https://guenterroehrich.medium.com/?source=post_page-----939ed24c9752--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----939ed24c9752--------------------------------)
    ·8 min read·Jul 18, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----939ed24c9752--------------------------------)
    ·8分钟阅读·2023年7月18日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: As an analytics professional, you will likely find yourself in a scenario where
    you’re required to query data for your analysis. Quite often, data is obtained
    from a SQL database and then imported through a programming language like Python
    using powerful frameworks such as Pandas or NumPy. This is a perfectly fine pipeline
    to work with data, however, the heavy lifting is mainly done by your local machine.
    With small datasets, this is not an issue, but when it comes to larger datasets,
    one might encounter issues achieving the heavy processing solely in the PC’s local
    memory.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名分析师，你很可能会遇到需要查询数据以进行分析的情景。数据通常来自SQL数据库，然后通过像Python这样的编程语言和Pandas或NumPy等强大框架导入。这是一种处理数据的完全有效的管道，但重的计算主要依赖于你的本地机器。对于小数据集，这不是问题，但对于较大的数据集，可能会遇到仅依靠PC本地内存处理大量数据的困难。
- en: '*You may think that this is not a common problem. Therefore, let me give an
    everyday example to prove this assumption wrong:*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可能认为这不是一个常见的问题。因此，让我给出一个日常的例子来证明这个假设是错误的：*'
- en: Imagine you worked in a manufacturing company and you were interested in collecting
    machine sensor data. This data is often collected frequently and might also be
    quite noisy. To better understand what’s going on with your machine, smoothing,
    and pre-processing the densely collected data (e.g. measurements could be collected
    several times per second) quickly results in immense dataset sizes! Let’s assume
    we have 150 sensors placed alongside a machine, and each one of them is reading
    4 measurements per second. One single day would then produce
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你在一家制造公司工作，并且对收集机器传感器数据感兴趣。这些数据通常被频繁收集，而且可能非常嘈杂。为了更好地理解你的机器状态，对密集收集的数据进行平滑和预处理（例如，测量可能每秒收集几次）很快就会产生庞大的数据集！假设我们在一台机器旁边放置了150个传感器，每个传感器每秒读取4次数据。那么一天的数据将会产生
- en: 4×60×60×24x150 ≈ 52m records (Readings x Seconds x Minutes x Hours x Sensors)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 4×60×60×24x150 ≈ 52百万条记录（读取次数 × 秒 × 分钟 × 小时 × 传感器）
- en: data points. Usually, as a rule of thumb, we look at at least one week of data
    (but we might also increase readings or even the number of sensors)… you see where
    this is going.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 数据点。通常，作为经验法则，我们会查看至少一周的数据（但我们也可能增加读取次数或传感器数量）……你能理解这点。
- en: For this reason, you might be better off shifting your computationally expensive
    aggregations to the source database. In particular, analytic or window functions
    are straightforward in its syntax, yet a powerful tool to read, transform, and
    extract data on a more aggregated level.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你可能更好地将计算成本高的聚合操作转移到源数据库中。特别是，分析或窗口函数的语法直接明了，却是读取、转换和提取数据的强大工具，适用于更高层次的聚合。
- en: '**The key take away**:'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**关键要点**：'
- en: ''
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Whenever you see the need for a rolling / moving window or calculations within
    a logical partition (e.g. continously ranking, lowest ro highest value, within a certain group of sensors),
    it is certainly worthwhile considering the application of window functions in
    a SQL query directly, rather than achieving similar functionality with more expensive
    functions implemented in Pandas.
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 每当你看到需要滚动/移动窗口或在逻辑分区内进行计算（例如，持续排名，从最低到最高值，在某些传感器组内），直接在 SQL 查询中应用窗口函数通常是值得考虑的，而不是使用
    Pandas 中实现的更昂贵的函数来实现类似的功能。
- en: How is this brief article structured?
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这篇简短的文章是如何结构化的？
- en: A [short introductory](#c6e6) example and theory how window functions work
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个 [简短的介绍](#c6e6) 例子和窗口函数如何工作的理论
- en: A [quick guide to install some SQL demo data](#819b) as well as a ready-to-go
    database on your computer (this is easy!). We will use the famous **New York Taxi**
    data
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个 [快速指南来安装一些 SQL 演示数据](#819b) 以及一个可以在电脑上直接使用的数据库（这很简单！）。我们将使用著名的 **纽约出租车**
    数据。
- en: '[Examples](#f9cd) to get yourself familiar to the functions'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[示例](#f9cd) 让你熟悉这些函数'
- en: '![](../Images/07f82d39dbfab5144ca87e8f110b152d.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/07f82d39dbfab5144ca87e8f110b152d.png)'
- en: A bunch of windows by [Julio César Bosch](https://unsplash.com/@jcbossch?utm_source=medium&utm_medium=referral)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一些窗口函数的 [Julio César Bosch](https://unsplash.com/@jcbossch?utm_source=medium&utm_medium=referral)
- en: Intro
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '**Why do you need window functions?**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么你需要窗口函数？**'
- en: With all the buzz around the more attractive domains of data science, we often
    oversee the fact that most of a data scientist’s time is spent on obtaining, processing,
    and cleaning data. Whenever you see the need for computationally expensive running
    sums or a moving average, you should consider shifting those transformations to
    the database.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据科学更具吸引力的领域引起的轰动中，我们常常忽视了数据科学家大部分时间花费在获取、处理和清洗数据上。每当你看到需要计算成本高的运行总和或移动平均时，你应该考虑将这些转换操作转移到数据库中。
- en: This type of **functions is performed on a series of rows that do contextually
    belong together**. Typically, we think of sums, averages, min or max calculations
    when it comes to such transactions.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这种 **函数是对一系列语境上相关的行进行操作**。通常，当涉及此类事务时，我们会考虑总和、平均值、最小值或最大值计算。
- en: '**How are window functions structured in general?**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**窗口函数一般是如何结构的？**'
- en: 'To begin with the structure of a query that uses a window function, let’s have
    a look at a SQL statement that uses a rolling sum — Just have a look at the code
    block, there is *no need yet to fully understand* the concept, just consider the
    code as a simple demonstration for now:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，了解使用窗口函数的查询结构，我们来看一个使用滚动总和的 SQL 语句——只需查看代码块，不需要完全理解概念，暂时把代码当作简单演示：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'First, we specify the type of analysis we would like to perform. In general
    there **are three types of functions** to use:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们指定我们希望执行的分析类型。一般来说，**有三种类型的函数** 可供使用：
- en: '**Aggregate functions**, such as min(), max(), count() or avg() — this is what
    was shown in the first example above'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聚合函数**，如 min()、max()、count() 或 avg()——这在上面的第一个示例中展示过'
- en: '**Numbering functions**, such as rank() or row_number()'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编号函数**，如 rank() 或 row_number()'
- en: '**Navigation functions** such as lead(), lag() [to return the proceeding or
    preceding value)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导航函数** 如 lead()、lag() [返回后续或前值]'
- en: 2\. In a next step, we start thinking of **logical partitions**. As an example,
    we could select a user ID as a partitioning example, hence we look into blocks
    of users and perform further operations on each of the user subsets. Partitions
    are required to pass to the function!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 在下一步中，我们开始考虑 **逻辑分区**。例如，我们可以选择用户 ID 作为分区示例，因此我们查看用户块，并对每个用户子集执行进一步操作。必须将分区传递给函数！
- en: 3\. Similar to a group by statement, we should also consider an ordering argument
    in an analytic function. Ordering is applied on the selected sub block, as defined
    before. Ordering is optional and may be omitted.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 类似于 group by 语句，我们还应在分析函数中考虑排序参数。排序应用于之前定义的选定子块。排序是可选的，可以省略。
- en: '4\. Lastly, the core element of an analytic (or window) function: the window
    frame clause. This clause specifies the rolling time window we would like to look
    into.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 4. 最后，分析（或窗口）函数的核心元素：窗口框架子句。这个子句指定了我们希望查看的滚动时间窗口。
- en: To get into more theory, follow the link below — Please note that window functions
    may behave slightly differently between different SQL databases, however, their
    general structure is pretty much identical.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要深入了解更多理论，请访问下面的链接 — 请注意，窗口函数在不同的 SQL 数据库中可能会有所不同，但它们的一般结构基本相同。
- en: '[](https://www.sqlite.org/windowfunctions.html?source=post_page-----939ed24c9752--------------------------------)
    [## Window Functions'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 窗口函数'
- en: A window function is an SQL function where the input values are taken from a
    "window" of one or more rows in the…
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 窗口函数是 SQL 函数，其中输入值来自一个或多个行的“窗口”中的...
- en: www.sqlite.org](https://www.sqlite.org/windowfunctions.html?source=post_page-----939ed24c9752--------------------------------)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.sqlite.org](https://www.sqlite.org/windowfunctions.html?source=post_page-----939ed24c9752--------------------------------)'
- en: Quick Installation Guide
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速安装指南
- en: 'To illustrate how window functions work, I’ll provide some examples using one
    subset of the the famous New York taxis datasets. In general you will need the
    following tools to work your way through the examples yourself:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明窗口函数如何工作，我将提供一些使用著名的纽约出租车数据集的子集的示例。通常，你需要以下工具来自己完成这些示例：
- en: Python installed (used for extraction, requires sqlite3 and pandas libraries)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装 Python（用于提取，需 sqlite3 和 pandas 库）
- en: A tool to write queries and look at data (When it comes to SQL, [DBeaver](https://dbeaver.io/)
    is an incredibly powerful tool to query data, yet it is easy to work with and
    open source
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种编写查询和查看数据的工具（谈到 SQL，[DBeaver](https://dbeaver.io/) 是一个功能强大的数据查询工具，但易于使用且开源。
- en: And that’s it!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！
- en: 'If you would like to replicate the steps shown, simply follow the link below
    and get your download:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想复制所展示的步骤，只需访问下面的链接并下载即可：
- en: '[## TLC Trip Record Data'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[## TLC 行程记录数据'
- en: Yellow and green taxi trip records include fields capturing pick-up and drop-off
    dates/times, pick-up and drop-off…
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 黄绿出租车的行程记录包括捕捉接送日期/时间的字段、接送...
- en: www.nyc.gov](https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page?source=post_page-----939ed24c9752--------------------------------)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.nyc.gov](https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page?source=post_page-----939ed24c9752--------------------------------)'
- en: '*Legal side note:* [***There are no restrictions on using the data, given the
    intended purpose of use is lawful***](https://opendata.cityofnewyork.us/faq/)
    *as outlined in the terms of use. More license details and the dataset citation
    are added at the* [***end of the article***](#55c1)*.*'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*法律说明：* [***只要使用目的合法***](https://opendata.cityofnewyork.us/faq/) *，数据使用没有限制*，如使用条款中所述。更多许可证详细信息和数据集引用请见*
    [***文章结尾***](#55c1)*。'
- en: 'After the download succeeded I suggest transforming the parquet file to a sqlite3
    database. Using Python and the Pandas as well as sqlite3 packages, this is achieved
    in no time — just copy paste the code in a script and you’re all set:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 下载成功后，我建议将 parquet 文件转换为 sqlite3 数据库。使用 Python 以及 Pandas 和 sqlite3 包，这很快就能实现——只需将代码复制粘贴到脚本中，你就准备好了：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Done! We can now work in a very trivial SQL database that is stored on our hard
    drive.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了！我们现在可以在存储在硬盘上的非常简单的 SQL 数据库中工作了。
- en: Examples
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例
- en: Let’s start with the simple task of obtaining the sum and average of fares over
    the whole data. For this we can use the arguments SUM and AVG and omit the grouping
    criteria in the braces following the over statement. As we are only aggregating
    over the whole dataset, there is no need to use a window function yet.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从获取整个数据的费用总和和平均值这一简单任务开始。为此，我们可以使用 SUM 和 AVG 参数，并在 over 语句后的括号中省略分组标准。由于我们只是对整个数据集进行聚合，因此尚无需使用窗口函数。
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/06436db2bdcf52ed992317bb26256d77.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/06436db2bdcf52ed992317bb26256d77.png)'
- en: 'Assuming we would like to know the sum and average fares for every individual
    Vendor (*VendorID*) for every day of the month — this task becomes slightly more
    challenging:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想了解每一天每个供应商（*VendorID*）的总费用和平均费用——这个任务会变得稍微有些挑战：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/549e85fece5f8d334761342f1f4ede5a.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/549e85fece5f8d334761342f1f4ede5a.png)'
- en: As we can see, in order to achieve a grouping effect we need the group by key
    word that allows us to aggregate according to *VendorId* and *dropdate*. Although
    group by is very powerful, it **does not allow us to further break down the individual
    rows as an trailing sum or moving average** — and this is where the window function
    comes in handy.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，为了实现分组效果，我们需要使用分组关键字，使我们能够根据*VendorId*和*dropdate*进行汇总。虽然分组非常强大，但它**不能进一步将单独行拆分为拖尾总和或移动平均值**——这时窗口函数就派上用场了。
- en: Assume now, we would like to calculate the rolling sum and mean values for the
    *fare_amount*, broken down by the *VendorID*s and related trips on every day.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们想计算*fare_amount*的滚动总和和均值，并按*VendorID*和相关的每日行程进行分类。
- en: Our window operates within our dedicated “partitions”. We define a partition
    to be a whole day, hence, we expect to see rolling sum and means for each day
    and vendor (or equivalently, within each partition).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的窗口操作在我们指定的“分区”内。我们定义一个分区为整天，因此，我们期望看到每一天和每个供应商的滚动总和和均值（或等效地，在每个分区内）。
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/eac4044ad950a0b8b8737d8c29746276.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eac4044ad950a0b8b8737d8c29746276.png)'
- en: Every partition (dropdate + VendorID) shows the fare amount per row as well
    as a rolling sum
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 每个分区（dropdate + VendorID）显示每行的票价以及滚动总和。
- en: Note the following, we used “*unbounded preceding*” as frame clause. This means
    we look at all preceding values WITHIN OUR PARTITION — and again, our partition
    is defined as *Date* + *VendorID.*
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下事项，我们使用了“*unbounded preceding*”作为框架子句。这意味着我们查看在我们分区内的所有前置值——再说一次，我们的分区定义为*Date*
    + *VendorID*。
- en: If we only want to look at a rolling sum/mean that considers the **previous
    as well as the current fare** (again under the partition of *Date*+*VendorID*)
    we need to adjust the frame clause to *only 1 preceding row and the current row*.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只想查看一个滚动总和/均值，该均值考虑到**之前和当前的票价**（再次在*Date*+*VendorID*的分区内），我们需要将框架子句调整为*仅1行之前和当前行*。
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/ff00522d98c3c7c3e385011179813d0d.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ff00522d98c3c7c3e385011179813d0d.png)'
- en: “1 Preceding” results in a moving sum/mean that only looks at the current and
    previous trip fare_amount — again, this is always within partition
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: “1 Preceding”结果是一个移动总和/均值，仅查看当前和之前的行程票价——再说一次，这始终在分区内。
- en: In the last example we will combine all the previous steps to show how we can
    elegantly query simple aggregated data and use this data to perform the rank()
    statement — which is an analytic numbering function.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个示例中，我们将结合所有之前的步骤，展示如何优雅地查询简单的汇总数据，并使用这些数据执行rank()语句——这是一种分析编号函数。
- en: 'We would like rank the days by the highest total amount of fares collected,
    for each of the vendors. We will therefore break this into two steps:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望按每个供应商收取的总票价的最高值对天数进行排名。因此，我们将这分为两个步骤：
- en: Aggregate the fares by day and vendor through a simple “*group by*”
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过简单的“*group by*”按天和供应商汇总票价
- en: Use an analytics function to rank the days within the partition of “*VendorID*”
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用分析函数对“*VendorID*”分区内的天数进行排名
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/36e5e85ac50aae1644d0bf97f7dc1e0f.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/36e5e85ac50aae1644d0bf97f7dc1e0f.png)'
- en: Starting with *VendorID=1*, the best day in January was 26th, which ranks first
    (highest revenue)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 从*VendorID=1*开始，1月份最好的日子是26号，它排名第一（收入最高）。
- en: Conclusion
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: By now I believe you got the gist behind how analytics function work and how
    flexible they are to achieve rather complex query results.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，我相信你已经掌握了分析函数的工作原理以及它们如何灵活地实现相当复杂的查询结果。
- en: While data is nowadays often transformed on a local machine or cloud instance,
    modifying the data before actually importing it to subsequent software is often
    the better choice — that said, SQL is an incredibly powerful language to do so!
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然数据现在通常在本地机器或云实例上转换，但在实际导入到后续软件之前修改数据通常是更好的选择——也就是说，SQL是一种非常强大的语言来完成这项任务！
- en: '**If you found this post helpful, I would appreciate a “follow” 🫀, until then:**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你觉得这篇文章对你有帮助，我会很感激你的“关注”🫀，直到那时：**'
- en: '*{Take care of yourself, and if you can, someone else too}*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*{照顾好自己，如果可以的话，也照顾好别人}*'
- en: '*— borrowed from Stephen Dubner*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*—— 借用自斯蒂芬·杜布纳*'
- en: '**Dataset citation** and terms of use:'
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**数据集引用**和使用条款：'
- en: New York City Taxi and Limousine Commission (TLC) Trip Record Data was accessed
    on July 13 from [https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page](https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 纽约市出租车和豪华轿车委员会（TLC）的行程记录数据于7月13日从[https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page](https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page)访问。
- en: 'The full terms of use can be found here:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的使用条款可以在这里找到：
- en: '[](https://www.nyc.gov/home/terms-of-use.page?source=post_page-----939ed24c9752--------------------------------)
    [## Terms of Use'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://www.nyc.gov/home/terms-of-use.page?source=post_page-----939ed24c9752--------------------------------)
    [## 使用条款'
- en: Welcome to New York City's Official Website. PLEASE READ THE FOLLOWING TERMS
    OF USE ("TERMS") CAREFULLY BEFORE USING…
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 欢迎访问纽约市官方网站。在使用之前，请仔细阅读以下使用条款（“条款”）…
- en: www.nyc.gov](https://www.nyc.gov/home/terms-of-use.page?source=post_page-----939ed24c9752--------------------------------)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: www.nyc.gov](https://www.nyc.gov/home/terms-of-use.page?source=post_page-----939ed24c9752--------------------------------)
