- en: 'Python Inheritance: Should You Inherit From dict or UserDict?'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 继承：你应该继承自 `dict` 还是 `UserDict`？
- en: 原文：[https://towardsdatascience.com/python-inheritance-should-you-inherit-from-dict-or-userdict-9b4450830cbb](https://towardsdatascience.com/python-inheritance-should-you-inherit-from-dict-or-userdict-9b4450830cbb)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/python-inheritance-should-you-inherit-from-dict-or-userdict-9b4450830cbb](https://towardsdatascience.com/python-inheritance-should-you-inherit-from-dict-or-userdict-9b4450830cbb)
- en: PYTHON PROGRAMMING
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON PROGRAMMING
- en: They say you shouldn’t inherit from dict but UserDict. Is this true indeed?
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 他们说你不应该继承 `dict` 而应该继承 `UserDict`。这是真的吗？
- en: '[](https://medium.com/@nyggus?source=post_page-----9b4450830cbb--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----9b4450830cbb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9b4450830cbb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9b4450830cbb--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----9b4450830cbb--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus?source=post_page-----9b4450830cbb--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page-----9b4450830cbb--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9b4450830cbb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9b4450830cbb--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page-----9b4450830cbb--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9b4450830cbb--------------------------------)
    ·15 min read·May 10, 2023
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9b4450830cbb--------------------------------)
    ·15 分钟阅读·2023年5月10日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/c72ec52580061eee2cab00288f3dddbf.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c72ec52580061eee2cab00288f3dddbf.png)'
- en: Dictionaries are among the basic Python data types. Photo by [Waldemar](https://unsplash.com/@waldemarbrandt67w?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 字典是 Python 基本数据类型之一。照片由 [Waldemar](https://unsplash.com/@waldemarbrandt67w?utm_source=medium&utm_medium=referral)
    提供，[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Inheriting from `dict` is usually not the best idea — not only because they
    say so, but because the overloaded methods will not work. Instead, you’re supposed
    to subclass `collections.UserDict`. But what if you do not want to overload `dict`
    methods, just to add new ones? In this article, we will discuss when and how to
    inherit from the `dict` and `collections.UserDict` classes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 继承自 `dict` 通常不是最佳选择——不仅因为他们这么说，还因为重载的方法不会工作。相反，你应该继承 `collections.UserDict`。但如果你不想重载
    `dict` 方法，只是想添加新的方法呢？在本文中，我们将讨论何时以及如何继承 `dict` 和 `collections.UserDict` 类。
- en: 'In his fantastic book *Fluent Python. 2nd ed.*, Luciano Ramalho explains why
    you should not create custom classes inheriting from `dict`. The reason behind
    this rule, strange at the first glance, is simple but critical: `dict` is a highly
    optimized type implemented in C, and it wouldn’t call the methods you overload
    in your subclass of `dict`.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在他那本精彩的书籍 *Fluent Python. 2nd ed.* 中，Luciano Ramalho 解释了为什么你不应该创建继承自 `dict`
    的自定义类。这条规则的理由，一开始看起来很奇怪，但其实简单而关键：`dict` 是一个高度优化的类型，由 C 实现，它不会调用你在 `dict` 子类中重载的方法。
- en: 'That would be a nasty surprise, wouldn’t it? Let’s see this in an example.
    Imagine you want to create a dictionary-like class in which the provided values
    will be converted to their string representation. Let’s try to do this by subclassing
    the `dict` built-in type:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是一个令人讨厌的惊喜，不是吗？让我们来看一个例子。假设你想创建一个类似字典的类，其中提供的值将被转换为它们的字符串表示。让我们尝试通过继承 `dict`
    内置类型来做到这一点：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This seems like perfectly valid Python code. Let’s see how this works:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来像是完全有效的 Python 代码。让我们看看这怎么运作：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Well, it does not work at all — or rather, this `__setitem__` method does not
    work at all. We wanted to get values converted to strings but they are not. Nonetheless,
    we don’t see any error; the class itself works somehow — in fact, it works just
    like a regular dictionary would. (Or rather, it provides the same results but
    slower; we will discuss this later on.)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这根本不起作用——或者说，这个`__setitem__`方法根本不起作用。我们想将值转换为字符串，但它们没有被转换。不过，我们没有看到任何错误；这个类本身以某种方式工作——实际上，它的工作方式就像一个普通的字典一样。（或者说，它提供了相同的结果但更慢；我们稍后会讨论这个问题。）
- en: 'To get what you want, you should subclass `UserDict`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了达到你想要的效果，你应该继承 `UserDict`：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you see the only thing we changed in the definition is subclassing `UserDict`
    instead of `dict`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，我们在定义中唯一改变的就是继承 `UserDict` 而不是 `dict`。
- en: So now you know. It’s enough to use `UserDict`. Great.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在你知道了。使用 `UserDict` 就足够了。太好了。
- en: Is it?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 会吗？
- en: Consequences
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结果
- en: Hold on. Let’s think. There are a couple of things we should consider before
    deciding that using `UserDict` instead of `dict` is so great.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 等等。我们来考虑一下。在决定使用 `UserDict` 而不是 `dict` 是否如此出色之前，我们应该考虑一些事情。
- en: First, we know that Python’s built-in types are highly optimized because they
    are implemented in C, and that this implementation itself is highly optimized.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们知道 Python 的内建类型是高度优化的，因为它们是用 C 实现的，而这种实现本身也经过了高度优化。
- en: Second, we know that we shouldn’t subclass `dict` because its methods implemented
    in C will not call the overwritten methods implemented in Python.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们知道我们不应该继承 `dict`，因为它的 C 实现方法不会调用用 Python 实现的重写方法。
- en: 'And third, an easy thing to check, `collections.UserDict` is implemented in
    Python. In Linux, you will find its definition here:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，简单的一点需要检查，`collections.UserDict` 是用 Python 实现的。在 Linux 中，你可以在这里找到它的定义：
- en: '![](../Images/b4e6c7a118564c65b2e2ed8e1df68ed4.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b4e6c7a118564c65b2e2ed8e1df68ed4.png)'
- en: Localization of UserDict definition in Linux. Screenshot from VS Code. Image
    by author
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserDict` 定义的本地化在 Linux 中。来自 VS Code 的截图。图片由作者提供'
- en: 'In this context, the following question asks itself: If so, will my custom
    class subclassing `UserDict` be performant?'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，以下问题自然会出现：如果是这样，我自定义的继承 `UserDict` 的类会有良好的性能吗？
- en: My immediate guess is that no, it won’t. The optimization of `dict` comes from
    C implementation, and `UserDict` is implemented in Python. Why should it be optimized
    whatsoever? We will check this in the following section.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我立即猜测不会。`dict` 的优化来自 C 实现，而 `UserDict` 是用 Python 实现的。它为什么应该有所优化呢？我们将在接下来的部分中检查这一点。
- en: Benchmarking UserDict against dict
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`UserDict` 与 `dict` 的基准测试'
- en: 'For benchmarks, we will use the standard-library `timeit` module. You can read
    about it here:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基准测试，我们将使用标准库中的 `timeit` 模块。你可以在这里了解更多信息：
- en: '[](/benchmarking-python-code-with-timeit-80827e131e48?source=post_page-----9b4450830cbb--------------------------------)
    [## Benchmarking Python code with timeit'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/benchmarking-python-code-with-timeit-80827e131e48?source=post_page-----9b4450830cbb--------------------------------)
    [## 使用 timeit 进行 Python 代码基准测试'
- en: The most popular tool for time benchmarking of Python code, the built-in timeit
    module offers more than most…
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最流行的 Python 代码时间基准测试工具，内建的 timeit 模块提供了比大多数工具更多的功能…
- en: towardsdatascience.com](/benchmarking-python-code-with-timeit-80827e131e48?source=post_page-----9b4450830cbb--------------------------------)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/benchmarking-python-code-with-timeit-80827e131e48?source=post_page-----9b4450830cbb--------------------------------)'
- en: 'To make benchmarks a little simpler and structurized, let us define a simple
    function to run time benchmarks for two or more code snippets:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使基准测试稍微简单和结构化一点，让我们定义一个简单的函数来对两个或更多代码片段进行时间基准测试：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A couple of things:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 几件事：
- en: 'The function uses the `[rounder](https://pypi.org/project/rounder/)` package,
    to round all numbers in the dictionary to four significant digits; you can read
    more about it here:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个函数使用了 `[rounder](https://pypi.org/project/rounder/)` 包，将字典中的所有数字四舍五入到四位有效数字；你可以在这里了解更多信息：
- en: '[](/rounder-rounding-numbers-in-complex-python-objects-e4b6f3b563f8?source=post_page-----9b4450830cbb--------------------------------)
    [## rounder: Rounding Numbers in Complex Python Objects'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/rounder-rounding-numbers-in-complex-python-objects-e4b6f3b563f8?source=post_page-----9b4450830cbb--------------------------------)
    [## rounder：在复杂的 Python 对象中四舍五入数字'
- en: The rounder package enables you to round all numbers in any object, with just
    one command.
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`rounder` 包允许你通过一个命令将任何对象中的所有数字进行四舍五入。'
- en: towardsdatascience.com](/rounder-rounding-numbers-in-complex-python-objects-e4b6f3b563f8?source=post_page-----9b4450830cbb--------------------------------)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/rounder-rounding-numbers-in-complex-python-objects-e4b6f3b563f8?source=post_page-----9b4450830cbb--------------------------------)'
- en: '`__snippet1` and `__snippet2` are positional-only arguments, so you cannot
    call them by name. This is thanks to the double-underscore prefix.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__snippet1` 和 `__snippet2` 是仅限位置的参数，因此你不能通过名称调用它们。这要归功于双下划线前缀。'
- en: Thanks to `*args` after the two snippet arguments, you can provide more snippets,
    also as positional keywords; you can use as many of them as you want.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多亏了两个片段参数后的 `*args`，你可以提供更多的片段，也可以作为位置关键字；你可以根据需要使用任意多个。
- en: All the remaining arguments are keyword-only. Here, this is achieved by putting
    them after `*args`.¹
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有剩余的参数都是仅限关键字的。在这里，这是通过将它们放在 `*args` 之后实现的。¹
- en: The function report the results as the mean of all calls from the quickest of
    seven runs. Hence, all the results are directly comparable, even if the `timeit.repeat()`
    function was used with different `number` values.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个函数报告的结果是七次运行中最快的一次的平均值。因此，所有结果都是直接可比的，即使`timeit.repeat()`函数使用了不同的`number`值。
- en: The function return implicit `None` and prints a short report of the benchmarks,
    using the `pprint()` function from the standard-library `pprint` module. More
    often than not, avoid replacing return statements with prints², unless your function/method
    is a one that *prints*.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个函数隐式返回`None`并打印基准测试的简短报告，使用标准库`pprint`模块中的`pprint()`函数。通常，避免将返回语句替换为打印²，除非你的函数/方法是一个*打印*的函数。
- en: 'Okay, we’ll see the function in action in a second. Let’s start off with comparing
    how quickly `dict()` and `UserDict()` create instances. Nonetheless, we can instantiate
    a regular dictionary using two methods, `dict()` and (significantly faster) `{}`,
    so we’ll include them both:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们马上会看到这个函数的实际效果。首先，让我们比较一下`dict()`和`UserDict()`创建实例的速度。然而，我们可以通过两种方法实例化一个常规字典，即`dict()`和（显著更快的）`{}`，所以我们会同时考虑这两者：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For all benchmarks in this article, I used Python 3.11 on a Windows 10 machine,
    in WSL 1, 32 GM of RAM and four physical (eight logical) cores. The benchmark
    shows that to create a new instance, `UserDict` is twice slower than `dict`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文的所有基准测试中，我使用了Python 3.11，在Windows 10机器上，WSL 1环境中，32 GB内存和四个物理（八个逻辑）核心。基准测试显示，创建一个新实例时，`UserDict`的速度是`dict`的两倍慢。
- en: As mentioned above, the values we see in the results dictionary represent the
    time of creating *one* instance of either `UserDict` or regular `dict` (created
    using two methods). Clearly, to create an instance of `UserDict`, you need more
    time, about `1.3e-07` of a second — while `{}` needs about `1.5e-08`. Not a big
    difference? Note when you need to create a single instance, but imagine creating
    millions of dictionaries. So, to create a regular dictionary, you need more or
    less *3–8 times less time* than to create a `UserDict`, depending on the instantiation
    method.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，我们在结果字典中看到的值代表了创建*一个*`UserDict`或常规`dict`（通过两种方法创建）的时间。显然，创建一个`UserDict`实例需要更多时间，大约`1.3e-07`秒——而`{}`需要大约`1.5e-08`秒。差异不大？注意当你需要创建一个单一实例时，但想象一下创建数百万个字典。因此，创建一个常规字典所需的时间大约是创建`UserDict`的*3–8倍*，具体取决于实例化方法。
- en: 'Let’s see how this works with bigger dictionaries. We’ll create a simple numerical
    dictionary via a dictionary comprehension. Since `UserDict` does not enable us
    to use the dictcomp syntax (another drawback), the only thing we can do is to
    create first a regular dictionary using the dictcomp syntax and then convert it
    to a `UserDict` instance:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看较大字典的情况。我们将通过字典推导式创建一个简单的数值字典。由于`UserDict`不允许使用dictcomp语法（另一个缺点），我们唯一能做的就是先使用dictcomp语法创建一个常规字典，然后将其转换为`UserDict`实例：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A regular dictionary is about 2.5 times faster. That seems quite amazing given
    that creating an empty dictionary was even faster. We have to remember that the
    results of such benchmarks can vary from run to run. But we also have to remember
    that when we use many repetitions (here, a hundred thousand — we could use more),
    the variation should be relatively small.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常规字典快了大约2.5倍。考虑到创建一个空字典的速度甚至更快，这似乎相当惊人。我们必须记住，这些基准测试的结果可能会有所不同。但我们也必须记住，当我们使用许多重复测试（这里是十万次——我们可以使用更多）时，结果的差异应该相对较小。
- en: Will the size matter when we compare lookup time? Basically key lookup is unrelated
    to dictionary size, so supposedly, we should be getting similar results irrespective
    of dict size.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们比较查找时间时，大小会影响结果吗？基本上，键查找与字典大小无关，因此，字典大小的不同应该不会影响结果。
- en: 'First, a small dictionary:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，一个小字典：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Okay, so about 3.5 times slower. Now, for a bigger one, of `10_000` key-value
    pairs:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以慢了大约3.5倍。现在，对于一个更大的`10_000`键值对的字典：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'and for one of 10 million elements:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于1000万个元素的情况：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'So, the size indeed does not matter, and every time, `dict` was more or less
    3–3.5 times faster. Let’s see, this time just for medium-sized dictionaries, how
    it works with an unexisting key:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，大小确实不重要，每次`dict`都快了大约3–3.5倍。让我们看看，这次仅针对中等大小的字典，如何处理不存在的键：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This time it’s a bigger difference, `dict` being over 10 times faster.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这次差距更大，`dict`的速度超过了`10`倍。
- en: What about checking if a key is in the dictionary?
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 检查一个键是否在字典中呢？
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: So, again 3–3.5 times faster.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，再次是3–3.5倍快。
- en: 'Now, let’s benchmark a frequent operation, that is, iterating over a dictionary;
    again, let’s check various sizes of the dictionary:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们基准测试一个频繁操作，即遍历字典；再次检查不同大小的字典：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Okay, so for small dictionaries, `dict` is about 7 times faster to loop over
    its key-value pairs available via the `.items()` method. For medium-sized dictionaries
    (of 10 thousand elements in our experiment), about 9 times faster. For bigger
    dictionaries (of `100_000` elements), the result was similar, so looping itself
    — once it started — does not seem to depend on the type of dictionary.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，对于小型字典来说，`dict`在遍历其键值对（通过`.items()`方法提供）时大约快7倍。对于中型字典（在我们的实验中有1万元素），快约9倍。对于更大的字典（有`100_000`个元素），结果类似，因此一旦开始循环，循环本身似乎并不依赖于字典的类型。
- en: Since it was a rather minor benchmark, we can conclude that a regular dictionary
    should be around 5–10 times faster to loop over its items than `UserDict`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这只是一个相当小的基准测试，我们可以得出结论：常规字典在遍历其项目时应该比`UserDict`快约5–10倍。
- en: To conclude the benchmarks
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论基准测试
- en: Maybe let’s stop here. We could conduct more benchmarks, but that’s not the
    point. I did not want to conduct a full comparison of `dict` and `UserDict` in
    terms of execution time; if you’re interested, you can play with the code to conduct
    a set of solid benchmarks. Instead, I wanted to shed some light on the issue and
    check if, as I expected based on the knowledge of `UserDict` and `dict`’s implementations,
    the former is significantly slower than the latter.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 也许我们在这里停下来吧。我们可以进行更多基准测试，但这不是重点。我不想进行`dict`和`UserDict`在执行时间上的全面比较；如果你感兴趣，可以尝试代码进行一系列可靠的基准测试。相反，我想阐明这个问题，并检查是否像我基于`UserDict`和`dict`的实现知识所预期的那样，前者明显比后者慢。
- en: And it is — unless you consider 5–10 times slower as an insignificant number.
    So, if you only can, consider using regular dictionaries, not those subclassing
    `UserDict`, unless you must change the behavior of `dict`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 而且——除非你认为5–10倍更慢是一个微不足道的数字。所以，如果你能的话，考虑使用常规字典，而不是那些继承`UserDict`的字典，除非你必须改变`dict`的行为。
- en: Ah… Why can’t we just subclass `dict`?! Why?
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 啊……为什么我们不能直接继承`dict`？！为什么？
- en: Or… Can we?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 或者……我们可以吗？
- en: Don’t subclass dict? And why not?!
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不要继承`dict`？那为什么不呢？！
- en: Perhaps you’ve noticed that the rule of not subclassing `dict` is related to
    the `dict` methods implemented in C, which would not call the built-in `dict`
    methods overloaded in Python. But what if you just want to add some functionalities
    to `dict`, leaving the methods already implemented in C untouched?
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你已经注意到，不继承`dict`的规则与用C实现的`dict`方法有关，这些方法不会调用在Python中重载的内置`dict`方法。但如果你只是想给`dict`添加一些功能，而不触动已经用C实现的方法呢？
- en: 'That’s a very good question. And the answer is short and simple: Yes, you can
    do it! You *can* inherit from `dict`; simply don’t overload `dict`’s methods,
    that’s all.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常好的问题。答案简短而简单：是的，你可以这样做！你*可以*从`dict`继承；只需不要重载`dict`的方法，仅此而已。
- en: The question is, will such a `dict`-based class be as performant as `dict`?
    Or rather as `collections.UserDict`? To answer this question, we will have to
    run some more benchmarks.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是，基于`dict`的类会像`dict`一样高效吗？或者说像`collections.UserDict`一样吗？为了回答这个问题，我们需要运行更多的基准测试。
- en: 'Let’s imagine we keep some data in a dictionary, and we want to add method
    `.summarize()` that calculates some summary statistics for the data. It could
    be something like this (just an example):'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们想象我们在一个字典中保存一些数据，我们想要添加一个`.summarize()`方法来计算数据的一些摘要统计信息。它可能像这样（仅作为示例）：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`RichDict` is a `dict` with one more method: `.summarize()`. The method does
    the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`RichDict`是一个`dict`，多了一个方法：`.summarize()`。这个方法执行以下操作：'
- en: It iterates over key-value pairs of the data (reached via the `.items` method).
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它遍历数据的键值对（通过`.items`方法获取）。
- en: When a value is a string, `statistics` includes only length and is returned
    as a dictionary with one key, `n`.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当值是字符串时，`statistics`仅包含长度，并作为一个包含一个键`n`的字典返回。
- en: When a value is a `Sequence`, the main summary statistics are calculated. The
    measures are kept as callables in a class attribute `RichDict.measures`, which
    is a dictionary.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当值是`Sequence`时，计算主要的摘要统计信息。度量以可调用的形式保存在类属性`RichDict.measures`中，它是一个字典。
- en: 'The method protects calculations: if a measure cannot be calculated, an exception
    is caught and `float("nan")` (for *not-a-number*) is returned as the results of
    calculations. That way, Python will not throw an error when attempting to calculate
    the mean of an empty list, for instance.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该方法保护计算：如果无法计算一个度量，则会捕获异常并返回`float("nan")`（表示*不是数字*）作为计算结果。这样，例如，Python 在尝试计算空列表的均值时不会抛出错误。
- en: 'If you want to add a measure, you can easily do it:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想添加一个度量，可以轻松做到：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If the function is more complicated, you can use a `lambda` function:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数更复杂，你可以使用`lambda`函数：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'or, preferably, first define a function and then assign it here:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，更好地，首先定义一个函数，然后在这里分配它：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note that since `.measures` is a class attribute, all instances of `RichDict`
    (those to be created, but also those already existing) will have the extended
    measures, with `min` and `max` statistics.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于`.measures`是一个类属性，所有的`RichDict`实例（包括即将创建的和已经存在的）都将具有扩展的度量，包括`min`和`max`统计信息。
- en: 'Just one example of `RichDict` in action:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`RichDict`在实际应用中的一个例子：
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../Images/3318c11f8c1f78be6a64b5787c89fff5.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3318c11f8c1f78be6a64b5787c89fff5.png)'
- en: Above, the `RichDict` class has one class attribute with measures to be used
    for sequence data; for strings, the `.summarize()` methods calculates only one
    measure. Update the class so that it has two class attributes, `measures_seq`
    and `measures_str`, designed as `measures` above. For strings, the `.summarize()`
    method should calculate the measures the way it does for sequences, that is, using
    `measures_str`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，`RichDict`类有一个类属性，包含用于序列数据的度量；对于字符串，`.summarize()` 方法只计算一个度量。更新类，使其具有两个类属性`measures_seq`和`measures_str`，其设计方式与上面的`measures`相同。对于字符串，`.summarize()`
    方法应按序列的方式计算度量，即使用`measures_str`。
- en: You will find the solution in Appendix 1.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在附录 1 中找到解决方案。
- en: '![](../Images/89f1c24cf1dd3f341ddc19cd83009d2e.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/89f1c24cf1dd3f341ddc19cd83009d2e.png)'
- en: 'In the code, I used the standard-library `doctests` module for documentation
    testing. If you’re interested in learning more about this interesting module,
    you can do so from this article:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，我使用了标准库中的`doctests`模块进行文档测试。如果你有兴趣了解更多关于这个有趣模块的内容，可以从这篇文章中了解：
- en: '[](/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----9b4450830cbb--------------------------------)
    [## Python Documentation Testing with doctest: The Easy Way'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----9b4450830cbb--------------------------------)
    [## 使用 doctest 进行 Python 文档测试：简单方法'
- en: doctest allows for documentation, unit and integration testing, and test-driven
    development.
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: doctest 允许进行文档、单元和集成测试以及测试驱动开发。
- en: towardsdatascience.com](/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----9b4450830cbb--------------------------------)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/python-documentation-testing-with-doctest-the-easy-way-c024556313ca?source=post_page-----9b4450830cbb--------------------------------)
- en: Okay, now that we know that `RichDict` works, we know we *can* subclass `dict`.
    What we want to learn now is whether `RichDict`’s added functionality, defined
    in Python (not in C, like the base code for `dict`), adds some overhead time for
    the regular behavior of `dict`. To this end, we will benchmark such behavior as
    creating a new `RichDict` versus creating a new `dict`, key lookup, and the like.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在我们知道`RichDict`有效，我们知道我们*可以*子类化`dict`。我们现在想要了解的是`RichDict`增加的功能（用 Python
    定义，而不是 C 语言，就像`dict`的基础代码一样）是否会为`dict`的常规行为增加一些开销。为此，我们将基准测试此类行为，例如创建一个新的`RichDict`与创建一个新的`dict`、键查找等。
- en: Let’s conduct similar benchmarks to those above, conducted for `UserDict`. You
    can find the code for them in [this GitHib gist](https://gist.github.com/nyggus/430a6ee05ea69cbd9e46c2d31ebedb95).
    You will find there the `setup` value used below.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进行类似于上面为`UserDict`进行的基准测试。你可以在[这个 GitHib gist](https://gist.github.com/nyggus/430a6ee05ea69cbd9e46c2d31ebedb95)中找到相关代码。你会在那里找到下面使用的`setup`值。
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As shown above, when it comes to creating an empty instance, `RichDict` is significantly
    faster than `UserDict` (about 2 times faster) and slower than `dict` (about 2
    times slower).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所示，当创建一个空实例时，`RichDict`的速度明显比`UserDict`快（约快 2 倍），但比`dict`慢（约慢 2 倍）。
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This time, `RichDict` is about 2.5 times faster than `UserDict` but a little
    slower (around 1.3 times) than `dict`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，`RichDict`比`UserDict`快约 2.5 倍，但比`dict`稍慢（约慢 1.3 倍）。
- en: 'Below, you will find examples of more benchmarks, separated by blank lines
    for your convenience:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 下面，你将找到更多基准测试的示例，为方便起见，示例之间以空行分隔：
- en: '[PRE19]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The numbers themselves say what we need, and so I will leave you with them for
    the moment.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 数字本身说明了我们需要的内容，所以我暂时将它们留给你。
- en: To conclude the benchmarks
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结基准测试结果
- en: '`RichDict` is usually slower than `dict` (though sometimes only very little)
    but faster than `UserDict`.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`RichDict`通常比`dict`慢（尽管有时只是很少），但比`UserDict`快。'
- en: Thus, if you just want to add some functionalities to `dict`, without overwriting
    its built-in methods, you *definitely* *can subclass* `dict`. I’d say this should
    be your preferred method, instead of subclassing `collections.UserDict`, as the
    latter is significantly slower. *Do remember* that we’re talking about the situation
    when you do not need to change the regular behavior of a dictionary, just to add
    some new behavior.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你只是想给`dict`添加一些功能，而不覆盖其内置方法，你*绝对* *可以子类化* `dict`。我会说这应该是你首选的方法，而不是子类化`collections.UserDict`，因为后者明显更慢。*请记住*，我们讨论的是当你不需要改变字典的常规行为，只是添加一些新行为的情况。
- en: 'Remember also that you will have to pay a tax for using a built-in type that
    way: Your class (in our example, `RichDict`) will be slower than `dict`. Still,
    however, it will be faster than `UserDict`, which was created for this very aim:
    to let you inherit from… well, not from `dict`, so rather to let you create a
    new type (class) that will have the same behavior as `dict`. Using `UserDict`,
    unfortunately, is rather costly, as its performance is significantly worse than
    that of `dict`.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 还要记住，使用内置类型的方式会有一个代价：你的类（在我们的例子中是`RichDict`）会比`dict`更慢。不过，它仍然比`UserDict`快，而`UserDict`的创建目的就是为了让你继承……嗯，不是从`dict`继承，而是让你创建一个具有`dict`相同行为的新类型（类）。不幸的是，使用`UserDict`是相当昂贵的，因为它的性能比`dict`差得多。
- en: Conclusion
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'Let’s summarize our discussion about subclassing `dict` and `UserDict`. We’ve
    learned we have three options to choose from:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下关于子类化`dict`和`UserDict`的讨论。我们了解到，我们有三种选择：
- en: Inherit from `UserDict`, when you want to overwrite the built-in behavior of
    `dict`. This will be the slowest option.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`UserDict`继承，当你想要覆盖`dict`的内置行为时。这将是最慢的选项。
- en: Inherit from `dict`, when you don’t want to overwrite the built-in behavior
    of `dict`, but to add new functionalities (methods). This will be a faster option
    than option 1.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`dict`继承，当你不想覆盖`dict`的内置行为，而是添加新功能（方法）时。这将比选项1快。
- en: Use the built-in `dict` type, without creating a custom class. If you need custom
    functionalities, you can implement them in functions that take a `dict` instance
    as an argument. This is the fastest option (see below).
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用内置的`dict`类型，而不创建自定义类。如果你需要自定义功能，你可以在接受`dict`实例作为参数的函数中实现它们。这是最快的选项（见下文）。
- en: We have not discussed the third option yet, as it does not include subclassing.
    Not much to discuss, though, as this is the simplest approach, one that uses a
    more procedural approach rather than OOP. On the one hand, using the `summarize()`
    function in this approach would be only a little (if any at all) faster than using
    the `RichDict.summarize()` method in option 2\. [This gist](https://gist.github.com/nyggus/cd41a181ad2e23425279db1961438ca4)
    contains the corresponding benchmark code; in my machine, it provided a small
    but stable (from run to run) improvement in performance. On the other hand, all
    the other behavior of regular `dict`, as we know, is significantly faster than
    that of `RichDict`. Hence, generally, option 3 offers the fastest way to handle
    a dictionary with additional functionalities.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有讨论第三种选项，因为它不涉及子类化。不过，不需要讨论太多，因为这是最简单的方法，它使用的是一种更程序化的方法，而不是面向对象的方法。一方面，使用这种方法的`summarize()`函数比使用选项2中的`RichDict.summarize()`方法快一点（如果有的话）。[这个要点](https://gist.github.com/nyggus/cd41a181ad2e23425279db1961438ca4)包含了相应的基准测试代码；在我的机器上，它提供了一个小而稳定（从运行到运行）性能提升。另一方面，我们知道，常规`dict`的所有其他行为明显比`RichDict`要快。因此，一般来说，选项3提供了处理具有附加功能的字典的最快方法。
- en: Thus, if performance matters, the most sensible seems to be the third option
    — that is, using a regular dictionary and implementing the additional required
    behavior in external functions. Depending on the situation, it can also be an
    option with the clearest code, as it does not require a custom data structure
    but uses a dictionary, one of the most common data structures in Python, combined
    with a function. More often than not, this means clearer code.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果性能很重要，最明智的选择似乎是第三种选项——即使用常规字典，并在外部函数中实现所需的附加行为。根据情况，这也可能是代码最清晰的选项，因为它不需要自定义数据结构，而是结合了字典（Python中最常见的数据结构之一）和函数。通常，这意味着代码更清晰。
- en: The second option means worse performance, as adding methods to `dict` leads
    to overhead time of its behavior. As we know, option 3 gets rid of this overhead
    by moving the method outside the dictionary.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种选择意味着更差的性能，因为向`dict`添加方法会导致其行为的额外开销。如我们所知，选项3通过将方法移到字典之外来消除这种开销。
- en: 'The first option is definitely the worst one in terms of performance. I think
    the only situations in which this option makes sense are those in which *each*
    of the following three conditions is met:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种选择在性能方面绝对是最差的。我认为只有在满足以下三个条件中的*每一个*时，这个选项才有意义：
- en: performance does not matter
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能不重要
- en: you need to overwrite one or more built-in `dict` methods
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要重写一个或多个内置的`dict`方法。
- en: the code will be clearer and easier to use thanks to creating a class that will
    join all the required functionalities
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于创建一个将所有所需功能组合在一起的类，代码将更清晰、更易于使用。
- en: Footnotes
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚注
- en: ¹ I am planning to write a dedicated article to positional-only and keyword-only
    arguments. Once it’s published, I will link it here.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: ¹ 我计划写一篇关于仅位置参数和仅关键字参数的专门文章。一旦发表，我会在这里链接。
- en: ² By the way, in an interactive session, a return from the function would have
    the same effect (of course, when the results are not assigned). I ran the benchmarks
    in a script, not an interactive session, however.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: ² 顺便提一下，在交互式会话中，函数的返回会有相同的效果（当然，当结果未被赋值时）。不过，我是在脚本中运行基准测试的，而不是交互式会话中。
- en: Appendix 1
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录1
- en: Solution to the exercise
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习的解决方案
- en: You can do it in various way. The below solution avoids repetition, but also
    makes it easy to add yet another type (to `Sequence` and `str`) to calculations.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用各种方式来做。下面的解决方案避免了重复，但也使得向计算中添加另一种类型（到`Sequence`和`str`）变得容易。
- en: '[PRE20]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Thanks for reading. If you enjoyed this article, you may also enjoy other articles
    I wrote; you will see them [here](https://medium.com/@nyggus). And if you want
    to join Medium, please use my referral link below:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。如果你喜欢这篇文章，你可能还会喜欢我写的其他文章；你可以在[这里](https://medium.com/@nyggus)查看。如果你想加入Medium，请使用我下面的推荐链接：
- en: '[](https://medium.com/@nyggus/membership?source=post_page-----9b4450830cbb--------------------------------)
    [## Join Medium with my referral link - Marcin Kozak'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 使用我的推荐链接加入Medium - Marcin Kozak](https://medium.com/@nyggus/membership?source=post_page-----9b4450830cbb--------------------------------)'
- en: Read every story from Marcin Kozak (and thousands of other writers on Medium).
    Your membership fee directly supports…
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读Marcin Kozak的每一个故事（以及Medium上的其他成千上万位作家的故事）。你的会员费直接支持…
- en: medium.com](https://medium.com/@nyggus/membership?source=post_page-----9b4450830cbb--------------------------------)
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/@nyggus/membership?source=post_page-----9b4450830cbb--------------------------------)'
