- en: 1 Best Alternative To Seaborn Distplot in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/the-best-alternative-to-seaborn-distplot-in-python-ea95391e6d29](https://towardsdatascience.com/the-best-alternative-to-seaborn-distplot-in-python-ea95391e6d29)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Data Science
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Seaborn Distplot is deprecated — let’s explore its alternatives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@17.rsuraj?source=post_page-----ea95391e6d29--------------------------------)[![Suraj
    Gurav](../Images/f5dca32861f8c1c428e66fbe2174c04b.png)](https://medium.com/@17.rsuraj?source=post_page-----ea95391e6d29--------------------------------)[](https://towardsdatascience.com/?source=post_page-----ea95391e6d29--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----ea95391e6d29--------------------------------)
    [Suraj Gurav](https://medium.com/@17.rsuraj?source=post_page-----ea95391e6d29--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----ea95391e6d29--------------------------------)
    ·8 min read·Jun 14, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/350943ef7e0e1078140b5804fe7bb1e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Bon Vivant](https://unsplash.com/fr/@bonvivant?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/photos/FcS257Cw9es?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Seaborn is a well-known data visualization library in Python.
  prefs: []
  type: TYPE_NORMAL
- en: As it is built on top of matplotlib and works perfectly with pandas data structures,
    it is handy while working with data in Python, as it transforms data into insightful
    visualizations. It helps in focusing on the required information and grasping
    the results faster.
  prefs: []
  type: TYPE_NORMAL
- en: However, each library evolves over a period of time and so the Seaborn is.
  prefs: []
  type: TYPE_NORMAL
- en: When I used Seaborn to create distribution plots in my project, I come across
    the function deprecation warning as below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/830cc96a8f02c00f125f1d0c1fbd078b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: So, I started looking for alternatives and am sharing my findings today.
  prefs: []
  type: TYPE_NORMAL
- en: In this quick read, you’ll learn why Seaborn deprecated the amazing function
    `distplot()`, the current best alternative for it, and how to use it to create
    graphs the same as `distplot()`.
  prefs: []
  type: TYPE_NORMAL
- en: Here is a sneak peek into the contents —
  prefs: []
  type: TYPE_NORMAL
- en: '***·*** [***Distplot in Seaborn***](#6a5b) ***·*** [***Why Seaborn Distplot
    is Deprecated?***](#da8e) ***·*** [***What are the Alternatives of Seaborn Distplot()?***](#3c70)
    ***∘*** [***displot() in Seaborn***](#0e98) ***·*** [***Use-cases of displot()
    in seaborn***](#e419) ***∘*** [***Bivariate distribution***](#3249) ***∘*** [***Plots
    with the Subsets of Data***](#aa05)'
  prefs: []
  type: TYPE_NORMAL
- en: I’ve taken amazing examples to make this read interesting and used Dry Beans
    Dataset from the UCI Machine Learning repository which is available under CC BY
    4.0 license.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2b6ca8d29ee56540b0cb34bf2aa1548e.png)'
  prefs: []
  type: TYPE_IMG
- en: Dry Beans Dataset | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Let’s dive in!
  prefs: []
  type: TYPE_NORMAL
- en: Before looking at the alternatives, let’s first understand the function `distplot()`
    and how it is useful.
  prefs: []
  type: TYPE_NORMAL
- en: Distplot in Seaborn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Distplot()` is a versatile function in the Seaborn library which is widely
    used for univariate data analysis. It helps you to create a histogram and Kernel
    Density Estimate (KDE) plot in the same visualization.'
  prefs: []
  type: TYPE_NORMAL
- en: What is univariate data analysis?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It is used to explore the characteristics and distribution of a single variable
    at a time, without considering its relationship with other variables in the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: So back to `distplot()`, which is comprised of a histogram and a KDE plot.
  prefs: []
  type: TYPE_NORMAL
- en: The histogram in `distplot()` shows the frequency or the count of data points
    that fall into different buckets i.e. bins.
  prefs: []
  type: TYPE_NORMAL
- en: The entire series or list of data points is binned into different buckets of
    the same size. The visualization is simply a bar chart where the X axis is usually
    buckets or bins and the Y axis represents the number of data points in the buckets.
  prefs: []
  type: TYPE_NORMAL
- en: Such a plot helps you understand how the data is distributed over the range
    of values.
  prefs: []
  type: TYPE_NORMAL
- en: Whereas KDE plot helps you to visualize the distribution of a variable by analyzing
    the underlying probability distribution function. In simpler words, it helps you
    understand the likeliness of observing the data points in different buckets or
    bins.
  prefs: []
  type: TYPE_NORMAL
- en: Using KDE plots you can learn about the shape of the data distribution, its
    peaks, and its spread.
  prefs: []
  type: TYPE_NORMAL
- en: For example, let’s use the `distplot()` function on the column — Perimeter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e88db030c76e0367c0bdaf66071ea5eb.png)'
  prefs: []
  type: TYPE_IMG
- en: Seaborn distplot() | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: As you see in the above visual, the bars represent the histogram whereas the
    smooth line is for the KDE plot.
  prefs: []
  type: TYPE_NORMAL
- en: As I mentioned, `distplot()` creates a KDE plot on the top of the already created
    histogram, and that’s why on the Y-axis you can see probability density values.
  prefs: []
  type: TYPE_NORMAL
- en: '**Don’t confuse Probability with Probability Density!**'
  prefs: []
  type: TYPE_NORMAL
- en: You need to multiply the probability density by the area under the curve to
    get probability from each probability density value.
  prefs: []
  type: TYPE_NORMAL
- en: Such KDE values can be used only for the relative comparison between different
    bins.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s understand why you should not use it in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Why Seaborn Distplot is Deprecated?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Distplot()` is one of the first few functions added in the Seaborn library,
    so its function definition is significantly different than the other functions
    which were added at a later stage.'
  prefs: []
  type: TYPE_NORMAL
- en: Here is the `distplot()` function definition as per [Seaborn official documentation](https://seaborn.pydata.org/generated/seaborn.distplot.html).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[Michael Waskom](https://gist.github.com/mwaskom) explains it precisely — `distplot()`
    API neither has the x, y parameter to select DataFrame columns nor it has conditional
    `hue` mapping.'
  prefs: []
  type: TYPE_NORMAL
- en: So when the Seaborn developers were updating the distribution modules in Seaborn
    v0.11.0, they found no better way than the deprecation of `distplot()` to be more
    consistent with the other distribution plot functions.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, Seaborn `distplot()` is deprecated in Seaborn v0.11.0.
  prefs: []
  type: TYPE_NORMAL
- en: Calling this function does not really stop you from creating plots, but it will
    issue a deprecation warning as I mentioned earlier.
  prefs: []
  type: TYPE_NORMAL
- en: That’s why I started exploring the alternatives.
  prefs: []
  type: TYPE_NORMAL
- en: What are the Alternatives to Seaborn Distplot()?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Seaborn documentation](https://seaborn.pydata.org/generated/seaborn.distplot.html)
    suggests two alternatives — `displot()` and `histplot()`. But, I personally found
    `displot()` as a versatile solution.'
  prefs: []
  type: TYPE_NORMAL
- en: Let me show you how similar or different it is compared to the deprecated `distplot()`.
  prefs: []
  type: TYPE_NORMAL
- en: displot() in Seaborn
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a one-stop solution for all types (univariate and bivariate) of distribution
    plots. All you need to do is pass a DataFrame and the column name whose distribution
    you want to see.
  prefs: []
  type: TYPE_NORMAL
- en: So, to get a similar distribution plot as above, for the column ‘Perimeter’
    you can use the below code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/cda1ff323724416a15c7d95ac2f5163b.png)'
  prefs: []
  type: TYPE_IMG
- en: Histogram using seaborn displot() | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: It simply creates a histogram which the same as the one created by the deprecated
    `distplot()` function. You can get this type of plot using the function `histplot()`,
    another alternative to the deprecated function.
  prefs: []
  type: TYPE_NORMAL
- en: But what about the KDE plot?
  prefs: []
  type: TYPE_NORMAL
- en: You can get a KDE plot as well, using this `displot()` function. This is when
    the `**kind**` parameter of this function is useful. You can assign `**kde**`
    to the parameter `kind` to get the Kernel Density Estimate plot like below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b86ee59296bc36ae7639e775a11b5104.png)'
  prefs: []
  type: TYPE_IMG
- en: KDE plot using Seaborn displot() | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: So far, so good!
  prefs: []
  type: TYPE_NORMAL
- en: But still, you may have a question — how does the function `displot()` create
    a plot similar to the one created using `distplot` where KDE is plotted on the
    top of the histogram?
  prefs: []
  type: TYPE_NORMAL
- en: And the answer is — the `**kde**` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: As you saw, by default `displot()` creates a histogram. So to create a KDE plot
    on the top of a histogram, you can set the `**kde**` parameter `**True**`, as
    shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1e8bba8a3fdc2efcfd8d80a59d8029ea.png)'
  prefs: []
  type: TYPE_IMG
- en: Seaborn histogram and kde plot using displot() | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: What really makes the `displot` function different than `distplot` is the Y-axis
    of the above chart.
  prefs: []
  type: TYPE_NORMAL
- en: In the deprecated function `distplot()` the Y-axis represents probability density
    whereas in the function `displot()` the Y-axis represents the count i.e. the number
    of data points in each bin.
  prefs: []
  type: TYPE_NORMAL
- en: The count on the Y-axis can be useful straightaway to understand which bin or
    range of values contains maximum/minimum data points, which is not the case with
    the probability density.
  prefs: []
  type: TYPE_NORMAL
- en: Well, the flexibility of the function `displot()` doesn’t stop here. Let me
    show you what else you can do with this function which was not an easy task with
    `distplot()`.
  prefs: []
  type: TYPE_NORMAL
- en: Use-cases of displot() in seaborn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The function `displot()` has a huge range of parameters that you can adjust
    to create a variety of plots.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can see in the above definition, the parameter `kind` is by default set
    to `‘hist’` which explains why `displot()` creates a histogram when the `kind`
    parameter is not specified.
  prefs: []
  type: TYPE_NORMAL
- en: I’m not diving into each of these parameters, but I must mention some of the
    interesting ones.
  prefs: []
  type: TYPE_NORMAL
- en: Bivariate distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ability of the `displot()` function to get input in terms of a DataFrame
    and X-Y — axis variables from that DataFrame makes it highly useful when you want
    to get bivariate distribution i.e. distribution of two variables.
  prefs: []
  type: TYPE_NORMAL
- en: For example, suppose you want to get the distribution of data points when two
    variables Perimeter and roundness are considered. You need to simply mention these
    variable names in X and Y parameters as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a5f0fadb741d4eb79a61a85faf9c2ebc.png)'
  prefs: []
  type: TYPE_IMG
- en: Bivariate distribution using displot() in Seaborn | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: The above chart clearly presents that the maximum number of data points falls
    in the dark region where Perimeter is between 600 and 800 and the roundness is
    more than 0.85.
  prefs: []
  type: TYPE_NORMAL
- en: So you can get such a type of bivariate distribution for all the numerical columns.
  prefs: []
  type: TYPE_NORMAL
- en: But what about categorical columns?
  prefs: []
  type: TYPE_NORMAL
- en: In the dataset, you can see that there is a categorical column — Class, which
    represents the different classes of beans. You can use this variable to create
    subsets of the data which can be easily plotted using `displot`.
  prefs: []
  type: TYPE_NORMAL
- en: Plots with the Subsets of Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While using the function `displot()`, you never need to create subsets of your
    DataFrame separately. You can simply use the parameter `**hue**` to create histograms
    or KDE plots for each subset of the data.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see it in action —
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d649309cb630e2319b727fbaa55fc5bb.png)'
  prefs: []
  type: TYPE_IMG
- en: Create histograms on the subset of data using Seaborn displot() | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: This is how you can see different histograms for each subset of the data.
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to get these different histograms on different subplots. In
    such case, instead of `hue` you should use `col` parameter as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a3d4883108616d1df84b74a8bce971d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Subplots using Seaborn displot() | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: In this way, `displot()` will create as many subplots as many different subsets
    you have.
  prefs: []
  type: TYPE_NORMAL
- en: You can explore the remaining parameters in `displot()` as and when needed in
    your project.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you found this article useful. Every data analytics library evolves over
    time. As a result, some functions get deprecated and get replaced with improved
    functions having better and easier user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Although, `distplot()` in Seaborn is deprecated, it is not completely out of
    the market. You can still use it, but it is good to switch to the better function—
    `displot` to get different distribution charts.
  prefs: []
  type: TYPE_NORMAL
- en: Interested in reading more stories on Medium??
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 💡 Consider [**Becoming a Medium Member**](https://medium.com/@17.rsuraj/membership)
    to **access unlimited** stories on medium and daily interesting Medium Newsletter.
    I will get a small portion of your fee and No additional cost to you.
  prefs: []
  type: TYPE_NORMAL
- en: 💡 Be sure to [**Sign-up & join 100+ others**](https://medium.com/@17.rsuraj/subscribe)to
    never miss another article on data science guides, tricks and tips, and best practices
    in SQL and Python.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading!
  prefs: []
  type: TYPE_NORMAL
- en: 'Dataset: [Dry Beans Dataset](https://archive.ics.uci.edu/dataset/602/dry+bean+dataset)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Citation: Dry Bean Dataset. (2020). UCI Machine Learning Repository. [https://doi.org/10.24432/C50S4B](https://doi.org/10.24432/C50S4B).'
  prefs: []
  type: TYPE_NORMAL
- en: 'License: [CC BY 4.0](https://creativecommons.org/licenses/by/4.0/legalcode)'
  prefs: []
  type: TYPE_NORMAL
