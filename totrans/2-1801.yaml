- en: Running SQL Queries in Jupyter Notebook using JupySQL, DuckDB, and MySQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/running-sql-queries-in-jupyter-notebook-using-jupysql-duckdb-and-mysql-3c53fbe40f8d](https://towardsdatascience.com/running-sql-queries-in-jupyter-notebook-using-jupysql-duckdb-and-mysql-3c53fbe40f8d)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn how to run SQL in your Jupyter Notebooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://weimenglee.medium.com/?source=post_page-----3c53fbe40f8d--------------------------------)[![Wei-Meng
    Lee](../Images/10fc13e8a6858502d6a7b89fcaad7a10.png)](https://weimenglee.medium.com/?source=post_page-----3c53fbe40f8d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----3c53fbe40f8d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----3c53fbe40f8d--------------------------------)
    [Wei-Meng Lee](https://weimenglee.medium.com/?source=post_page-----3c53fbe40f8d--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----3c53fbe40f8d--------------------------------)
    ·8 min read·Feb 24, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/243efc1d9e9a6b0829180fe106bd4934.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Wafer WAN](https://unsplash.com/@waferwan?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 'Traditionally, data scientists use Jupyter Notebook to pull data from database
    servers, or from external datasets (such as CSV, JSON files, etc) and store them
    into Pandas dataframes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/045e46113ac1e7638be1dcd0a1163924.png)'
  prefs: []
  type: TYPE_IMG
- en: All images by author unless otherwise stated
  prefs: []
  type: TYPE_NORMAL
- en: 'They then use the dataframes for visualization purposes. This approach has
    a couple of drawbacks:'
  prefs: []
  type: TYPE_NORMAL
- en: Querying a database server may degrade the performance of the database server,
    which may not be optimized for analytical workloads.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading the data into dataframes take up precious resources. For example, if
    the intention is to visualize certain aspects of the dataset, you need to first
    load the entire dataset into memory before visualization can be performed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To improve the performance of the above, ideally the processing of the data
    (all the data wrangling and filtering) should be offloaded to a client which is
    able to perform the data analytics efficiently, and return the result to be used
    for visualization. And this is the topic of this article — **JupySQL**.
  prefs: []
  type: TYPE_NORMAL
- en: J**upySQL is a SQL client for Jupyter Notebook, allowing you to access your
    datasets directly in Jupyer Notebook using SQL. The main idea of JupySQL is to
    run SQL in a Jupyter Notebook, hence its name.**
  prefs: []
  type: TYPE_NORMAL
- en: 'JupySQL allows you to query your dataset using SQL, without needing you to
    maintain the dataframe to store your dataset. For example, you could use JupySQL
    to connect to your database server (such as MySQL or PostgreSQL), or your CSV
    files through the DuckDB engine. The result of your query can then be directly
    used for visualization. The following figure shows how JupySQL works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/40d2fce894792268bd0d96361347db05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can use the following magic commands to use JupySQL in your Jupyter Notebooks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`%sql` — this is a line magic command to execute a SQL statement'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%%sql` — this is a cell magic command to execute multiple-line SQL statements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%sqlplot` — this is a line magic command to plot a chart'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our Datasets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this article, I am going to use a few datasets:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Titanic Dataset** (*titanic_train.csv*). *Source*: [https://www.kaggle.com/datasets/tedllh/titanic-train](https://www.kaggle.com/datasets/tedllh/titanic-train).
    *Licensing* — Database Contents License (DbCL) v1.0'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Insurance Dataset** (*insurance.csv*). *Source*: [https://www.kaggle.com/datasets/teertha/ushealthinsurancedataset](https://www.kaggle.com/datasets/teertha/ushealthinsurancedataset?resource=download.).
    *Licensing* — [CC0: Public Domain](https://creativecommons.org/publicdomain/zero/1.0/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**2015 Flights Delay Dataset** (*airports.csv*). *Source*: [https://www.kaggle.com/datasets/usdot/flight-delays](https://www.kaggle.com/datasets/usdot/flight-delays).
    *Licensing* — [CC0: Public Domain](https://creativecommons.org/publicdomain/zero/1.0/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Boston Dataset** (*boston.csv*). *Source*: [https://www.kaggle.com/datasets/altavish/boston-housing-dataset](https://www.kaggle.com/datasets/altavish/boston-housing-dataset).
    *Licensing* — [CC0: Public Domain](https://creativecommons.org/publicdomain/zero/1.0/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apple Historical Dataset** (AAPL.csv). *Source*: ([https://www.kaggle.com/datasets/prasoonkottarathil/apple-lifetime-stocks-dataset](https://www.kaggle.com/datasets/prasoonkottarathil/apple-lifetime-stocks-dataset)).
    *License* — [CC0: Public Domain](https://creativecommons.org/publicdomain/zero/1.0/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing JupySQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install the JupySQL, you can use the `pip` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The above statement installs the `jupysql` package as well as the `duckdb-engine`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next step is to load the `sql` extension using the `%load_ext` line magic command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Integrating with DuckDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the `sql` extension loaded, you need to load a database engine in which
    you can use it to process your data. For this section, I am going to use DuckDB.
    The following statement starts a DuckDB in-memory database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Performing a query
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the DuckDB database started, let’s perform a query using the airports.csv
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ac17759472c92a58412055a3420a371a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If your SQL query is long, use the `%%sql` cell magic command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The above SQL statement generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1ab89a50abb6c4134e20ddcad6287dd1.png)'
  prefs: []
  type: TYPE_IMG
- en: Saving Queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can also use the`--save` option to save the query so that it can be used
    later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/cbedffeddc2827536c099f9ed5aec256.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to save a query without executing it, use the `--no-execute` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statements saved the result of the query as a table named `boston`.
    You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Plotting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JupySQL allows you to plot charts using the `%sqlplot` line magic command.
  prefs: []
  type: TYPE_NORMAL
- en: Histogram
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the saved query in the previous section, you can now plot a histogram
    showing the distribution of the `age` and `medv` fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the histogram showing the distribution of values for the `age` and
    `medv` fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b5f2e086355ced24376f2ed9b8736814.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here’s another example. This time round, we will use the titanic_train.csv
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ab4da20440e64c643db854959906e851.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can now plot the distribution of ages for all the passengers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You can specify the number of bins you want using the `--bin` option.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/eaa05f94a056dad6ec55023085b95136.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also customize the plot by assigning the plot to a variable, which
    is of type `matplotlib.axes._subplots.AxesSubplot`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `matplotlib.axes._subplots.AxesSubplot` object, you can turn on the
    grid, set a title, as well as set the x-label for the plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d3bda39fe4bfe149f53d086dfd84332a.png)'
  prefs: []
  type: TYPE_IMG
- en: Box plot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Besides histogram, you can also plot box plots:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The resultant box plot shows the median, minimum, and maximum values as well
    as outliers for both the `age` and `fare` fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ac59b10d99ed183e8576a79db3283f5e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also view the boxplots for the `sibsp` and `parch` fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/312243836dd970a1c5e734f5fb8f2da4.png)'
  prefs: []
  type: TYPE_IMG
- en: Pie chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also plot pie charts using JupySQL’s legacy plotting API. For this example,
    I am going to use the airports.csv file to find the number of airports belonging
    to each state.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, I use SQL to count all the airports from each state and filter the top
    five:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the `%sql` statement is a `sql.run.ResultSet` object. From this
    object, I can obtain the dataframe if I want to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1a9a19ad4a577d017a5c0e286825ca63.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I can also use it to call the `pie()` API to plot a pie chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6a6f133061e2ebb47d8586589284a9a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The plotting API also supports bar charts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/39b800c595e1f5ac7c77bda56e444945.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And line charts using the `plot()` function (here I am using the AAPL.csv file):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/09de289e6c1c3b0ba63a8f76fc5d8297.png)'
  prefs: []
  type: TYPE_IMG
- en: Integrating with MySQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far all the examples in the previous few sections were all using DuckDB.
    Let’s now try to connect to a database server. For my example, I will use the
    MySQL server with the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Database** — Insurance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Table** — Insurance (imported from the insurance.csv file)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User account** — `user1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To connect to the MySQL server, create a **SQLAlchemy URL standard** connection
    string, in the following format: `mysql://*username*:*password*@*host*/*db*`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet when run will prompt you to enter the password for
    the `user1` account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the password for the `user1` account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e49945f5cb9d819394a4e8e166fe5a45.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To connect JupySQL to the MySQL server, use the `%sql` line magic, together
    with the connection string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If you use the `%sql` line magic without any inputs, you will see the current
    connections (which is DuckDB and MySQL):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/67bbd9cb9035553579e716ca7368af60.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s select the **Insurance** table to examine its content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4efc0b067ea097fe466ca98134fb4129.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And let’s plot a bar chart using the `bar()` API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/06940a90ecf6ec929dd7fbc51da667cc.png)'
  prefs: []
  type: TYPE_IMG
- en: '**If you like reading my articles and that it helped your career/study, please
    consider signing up as a Medium member. It is $5 a month, and it gives you unlimited
    access to all the articles (including mine) on Medium. If you sign up using the
    following link, I will earn a small commission (at no additional cost to you).
    Your support means that I will be able to devote more time on writing articles
    like this.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://weimenglee.medium.com/membership?source=post_page-----3c53fbe40f8d--------------------------------)
    [## Join Medium with my referral link - Wei-Meng Lee'
  prefs: []
  type: TYPE_NORMAL
- en: Read every story from Wei-Meng Lee (and thousands of other writers on Medium).
    Your membership fee directly supports…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: weimenglee.medium.com](https://weimenglee.medium.com/membership?source=post_page-----3c53fbe40f8d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope this article has given you a better idea of how to use JupySQL and the
    various ways to connect to different data sources, such as MySQL and DuckDB. Also,
    besides connecting to our datasets, I have also showed you how you can use JupySQL
    to perform visualization directly using the result of your query. As usual, be
    sure to give it a try and let me know how it goes for you!
  prefs: []
  type: TYPE_NORMAL
