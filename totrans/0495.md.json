["```py\nimport openai\nopenai.api_key = <your api key>\n\n#Define prompts\nwizard_prompt = [\n    \"\"\"### You are a short green pointy-eared space wizard that uses laser-swords\n    in a galaxy far far away. Do not identify yourself. Answer questions in 1 or 2 sentences.\n    Then ask a follow-up question to keep the conversation going. ###\"\"\",\n    \"Something troubles you, it does?\"\n]\n\nuser_prompt = [\n    \"### You have a crush at school and are seeking advice from a mentor###\",\n    \"I have a crush at school but I am too afraid to tell her.\"\n]\n\n#We start with the space wizard:\nwizard_response = openai.ChatCompletion.create(\n    model = 'gpt-3.5-turbo',\n    messages=[\n        {\"role\": \"user\", \"content\": wizard_prompt[0]}, #wizard instructions\n        {\"role\": \"user\", \"content\": \"Wizard: \" + wizard_prompt[1]}, #wizard primed opening\n        {\"role\": \"user\", \"content\": \"User: \" + user_prompt[1]}, #users primed opening\n        {\"role\": \"user\", \"content\": \"Wizard:\"}, #requested response to user question\n    ]\n)\nwizard_response = wizard_response['choices'][0]['message']['content'] #pulling the response from output\nwizard_prompt.append(wizard_response) #appending response to prompt list\nprint(wizard_response)\n```", "```py\n# Now we build the \"school crush\" persona using the wizard response\nuser_response = openai.ChatCompletion.create(\n    model = 'gpt-3.5-turbo',\n    messages=[\n        {\"role\": \"user\", \"content\": user_prompt[0]}, #user instructions\n        {\"role\": \"user\", \"content\": \"Mentor: \" + wizard_prompt[1]}, #wizard primed opening\n        {\"role\": \"user\", \"content\": \"You: \" + user_prompt[1]}, #user primed opening\n        {\"role\": \"user\", \"content\": \"Mentor: \" + wizard_prompt[2]}, #wizard generated response\n        {\"role\": \"user\", \"content\": \"You: \"}, #requested response from wizard reply\n    ]\n)\nuser_response = user_response['choices'][0]['message']['content']\nuser_prompt.append(user_response) #appending user response to prompt list\nprint(user_response)\n```", "```py\ndef GPT_call(prompts):\n    call = openai.ChatCompletion.create(\n        model = 'gpt-3.5-turbo',\n        messages=[{\"role\": \"user\", \"content\": prompt} for prompt in prompts]\n    )\n    return call['choices'][0]['message']['content']\n\n#starting over with initial wizard/user prompts\ndef GPT_convo(chatbot_prompt,user_prompt):\n    chatbot_prompt = [chatbot_prompt[0],'Wizard: '+chatbot_prompt[1],'User: '+user_prompt[1]]\n    user_prompt = [user_prompt[0],'You: '+user_prompt[1]]\n\n    for i in range(3): # conversation goes for 3 iterations\n        chatbot_prompt.append(\"Wizard:\")\n        response = GPT_call(chatbot_prompt)\n        chatbot_prompt[-1] = \"Wizard: \"+response\n\n        user_prompt.append(\"Mentor: \"+response)\n        if i == 3: # Add instructions to end conversation on final iteration\n            user_prompt.append(\"###Try to wrap up the conversation### You:\")\n        else:\n            user_prompt.append(\"You:\")\n        response = GPT_call(user_prompt)\n        user_prompt[-1] = \"You: \"+ response\n        chatbot_prompt.append(\"User: \"+response)\n\n    chatbot_prompt.append(\"Wizard:\")\n    response = GPT_call(chatbot_prompt)\n    chatbot_prompt[-1] = \"Wizard: \"+response\n    return chatbot_prompt # return full conversation\n```", "```py\nconversation = GPT_convo(chatbot_prompt,user_prompt)\nscore = GPT_call(score_prompt + conversation)\n\nimport json\nscore = json.loads(score)\nprint(score)\n```", "```py\n conversations = feedback_prompt #prompt shown above\nuser_prompts = {'crush':user_prompt} #add all user personas\nfor user,prompt in user_prompts.items():\n    convo = GPT_convo(chatbot_prompt,prompt)\n    conversations.append(\"Conversation: \" + str(convo[1:]))\nconversations.append(\"\"\"Give advice on how the Wizard can improve their responses \nin relation to each criterion defined above: Character, Conversational, and Helpful. \nUse examples from the conversation to make each point.\"\"\")\n\nfeedback = GPT_call(conversations)\nprint(feedback)\n```"]