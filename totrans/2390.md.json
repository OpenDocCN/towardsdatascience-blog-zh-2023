["```py\n--query PRODUCTS table\nSELECT \n    * \nFROM \n    PRODUCTS \nLIMIT 10;\n```", "```py\n--average buy price for each product category\nSELECT\n    PRODUCTCATEGORY,\n    FORMAT(AVG(BUYPRICE),2) AS AVERAGE_BUYPRICE\nFROM\n    PRODUCTS\nGROUP BY PRODUCTCATEGORY;\n```", "```py\n--using window function\nSELECT \n    PRODUCTCATEGORY,\n    PRODUCTNAME,\n    BUYPRICE,\n    FORMAT(AVG(BUYPRICE) OVER (PARTITION BY PRODUCTCATEGORY),2) AS AVERAGE_BUYPRICE\nFROM\n    PRODUCTS; \n```", "```py\n--query PRODUCTS table\nSELECT \n    * \nFROM \n    PRODUCTS \nLIMIT 10;\n```", "```py\n--assigns a row number to each row in a table\nSELECT \n    *,\n    ROW_NUMBER() OVER() AS ROW_NUM\nFROM \n    PRODUCTS;\n```", "```py\n--row_number by productcategory\nSELECT \n    *,\n    ROW_NUMBER() OVER(PARTITION BY PRODUCTCATEGORY) AS ROW_NUM\nFROM \n    PRODUCTS;\n```", "```py\n--top 3 products with the highest quantity in each product category\nWITH PRODUCT_INVENTORY AS\n(\nSELECT\n    PRODUCTCATEGORY,\n    PRODUCTNAME,\n    QUANTITYINSTOCK,\n    ROW_NUMBER() OVER (PARTITION BY PRODUCTCATEGORY ORDER BY QUANTITYINSTOCK DESC) AS ROW_NUM\nFROM\n    PRODUCTS\n)\n\nSELECT\n    PRODUCTCATEGORY,\n    PRODUCTNAME,\n    QUANTITYINSTOCK,\n    ROW_NUM AS TOP_3_PRODUCTS\nFROM \n    PRODUCT_INVENTORY\nWHERE ROW_NUM <= 3;\n```", "```py\n--generate rank for each product category\nSELECT\n    PRODUCTCATEGORY,\n    PRODUCTNAME,\n    QUANTITYINSTOCK,\n    RANK() OVER (PARTITION BY PRODUCTCATEGORY ORDER BY QUANTITYINSTOCK DESC) AS \"RANK\"\nFROM\n    PRODUCTS;\n```", "```py\n-- sample data from table customers\nSELECT\n    CUSTOMERID,\n    CUSTOMERNAME,\n    CREDITLIMIT\nFROM \n    CUSTOMERS\nLIMIT 10; \n```", "```py\n--row_number() and rank() comparison\nSELECT \n    CUSTOMERID,\n    CUSTOMERNAME,\n    CREDITLIMIT,\n    ROW_NUMBER() OVER (ORDER BY CREDITLIMIT DESC) AS CREDIT_ROW_NUM,\n    RANK() OVER (ORDER BY CREDITLIMIT DESC) AS CREDIT_RANK\nFROM \n    CUSTOMERS;\n```", "```py\n--dense_rank() and rank() comparison\nSELECT \n    CUSTOMERID,\n    CUSTOMERNAME,\n    CREDITLIMIT,\n    RANK() OVER (ORDER BY CREDITLIMIT DESC) AS CREDIT_RANK,\n    DENSE_RANK() OVER (ORDER BY CREDITLIMIT DESC) AS CREDIT_DENSE_RANK\nFROM \n    CUSTOMERS;\n```", "```py\n--productname for each productcategory with 2nd highest buy price\nSELECT\n    PRODUCTNAME,\n    PRODUCTCATEGORY,\n    BUYPRICE,\n    NTH_VALUE(PRODUCTNAME,2) OVER(PARTITION BY PRODUCTCATEGORY ORDER BY BUYPRICE DESC) AS SECOND_HIGHEST_BUYPRICE\nFROM\n    PRODUCTS;\n```", "```py\n--segregate the 'Cars' for high range, mid range and low range buy price\nSELECT \n    PRODUCTNAME,\n    BUYPRICE,\n    NTILE(3) OVER (ORDER BY BUYPRICE DESC) AS BUYPRICE_BUCKETS\nFROM \n    PRODUCTS\nWHERE\n    PRODUCTCATEGORY = 'Cars';\n```", "```py\n--yearly total sales for each product category\nWITH YEARLY_SALES AS\n(\nSELECT\n    PROD.PRODUCTCATEGORY,\n    YEAR(ORDERDATE) AS SALES_YEAR,\n    SUM(ORDET.QUANTITYORDERED * ORDET.COSTPERUNIT) AS TOTAL_SALES\nFROM\n    PRODUCTS PROD\nINNER JOIN\n    ORDERDETAILS ORDET\n    ON PROD.PRODUCTID = ORDET.PRODUCTID\nINNER JOIN\n    ORDERS ORD\n    ON ORDET.ORDERID = ORD.ORDERID\nGROUP BY PRODUCTCATEGORY, SALES_YEAR  \n)\n\nSELECT\n    PRODUCTCATEGORY,\n    SALES_YEAR,\n    LAG(TOTAL_SALES) OVER (PARTITION BY PRODUCTCATEGORY ORDER BY SALES_YEAR) AS LAG_PREVIOUS_YEAR,\n    TOTAL_SALES,\n    LEAD(TOTAL_SALES) OVER (PARTITION BY PRODUCTCATEGORY ORDER BY SALES_YEAR) AS LEAD_FOLLOWING_YEAR\nFROM YEARLY_SALES;\n```"]