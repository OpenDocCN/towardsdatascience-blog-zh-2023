["```py\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Set up a color palette of grass greens and pigskin browns:\nBACKGROUND_COLOR = '#B5CB99'\nTEXT_COLOR = '#FCE09B'\nBAR_COLOR = '#B2533E'\nLEGEND_COLOR = '#186F65'\n\n# Create a dictionary of display parameters favorable for nested bars:\nsns.set(style='white', rc={\n    'axes.facecolor': BACKGROUND_COLOR,\n    'figure.facecolor': BACKGROUND_COLOR,\n    'text.color': TEXT_COLOR,\n    'axes.spines.left': False,\n    'axes.spines.bottom': False,\n    'axes.spines.right': False,\n    'axes.spines.top': False\n})\n```", "```py\n# Load AP Top 25 College poll data:\ndf = pd.read_csv('https://bit.ly/45yEPtI')\ndf.head(3)\n```", "```py\n# Initialize a list to store the intersection results:\ntop_25 = []\n\n# Get unique years from the DataFrame:\nunique_years = df['Year'].unique()\n\n# Loop through each year and find the intersection of Final and Preseason Teams:\nfor year in unique_years:\n    year_data = df[df['Year'] == year]\n\n    # Make sets of the final and preseason teams:\n    final_teams = set(year_data[year_data['Poll'] == 'Final']['Team'])\n    preseason_teams = set(year_data[year_data['Poll'] == 'Preseason']['Team'])\n\n    # Find the set intersections for each year and append to the top_25 list:\n    intersection = final_teams.intersection(preseason_teams)\n    num_right = len(intersection)    \n    top_25.append({'Year': year, 'Finishers': num_right})\n\n# Create a new DataFrame from the list:\ndf_25 = pd.DataFrame(top_25)\n\n# Add columns for the number of ranked teams and percent predicted correctly:\ndf_25['Top 25'] = 25\ndf_25['Pct Right'] = df_25['Finishers'] / df_25['Top 25']\ndf_25['Pct Right'] = df_25['Pct Right'].apply(lambda x: f'{x:.0%}')\n\nprint(df_25)\n```", "```py\ndef add_bars(ax_obj, x, y, width, alpha, label):\n    \"\"\"Plot a seaborn horizontal bar chart (credit Oscar Leo).\"\"\"\n    sns.barplot(ax=ax_obj, x=x, y=y, \n                label=label,\n                width=width, \n                alpha=alpha,\n                color=BAR_COLOR,\n                edgecolor=TEXT_COLOR,\n                orient=\"h\")\n```", "```py\n# Make the display, calling add_bars() twice to nest the bars:\nfig, ax = plt.subplots(figsize=(8, 9))\nax.set_title('Number of Teams Starting AND Finishing in \\\nAP Top 25 College Football Poll', color='k', fontsize=13, weight='bold')\n\n# Plot bars for total number of teams (secondary measure):\nadd_bars(ax_obj=ax, \n         x=df_25['Top 25'],\n         y=df_25['Year'],\n         width=0.55, \n         alpha=0.6, \n         label='Teams in Preseason Poll')\n\n# Plot bars for teams that started AND finished in the Top 25 (primary measure):\nadd_bars(ax_obj=ax, \n         x=df_25['Finishers'],\n         y=df_25['Year'],\n         width=0.7, \n         alpha=1, \n         label='Teams in Preseason AND Final Polls')\n\n# Add informative text stating percent correct:\nax.bar_label(ax.containers[1], \n             labels=df_25['Pct Right'] + ' correct', \n             padding=-70)\n\n# Assign a custom x-axis label and legend:\nax.set_xlabel('Number of Teams') \nax.legend(bbox_to_anchor=(1.0, -0.085), facecolor=LEGEND_COLOR);\n```", "```py\n# Filter the original DataFrame to teams ranked 4 or better:\ndf_4 = df[(df['Rank'] <= 4)].copy()\n\n# Initialize a list to store the intersection results:\ntop_4 = []\n\n# Loop through each year and find the intersection of Final and Preseason Teams:\nfor year in unique_years:\n    year_data = df_4[df_4['Year'] == year]\n\n    # Make sets of the final and preseason teams:\n    final_teams = set(year_data[year_data['Poll'] == 'Final']['Team'])\n    preseason_teams = set(year_data[year_data['Poll'] == 'Preseason']['Team'])\n\n    # Find the set intersections for each year and append to the top_4 list:\n    intersection = final_teams.intersection(preseason_teams)\n    num_right = len(intersection)    \n    top_4.append({'Year': year, 'Finishers': num_right})\n\n# Create a new DataFrame from the list:\ndf_final_4 = pd.DataFrame(top_4)\n\n# Add columns for the number of ranked teams and percent predicted correctly:\ndf_final_4['Top 4'] = 4\ndf_final_4['Pct Right'] = (df_final_4['Finishers'] / df_final_4['Top 4'])\ndf_final_4['Pct Right'] = df_final_4['Pct Right'].apply('{:.0%}'.format)\n\nprint(df_final_4)\n```", "```py\nfig, ax = plt.subplots(nrows=1, ncols=1, figsize=(10, 10))\nax.set_title('Number of Teams Starting AND Finishing in \\\nTop 4 of AP College Football Poll', color='k', fontsize=14, weight='bold')\n\nadd_bars(ax_obj=ax, \n         x=df_final_4['Top 4'],\n         y=df_final_4['Year'],\n         width=0.55, \n         alpha=0.6, \n         label='Top 4')\n\nadd_bars(ax_obj=ax, \n         x=df_final_4['Finishers'],\n         y=df_final_4['Year'],\n         width=0.7, \n         alpha=1, \n         label='Finishers')\n\nax.bar_label(ax.containers[1], \n             labels=df_final_4['Pct Right'] + ' correct', \n             padding=3)\n\nax.set_xticks(range(5))\nax.set_xlabel('Number of Correct Final Four Predictions', \n              fontdict={'size': 16});\n```"]