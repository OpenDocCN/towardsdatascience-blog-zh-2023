["```py\nname: Sample Workflow\n\non:\n  pull_request:\n    branches: [main]\n  push:\n    branches: [main]\njobs:\n  sample_job:\n    runs-on: ubuntu-20.04\n    steps:\n      - name: Checkout repo\n        uses: actions/checkout@v3\n      - name: Set up Python 3.10.0\n        uses: actions/setup-python@v3\n        with:\n          python-version: \"3.10.0\"\n      - name: Echo 1\n        run: echo \"Echo 1\"\n      - name: Echo 2\n        run: |\n          echo \"Echo 2a\"\n          echo \"Echo 2b\"\n```", "```py\n- name: Cache Primes\nid: cache-primes\nuses: actions/cache@v3\nwith:\n    path: prime-numbers\n    key: ${{runner.os}}-primes\n```", "```py\n- name: Generate Prime Numbers\n  if: steps.cache-primes.outputs.cache-hit != 'true'\n  run: ./generate_primes.sh\n```", "```py\n#!/bin/bash\n\nN=10  # Number of prime numbers to generate\nfile_path=\"prime-numbers/primes.txt\" # Path where to store the primes\n\n# Remove existing file if it exists\nrm -f \"$file_path\"\n\n# Function to check if a number is prime\nis_prime() {\n    num=$1\n    for ((i=2; i*i<=num; i++)); do\n        if ((num % i == 0)); then\n            return 1\n        fi\n    done\n    return 0\n}\n\n# Create directory for prime numbers if it doesn't exist\nmkdir -p \"$(dirname \"$file_path\")\"\n\necho \"Generating prime numbers ...\"\n\ncount=0\nnumber=2\nwhile [ $count -lt $N ]; do\n    if is_prime $number; then\n        echo $number >> prime-numbers/primes.txt\n        ((count++))\n    fi\n    ((number++))\ndone\n```", "```py\n#!/bin/bash\n\n# Read and print prime numbers from the file\nif [ -f prime-numbers/primes.txt ]; then\n    echo \"Prime numbers:\"\n    cat prime-numbers/primes.txt\nelse\n    echo \"File prime-numbers/primes.txt not found.\"\nfi\n```", "```py\nname: Caching Primes\n\non: push\n\njobs:\n  build:\n    runs-on: ubuntu-20.04\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Cache Primes\n      id: cache-primes\n      uses: actions/cache@v3\n      with:\n        path: prime-numbers\n        key: ${{ runner.os }}-primes\n\n    - name: Generate Prime Numbers\n      if: steps.cache-primes.outputs.cache-hit != 'true'\n      run: ./generate_primes.sh\n\n    - name: Use Prime Numbers\n      run: ./primes.sh\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef plot():\n    x = np.linspace(0, 10, 50)\n    y = np.sin(x)\n    plt.plot(x, y)\n    plt.savefig(\"plot.png\")\n\nif __name__ == \"__main__\":\n    plot()\n```", "```py\n[tool.poetry]\nname = \"myproject\"\nversion = \"0.1.0\"\ndescription = \"â€¦\"\nauthors = [\"hermanmichaels <hrmnmichaels@gmail.com>\"]\n\n[tool.poetry.dependencies]\npython = \"3.10\"\nmatplotlib = \"3.5.1\"\nmypy = \"0.910\"\nnumpy = \"1.22.3\"\nblack = \"22.3.0\"\n```", "```py\nname: Caching Env\n\non: push\n\njobs:\n  build:\n    runs-on: ubuntu-20.04\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Set up Python 3.10.0\n      uses: actions/setup-python@v3\n      with:\n        python-version: \"3.10.0\"\n\n    - name: Install poetry\n      run: curl -sSL https://install.python-poetry.org | python3 -\n\n    - name: Cache Env\n      id: cache-env\n      uses: actions/cache@v3\n      with:\n        path: ~/.cache/pypoetry\n        key: ${{ runner.os }}-env\n\n    - name: Install poetry dependencies\n      if: steps.cache-env.outputs.cache-hit != 'true'\n      run: poetry install\n```"]