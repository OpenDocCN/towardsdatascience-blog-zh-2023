- en: 'Create Stunning Fractal Art with Python: A Tutorial For Beginners And Hardcore
    Math Lovers'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/create-stunning-fractal-art-with-python-a-tutorial-for-beginners-c83817fcb64b](https://towardsdatascience.com/create-stunning-fractal-art-with-python-a-tutorial-for-beginners-c83817fcb64b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: With a single line of code or even less
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/?source=post_page-----c83817fcb64b--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----c83817fcb64b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c83817fcb64b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c83817fcb64b--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----c83817fcb64b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c83817fcb64b--------------------------------)
    ·12 min read·Mar 6, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The phrase "I've never seen anything more beautiful" should only be used for
    fractals. Sure, there is the Mona Lisa, The Starry Night, and The Birth of Venus
    (which all have been ruined by AI-generated art, by the way), but I don't think
    any artist or human could create anything **royally amazing** as fractals.
  prefs: []
  type: TYPE_NORMAL
- en: On the left, we have the iconic fractal, the Mandelbrot's set, discovered in
    1979 when no Python or graphing software was available.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0804a1d9c64319ba5498269c00bda593.png)'
  prefs: []
  type: TYPE_IMG
- en: GIF by the author using [Fraqtive](https://github.com/mimecorg/fraqtive), an
    open-source application. [GPL-3 license](https://github.com/mimecorg/fraqtive).
  prefs: []
  type: TYPE_NORMAL
- en: Mandelbrot's set is a set of complex numbers that, when plotted on the complex
    plane, forms the self-repeating shape we see. Every number in the set can also
    be a seed to **Julia sets,** and you can see the beauties appearing as I move
    around the mouse inside the boundary of the Mandelbrot's set.
  prefs: []
  type: TYPE_NORMAL
- en: 'But before we can plot the Mandelbrot or Julia sets (but, believe me, we will),
    we have a lot of ground to cover. If you are just here to see the cool pictures,
    I highly recommend downloading the [open-source Fraqtive software](https://fraqtive.mimec.org/)
    (and go nuts!), which I used to generate the above GIF and the one below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8f43c637965d8bb3fc5d790b0737ba7c.png)'
  prefs: []
  type: TYPE_IMG
- en: GIF by the author using [Fraqtive](https://github.com/mimecorg/fraqtive), an
    open-source application. [GPL-3 license](https://github.com/mimecorg/fraqtive).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you just want to plot the Mandelbrot set in Python with a single line of
    code, here it is (no, the subtitle was not clickbait):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/545ffa3d96c2ccff8f16aab0b10b630d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: But if you want to go down the beautiful rabbit hole of fractals and learn how
    to plot them and, most importantly, color them appropriately, then read on!
  prefs: []
  type: TYPE_NORMAL
- en: In this post, we will learn how to plot basic (but still very cool) Mandelbrot's
    sets using Matplotlib and NumPy. Then, we will take things to a whole new level
    with Pillow in future articles.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Complex numbers in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python programmers don't deal with complex numbers daily. As we will work with
    them a lot in this tutorial, this section will serve as a primer.
  prefs: []
  type: TYPE_NORMAL
- en: You can create an imaginary part of a complex number by appending the literal
    *j* to integers or floats.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If seeing imaginary numbers represented with *j* instead of *i* confuses you
    (hello, mathematicians), you can use the `complex` built-in function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Once created, you can access the real and imaginary components of complex numbers
    with `real` and `imag` attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Another important property of complex numbers for the purposes of this article
    is their absolute value. An absolute value or magnitude of a complex number measures
    its distance from the origin (0, 0) in the complex plane. It is defined as the
    square root of the sum of its real and imaginary parts (thank you, Pythagoras).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: These will be enough for us to create some awesome things. Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Simple formula, grand set
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our journey starts by finding out if some complex number ***c*** belongs to
    the Mandelbrot''s Set, which is surprisingly easy. All we have to do is to put
    it through the below formula and create a sequence of *z* values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/622b44540d02168ed06a1addaadfad41.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: The first *z* is always 0, as defined above. Subsequent elements are found by
    squaring the previous *z* and adding *c* to the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement the process in Python. We will define a `sequence` function
    that returns the first `n` elements for a given `c`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will take the function on a test-drive for a bunch of numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3f369e515eab28e04d4120cb90ee6021.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'We see three types of results: when *c* is either 1 or 2, the sequence is unbounded
    (diverges to infinity) as it grows. When it is -1, it goes back and forth between
    0 and -1\. As for 0.25 and -0.1, they stay petite or bounded.'
  prefs: []
  type: TYPE_NORMAL
- en: So, which of these five are the lucky ones to be a mandelbrot?
  prefs: []
  type: TYPE_NORMAL
- en: Are you stable?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our screening process is stupidly simple — if *c* diverges the sequence to infinity,
    it is not in Mandelbrot's set. In fractals jargon, that *c* is called unstable.
    Or, let's ditch the negativity — the given complex number *c* is stable if its
    corresponding *Z* sequence remains bounded.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we must figure out how many members of *Z* to look at before classifying
    *c* as stable or unstable. This *iteration count* is not obvious to find as the
    formula is sensitive to even the smallest changes to *c*.
  prefs: []
  type: TYPE_NORMAL
- en: But fortunately, people have been studying the set for a long enough time to
    know that all mandelbrots stay bounded within a radius of two. This means we can
    perform a few dozen iterations, and the numbers that remain relatively small or
    below 2 are probably in Mandelbrot's set.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s create a new function `is_stable` using this logic that returns
    True when the number is a mandelbrot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the body of this boolean function, we set `z` to 0 and run it through the
    algorithm in a loop controlled by `n_iterations`. In each iteration, we check
    the magnitude of `z` so that we can terminate the loop if it exceeds 2 early on
    and don't waste time running the rest of the iterations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last `return` statement is only executed if `z` is below 2 after all the
    iterations. Let''s check a few numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note how increasing `n_iterations` to 30 changes the stability of 0.26\. Generally,
    values close to the fractals edge require more iterations to make a more accurate
    classification and create more detailed visuals.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----c83817fcb64b--------------------------------)
    [## Join Medium with my referral link - Bex T.'
  prefs: []
  type: TYPE_NORMAL
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----c83817fcb64b--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: How to plot the Mandelbrot's set in Matplotlib
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section was heavily inspired by this awesome RealPython post:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](https://realpython.com/mandelbrot-set-python/?source=post_page-----c83817fcb64b--------------------------------#plotting-the-mandelbrot-set-using-pythons-matplotlib)
    [## Draw the Mandelbrot Set in Python - Real Python'
  prefs: []
  type: TYPE_NORMAL
- en: Before you try to draw the fractal, it'll help to understand what the corresponding
    Mandelbrot set represents and how…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: realpython.com](https://realpython.com/mandelbrot-set-python/?source=post_page-----c83817fcb64b--------------------------------#plotting-the-mandelbrot-set-using-pythons-matplotlib)
  prefs: []
  type: TYPE_NORMAL
- en: 'Our ultimate aim for the article is to produce this guy in Matplotib (spoiler
    alert, we will create something even better!):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2a2c9e31ce91ab22f50fa5d590481945.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: The image was created by coloring all the mandelbrots black and unstable elements
    white. In Matplotlib, grayscale has 256 shades or ranges from 0 to 255, 0 being
    fully white and 255 being pitch black. But you can normalize this range into 0
    and 1 so that 0 is white and 1 is black.
  prefs: []
  type: TYPE_NORMAL
- en: This normalization comes in handy for us. We can create a 2D array of complex
    numbers and run our `is_stable` function over each element. The resulting array
    will have 1s for mandelbrots and 0s for the unstable. When we plot this array
    as an image — voila, we have the desired black-and-white visual.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get to it. First, we create the function that generates a matrix of
    candidate values we can iterate over:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: We will use the `np.linspace` function to create evenly spaced numbers within
    a range. The `pixel_density` parameter dynamically sets the number of pixels per
    unit.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a matrix with a horizontal range of (-2, 0), a vertical range of
    (-1.2, 1.2) and a `pixel_density` of 1, would have the shape (2, 2). This means
    our resulting Mandelbrot image would be 2 pixels wide and 2 pixels tall, which
    would make Benoit Mandelbrot turn in his grave.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'So, we better use a higher density like 25:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to run our `is_stable` function over each element of `c`, we vectorize
    it with `np.vectorize` and call it with 20 iterations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: We are calling the resulting array a `mandelbrot_mask` since it returns True
    (1) for each mandelbrot. To plot this array, we use the `imshow` function of Matplpotlib
    with a `binary` colormap. That will make the image black and white.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/22153db8a4e3e89f17e5842172eb05fb.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Well, that is one ugly Mandelbrot. How about we increase the pixel density to
    1024 and the iteration count to 30?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a892cb1d4d5e2a7aa3067b73e990d4bb.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Now, this looks more like it! Congratulations on plotting your first Mandelbrot
    image!
  prefs: []
  type: TYPE_NORMAL
- en: Wait, that wasn't art!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even though our current fractal still looks very cool, it is far from the art
    I promised.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s give it a makeover by focusing on not just the black set numbers
    but on the numbers around the edge. Because looking at this image, we can see
    all types of interesting patterns emerging around the boundaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b0221d2d18e87df439f07e7b5ccda976.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Let's start the makeover by organizing our code into a class because it is a
    real mess with everything scattered.
  prefs: []
  type: TYPE_NORMAL
- en: 'The class name will be `Mandelbrot` and we will use data classes so that we
    don''t have to create the `__init__` constructor like a caveman:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The class only requires the `max_iteration` parameter to be initialized. We
    also add the `is_stable` function as a class method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Up until now, we have been coloring only the mandelbrots black and the rest
    white. But if we want to spice up the edges of the set, we have to come up with
    a logic to color the unstable elements other than white.
  prefs: []
  type: TYPE_NORMAL
- en: One way we can do this is by determining in how many iterations a complex number
    becomes unstable. Some will become unstable very fast (maybe they have short fuses?),
    but others may take hundreds or thousands of iterations (they are patient). In
    general, though, numbers close to the fractal's edge are less unstable (take more
    iterations) than those far away.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using this information, we can give each pixel (complex number) different depths
    of color based on the iteration they terminate. This is called the Escape Count
    algorithm. Let''s implement it in our class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we change `n_iterations` to `max_iterations`, as it makes more sense.
    Then, we create an `escape_count` method that:'
  prefs: []
  type: TYPE_NORMAL
- en: if *c* is unstable, returns the iteration in which it exceeds the magnitude
    of 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if *c* is stable, returns the max iteration count
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we create another method to measure the stability based on the iteration
    count:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The `stability` method returns a measure between 0 and 1, which we can later
    use to determine the color depths. Only mandelbrots will return `max_iterations`,
    so they will be marked with 1\. Numbers close to the edge will take longer to
    become unstable, so they will have increasingly closer values to 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this logic, we can bring back our `is_stable` function but make it much
    shorter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we create a final method to `plot` the set with Matplotlib:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'In `plot`, we apply the `stability` method over all elements of `c`, so the
    resulting matrix holds color depths in each cell. When we plot this matrix with
    a reversed grayscale colormap (so that the mandelbrots stay black), we get the
    following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9c3156abac077cd3ef5d9a9b0e13619b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'We can already see bands with different levels of grey appearing around the
    edges. Let''s give it another colormap that isn''t boring grayscale:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f00de98a8e076988baefc40079f67d0a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Pay attention to how the boundary lines are the brightest red and how white
    spots still appear where the set repeats itself. Awesome!
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our final result was almost art. But, there are a lot of improvements we can
    make. The first thing is improving the image resolution by having finer control
    over each pixel. Then, we have to remove that annoying white space around the
    image (if you are reading in dark mode).
  prefs: []
  type: TYPE_NORMAL
- en: All these tasks are shortcomings of Matplotlib, but in the next article, we
    will take things to a whole new level with Pillow, Python's image manipulation
    library.
  prefs: []
  type: TYPE_NORMAL
- en: '[Stay tuned](https://ibexorigin.medium.com/)!'
  prefs: []
  type: TYPE_NORMAL
- en: Loved this article and, let’s face it, its bizarre writing style? Imagine having
    access to dozens more just like it, all written by a brilliant, charming, witty
    author (that’s me, by the way :).
  prefs: []
  type: TYPE_NORMAL
- en: For only 4.99$ membership, you will get access to not just my stories, but a
    treasure trove of knowledge from the best and brightest minds on Medium. And if
    you use [my referral link](https://ibexorigin.medium.com/membership), you will
    earn my supernova of gratitude and a virtual high-five for supporting my work.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----c83817fcb64b--------------------------------)
    [## Join Medium with my referral link — Bex T.'
  prefs: []
  type: TYPE_NORMAL
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----c83817fcb64b--------------------------------)
    ![](../Images/95a45f54ecebc1b690dfd77f973617d2.png)
  prefs: []
  type: TYPE_NORMAL
