- en: 'Create Stunning Fractal Art with Python: A Tutorial For Beginners And Hardcore
    Math Lovers'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 创建惊艳的分形艺术：初学者与数学爱好者的教程
- en: 原文：[https://towardsdatascience.com/create-stunning-fractal-art-with-python-a-tutorial-for-beginners-c83817fcb64b](https://towardsdatascience.com/create-stunning-fractal-art-with-python-a-tutorial-for-beginners-c83817fcb64b)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/create-stunning-fractal-art-with-python-a-tutorial-for-beginners-c83817fcb64b](https://towardsdatascience.com/create-stunning-fractal-art-with-python-a-tutorial-for-beginners-c83817fcb64b)
- en: With a single line of code or even less
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 只需一行代码或更少
- en: '[](https://ibexorigin.medium.com/?source=post_page-----c83817fcb64b--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----c83817fcb64b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c83817fcb64b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c83817fcb64b--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----c83817fcb64b--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ibexorigin.medium.com/?source=post_page-----c83817fcb64b--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----c83817fcb64b--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c83817fcb64b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c83817fcb64b--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----c83817fcb64b--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c83817fcb64b--------------------------------)
    ·12 min read·Mar 6, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----c83817fcb64b--------------------------------)
    ·12分钟阅读·2023年3月6日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: The phrase "I've never seen anything more beautiful" should only be used for
    fractals. Sure, there is the Mona Lisa, The Starry Night, and The Birth of Venus
    (which all have been ruined by AI-generated art, by the way), but I don't think
    any artist or human could create anything **royally amazing** as fractals.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: “我从未见过如此美丽的事物”这句话只应用于分形。确实，有《蒙娜丽莎》、《星夜》和《维纳斯的诞生》（顺便说一下，这些都被 AI 生成艺术破坏了），但我认为没有任何艺术家或人类能够创造出像分形那样**极为惊艳**的作品。
- en: On the left, we have the iconic fractal, the Mandelbrot's set, discovered in
    1979 when no Python or graphing software was available.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 左边是标志性的分形，曼德布罗特集合，它在1979年被发现，当时没有 Python 或图形软件可用。
- en: '![](../Images/0804a1d9c64319ba5498269c00bda593.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0804a1d9c64319ba5498269c00bda593.png)'
- en: GIF by the author using [Fraqtive](https://github.com/mimecorg/fraqtive), an
    open-source application. [GPL-3 license](https://github.com/mimecorg/fraqtive).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: GIF 由作者使用[Fraqtive](https://github.com/mimecorg/fraqtive)生成，这是一个开源应用程序。[GPL-3
    许可证](https://github.com/mimecorg/fraqtive)。
- en: Mandelbrot's set is a set of complex numbers that, when plotted on the complex
    plane, forms the self-repeating shape we see. Every number in the set can also
    be a seed to **Julia sets,** and you can see the beauties appearing as I move
    around the mouse inside the boundary of the Mandelbrot's set.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 曼德布罗特集合是一组复数，当在复平面上绘制时，形成我们看到的自我重复形状。集合中的每个数字也可以是**朱利亚集合**的种子，你可以看到美丽的图案在我在曼德布罗特集合边界内移动鼠标时显现出来。
- en: 'But before we can plot the Mandelbrot or Julia sets (but, believe me, we will),
    we have a lot of ground to cover. If you are just here to see the cool pictures,
    I highly recommend downloading the [open-source Fraqtive software](https://fraqtive.mimec.org/)
    (and go nuts!), which I used to generate the above GIF and the one below:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但在我们能够绘制曼德布罗特集合或朱利亚集合之前（不过，相信我，我们会的），我们还有很多内容要学习。如果你只是来看看那些炫酷的图片，我强烈推荐下载[开源
    Fraqtive 软件](https://fraqtive.mimec.org/)（尽情发挥吧！），我用它生成了上面的 GIF 以及下面的那个：
- en: '![](../Images/8f43c637965d8bb3fc5d790b0737ba7c.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8f43c637965d8bb3fc5d790b0737ba7c.png)'
- en: GIF by the author using [Fraqtive](https://github.com/mimecorg/fraqtive), an
    open-source application. [GPL-3 license](https://github.com/mimecorg/fraqtive).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: GIF 由作者使用[Fraqtive](https://github.com/mimecorg/fraqtive)生成，这是一个开源应用程序。[GPL-3
    许可证](https://github.com/mimecorg/fraqtive)。
- en: 'If you just want to plot the Mandelbrot set in Python with a single line of
    code, here it is (no, the subtitle was not clickbait):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想用一行代码在 Python 中绘制曼德布罗特集合，下面就是代码（不，这个副标题不是诱饵）：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/545ffa3d96c2ccff8f16aab0b10b630d.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/545ffa3d96c2ccff8f16aab0b10b630d.png)'
- en: Image by author
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: But if you want to go down the beautiful rabbit hole of fractals and learn how
    to plot them and, most importantly, color them appropriately, then read on!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你想深入了解美丽的分形，学习如何绘制它们，并且最重要的是，如何适当地给它们上色，那么请继续阅读！
- en: In this post, we will learn how to plot basic (but still very cool) Mandelbrot's
    sets using Matplotlib and NumPy. Then, we will take things to a whole new level
    with Pillow in future articles.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将学习如何使用Matplotlib和NumPy绘制基本的（但仍然非常酷的）曼德尔布罗特集合。然后，我们将在未来的文章中使用Pillow将其提升到一个全新的水平。
- en: Let's get started.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Complex numbers in Python
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python中的复数
- en: Python programmers don't deal with complex numbers daily. As we will work with
    them a lot in this tutorial, this section will serve as a primer.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Python程序员并不每天处理复数。由于在本教程中我们将频繁使用复数，因此本节将作为一个入门介绍。
- en: You can create an imaginary part of a complex number by appending the literal
    *j* to integers or floats.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将字面量*j*附加到整数或浮点数来创建复数的虚部。
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If seeing imaginary numbers represented with *j* instead of *i* confuses you
    (hello, mathematicians), you can use the `complex` built-in function:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果看到虚数用*j*而不是*i*表示让你感到困惑（你好，数学家们），你可以使用内置的`complex`函数：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once created, you can access the real and imaginary components of complex numbers
    with `real` and `imag` attributes:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建，你可以通过`real`和`imag`属性访问复数的实部和虚部：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Another important property of complex numbers for the purposes of this article
    is their absolute value. An absolute value or magnitude of a complex number measures
    its distance from the origin (0, 0) in the complex plane. It is defined as the
    square root of the sum of its real and imaginary parts (thank you, Pythagoras).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章中另一个重要的复数特性是它们的绝对值。复数的绝对值或模长衡量的是它在复平面上与原点（0, 0）之间的距离。它被定义为实部和虚部的平方和的平方根（感谢毕达哥拉斯）。
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: These will be enough for us to create some awesome things. Let's get started!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这些就足够让我们创造一些很棒的东西了。让我们开始吧！
- en: Simple formula, grand set
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单公式，宏伟集合
- en: 'Our journey starts by finding out if some complex number ***c*** belongs to
    the Mandelbrot''s Set, which is surprisingly easy. All we have to do is to put
    it through the below formula and create a sequence of *z* values:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的旅程开始于确定某个复数***c***是否属于曼德尔布罗特集合，这实际上非常简单。我们只需将其代入下面的公式，并生成一个*z*值的序列：
- en: '![](../Images/622b44540d02168ed06a1addaadfad41.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/622b44540d02168ed06a1addaadfad41.png)'
- en: Image by author
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: The first *z* is always 0, as defined above. Subsequent elements are found by
    squaring the previous *z* and adding *c* to the result.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个*z*始终为0，如上所定义。后续元素通过对前一个*z*进行平方运算并将*c*加到结果中来找到。
- en: 'Let''s implement the process in Python. We will define a `sequence` function
    that returns the first `n` elements for a given `c`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Python中实现这个过程。我们将定义一个`sequence`函数，该函数返回给定*c*的前`n`个元素：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, we will take the function on a test-drive for a bunch of numbers:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将对一堆数字进行函数测试：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/3f369e515eab28e04d4120cb90ee6021.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3f369e515eab28e04d4120cb90ee6021.png)'
- en: Image by author
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'We see three types of results: when *c* is either 1 or 2, the sequence is unbounded
    (diverges to infinity) as it grows. When it is -1, it goes back and forth between
    0 and -1\. As for 0.25 and -0.1, they stay petite or bounded.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到三种结果：当*c*为1或2时，序列是无界的（发散到无限大）。当*c*为-1时，序列在0和-1之间来回变化。至于0.25和-0.1，它们保持较小或有界。
- en: So, which of these five are the lucky ones to be a mandelbrot?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这五个中哪些是幸运的成为曼德尔布罗特集合的成员呢？
- en: Are you stable?
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你稳定吗？
- en: Our screening process is stupidly simple — if *c* diverges the sequence to infinity,
    it is not in Mandelbrot's set. In fractals jargon, that *c* is called unstable.
    Or, let's ditch the negativity — the given complex number *c* is stable if its
    corresponding *Z* sequence remains bounded.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的筛选过程非常简单——如果*c*将序列发散到无限大，它就不在曼德尔布罗特集合中。在分形术语中，这个*c*被称为不稳定的。或者，我们换个角度看——如果给定的复数*c*的相应*Z*序列保持有界，那么它就是稳定的。
- en: Now, we must figure out how many members of *Z* to look at before classifying
    *c* as stable or unstable. This *iteration count* is not obvious to find as the
    formula is sensitive to even the smallest changes to *c*.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须弄清楚在将*c*分类为稳定或不稳定之前要查看多少个*z*成员。这个*迭代计数*并不容易找到，因为公式对*c*的最小变化都很敏感。
- en: But fortunately, people have been studying the set for a long enough time to
    know that all mandelbrots stay bounded within a radius of two. This means we can
    perform a few dozen iterations, and the numbers that remain relatively small or
    below 2 are probably in Mandelbrot's set.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 但幸运的是，人们已经研究了这个集合足够长的时间，知道所有的曼德elbrot都保持在半径为2的范围内。这意味着我们可以进行几十次迭代，剩下的相对较小或低于2的数字可能在曼德elbrot集合中。
- en: 'So, let''s create a new function `is_stable` using this logic that returns
    True when the number is a mandelbrot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们使用这个逻辑创建一个新的函数`is_stable`，当数字是曼德elbrot时返回True：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the body of this boolean function, we set `z` to 0 and run it through the
    algorithm in a loop controlled by `n_iterations`. In each iteration, we check
    the magnitude of `z` so that we can terminate the loop if it exceeds 2 early on
    and don't waste time running the rest of the iterations.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个布尔函数的主体中，我们将`z`设置为0，并通过一个由`n_iterations`控制的循环运行算法。在每次迭代中，我们检查`z`的大小，以便在它早期超过2时终止循环，避免浪费时间运行其余的迭代。
- en: 'The last `return` statement is only executed if `z` is below 2 after all the
    iterations. Let''s check a few numbers:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的`return`语句仅在所有迭代后`z`低于2时执行。让我们检查几个数字：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note how increasing `n_iterations` to 30 changes the stability of 0.26\. Generally,
    values close to the fractals edge require more iterations to make a more accurate
    classification and create more detailed visuals.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意增加`n_iterations`到30时如何改变0.26的稳定性。一般来说，接近分形边缘的值需要更多的迭代以进行更准确的分类，并创建更详细的视觉效果。
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----c83817fcb64b--------------------------------)
    [## Join Medium with my referral link - Bex T.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Join Medium with my referral link - Bex T.](https://ibexorigin.medium.com/membership?source=post_page-----c83817fcb64b--------------------------------)'
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取对我所有⚡高级⚡内容和Medium上所有内容的独家访问权限。通过购买我的…
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----c83817fcb64b--------------------------------)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----c83817fcb64b--------------------------------)'
- en: How to plot the Mandelbrot's set in Matplotlib
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在Matplotlib中绘制曼德elbrot集合
- en: 'This section was heavily inspired by this awesome RealPython post:'
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 本节深受这篇精彩RealPython文章的启发：
- en: '[](https://realpython.com/mandelbrot-set-python/?source=post_page-----c83817fcb64b--------------------------------#plotting-the-mandelbrot-set-using-pythons-matplotlib)
    [## Draw the Mandelbrot Set in Python - Real Python'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[## Draw the Mandelbrot Set in Python - Real Python](https://realpython.com/mandelbrot-set-python/?source=post_page-----c83817fcb64b--------------------------------#plotting-the-mandelbrot-set-using-pythons-matplotlib)'
- en: Before you try to draw the fractal, it'll help to understand what the corresponding
    Mandelbrot set represents and how…
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在尝试绘制分形之前，了解对应的曼德elbrot集表示什么以及如何…
- en: realpython.com](https://realpython.com/mandelbrot-set-python/?source=post_page-----c83817fcb64b--------------------------------#plotting-the-mandelbrot-set-using-pythons-matplotlib)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[realpython.com](https://realpython.com/mandelbrot-set-python/?source=post_page-----c83817fcb64b--------------------------------#plotting-the-mandelbrot-set-using-pythons-matplotlib)'
- en: 'Our ultimate aim for the article is to produce this guy in Matplotib (spoiler
    alert, we will create something even better!):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们文章的终极目标是用Matplotlib生成这个家伙（剧透警告，我们会创建更好的东西！）：
- en: '![](../Images/2a2c9e31ce91ab22f50fa5d590481945.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2a2c9e31ce91ab22f50fa5d590481945.png)'
- en: Image by the author.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: The image was created by coloring all the mandelbrots black and unstable elements
    white. In Matplotlib, grayscale has 256 shades or ranges from 0 to 255, 0 being
    fully white and 255 being pitch black. But you can normalize this range into 0
    and 1 so that 0 is white and 1 is black.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这幅图像是通过将所有曼德elbrot部分涂成黑色，将不稳定的元素涂成白色创建的。在Matplotlib中，灰度有256种阴影或范围，从0到255，其中0是完全白色，255是纯黑色。但你可以将这个范围归一化为0和1，使0为白色，1为黑色。
- en: This normalization comes in handy for us. We can create a 2D array of complex
    numbers and run our `is_stable` function over each element. The resulting array
    will have 1s for mandelbrots and 0s for the unstable. When we plot this array
    as an image — voila, we have the desired black-and-white visual.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这种归一化对我们很有帮助。我们可以创建一个二维复数数组，并对每个元素运行我们的`is_stable`函数。结果数组将对曼德elbrot赋值1，对不稳定的部分赋值0。当我们将这个数组绘制成图像时——瞧，我们得到了理想的黑白视觉效果。
- en: 'Let''s get to it. First, we create the function that generates a matrix of
    candidate values we can iterate over:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。首先，我们创建一个生成候选值矩阵的函数，我们可以在其上进行迭代：
- en: '[PRE22]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We will use the `np.linspace` function to create evenly spaced numbers within
    a range. The `pixel_density` parameter dynamically sets the number of pixels per
    unit.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `np.linspace` 函数在一个范围内创建均匀间隔的数字。`pixel_density` 参数动态设置每单位的像素数量。
- en: For example, a matrix with a horizontal range of (-2, 0), a vertical range of
    (-1.2, 1.2) and a `pixel_density` of 1, would have the shape (2, 2). This means
    our resulting Mandelbrot image would be 2 pixels wide and 2 pixels tall, which
    would make Benoit Mandelbrot turn in his grave.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个水平范围为 (-2, 0)、垂直范围为 (-1.2, 1.2) 且 `pixel_density` 为 1 的矩阵，其形状将是 (2, 2)。这意味着我们得到的曼德博图像将宽
    2 像素、高 2 像素，这会让贝诺伊特·曼德博在他的坟墓里翻身。
- en: '[PRE23]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'So, we better use a higher density like 25:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们最好使用更高的密度，比如 25：
- en: '[PRE25]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, to run our `is_stable` function over each element of `c`, we vectorize
    it with `np.vectorize` and call it with 20 iterations:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了对每个 `c` 元素运行我们的 `is_stable` 函数，我们用 `np.vectorize` 对其进行矢量化，并用 20 次迭代进行调用：
- en: '[PRE27]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We are calling the resulting array a `mandelbrot_mask` since it returns True
    (1) for each mandelbrot. To plot this array, we use the `imshow` function of Matplpotlib
    with a `binary` colormap. That will make the image black and white.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将结果数组称为 `mandelbrot_mask`，因为它对每个曼德博集合返回 True (1)。为了绘制这个数组，我们使用 Matplotlib
    的 `imshow` 函数，并使用 `binary` 颜色映射。这将使图像呈现黑白效果。
- en: '[PRE29]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '![](../Images/22153db8a4e3e89f17e5842172eb05fb.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/22153db8a4e3e89f17e5842172eb05fb.png)'
- en: Image by author
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Well, that is one ugly Mandelbrot. How about we increase the pixel density to
    1024 and the iteration count to 30?
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，那是一张很丑的曼德博图像。我们要不要将像素密度提高到 1024，将迭代次数增加到 30？
- en: '[PRE30]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![](../Images/a892cb1d4d5e2a7aa3067b73e990d4bb.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a892cb1d4d5e2a7aa3067b73e990d4bb.png)'
- en: Image by author
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Now, this looks more like it! Congratulations on plotting your first Mandelbrot
    image!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这看起来更像样了！祝贺你绘制了你的第一个曼德博图像！
- en: Wait, that wasn't art!
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 等等，那还不是艺术！
- en: Even though our current fractal still looks very cool, it is far from the art
    I promised.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们当前的分形看起来很酷，但离我承诺的艺术还有很大差距。
- en: 'So, let''s give it a makeover by focusing on not just the black set numbers
    but on the numbers around the edge. Because looking at this image, we can see
    all types of interesting patterns emerging around the boundaries:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们通过不仅关注黑色集合数字，还关注边缘周围的数字来进行改造。因为看着这张图像，我们可以看到在边界周围出现了各种有趣的图案：
- en: '![](../Images/b0221d2d18e87df439f07e7b5ccda976.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b0221d2d18e87df439f07e7b5ccda976.png)'
- en: Image by author
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Let's start the makeover by organizing our code into a class because it is a
    real mess with everything scattered.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过将代码组织成一个类来开始改造，因为当前的代码实在是一团乱麻。
- en: 'The class name will be `Mandelbrot` and we will use data classes so that we
    don''t have to create the `__init__` constructor like a caveman:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 类的名称将是 `Mandelbrot`，我们将使用数据类，这样我们就不必像古人那样创建 `__init__` 构造函数：
- en: '[PRE31]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The class only requires the `max_iteration` parameter to be initialized. We
    also add the `is_stable` function as a class method.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类只需要初始化 `max_iteration` 参数。我们还将 `is_stable` 函数添加为类方法。
- en: '[PRE32]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Up until now, we have been coloring only the mandelbrots black and the rest
    white. But if we want to spice up the edges of the set, we have to come up with
    a logic to color the unstable elements other than white.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只对曼德博集合的部分进行了黑色着色，其余部分为白色。但是如果我们想给集合的边缘增添些许风采，我们必须想出一种逻辑来将不稳定的元素涂色为白色以外的颜色。
- en: One way we can do this is by determining in how many iterations a complex number
    becomes unstable. Some will become unstable very fast (maybe they have short fuses?),
    but others may take hundreds or thousands of iterations (they are patient). In
    general, though, numbers close to the fractal's edge are less unstable (take more
    iterations) than those far away.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过确定复数在多少次迭代中变得不稳定来实现这一点。有些会非常快地变得不稳定（也许它们有短暂的引信？），但其他的可能需要几百或几千次迭代（它们比较耐心）。不过，一般来说，接近分形边缘的数字比远离边缘的数字不稳定性更小（需要更多迭代）。
- en: 'Using this information, we can give each pixel (complex number) different depths
    of color based on the iteration they terminate. This is called the Escape Count
    algorithm. Let''s implement it in our class:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 利用这些信息，我们可以根据每次终止的迭代次数为每个像素（复数）赋予不同的颜色深度。这被称为逃逸计数算法。让我们在我们的类中实现它：
- en: '[PRE36]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'First, we change `n_iterations` to `max_iterations`, as it makes more sense.
    Then, we create an `escape_count` method that:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将 `n_iterations` 改为 `max_iterations`，因为这样更合适。然后，我们创建一个 `escape_count` 方法：
- en: if *c* is unstable, returns the iteration in which it exceeds the magnitude
    of 2
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 *c* 不稳定，则返回它超出 2 的幅度的迭代次数
- en: if *c* is stable, returns the max iteration count
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 *c* 是稳定的，则返回最大迭代次数
- en: '[PRE37]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now, we create another method to measure the stability based on the iteration
    count:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们创建另一种方法来根据迭代次数测量稳定性：
- en: '[PRE41]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The `stability` method returns a measure between 0 and 1, which we can later
    use to determine the color depths. Only mandelbrots will return `max_iterations`,
    so they will be marked with 1\. Numbers close to the edge will take longer to
    become unstable, so they will have increasingly closer values to 1.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`stability` 方法返回一个介于 0 和 1 之间的度量值，我们可以用它来确定颜色深度。只有 Mandelbrots 会返回 `max_iterations`，所以它们将被标记为
    1。接近边缘的数字会需要更长的时间才会变得不稳定，因此它们的值会越来越接近 1。'
- en: 'With this logic, we can bring back our `is_stable` function but make it much
    shorter:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这个逻辑，我们可以恢复我们的 `is_stable` 函数，但使其更简短：
- en: '[PRE42]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Now, we create a final method to `plot` the set with Matplotlib:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们创建一个最终的方法来使用 Matplotlib `plot` 集合：
- en: '[PRE51]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'In `plot`, we apply the `stability` method over all elements of `c`, so the
    resulting matrix holds color depths in each cell. When we plot this matrix with
    a reversed grayscale colormap (so that the mandelbrots stay black), we get the
    following image:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `plot` 中，我们对 `c` 的所有元素应用 `stability` 方法，因此结果矩阵在每个单元格中保存颜色深度。当我们用反向灰度色图绘制这个矩阵（以便
    Mandelbrots 保持黑色），我们会得到以下图像：
- en: '[PRE52]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '![](../Images/9c3156abac077cd3ef5d9a9b0e13619b.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9c3156abac077cd3ef5d9a9b0e13619b.png)'
- en: Image by author
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: 'We can already see bands with different levels of grey appearing around the
    edges. Let''s give it another colormap that isn''t boring grayscale:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经可以看到边缘周围出现了不同灰度级别的带状区域。让我们给它一个不那么无聊的灰度色图：
- en: '[PRE53]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '![](../Images/f00de98a8e076988baefc40079f67d0a.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f00de98a8e076988baefc40079f67d0a.png)'
- en: Image by author
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: Pay attention to how the boundary lines are the brightest red and how white
    spots still appear where the set repeats itself. Awesome!
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 注意边界线是最亮的红色，并且在集合重复的地方仍然会出现白点。太棒了！
- en: Conclusion
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Our final result was almost art. But, there are a lot of improvements we can
    make. The first thing is improving the image resolution by having finer control
    over each pixel. Then, we have to remove that annoying white space around the
    image (if you are reading in dark mode).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最终结果几乎可以称得上艺术。但仍有许多改进空间。首先是通过更精细地控制每个像素来提高图像分辨率。然后，我们需要去除图像周围那恼人的白色空白（如果你在暗模式下阅读）。
- en: All these tasks are shortcomings of Matplotlib, but in the next article, we
    will take things to a whole new level with Pillow, Python's image manipulation
    library.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这些任务都是 Matplotlib 的不足之处，但在下一篇文章中，我们将通过 Pillow（Python 的图像处理库）将事情提升到一个全新的水平。
- en: '[Stay tuned](https://ibexorigin.medium.com/)!'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[敬请关注](https://ibexorigin.medium.com/)！'
- en: Loved this article and, let’s face it, its bizarre writing style? Imagine having
    access to dozens more just like it, all written by a brilliant, charming, witty
    author (that’s me, by the way :).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 喜欢这篇文章吗？还有它那奇特的写作风格？想象一下，如果你能访问到数十篇类似的文章，全部由一个聪明、迷人、风趣的作者（就是我 :)）撰写，那会怎样。
- en: For only 4.99$ membership, you will get access to not just my stories, but a
    treasure trove of knowledge from the best and brightest minds on Medium. And if
    you use [my referral link](https://ibexorigin.medium.com/membership), you will
    earn my supernova of gratitude and a virtual high-five for supporting my work.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 仅需 4.99$ 会员，你不仅可以访问我的故事，还能获取来自 Medium 上最佳和最聪明的头脑的宝贵知识。如果你使用[我的推荐链接](https://ibexorigin.medium.com/membership)，你将获得我的超级感谢和一记虚拟的击掌，以支持我的工作。
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----c83817fcb64b--------------------------------)
    [## Join Medium with my referral link — Bex T.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ibexorigin.medium.com/membership?source=post_page-----c83817fcb64b--------------------------------)
    [## 使用我的推荐链接加入 Medium — Bex T.'
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 独家访问我的所有 ⚡premium⚡ 内容，并在 Medium 上无限制浏览。通过为我购买一份来支持我的工作…
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----c83817fcb64b--------------------------------)
    ![](../Images/95a45f54ecebc1b690dfd77f973617d2.png)
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----c83817fcb64b--------------------------------)
    ![](../Images/95a45f54ecebc1b690dfd77f973617d2.png)'
