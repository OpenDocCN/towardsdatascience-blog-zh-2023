- en: Local Search with Simulated Annealing from Scratch
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从头开始的模拟退火局部搜索
- en: 原文：[https://towardsdatascience.com/local-search-with-simulated-annealing-from-scratch-9f8dcb6c2e06](https://towardsdatascience.com/local-search-with-simulated-annealing-from-scratch-9f8dcb6c2e06)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/local-search-with-simulated-annealing-from-scratch-9f8dcb6c2e06](https://towardsdatascience.com/local-search-with-simulated-annealing-from-scratch-9f8dcb6c2e06)
- en: '![](../Images/99361b24f6101d25e65a3ea1a9ea55ed.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/99361b24f6101d25e65a3ea1a9ea55ed.png)'
- en: Temperature, an important part of simulated annealing. Image by Dall-E 2.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 温度，模拟退火中的一个重要部分。图片来源：Dall-E 2。
- en: Generic Python code with 3 examples
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用Python代码及三个示例
- en: '[](https://hennie-de-harder.medium.com/?source=post_page-----9f8dcb6c2e06--------------------------------)[![Hennie
    de Harder](../Images/3e4f2cccd6cb976ca3f8bf15597daea8.png)](https://hennie-de-harder.medium.com/?source=post_page-----9f8dcb6c2e06--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9f8dcb6c2e06--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9f8dcb6c2e06--------------------------------)
    [Hennie de Harder](https://hennie-de-harder.medium.com/?source=post_page-----9f8dcb6c2e06--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://hennie-de-harder.medium.com/?source=post_page-----9f8dcb6c2e06--------------------------------)[![Hennie
    de Harder](../Images/3e4f2cccd6cb976ca3f8bf15597daea8.png)](https://hennie-de-harder.medium.com/?source=post_page-----9f8dcb6c2e06--------------------------------)[](https://towardsdatascience.com/?source=post_page-----9f8dcb6c2e06--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----9f8dcb6c2e06--------------------------------)
    [Hennie de Harder](https://hennie-de-harder.medium.com/?source=post_page-----9f8dcb6c2e06--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9f8dcb6c2e06--------------------------------)
    ·11 min read·Apr 12, 2023
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page-----9f8dcb6c2e06--------------------------------)
    ·阅读时间11分钟·2023年4月12日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '**In some of my previous posts, I explained heuristics and how you can use
    them to find good quality solutions for a mathematical optimization problem. In
    this post, I will provide generic Python code for local search together with simulated
    annealing. Besides generic code, there are implementations for three classic example
    problems: the traveling salesman problem, the knapsack problem and the Rastrigin
    function.**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**在我之前的一些帖子中，我解释了启发式算法以及如何利用它们找到数学优化问题的优质解。在这篇帖子中，我将提供通用的Python代码，用于局部搜索和模拟退火。除了通用代码，还有三个经典示例问题的实现：旅行商问题、背包问题和Rastrigin函数。**'
- en: 'A short refresher: local search is a heuristic that tries to improve a given
    solution by looking at neighbors. If the objective value of a neighbor is better
    than the current objective value, the neighbor solution is accepted and the search
    continues. Simulated annealing allows worse solutions to be accepted, this makes
    it possible to escape local minima.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 简短的回顾：局部搜索是一种启发式算法，它通过查看邻居来尝试改善给定的解。如果邻居的目标值比当前目标值更好，则接受邻居解并继续搜索。模拟退火允许接受更差的解，这使得能够摆脱局部最小值。
- en: Simulated Annealing Generic Code
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模拟退火通用代码
- en: 'The code works as follows: we are going to create four code files. The most
    important one is `sasolver.py`, this file contains the generic code for simulated
    annealing. The problems directory contains three examples of optimization problems
    that we can run to test the SA solver.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的工作方式如下：我们将创建四个代码文件。最重要的是 `sasolver.py`，该文件包含了模拟退火的通用代码。问题目录包含了三个优化问题的示例，我们可以运行这些示例来测试SA求解器。
- en: 'This is the folder structure:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是文件夹结构：
- en: '![](../Images/19276977dd1151465bd43f197168a7da.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/19276977dd1151465bd43f197168a7da.png)'
- en: 'For solving a problem with simulated annealing, we start to create a class
    that is quite generic:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决一个使用模拟退火的问题，我们开始创建一个相当通用的类：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This file is `sasolver.py`. It takes a problem as input, and then you can solve
    the problem with simulated annealing, `run_sa()`. There are different ways to
    handle cooling, implemented in `_calc_temperature`. The acceptance value is calculated
    based on the metropolis acceptance criterion.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件是 `sasolver.py`。它接受一个问题作为输入，然后你可以通过 `run_sa()` 使用模拟退火来解决这个问题。处理降温的方式有不同的实现，体现在
    `_calc_temperature` 中。接受值是根据Metropolis接受准则计算的。
- en: By modifying the `problem = 'tsp'` line, (below `if __name__ == '__main__':`,)
    it’s possible to select another problem (replace `tsp` by `knapsack` or `rastrigin`).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通过修改 `problem = 'tsp'` 这一行，（在 `if __name__ == '__main__':` 下面，）可以选择另一个问题（将 `tsp`
    替换为 `knapsack` 或 `rastrigin`）。
- en: 'We need to have three methods in the example problems to make this code work:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在示例问题中有三种方法来使这段代码正常工作：
- en: '`baseline_solution()`'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`baseline_solution()`'
- en: This method creates the first solution (starting point) for a problem.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该方法为问题创建第一个解决方案（起始点）。
- en: '`score_solution(solution)`'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`score_solution(solution)`'
- en: The `score_solution` method calculates the objective value.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`score_solution` 方法计算目标值。'
- en: '`select_neighbor(solution)`'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`select_neighbor(solution)`'
- en: We need to apply local moves to the solutions and select a neighbor, this will
    be implemented in this method.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们需要对解决方案应用局部移动并选择一个邻居，这将在此方法中实现。
- en: 'We are going to implement these three methods for three problems: traveling
    salesman, knapsack and the Rastrigin function.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为三个问题实现这三种方法：旅行推销员、背包和 Rastrigin 函数。
- en: Example 1\. Traveling Salesman
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 1\. 旅行推销员
- en: 'The first problem we are going to look at is the traveling salesman problem.
    In this problem, there are locations that need to be visited. The goal is to minimize
    the distance traveled. Below you can see an example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要讨论的第一个问题是旅行推销员问题。在这个问题中，有一些地点需要访问。目标是最小化旅行距离。下面是一个示例：
- en: '![](../Images/61bf128176b8d5f58ccc0c01a2e32e6e.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/61bf128176b8d5f58ccc0c01a2e32e6e.png)'
- en: 'Example: 10 locations we want to visit and minimize the distance. Image by
    author.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：我们想访问10个地点并最小化距离。图片由作者提供。
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this problem, the baseline solution is created by visiting the locations
    in sequence (0 to 9). For the example, it gives us this route:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个问题中，基线解决方案是通过按顺序访问位置（0 到 9）创建的。例如，它给出了以下路线：
- en: '![](../Images/e69788d5943834003288e892c63f421e.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e69788d5943834003288e892c63f421e.png)'
- en: Baseline solution. Image by author.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 基线解决方案。图片由作者提供。
- en: 'This doesn’t look optimal, and it isn’t. A local move is defined by swapping
    two locations. The score of the solution is the distance we need to travel. After
    running simulated annealing, this is the final solution:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来并不理想，确实如此。局部移动通过交换两个位置来定义。解决方案的得分是我们需要旅行的距离。经过模拟退火后，这是最终解决方案：
- en: '![](../Images/e4329fe5f88b8e491a07211ff9bc23c6.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e4329fe5f88b8e491a07211ff9bc23c6.png)'
- en: Final solution. Image by author.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最终解决方案。图片由作者提供。
- en: That looks better!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来好多了！
- en: For small problems, this works okay (still not recommended). For larger ones,
    there are better solutions and algorithms available, for example the [Lin-Kernighan
    heuristic](https://en.wikipedia.org/wiki/Lin–Kernighan_heuristic). What also helps
    is a better starting solution, e.g. a greedy algorithm.
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对于小问题，这种方法效果不错（但仍不推荐）。对于较大的问题，有更好的解决方案和算法可用，例如 [Lin-Kernighan 启发式算法](https://en.wikipedia.org/wiki/Lin–Kernighan_heuristic)。更好的起始解决方案也有帮助，例如贪心算法。
- en: Example 2\. Knapsack
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 2\. 背包
- en: The knapsack problem is a classic one, but for those who don’t know it, here
    follows an explanation.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 背包问题是一个经典问题，但对于那些不熟悉它的人，这里有一个解释。
- en: Imagine you are in a cave full of beautiful treasures. Due to some unforeseen
    circumstances the cave is collapsing. You have time to fill your knapsack with
    treasures and then you need to run away to safety. Of course, you want to take
    the items with you that together bring most value. What items should you take?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 想象你身处一个充满美丽宝藏的洞穴中。由于一些不可预见的情况，洞穴正在坍塌。你有时间将宝藏装入背包中，然后需要逃离到安全的地方。当然，你想带上那些总价值最高的物品。你应该带哪些物品？
- en: '![](../Images/7eeca27fb41e6bb31a04a81cafe19382.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7eeca27fb41e6bb31a04a81cafe19382.png)'
- en: The knapsack problem. The knapsack has a capacity of 50\. What items should
    you select to maximize the value? Image by author.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 背包问题。背包的容量为50。你应该选择哪些物品来最大化价值？图片由作者提供。
- en: The data you need to have for solving this problem is the capacity of the knapsack,
    the capacity needed for the items and the value of the items.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 解决此问题所需的数据包括背包的容量、物品所需的容量以及物品的价值。
- en: 'Below the code that defines this problem:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是定义这个问题的代码：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The baseline solution selects an item at random until the knapsack is full.
    The solution score is the sum of values of the items in the knapsack, multiplied
    by -1\. This is necessary because the SA solver minimizes a given objective. In
    this situation, there are three local moves possible: adding an item, removing
    an item or swapping two items. This makes it possible to reach every solution
    possible in solution space. If we swap an item, we need to check if the new solution
    is feasible.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 基线解决方案随机选择一个物品，直到背包满了。解决方案的得分是背包中物品值的总和，乘以 -1。因为 SA 求解器最小化给定的目标。在这种情况下，有三种局部移动方式：添加一个物品、移除一个物品或交换两个物品。这使得在解空间中可以达到每一个可能的解。如果我们交换一个物品，需要检查新解是否可行。
- en: 'In the next image you can see a sample run log file. There are 10 items we
    need to choose from. On top the item values, below the capacity the items take,
    and on the third line the value densities (item value divided by item capacity).
    Then the solution process starts. The solution contains the index number(s) of
    the selected items. In the final solution, items 4, 5 and 8 are selected (counting
    starts at 0):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中可以看到一个示例运行日志文件。我们需要从 10 个物品中选择。顶部是物品值，下面是物品占用的容量，第三行是价值密度（物品值除以物品容量）。然后开始解决过程。解决方案包含所选物品的索引号。在最终解决方案中，选择了物品
    4、5 和 8（计数从 0 开始）：
- en: '![](../Images/ba0a1f2d7da4401a323d42db75705891.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ba0a1f2d7da4401a323d42db75705891.png)'
- en: Example 3\. Rastrigin Function
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 3\. 拉斯特里金函数
- en: 'A function that is used often to test optimization algorithms, is the [Rastrigin
    function](https://en.wikipedia.org/wiki/Rastrigin_function). In 3D it looks like
    this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常用于测试优化算法的函数是 [拉斯特里金函数](https://en.wikipedia.org/wiki/Rastrigin_function)。在
    3D 中，它看起来是这样的：
- en: '![](../Images/10d1ece40cf2ce4c17316cfac04ced54.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/10d1ece40cf2ce4c17316cfac04ced54.png)'
- en: Rastrigin function 3D plot. Image by author.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 拉斯特里金函数的 3D 图。图片由作者提供。
- en: 'It has many local optima. The goal is to find the global minimum, which is
    at coordinate (0, 0). It is easier to see in a contour plot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数有很多局部极小值。目标是找到全局最小值，它的坐标是 (0, 0)。在等高线图中更容易看出：
- en: '![](../Images/ef9a64d0d5e3714ed5f343310867fe2a.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ef9a64d0d5e3714ed5f343310867fe2a.png)'
- en: Contour plot of the Rastrigin function. Image by author.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 拉斯特里金函数的等高线图。图片由作者提供。
- en: The landscape consists of many local optima with the highest ones in the four
    corners and the lowest ones in the center.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 地形由许多局部极小值组成，四个角落的值最高，而中心的值最低。
- en: We can try to find the global minimum with simulated annealing. This problem
    is continuous instead of discrete, and we want to find the values for *x* and
    *y* that minimize the Rastrigin function.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以尝试使用模拟退火来寻找全局最小值。这个问题是连续的而不是离散的，我们想找到最小化拉斯特里金函数的 *x* 和 *y* 的值。
- en: 'The Rastrigin function is defined with a *n*-dimensional domain as:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 拉斯特里金函数在 *n* 维域上的定义为：
- en: '![](../Images/088583f7044b989debb8483c4298b7fe.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/088583f7044b989debb8483c4298b7fe.png)'
- en: Let’s try to find the optimum for the function with three dimensions (*x*, *y*,
    and *z*). The domain is defined by *x* and *y*, so the problem is exactly as the
    plots above.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试在三维空间中找到该函数的最优解（*x*、*y* 和 *z*）。定义域由 *x* 和 *y* 确定，因此问题与上面的图形完全相同。
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For the baseline solution, we select a random float for *x* and *y* between
    -5.12 and 5.12\. The score of the solution is equal to *z* (the outcome of the
    Rastrigin function). A neighbor is selected by taking a step into a random direction
    with a step size set to 0.1\. The feasibility check is done to make sure we stay
    in the domain.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基线解决方案，我们在 -5.12 和 5.12 之间随机选择 *x* 和 *y* 的浮点数。解决方案的得分等于 *z*（拉斯特里金函数的结果）。通过在随机方向上迈出一步，步长设置为
    0.1 来选择一个邻居。进行可行性检查以确保我们保持在定义域内。
- en: 'A log of a run:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一次运行的日志：
- en: '![](../Images/4f4ce8bca0e645b30f83f4d81839969b.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4f4ce8bca0e645b30f83f4d81839969b.png)'
- en: The final solution comes really close to the optimum.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最终解决方案非常接近最优解。
- en: 'But watch out, if you run the algorithm with more dimensions, it’s not guaranteed
    that you find the optimum:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 但要注意，如果你在更多维度下运行算法，不能保证找到最优解：
- en: '![](../Images/01252f63bbbdc128f57e7ae9e96c0fbb.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/01252f63bbbdc128f57e7ae9e96c0fbb.png)'
- en: As you can see, the final solution is a local optimum instead of the global
    one. It find goods coordinates for the first two variables, but the third one
    is equal to 0.985, which is far away from 0\. It’s important to verify the results
    you get. This specific example will work well by finetuning the SA parameters,
    but for more dimensions you should probably use another optimization technique
    that performs better.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，最终的解决方案是局部最优而非全局最优。它找到了前两个变量的良好坐标，但第三个变量等于0.985，远离0。验证结果非常重要。这个具体例子通过微调SA参数可以很好地工作，但对于更多维度，你可能需要使用另一种表现更好的优化技术。
- en: Conclusion
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this post, we coded the implementation of simulated annealing. With three
    examples, you have an understanding of different possibilities with it. You only
    need to implement three methods for a new problem to make it work, these are `baseline_solution`,
    `score_solution` and `select_neighbor`. Of course, this implementation is a basic
    one, and if you want to use it you need to tune the parameters of SA and make
    sure that the algorithm returns a feasible solution. What can help a lot in final
    solution quality is a good initial solution and investigating the best way to
    select a neighbor solution.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们实现了模拟退火的代码。通过三个例子，你可以理解它的不同可能性。你只需为新问题实现三个方法，使其工作，这些方法是`baseline_solution`、`score_solution`和`select_neighbor`。当然，这个实现是基本的，如果你想使用它，你需要调整SA的参数，确保算法返回一个可行的解决方案。一个好的初始解决方案和研究选择邻近解决方案的最佳方法能大大提高最终解决方案的质量。
- en: Thanks for reading, and see you next time!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读，下次见！
- en: Related
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: '[](/an-introduction-to-a-powerful-optimization-technique-simulated-annealing-87fd1e3676dd?source=post_page-----9f8dcb6c2e06--------------------------------)
    [## An Introduction to a Powerful Optimization Technique: Simulated Annealing'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 介绍一种强大的优化技术：模拟退火](https://towardsdatascience.com/an-introduction-to-a-powerful-optimization-technique-simulated-annealing-87fd1e3676dd?source=post_page-----9f8dcb6c2e06--------------------------------)'
- en: Explanation, parameters, strengths, weaknesses and use cases
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解释、参数、优点、缺点和应用场景
- en: towardsdatascience.com](/an-introduction-to-a-powerful-optimization-technique-simulated-annealing-87fd1e3676dd?source=post_page-----9f8dcb6c2e06--------------------------------)
    [](/mathematical-optimization-heuristics-every-data-scientist-should-know-b26de0bd43e6?source=post_page-----9f8dcb6c2e06--------------------------------)
    [## Mathematical Optimization Heuristics Every Data Scientist Should Know
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[数学优化启发式方法每个数据科学家都应该知道](https://towardsdatascience.com/mathematical-optimization-heuristics-every-data-scientist-should-know-b26de0bd43e6?source=post_page-----9f8dcb6c2e06--------------------------------)
    [## 数学优化启发式方法每个数据科学家都应该知道'
- en: Local search, genetic algorithms and more.
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 局部搜索、遗传算法等。
- en: towardsdatascience.com](/mathematical-optimization-heuristics-every-data-scientist-should-know-b26de0bd43e6?source=post_page-----9f8dcb6c2e06--------------------------------)
    [](/four-ways-to-combine-mathematical-optimization-and-machine-learning-8cb874276254?source=post_page-----9f8dcb6c2e06--------------------------------)
    [## Five ways to combine Mathematical Optimization and Machine Learning
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 将数学优化与机器学习结合的五种方式](https://towardsdatascience.com/four-ways-to-combine-mathematical-optimization-and-machine-learning-8cb874276254?source=post_page-----9f8dcb6c2e06--------------------------------)'
- en: Practical examples of combining two forces.
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 两种力量结合的实际例子。
- en: towardsdatascience.com](/four-ways-to-combine-mathematical-optimization-and-machine-learning-8cb874276254?source=post_page-----9f8dcb6c2e06--------------------------------)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[将数学优化与机器学习结合的四种方式](https://towardsdatascience.com/four-ways-to-combine-mathematical-optimization-and-machine-learning-8cb874276254?source=post_page-----9f8dcb6c2e06--------------------------------)'
