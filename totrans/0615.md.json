["```py\n!pip install pinecone-client\n!pip install sentence_transformers\n```", "```py\nimport itertools\nimport pinecone\n\n#Connecting to Pinecone Server\napi_key = \"YOUR_API_KEY\"\n\npinecone.init(api_key=api_key, environment='YOUR_ENV_IN_DASHBOARD')\n\n#Connect to your indexes\nindex_name = \"manfye-test\"\n\nindex = pinecone.Index(index_name=index_name)\n```", "```py\n# Getting Index Details\npinecone.describe_index(index_name)\n\n# Return:\n# IndexDescription(name='manfye-test', metric='cosine', replicas=1, dimension=300.0, shards=1, pods=1, pod_type='s1.x1', status={'ready': True, 'state': 'Ready'}, metadata_config=None, source_collection='')\n\nindex.describe_index_stats()\n\n# Return:\n# {'dimension': 300,\n# 'index_fullness': 0.0,\n# 'namespaces': {},\n# 'total_vector_count': 0}\n```", "```py\nimport pandas as pd\n\ndata = {\n    'ticketno': [1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010],\n    'complains': [\n        'Broken navigation button on the website',\n        'Incorrect pricing displayed for a product',\n        'Unable to reset password',\n        'App crashes on the latest iOS update',\n        'Payment processing error during checkout',\n        'Wrong product delivered',\n        'Delayed response from customer support',\n        'Excessive delivery time for an order',\n        'Difficulty in finding a specific product',\n        'Error in applying a discount coupon'\n    ]\n}\n\ndf = pd.DataFrame(data)\n```", "```py\nfrom sentence_transformers import SentenceTransformer\n\nmodel = SentenceTransformer(\"average_word_embeddings_glove.6B.300d\")\n\ndf[\"question_vector\"] = df.complains.apply(lambda x: model.encode(str(x)).tolist())\n```", "```py\ndef chunks(iterable, batch_size=100):\n    it = iter(iterable)\n    chunk = tuple(itertools.islice(it, batch_size))\n    while chunk:\n        yield chunk\n        chunk = tuple(itertools.islice(it, batch_size))\n\nfor batch in chunks([(str(t), v) for t, v in zip(df.ticketno, df.question_vector)]):\n    index.upsert(vectors=batch) \n```", "```py\nindex.describe_index_stats()\n\n# Return:\n# {'dimension': 300,\n# 'index_fullness': 0.0,\n# 'namespaces': {'': {'vector_count': 10}},\n# 'total_vector_count': 10} \n```", "```py\nindex.fetch([\"1010\",\"1009\"])\n```", "```py\nquery_questions = [\n    \"navigation button\",\n]\n\nquery_vectors = [model.encode(str(question)).tolist() for question in query_questions]\n\nquery_results = index.query(queries=query_vectors, top_k=5, include_values=False)\n```", "```py\n# Extract matches and scores from the results\nmatches = []\nscores = []\nfor match in query_results['results'][0]['matches']:\n    matches.append(match['id'])\n    scores.append(match['score'])\n\n# Create DataFrame with only matches and scores\nmatches_df = pd.DataFrame({'id': matches, 'score': scores})\n\n# Match the result dataframe to main dataframe\ndf[\"ticketno\"] = df[\"ticketno\"].astype(str)\nmatches_df.merge(df,left_on=\"id\",right_on=\"ticketno\")\n```", "```py\n index.upsert(vectors=batch)\n```", "```py\nindex.delete(ids=[\"id-1\", \"id-2\"], namespace='')\n```", "```py\nindex.delete(deleteAll='true', namespace=\"\")\n```"]