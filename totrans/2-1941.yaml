- en: 'Supercharge Your Python Asyncio With Aiomultiprocess: A Comprehensive Guide'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/supercharge-your-python-asyncio-with-aiomultiprocess-a-comprehensive-guide-571ee0e2f416](https://towardsdatascience.com/supercharge-your-python-asyncio-with-aiomultiprocess-a-comprehensive-guide-571ee0e2f416)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PYTHON TOOLBOX](https://medium.com/@qtalen/list/python-toolbox-4289824c6407)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Harness the power of asyncio and multiprocessing to turbocharge your applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://qtalen.medium.com/?source=post_page-----571ee0e2f416--------------------------------)[![Peng
    Qian](../Images/9ce9aeb381ec6b017c1ee5d4714937e2.png)](https://qtalen.medium.com/?source=post_page-----571ee0e2f416--------------------------------)[](https://towardsdatascience.com/?source=post_page-----571ee0e2f416--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----571ee0e2f416--------------------------------)
    [Peng Qian](https://qtalen.medium.com/?source=post_page-----571ee0e2f416--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----571ee0e2f416--------------------------------)
    ·9 min read·Jul 5, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/656680725e855bd9980f28bd31ee56cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Photo Credit: Created by Author, [Canva](https://www.canva.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I will take you into the world of `aiomultiprocess`, a library
    that combines the powerful capabilities of Python `asyncio` and `multiprocessing`.
  prefs: []
  type: TYPE_NORMAL
- en: This article will explain through rich code examples and best practices.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this article, you will understand how to leverage the powerful
    features of aiomultiprocess to enhance your Python applications, just like a head
    chef leading a team of chefs to create a delicious feast.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine that you want to invite your colleagues over for a big meal on the weekend.
    How would you do it?
  prefs: []
  type: TYPE_NORMAL
- en: As an experienced chef, you certainly wouldn’t cook one dish at a time; that
    would be too slow. You would efficiently use your time, letting multiple tasks
    happen simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: For example, while you wait for the water to boil, you can step away to wash
    vegetables. This way, you can throw the vegetables into the pot when the water
    is boiling. This is the charm of concurrency.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, recipes can often be cruel: you need to keep stirring when making
    soup; vegetables need to be washed and chopped; you also need to bake bread, fry
    steaks, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: When there are many dishes to prepare, you’ll be overwhelmed.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, your colleagues won’t just sit around waiting to eat. They will
    come into the kitchen to help you, with each additional person acting like an
    additional working process. This is the powerful combination of multiprocessing
    and concurrency.
  prefs: []
  type: TYPE_NORMAL
- en: The same is true for code. Even with asyncio, has your Python application still
    encountered bottlenecks? Are you looking for ways to further improve the performance
    of your concurrent code? If so, `aiomultiprocess` is the answer you’ve been looking
    for.
  prefs: []
  type: TYPE_NORMAL
- en: How to Install and Basic Usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you use pip, install it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you use Anaconda, install it from conda-forge:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Basic usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`aiomultiprocess` consists of three main classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Process` is the base class for the other two classes and is used to start
    a process and execute a coroutine function. You won’t usually need to use this
    class.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Worker` is used to start a process, execute a coroutine function, and return
    the result. We also won’t be using this class.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Pool` is the core class we will focus on. Like `multiprocessing.Pool`, it
    starts a process pool, but its context needs to be managed using `async with`.
    We will use the two methods of Pool: `map` and `apply`.'
  prefs: []
  type: TYPE_NORMAL
- en: The `map` method accepts a coroutine function and an iterable. The `Pool` will
    iterate over the iterable and assign the coroutine function to run on various
    processes. The result of the map method can be asynchronously iterated using `async
    for:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `apply` method accepts a coroutine function and the required argument tuple
    for the function. According to the scheduler’s rules, the `Pool` will assign the
    coroutine function to an appropriate process for execution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Implementation Principle and Practical Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Implementation principle of aiomultiprocess.Pool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[In a previous article](/harnessing-multi-core-power-with-asyncio-in-python-1764404ce44f),
    I explained how to distribute asyncio tasks across multiple CPU cores.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The general approach is to start a process pool in the main process using `[loop.run_in_executor](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor)`.
    Then, an [asyncio event loop](https://docs.python.org/3/library/asyncio-eventloop.html#)
    is created in each process in the process pool, and the coroutine functions are
    executed in their respective loops. The schematic is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/086e3a88a5b55ab8bd44c1260a8b45d6.png)'
  prefs: []
  type: TYPE_IMG
- en: This diagram shows the way to integrate asyncio and multiprocessing. Image by
    Author
  prefs: []
  type: TYPE_NORMAL
- en: The implementation of `aiomultiprocess.Pool` is similar. It includes `scheduler`,
    `queue`, and `process` as its three components.
  prefs: []
  type: TYPE_NORMAL
- en: The `scheduler` can be understood as the head chef, responsible for allocating
    tasks in a suitable way to each chef. Of course, you can hire (implement) a head
    chef suitable for your needs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `queue` is like the kitchen’s assembly line. Strictly speaking, it includes
    an order line and a delivery line. The head chef passes the menu through the order
    line to the chefs, and the chefs return the completed dishes through the delivery
    line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `process` is like the chefs in the restaurant. They each handle several
    dishes concurrently according to the allocation. Each time a dish is ready, it
    will be handed over in the allocated order.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The entire schematic is shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b46969311fbfa2a953d6bda2d62d8421.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Aiomultiprocess consists of three components: scheduler, queue, and process.
    Image by Author'
  prefs: []
  type: TYPE_NORMAL
- en: Real-world example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Based on the introduction provided earlier, you should now understand how to
    use `aiomultiprocess`. Let’s dive into a real-world example to experience the
    power of it.
  prefs: []
  type: TYPE_NORMAL
- en: First, we’ll use a remote call and a loop calculation to simulate the process
    of data retrieval and processing in real life. This method demonstrates that IO-bound
    and CPU-bound tasks are often mixed together, and the boundary between them is
    not so clear-cut.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let’s use the traditional asyncio approach to call this task 30 times
    as a baseline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/09407b6f9fa7e08cb4d7d312bf5bb1b5.png)'
  prefs: []
  type: TYPE_IMG
- en: The code is run using the traditional asyncio method. Screenshot by Author
  prefs: []
  type: TYPE_NORMAL
- en: The code execution results are shown in the figure, and it takes approximately
    21 seconds. Now let’s see how much aiomultiprocess can improve this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using aiomultiprocess is simple. The original concurrent code does not need
    to be modified. You only need to adjust the code in the main method to run inside
    the Pool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ec58467cd297fd8a8108ade84d61e49b.png)'
  prefs: []
  type: TYPE_IMG
- en: Simply use the modified version of aiomultiprocess. Screenshot by Author
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the code using aiomultiprocess takes only 14 seconds to complete
    on my laptop. The performance improvement would be even greater on a more powerful
    computer.
  prefs: []
  type: TYPE_NORMAL
- en: Detailed Best Practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, based on my experience, let me share some more practical best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Use pool only
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although `aiomultiprocess` also provides the `Process` and `Worker` classes
    for us to choose from, we should always use the `Pool` class to ensure maximum
    efficiency due to the significant resource consumption of creating processes.
  prefs: []
  type: TYPE_NORMAL
- en: How to use queues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[In a previous article](/unleashing-the-power-of-python-asyncios-queue-f76e3188f1c4),
    I explained how to use `asyncio.Queue` to implement the producer-consumer pattern
    to balance resources and performance.'
  prefs: []
  type: TYPE_NORMAL
- en: In `aiomultiprocess`, we can also use queues. However, since we are in a process
    pool, we cannot use `asyncio.Queue`. At the same time, we cannot directly use
    `multiprocessing.Queue` in the process pool.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, you should use `multiprocessing.Manager().Queue()` to create
    a queue, with the code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Using `initializer` to initialize resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose you need to use an `aiohttp` session or a database connection pool in
    a coroutine method, but we cannot pass arguments when creating tasks in the main
    process because these objects cannot be pickled.
  prefs: []
  type: TYPE_NORMAL
- en: An alternative is to define a global object and an initialization method. In
    this initialization method, access the global object and perform initialization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just like `[multiprocessing.Pool](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.pool)`,
    `aiomultiprocess.Pool` can accept an initialization method and corresponding initialization
    parameters when initialized. This method will be called to complete the initialization
    when each process starts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Exception handling and retries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although `aiomultiprocess.Pool` provides the `exception_handler` parameter to
    help with exception handling, if you need more flexibility, you need to combine
    it with `asyncio.wait`. For the usage of `asyncio.wait`, you can refer to [my
    previous article](/use-these-methods-to-make-your-python-concurrent-tasks-perform-better-b693b7a633e1).
  prefs: []
  type: TYPE_NORMAL
- en: 'With `asyncio.wait`, you can get tasks that encounter exceptions. After extracting
    the task, you can make some adjustments and then re-execute the task, as shown
    in the code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Using Tenacity for retries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Of course, we have more flexible and powerful options for exception handling
    and retries, such as using the `Tenacity` library, which I explained in [this
    article](/conquer-retries-in-python-using-tenacity-an-in-depth-tutorial-3c98b216d798).
  prefs: []
  type: TYPE_NORMAL
- en: With `Tenacity`, the code above can be significantly simplified. You just need
    to add a decorator to the coroutine method, and the method will automatically
    retry when an exception is thrown.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Using tqdm to indicate progress
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I like `tqdm` because it can always tell me how far the code has run when I’m
    waiting in front of the screen. [This article](/using-tqdm-with-asyncio-in-python-5c0f6e747d55)
    also explains how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since `aiomultiprocess` uses asyncio’s API to wait for tasks to complete, it
    is also compatible with `tqdm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Running asyncio code is like a chef cooking a meal. Even if you can improve
    efficiency by running different tasks concurrently, you’ll eventually encounter
    bottlenecks.
  prefs: []
  type: TYPE_NORMAL
- en: The simplest solution at this point is to add more chefs to increase the parallelism
    of the cooking process.
  prefs: []
  type: TYPE_NORMAL
- en: '`Aiomultiprocess` is such a powerful Python library. By allowing concurrent
    tasks to run on multiple processes, it perfectly breaks through the performance
    bottlenecks caused by asyncio’s single-threaded nature.'
  prefs: []
  type: TYPE_NORMAL
- en: The use and best practices of `aiomultiprocess` in this article are based on
    my work experience. If you’re interested in any aspect, feel free to comment and
    join the discussion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides improving code execution speed and performance, using various tools
    to improve work efficiency is also a performance enhancement:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Peng Qian](../Images/fa6bd24b4781f623be8ea40c4e6bdb78.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Peng Qian](https://qtalen.medium.com/?source=post_page-----571ee0e2f416--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: Python Toolbox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[View list](https://qtalen.medium.com/list/python-toolbox-4289824c6407?source=post_page-----571ee0e2f416--------------------------------)6
    stories![Seaborn 0.12: An Insightful Guide to the Objects Interface and Declarative
    Graphics](../Images/6c1f4ca8d7b82c288cb229b73f560c04.png)![Supercharge Your Python
    Asyncio With Aiomultiprocess: A Comprehensive Guide](../Images/9c366de04067cd0ec1b30d9ce223011b.png)![Conquer
    Retries in Python Using Tenacity: An In-depth Tutorial](../Images/e636d5546f5826d60865c6a95f976fa8.png)[](https://qtalen.medium.com/membership?source=post_page-----571ee0e2f416--------------------------------)
    [## Join Medium with my referral link - Peng Qian'
  prefs: []
  type: TYPE_NORMAL
- en: As a Medium member, a portion of your membership fee goes to writers you read,
    and you get full access to every story…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: qtalen.medium.com](https://qtalen.medium.com/membership?source=post_page-----571ee0e2f416--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'This article was originally published at: [https://www.dataleadsfuture.com/supercharge-your-python-asyncio-with-aiomultiprocess-a-comprehensive-guide/](https://www.dataleadsfuture.com/supercharge-your-python-asyncio-with-aiomultiprocess-a-comprehensive-guide/)'
  prefs: []
  type: TYPE_NORMAL
