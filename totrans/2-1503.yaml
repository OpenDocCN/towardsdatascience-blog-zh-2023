- en: Maximum Likelihood Estimation of Parameters for Random Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/maximum-likelihood-estimation-4a1a866dfa70](https://towardsdatascience.com/maximum-likelihood-estimation-4a1a866dfa70)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Modeling parameters by highest likelihood of observing data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://romanmichaelpaolucci.medium.com/?source=post_page-----4a1a866dfa70--------------------------------)[![Roman
    Paolucci](../Images/61d8dd3f53507c1d69cc441c4303400b.png)](https://romanmichaelpaolucci.medium.com/?source=post_page-----4a1a866dfa70--------------------------------)[](https://towardsdatascience.com/?source=post_page-----4a1a866dfa70--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----4a1a866dfa70--------------------------------)
    [Roman Paolucci](https://romanmichaelpaolucci.medium.com/?source=post_page-----4a1a866dfa70--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----4a1a866dfa70--------------------------------)
    ·11 min read·Dec 10, 2023
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3914d7333e71686deb52327047a97ded.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Photo by Francesco Ungaro: [https://www.pexels.com/photo/blue-and-white-abstract-painting-1912832/](https://www.pexels.com/photo/blue-and-white-abstract-painting-1912832/)'
  prefs: []
  type: TYPE_NORMAL
- en: Concepts in probability and statistics can be somewhat elusive due to the combination
    of high level mathematics, bad notation, and entanglement of random variables
    and data. This article sheds light on the relationship between random variables
    and data in the context of estimators, estimates, bias and variance, and the method
    of maximum likelihood estimation.
  prefs: []
  type: TYPE_NORMAL
- en: The article will be broken up into the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: '**Parameters of Probability Mass and Distribution Functions**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Estimators**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Estimates**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bias and Variance**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maximum Likelihood Estimation**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shameless plug for** [**Quant Guild**](https://quantguild.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parameters of Probability Mass and Distribution Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This article is not a primer on common random variables ([that is what this
    article is for](https://medium.com/quant-guild/common-random-variables-f30c537a01e4)).
    I recommend you read that article, or have a strong foundation in basic probability
    (axioms, mass/distribution functions, etc. before continuing)
  prefs: []
  type: TYPE_NORMAL
- en: Let’s discuss an example in the context of patients arriving at a hospital.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we are a hospital risk manager, senior doctor statistician, data science
    nurse (I have literally *no idea* who would be in charge of this) and we wanted
    to estimate our risk of not having enough beds to accommodate patients. It is
    reasonable to model the number of patients checked into a room in a given day
    as a *poisson* random variable. That is, we assume the random variable that is
    the number of patients that are checked in to the hospital everyday is governed
    by poisson distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ecc84a629991aac77da535065d079dfd.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: '**X**is the number of patients checked into the hospital on days **1, 2, …,
    n**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I will now simplify the problem space before angry comments roll in:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Assume all patients checked in to the hospital will check out same day*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Assume patients checked in each day are independent of one another*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is it practical? Probably not — but it will sure enable us to move forward in
    a simplified fashion. These are the things you have to think about when modeling
    risk, how are your assumptions impacting the model.
  prefs: []
  type: TYPE_NORMAL
- en: Here, with these assumptions, we are most likely going to underestimate risk.
    Why? Well are people always going to check out same day? Absolutely not, so we
    are overestimating bed availability in that context. What about independence?
    Well can people get each other sick? I digress as this is not an article about
    assumptions and violations.
  prefs: []
  type: TYPE_NORMAL
- en: Ok, considering all of the given assumptions we know patients follow a poisson
    distribution with the following probability mass function.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6697af301b601bb7f38ad3754ea0d7a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: Thus, for any number of patients in a given day, **a**, we can find the associated
    probability of seeing that number of patients.
  prefs: []
  type: TYPE_NORMAL
- en: Further, suppose we only had 100 beds, based on historic patient data, how can
    we estimate the probability of not being able to accommodate patients? We will
    return to this idea once we answer a more pressing question.
  prefs: []
  type: TYPE_NORMAL
- en: The particularly keen, or those of you paying any remote degree of attention,
    will ask some variation of the following question
  prefs: []
  type: TYPE_NORMAL
- en: How do we estimate the parameter lambda? What value do we pick?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Ahh, yes now we can discuss estimators.
  prefs: []
  type: TYPE_NORMAL
- en: Estimators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An estimator is a *function* of an arbitrary set of random variables. It is
    important to note that the *estimator* is a function where the *estimates* are
    given by that function on a set of data. Allow me to elaborate.
  prefs: []
  type: TYPE_NORMAL
- en: The following equation is an estimator
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e3e4c77808023f1b340e05e543f1ddfb.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully written in functional form helps deliver the point. The function,
    which is a sample mean, is an estimator of population mean. Notice, this is a
    function of an arbitrary set of random variables that are independently and identically
    distributed following a standard normal distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s apply the expectation operator to the estimator
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/404ac8cb5afdb560021da4985d3b9546.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: We can see here that the expected value of this estimator is zero which also
    aligns with the population parameter for the given set of standard normal random
    variables. Notice, we have the population parameter here, in the context of our
    hospital example above we lack the population parameter lambda so it must be *estimated*.
    More on this shortly.
  prefs: []
  type: TYPE_NORMAL
- en: The following is also an estimator
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/40b2a694dc2d27663136b2c0ec271b86.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: Where *zeta* is an arbitrary constant.
  prefs: []
  type: TYPE_NORMAL
- en: We can apply the same expectation operator
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a1daff9ba067aa9d3fb9a00db3bf9254.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: The expected value is now zeta, notice this does not align with the population
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: We have somewhat of an interesting situation here. We know the population parameter
    so we would naturally like the expected value of our estimator to yield the population
    parameter that governs our data. Intuitively, this is the first estimator without
    zeta.
  prefs: []
  type: TYPE_NORMAL
- en: But what if we don’t know the population parameter? Is it true that not adding
    an arbitrary constant like zeta is optimal if we don’t know the population parameter?
  prefs: []
  type: TYPE_NORMAL
- en: Once again, we will return to this idea in the context of bias and variance
    shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Estimates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section is easy, and I promise it will be brief. Estimates are a function
    of data where the function is a given estimator.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that these estimates have their own distribution as
    they are a function of the data we provide the estimator.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we have the following realized random variables from a standard normal
    distribution
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e74c032ce6554a50a952c1a4e2befaa0.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: This is *data* and *nothing* is uncertain. We know the governing distribution
    and we know the values of each **z**. Given this data we can construct an estimate
    for the population mean (which we happen to know). This is given by applying the
    function *g* from the estimators section on the realized data.
  prefs: []
  type: TYPE_NORMAL
- en: Here is a Python script to accomplish this.
  prefs: []
  type: TYPE_NORMAL
- en: Code Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Notice, n=1000 in this case and we construct an estimate for the population
    mean (which we know is zero) and it happens to be quite close. Every new sample
    of data will yield a different estimate — however, we know in expectation these
    estimates will align with the population mean.
  prefs: []
  type: TYPE_NORMAL
- en: This is what is meant when saying the estimates follow their *own distribution*.
    If we were to record a series of n=1000 samples and create a histogram we would
    in fact observe the *distribution of sample means.*
  prefs: []
  type: TYPE_NORMAL
- en: '*There are implications here with the law of large numbers and the central
    limit theorem — if you are interested in an intuitive explanation of this concepts
    in a completely different setting see the following video.*'
  prefs: []
  type: TYPE_NORMAL
- en: Video Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: We can now return to the questions posed earlier in the article.
  prefs: []
  type: TYPE_NORMAL
- en: In the context of our hospital example we need to estimate the parameter, and
    we know we can estimate the parameter using an estimator.
  prefs: []
  type: TYPE_NORMAL
- en: The real issue we have at hand is, what estimator should we use, and how do
    we evaluate the estimator in question?
  prefs: []
  type: TYPE_NORMAL
- en: Bias and Variance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bias refers to the deviation in expectation of an estimator to the parameter
    being estimated. That’s quite the mouthful, let’s look at the math.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we have a series of independent and identically distributed normal random
    variables **N.** We can construct an estimate for the population mean, theta.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/abc692cb0a31ab167c35c82d7f14bf61.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: Formally, bias is the difference between the expectation of the estimator and
    the true value.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b547e09ea6d41c626ed53152f584ec0d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: In this case, tau is equal to the population mean mu as that is the true value
    we are trying to estimate. Now we find the expectation of our estimator.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/84910bb8e9f24a691a0a34fcf58c2a9d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: Thus
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1e216d408c42a0711bc2f64a429ade7e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: Here we find that the estimator theta is unbiased for the population mean.
  prefs: []
  type: TYPE_NORMAL
- en: 'A necessary question arises given the following circumstances:'
  prefs: []
  type: TYPE_NORMAL
- en: Is an estimator with zero bias and an incredible amount of variance better than
    an estimator with a little bias and extremely low variance?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Which estimator is better? If only there was a metric that considered both bias
    and variance…
  prefs: []
  type: TYPE_NORMAL
- en: '**Mean Squared Error (MSE)**'
  prefs: []
  type: TYPE_NORMAL
- en: The mean squared error considers the expected (squared) distance of the estimator
    to the value being estimated.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dcb6f7864ebb305c18165922af60dd8d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: The MSE actually simplifies to a combination of variance and bias squared.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/724aad204ee11eb1e26e8cdc8f0389ab.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have means of answering the overarching question: *which estimator should
    be choose?* That is, we may compare the MSE among estimators to determine which
    may be better in the context of bias and variance.'
  prefs: []
  type: TYPE_NORMAL
- en: In the context of machine learning we have the well known issue of a *bias-variance
    tradeoff.* When models have more predictors they tend to have a lower error (bias)
    for estimates when fit to training data — however, when fitting to new training
    samples the variance of those estimates tend to be much larger. The tradeoff refers
    to the issue of trying to simultaneously minimize both bias and variance.
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps we will dive deeper into this topic in another article. For now, let’s
    finally discuss how we can construct an effective estimator using *maximum likelihood
    estimation.*
  prefs: []
  type: TYPE_NORMAL
- en: Maximum Likelihood Estimation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The time spent in this article until now has been laying the foundation for
    *why* maximum likelihood estimation is useful. Let’s recap.
  prefs: []
  type: TYPE_NORMAL
- en: We have a hospital with 100 beds and have data on the number of patients we
    check in and out daily, we want to model this random variable with a poisson distribution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We know the poisson distribution is parameterized by lambda, but how should
    we estimate this parameter? What estimator should we choose?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We know we desire that the estimator we choose have a low MSE in the context
    of both bias and variance, but *how can we construct such an estimator out of
    thin air?*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fortunately, the last question in our recap can be answered with the method
    of maximum likelihood estimation. The MLE has several desirable traits in an estimator,
    for example
  prefs: []
  type: TYPE_NORMAL
- en: MLEs deliver asymptotically zero bias
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MLEs are asymptotically normal regardless of the governing distribution of its
    data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MLEs deliver variance that is as low as possible for all asymptotically normal
    estimators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where here asymptotically refers to the arbitrary increase of the sample size
    of a given set of data.
  prefs: []
  type: TYPE_NORMAL
- en: But what *is* the MLE exactly? For whatever parameter we are estimating, we
    are finding the estimate which yields the highest likelihood of observing the
    data that we have already seen. Doing this in the context of a random variable
    will yeild the MLE estimator, applying that estimator to data will yield the MLE
    estimates.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now derive the maximum likelihood estimator for a poisson random variable.
    Afterwards, we may use this estimator to estimate lambda.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/133f950066aaeb8fc7dbd11b2c7d80e4.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: Here we are able to use the notion of independence that we assumed earlier to
    find the multivariate function as a factorized product of individual probability
    mass functions for a poisson random variable.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/842a56f161390856619665c5cb293662.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: We often use the *log likelihood* as it makes computations simpler.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/02ff5e26b2a573c484c10706fcf02c99.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: Do not get confused however, the following solutions are equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3d479ebb9496c498907695c0e12eb888.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now substitute in the probability mass function for theta.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/59bd21efc46033cc8436915287f21427.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: Using the properties of logs we can separate the product into a summation.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/27cee3fb9beeb0dfc048a3b0b34cf410.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: We now want to maximize this probability by selecting an appropriate value for
    lambda. This becomes an optimization problem from calculus, we differentiate with
    respect to lambda and set the equation equal to zero — solve for lambda.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/076b40a0bdf463da14082833f01db8cc.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3fd911c651161ef4c6829c50b7575e8c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/49c38b7b7555ca47172611d366fc67a1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d41a9c381b67ea3133e9d322d0bc2787.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: How about that! The MLE for population parameter lambda is the sample mean.
    Using Python, I will now show you how to put all of this together.
  prefs: []
  type: TYPE_NORMAL
- en: Given a set of daily patient data assumed to follow a poisson distribution compute
    the estimate for population parameter lambda using the MLE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model a poisson distribution using the MLE estimate for lambda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find the probability of not having enough beds to accommodate patients in a
    given day
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compare this to the known lambda (here we have the luxury of knowing this as
    it is simulated data) to see how well the MLE estimate works
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code Generated by the Author
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: There you have it, that is a pretty darn good estimate of our population parameter!
    This is the method of maximum likelihood estimation.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Elementary study of probability and statistics covers the basic assumptions
    and functions of random variables. However, the abstract study often leaves students
    with a sense that something is missing: *applications to real world problems to
    inform decision making*.'
  prefs: []
  type: TYPE_NORMAL
- en: Herein, we discussed how to construct a basic probability model based on the
    theory and assumptions accompanying a poisson random variable in tandem with observed
    data and the potential overestimation and underestimation of estimated probabilities
    if our assumptions were to be violated.
  prefs: []
  type: TYPE_NORMAL
- en: As previously noted, a key assumption of this basic probability model is independence
    among daily hospital-goers which may not be entirely accurate. To posit recent
    evidence, recall how hospital beds became increasingly scarce, day over day, during
    the COVID-19 pandemic. In all likelihood the autocovariance structure of this
    process would be non-zero implying some correlation between daily occupancy. Moreover,
    it is unlikely that all of our hospital-goers will check out on the same day.
  prefs: []
  type: TYPE_NORMAL
- en: It may be far more reasonable to model *tomorrow’s* occupancy based on *today’s*
    occupancy. Using this framework, we may now view our original problem as a *dependent*
    system that evolves over time where the *future* state only depends on the *present*
    state. Fortunately, we have means of dealing with such a dependent process by
    studying it as a *Markov chain* which will be a subject for a later article —
    stay tuned!
  prefs: []
  type: TYPE_NORMAL
- en: Quant Guild
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Interested in advancing your knowledge of quantitative finance, math, statistics,
    data science, machine learning, and artificial intelligence?
  prefs: []
  type: TYPE_NORMAL
- en: Check out our courses at Quant Guild, use code **QGMEDIUM for 50% off**!
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://quantguild.com/p/introduction-to-python?source=post_page-----4a1a866dfa70--------------------------------)
    [## Introduction to Python'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Python Python has overwhelmingly become the language of choice
    for academics and practitioners alike…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: quantguild.com](https://quantguild.com/p/introduction-to-python?source=post_page-----4a1a866dfa70--------------------------------)
    [](https://quantguild.com/p/algorithmic-trading-system-development?source=post_page-----4a1a866dfa70--------------------------------)
    [## Algorithmic Trading System Development
  prefs: []
  type: TYPE_NORMAL
- en: A concise course designed for those interested in building their own algorithmic
    trading systems.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: quantguild.com](https://quantguild.com/p/algorithmic-trading-system-development?source=post_page-----4a1a866dfa70--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Check out our free resources!
  prefs: []
  type: TYPE_NORMAL
- en: '[**YouTube**](https://www.youtube.com/@QuantGuild)'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://www.youtube.com/@QuantGuild?source=post_page-----4a1a866dfa70--------------------------------)
    [## Quant Guild'
  prefs: []
  type: TYPE_NORMAL
- en: divitiae et educatione
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.youtube.com](https://www.youtube.com/@QuantGuild?source=post_page-----4a1a866dfa70--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '[**GitHub**](https://github.com/Quant-Guild)'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/Quant-Guild?source=post_page-----4a1a866dfa70--------------------------------)
    [## Quant-Guild'
  prefs: []
  type: TYPE_NORMAL
- en: Quant-Guild has 4 repositories available. Follow their code on GitHub.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/Quant-Guild?source=post_page-----4a1a866dfa70--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '[**Medium**](https://medium.com/quant-guild)'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/quant-guild?source=post_page-----4a1a866dfa70--------------------------------)
    [## Quant Guild'
  prefs: []
  type: TYPE_NORMAL
- en: divitiae et educatione
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/quant-guild?source=post_page-----4a1a866dfa70--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '[**Discord**](https://discord.gg/MJ4FU2c6c3)'
  prefs: []
  type: TYPE_NORMAL
- en: '[## Join the Quant Guild Discord Server!'
  prefs: []
  type: TYPE_NORMAL
- en: Check out the Quant Guild community on Discord — hang out with 1 other members
    and enjoy free voice and text chat.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: discord.gg](https://discord.gg/MJ4FU2c6c3?source=post_page-----4a1a866dfa70--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'Thank you so much for reading! I hope you enjoyed this article — if you have
    any questions please feel free to leave a comment or reach out anytime: *roman@quantguild.com*.'
  prefs: []
  type: TYPE_NORMAL
- en: Other than that, I’ll see you in the next one!
  prefs: []
  type: TYPE_NORMAL
- en: '**RMP**'
  prefs: []
  type: TYPE_NORMAL
