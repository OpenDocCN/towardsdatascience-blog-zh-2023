["```py\nconda create -n my-manim-environment\nconda activate my-manim-environment\nconda install -c conda-forge manim​\n```", "```py\nbrew install --cask mactex-no-gui​\n```", "```py\nsudo apt install texlive\n```", "```py\nfrom manim import *\n```", "```py\nfrom manim import *\nfrom manim.mobject.geometry.tips import ArrowSquareTip\nclass ArrowExample(Scene):\n    def construct(self):\n        arrow_1 = Arrow(\n            start=RIGHT, end=LEFT, color=BLUE\n        )  # Specifies the starting point of the arrow as the right side.\n        arrow_2 = Arrow(\n            start=RIGHT, end=LEFT, color=BLUE, tip_shape=ArrowSquareTip\n        ).shift(\n            DOWN\n        )  # Shifts the position of the arrow downward\n        self.play(Create(arrow_1))\n        self.play(Create(arrow_2))\n```", "```py\nmanim -p manim.py Arrows.py\n```", "```py\nfrom manim import *\n\nclass BarChartExample(Scene):\n    def construct(self):\n        # Create the initial bar chart\n        barchart1 = BarChart(\n            values=[0.1, 0.2, 0.3],\n            y_range=[0, 0.6, 0.2],\n            bar_names=[\"food\", \"animals\", \"sport\"],\n            y_length=6,\n            x_length=10,\n            x_axis_config={\"font_size\": 36}\n        )\n        self.play(Create(barchart1))\n```", "```py\nfrom manim import *\n\nclass BarChartExample(Scene):\n    def construct(self):\n        # Create the initial bar chart\n        barchart1 = BarChart(\n            values=[0.1, 0.2, 0.3],\n            y_range=[0, 0.6, 0.2],\n            bar_names=[\"food\", \"animals\", \"sport\"],\n            y_length=6,\n            x_length=10,\n            x_axis_config={\"font_size\": 36}\n        )\n\n        # Create the second bar chart\n        barchart2 = BarChart(\n            values=[0.4, 0.3, 0.3],\n            bar_names=[\"food\", \"animals\", \"sport\"],\n            y_length=6,\n            x_length=10,\n            x_axis_config={\"font_size\": 36}\n        )\n\n        self.play(Create(barchart1)) # draw the first bar chart\n\n        # Animate the first bar chart to become the second one\n        self.play(barchart1.animate.become(barchart2), run_time=1.5)\n        self.wait(2)\n```", "```py\nfrom manim import *\nclass SinFunctionPlot(Scene):\n    def construct(self):\n        axes = Axes(\n            x_range=[-10, 10, 1],  # x-axis range and step size\n            y_range=[-1.5, 1.5, 1],  # y-axis range and step size\n            x_length=10,\n            axis_config={\"color\": BLUE},\n            x_axis_config={\n                \"numbers_to_include\": np.arange(-10, 10, 2),\n                \"numbers_with_elongated_ticks\": np.arange(-10, 10, 2),\n            },\n        )\n        axes_labels = axes.get_axis_labels(Tex(\"sin(x)\"))\n        # add labels to the axes object\n        axes.add(axes_labels)\n        # create the sin function\n        sin_curve = axes.plot(lambda x: np.sin(x), color=RED)\n        plot = VGroup(axes, sin_curve)\n        # Incrementally show the plot\n        self.play(Create(plot))\n        self.wait(2)\n```", "```py\nax = Axes(\n    x_range=[0, 1],\n    y_range=[0, 3],\n    tips=False,\n    x_length=config[\"frame_width\"] / 3,\n    y_length=config[\"frame_height\"] * 0.6,\n).add_coordinates()\n```", "```py\n x_label = ax.get_x_axis_label(\n      Tex(\"probability\").scale(0.7), edge=DOWN, direction=ORIGIN\n  )\n\n  y_label = ax.get_y_axis_label(\n      Tex(\"probability density\").scale(0.7).rotate(90 * DEGREES),\n      edge=LEFT,\n      direction=LEFT,\n      buff=0.2,\n)\nax.add(x_label, y_label)​\n```", "```py\nalpha = 2\nbeta = 5\nnum_samples = 1\n\ndef pdf(x):\n    return dist.pdf(x)\n\ndist = scipy.stats.beta(self.alpha, self.beta)\npdf_curve = ax.plot(pdf, x_range=[0, 1], color=BLUE_C)\n# add the PDF curve to the ax object.\nax.add(pdf_curve)​\n```", "```py\ntitle_pdf = (\n    Tex(\"Dirichlet Distribution's PDF\")\n    .set_color_by_gradient(*bar_kwargs[\"bar_colors\"])\n    .set_fill(color=WHITE, opacity=0.3)\n    .set_stroke(width=1.2)\n    .set(width=7)\n    .to_corner(UL)\n)\n```", "```py\na_tex = Tex(r\"$\\alpha = 2$\", color=BLUE).scale(0.7)\nb_tex = Tex(r\"$\\beta = 5$\", color=BLUE).scale(0.7)\nax.add(a_tex, b_tex)\na_tex.next_to(ax, direction=UP + LEFT, aligned_edge=RIGHT)\nb_tex.next_to(a_tex, DOWN)\n```", "```py\nself.play(Write(a_tex), Write(b_tex))\nself.play(Create(ax))\nself.play(Create(pdf_curve), run_time=2)\n```", "```py\nalpha = 2\nbeta = 5\n\ndef get_barchart(self, alpha, beta, width, height, zeros=True, **kwargs):\n    num_samples = 1\n    if zeros is True:\n        data = [0, 0]\n    else:\n        dist = scipy.stats.beta(alpha, beta)\n        prob_0 = dist.rvs(num_samples)[0]\n        prob_1 = 1 - prob_0\n        data = [prob_0, prob_1]\n\n    bar_chart = BarChart(values=data, x_length=width, y_length=height, **kwargs)\n    return bar_chart\n\nbar_kwargs = {\n     \"x_length\": config[\"frame_width\"] / 2.5,\n     \"y_length\": config[\"frame_height\"] - 3.25,\n     \"bar_colors\": [RED, GREEN, BLUE, YELLOW],\n     \"y_range\" : [0, 0.7, 0.15],\n}\n```", "```py\nbar = BarChart([0.7, 0.3], **bar_kwargs)​\nbar.to_edge(DOWN + RIGHT)​\ntex_animals = Tex(\"animals\")\ntex_animals.next_to(bar.bars[0], DOWN, buff=0.1)\ntex_food = Tex(\"food\")\ntex_food.next_to(bar.bars[1], DOWN, buff=0.1)​\nself.play(Create(bar))\nself.play(Write(tex_food), Write(tex_animals))​\n```", "```py\n# resample 10 times\nfor i in range(10):\n    topic_distribution = scipy.stats.beta(self.alpha, self.beta)\n    probability = new_dist.rvs(self.num_samples)[0]\n    new_data = [probability, 1 - probability]\n\n    if i == 0:\n        dot = Dot(ax.coords_to_point(probability, 0))\n        self.play(Create(dot), bar.animate.change_bar_values(new_data))\n\n    else:\n        self.play(\n            dot.animate.move_to(ax.coords_to_point(probability, 0)),\n            bar.animate.change_bar_values(new_data),\n        )\n\n    self.wait(1)\n```", "```py\ntopic_distribution = BarChart(\n    values=[0,0],\n    bar_names=['animals', 'food'],\n    y_axis_config={\"font_size\": 36},\n    y_length=3,\n    x_length=5,\n    y_range=[0, 0.6, 0.1],\n)​\n```", "```py\nwords = [\n    'banana', \n    'kiwi', \n    'lemon', \n    'strawberry', \n    'tomato', \n    'chicken', \n    'pig', \n    'sheep',\n    'crocodile',\n    'zebra'\n]\ndef add_svg_xticks(bar_chart):\n    \"\"\"Adds svg symbols instead of standard x-ticks to a BarChart.\"\"\"\n    for i, word in enumerate(words):\n        symbol = SVGMobject(f\"icons/{word}.svg\", width=0.4)\n        symbol.next_to(bar_chart.bars[i], DOWN, buff=0.3, aligned_edge=DOWN)\n        bar_chart.add(symbol)​\n```", "```py\narrow_topic = Line(ORIGIN, DOWN * 0.8).add_tip().set_color(BLUE)\narrow_word = Line(ORIGIN, DOWN * 0.8).add_tip().set_color(BLUE)​\n```", "```py\ntopic_p = scipy.stats.dirichlet(self.alphas_topics).rvs(1)[0]\nword_p1 = scipy.stats.dirichlet(self.alphas_words_topic1).rvs(1)[0]\nword_p2 = scipy.stats.dirichlet(self.alphas_words_topic2).rvs(1)[0]\nword_p = np.concatenate((word_p1, word_p2))\n```", "```py\nself.play(\n    topic_distribution.animate.change_bar_values(topic_p),\n    word_distribution.animate.change_bar_values(word_p),\n)\n```", "```py\n# move\narrow_topic.next_to(topic_distribution[0][topic], UP, buff=0.1)\narrow_word.next_to(word_distribution[0][word], UP, buff=0.1)\n# animate\nself.play(FadeIn(arrow_topic))\nself.play(FadeIn(arrow_word))\n```", "```py\n# animate move\nself.play(arrow_topic.animate.next_to(topic_distribution[0][topic], UP, buff=0.1))\nself.play(arrow_word.animate.next_to(word_distribution[0][word], UP, buff=0.1))\n```", "```py\nword_symbol = create_word_token(word)\nword_symbol.next_to(\nword_distribution[0][word], DOWN, buff=0.3, aligned_edge=DOWN\n)\ntopic_symbol = create_topic_symbol(row, topic)\nself.play(FadeIn(topic_symbol))\nself.play(word_symbol.animate.move_to(topic_symbol.get_center()))\nself.play(FadeOut(topic_symbol))\n```", "```py\nself.play(FadeOut(arrow_topic, arrow_word))\n```", "```py\nnew_row = VGroup(Tex(f\"doc {doc_index}: \"))\nnew_row.next_to(row, DOWN, buff=0.1, aligned_edge=LEFT)\nself.add(new_row)\nrow = new_row\n```", "```py\ntopic_prob = dirichlet(self.alphas_topics).rvs(1)[0]\nword_prob = np.concatenate(\n    [\n        dirichlet(self.alphas_words_topic1).rvs(1)[0],\n        dirichlet(self.alphas_words_topic2).rvs(1)[0],\n    ],\n)\nself.play(\n    topic_distribution.animate.change_bar_values(topic_prob),\n    word_distribution.animate.change_bar_values(word_prob),\n)\n```"]