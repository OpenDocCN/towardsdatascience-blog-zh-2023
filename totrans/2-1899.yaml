- en: 30 SQL Queries Explained Through Their Pandas Equivalents
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 30个SQL查询通过它们的Pandas等效体进行解释
- en: 原文：[https://towardsdatascience.com/sql-for-people-who-love-pandas-a-10-minute-yet-thorough-tutorial-c189de9d417d](https://towardsdatascience.com/sql-for-people-who-love-pandas-a-10-minute-yet-thorough-tutorial-c189de9d417d)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/sql-for-people-who-love-pandas-a-10-minute-yet-thorough-tutorial-c189de9d417d](https://towardsdatascience.com/sql-for-people-who-love-pandas-a-10-minute-yet-thorough-tutorial-c189de9d417d)
- en: SQL made much easier for people who love Pandas
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL对喜欢Pandas的人来说变得更简单了
- en: '[](https://ibexorigin.medium.com/?source=post_page-----c189de9d417d--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----c189de9d417d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c189de9d417d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c189de9d417d--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----c189de9d417d--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ibexorigin.medium.com/?source=post_page-----c189de9d417d--------------------------------)[![Bex
    T.](../Images/516496f32596e8ad56bf07f178a643c6.png)](https://ibexorigin.medium.com/?source=post_page-----c189de9d417d--------------------------------)[](https://towardsdatascience.com/?source=post_page-----c189de9d417d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page-----c189de9d417d--------------------------------)
    [Bex T.](https://ibexorigin.medium.com/?source=post_page-----c189de9d417d--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page-----c189de9d417d--------------------------------)
    ·10 min read·Jun 9, 2023
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page-----c189de9d417d--------------------------------)
    ·阅读时间10分钟·2023年6月9日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/4804e3d33ecae544cceeee4a0f1df5f4.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4804e3d33ecae544cceeee4a0f1df5f4.png)'
- en: Image by me with Midjourney
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我使用Midjourney制作
- en: Motivation
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动机
- en: In a world dominated by SQL since 1974, along came Pandas in 2008, offering
    attractive features like built-in visualization and flexible data handling. It
    quickly became the go-to tool for data exploration, overshadowing SQL.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 自1974年起SQL主导了数据世界，而Pandas在2008年出现，提供了内置可视化和灵活的数据处理等吸引人的功能。它迅速成为数据探索的首选工具，掩盖了SQL的光芒。
- en: But don’t be fooled, SQL still holds its ground. It’s the second most in-demand
    and third fastest-growing language for data science (see [here](/the-most-in-demand-skills-for-data-scientists-in-2021-4b2a808f4005)).
    So, while Pandas steals the spotlight, SQL remains a vital skill for any data
    scientist.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但不要被迷惑，SQL仍然保持其地位。它是数据科学领域第二受欢迎且第三增长最快的语言（见[这里](/the-most-in-demand-skills-for-data-scientists-in-2021-4b2a808f4005)）。所以，虽然Pandas抢占了风头，SQL仍然是任何数据科学家必备的技能。
- en: Let’s find out how easy it is to learn SQL when you already know Pandas.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当你已经了解Pandas时学习SQL有多么简单。
- en: Connecting to a Database
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: Setting up an SQL workspace and connecting to a sample database can be a real
    pain. First, you need to install your favorite SQL flavor (PostgreSQL, MySQL,
    etc.) and download an SQL IDE. Doing those here would draw us away the article’s
    purpose, so we will use a shortcut.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 设置SQL工作区并连接到示例数据库可能非常麻烦。首先，你需要安装你喜欢的SQL类型（PostgreSQL、MySQL等）并下载一个SQL IDE。在这里进行这些操作会偏离文章的目的，因此我们将使用一个快捷方式。
- en: 'Specifically, we will directly run SQL queries in a Jupyter Notebook without
    additional steps. All we need to do is install the `ipython-sql` package using
    pip:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们将直接在Jupyter Notebook中运行SQL查询，而无需额外的步骤。我们需要做的只是使用pip安装`ipython-sql`包：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After the installation, start a new Jupyter session and run this command in
    the notebook:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，启动一个新的Jupyter会话，并在笔记本中运行以下命令：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: and you are all set!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一切准备就绪！
- en: To illustrate how basic SQL statements work, we will be using [the Chinook SQLite
    database](https://github.com/lerocha/chinook-database), which has 11 tables.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明基本的SQL语句如何工作，我们将使用[Chinook SQLite数据库](https://github.com/lerocha/chinook-database)，它包含11个表。
- en: 'To load the dataset and its 11 tables as separate variables into our environment,
    we can run:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要将数据集及其11个表作为单独的变量加载到我们的环境中，我们可以运行：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The statement starts with `%sql` in-line magic command that tells the notebook
    interpreter we will be running SQL commands. It is followed by the path that the
    downloaded Chinook database is in.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句以`%sql`内联魔法命令开头，这告诉笔记本解释器我们将执行SQL命令。接下来是下载的Chinook数据库所在的路径。
- en: The valid paths should always start with `sqlite:///` prefix for SQLite databases.
    Above, we are connecting to the database stored in the 'data' folder of the current
    directory. If you want to pass an absolute path, the prefix should start with
    four forward slashes - `sqlite:////`
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的路径应该始终以 `sqlite:///` 前缀开头，用于 SQLite 数据库。上面，我们连接到当前目录的 'data' 文件夹中存储的数据库。如果你想传递绝对路径，前缀应该以四个斜杠开头
    - `sqlite:////`
- en: If you wish to connect to a different database flavor, you can refer to this
    [excellent article](/heres-how-to-run-sql-in-jupyter-notebooks-f26eb90f3259).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望连接到不同的数据库风格，你可以参考这篇[优秀的文章](/heres-how-to-run-sql-in-jupyter-notebooks-f26eb90f3259)。
- en: Taking a First Look at the Tables
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初步查看表格
- en: 'The first thing we always do in Pandas is to use the `.head()` function to
    take a first look at the data. Let''s learn how to do that in SQL:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Pandas 中总是首先使用 `.head()` 函数来初步查看数据。让我们学习如何在 SQL 中做到这一点：
- en: '![](../Images/dc7f4d416bfea6b0cacc14a983ddf7b5.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dc7f4d416bfea6b0cacc14a983ddf7b5.png)'
- en: The dataset is licensed for commercial use as well.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集也允许用于商业用途。
- en: The first keyword in the above query is `SELECT`. It is equivalent to the brackets
    operator in Pandas, where we select specific columns. But, the SELECT keyword
    is followed by a * (asterisk). ***** is an SQL operator that selects everything
    (all rows and columns) from a table specified after the `FROM` keyword. LIMIT
    is used to minimize the output returned. So, the above query is equivalent to
    `df.head()` function.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询中的第一个关键字是 `SELECT`。它相当于 Pandas 中的括号运算符，用于选择特定列。但 SELECT 关键字后面跟着一个 *（星号）。*****
    是一个 SQL 操作符，用于从 `FROM` 关键字之后指定的表中选择所有内容（所有行和列）。LIMIT 用于最小化返回的输出。因此，上述查询等同于 `df.head()`
    函数。
- en: 'If you don’t want to select all columns, you can specify one or more column
    names after the SELECT keyword:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想选择所有列，你可以在 SELECT 关键字后指定一个或多个列名：
- en: '![](../Images/e3c518e6fc2cdd19719295689634550e.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e3c518e6fc2cdd19719295689634550e.png)'
- en: 'The equivalent Pandas operation is:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 等效的 Pandas 操作是：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Another useful keyword in SQL is `DISTINCT`. Adding this keyword before any
    column name returns its unique values:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 中另一个有用的关键字是 `DISTINCT`。在任何列名之前添加此关键字将返回其唯一值：
- en: '![](../Images/125978d65bce95c1364fb4730bcdee41.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/125978d65bce95c1364fb4730bcdee41.png)'
- en: Comments in SQL are written with double dashes.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 中的注释是用双短横线写的。
- en: Counting the Number of Rows
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算行数
- en: 'Just like Pandas has `.shape` attribute on its DataFrames, SQL has a `COUNT`
    function to display the number of rows in a table:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 Pandas 的 DataFrames 上有 `.shape` 属性一样，SQL 有 `COUNT` 函数来显示表中的行数：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/8a30d20e157f0b8ef126e0ec0aa776d2.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8a30d20e157f0b8ef126e0ec0aa776d2.png)'
- en: 'More helpful info would be counting the number of unique values in a particular
    column. We can do this by adding the DISTINCT keyword into COUNT:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 更有用的信息是计算特定列中唯一值的数量。我们可以通过将 DISTINCT 关键字添加到 COUNT 中来做到这一点：
- en: '![](../Images/a8db55163ef326a09e4d2ef03b920ca6.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a8db55163ef326a09e4d2ef03b920ca6.png)'
- en: Filtering Results With WHERE Clauses
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 WHERE 子句过滤结果
- en: Just looking and counting rows is pretty lame. Let’s see how we can filter rows
    based on conditions.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅查看和计算行数有点无聊。让我们看看如何基于条件过滤行。
- en: 'First, let’s look at the songs which cost more than a dollar:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们查看价格超过一美元的歌曲：
- en: '![](../Images/b01521ec956e0db7dd095502ba029040.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b01521ec956e0db7dd095502ba029040.png)'
- en: Songs that cost more than a dollar.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 价格超过一美元的歌曲。
- en: Conditional statements are written in the WHERE clause, which always comes after
    FROM and before the LIMIT keywords. Using conditionals is pretty similar to how
    we do it in Pandas but I dare say the SQL version is more readable.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 条件语句写在 WHERE 子句中，WHERE 子句总是位于 FROM 和 LIMIT 关键字之间。使用条件与在 Pandas 中类似，但我敢说 SQL
    版本更易读。
- en: 'You can also use the COUNT function when using conditionals. For example, let’s
    see the number of songs that are priced between 1 and 10 dollars:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在使用条件时使用 COUNT 函数。例如，让我们查看价格在 1 到 10 美元之间的歌曲数量：
- en: As you can see, the SQL version is much more readable.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，SQL 版本要易读得多。
- en: '![](../Images/a6c7eee67f788d3de10c5e57e6788542.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a6c7eee67f788d3de10c5e57e6788542.png)'
- en: The number of songs that cost between 1 and 10 dollars.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 价格在 1 到 10 美元之间的歌曲数量。
- en: Above we chained two conditions with the boolean operator AND. Other boolean
    operators (OR, NOT) are used similarly.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 上面我们使用布尔运算符 AND 链接了两个条件。其他布尔运算符（OR、NOT）也类似使用。
- en: 'Now, let’s see all the invoices that have Paris *or* Berlin as a billing city:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们查看所有开票城市为巴黎 *或* 柏林的发票：
- en: '![](../Images/4824e7acf91c1958acbf49ab817b4c3b.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4824e7acf91c1958acbf49ab817b4c3b.png)'
- en: The invoices that are billed from either Berlin or Paris
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 从柏林或巴黎开具的发票
- en: 'The **equality** operator in SQL requires only one ‘=’ (equal) sign. The **inequality**
    operator is represented with either ‘!=’ or ‘<>’ operators:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 中的**等于**运算符只需要一个‘=’（等号）。**不等于**运算符用‘!=’或‘<>’表示：
- en: '![](../Images/ffad28285f3fea6e1f373cbf9e4132f1.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ffad28285f3fea6e1f373cbf9e4132f1.png)'
- en: The invoices where the billing city isn’t Berlin or Paris
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 账单城市不是柏林或巴黎的发票
- en: Easier Filtering With BETWEEN And IN
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 BETWEEN 和 IN 进行更简单的过滤
- en: Similar conditionals are used very often, and writing them out with simple booleans
    becomes cumbersome. For example, Pandas has `.isin()` function which checks if
    a value belongs to a list of values.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的条件非常常用，用简单的布尔运算符编写起来会很麻烦。例如，Pandas 有 `.isin()` 函数检查一个值是否属于值列表。
- en: 'If we wanted to select invoices for five cities, we would have to write five
    chained conditions. Luckily, SQL supports a similar IN operator like `.isin()`
    so we don''t have to:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想选择五个城市的发票，我们将不得不编写五个链式条件。幸运的是，SQL 支持类似 `.isin()` 的 IN 运算符，所以我们不需要：
- en: '![](../Images/327884228f87e946f7439adaf40a86c3.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/327884228f87e946f7439adaf40a86c3.png)'
- en: 'The list of values after IN should be given as a tuple, not as a list. You
    can also negate the condition with the NOT keyword:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: IN 之后的值列表应该给出为元组，而不是列表。你也可以用 NOT 关键字来否定条件：
- en: '![](../Images/82549dfe24a4c8c67c1aa10a9b19c437.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/82549dfe24a4c8c67c1aa10a9b19c437.png)'
- en: 'Another common filtering operation on numeric columns is to select values within
    a range. For this, BETWEEN keyword can be used, which is equivalent to `pd.Series.between()`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对数字列的另一个常见过滤操作是选择范围内的值。为此，可以使用 BETWEEN 关键字，这等同于 `pd.Series.between()`：
- en: '![](../Images/4847efd137d14dc78ff08b57d62e06b4.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4847efd137d14dc78ff08b57d62e06b4.png)'
- en: Choosing the invoices with billing amount between 5 and 15.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 选择账单金额在 5 到 15 之间的发票。
- en: Checking For Nulls
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查空值
- en: 'Every data source has missing values, and databases are no exception. Just
    like there are several ways to explore the missing values in Pandas, there are
    specific keywords that check the existence of null values in SQL. The below query
    counts the number of rows with missing values in BillingState:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 每个数据源都有缺失值，数据库也不例外。就像有几种方法可以在 Pandas 中探索缺失值一样，SQL 中有特定的关键字用于检查空值的存在。下面的查询计算
    BillingState 中缺失值的行数：
- en: '![](../Images/83423d4f16fa55426964a7a000f18c11.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/83423d4f16fa55426964a7a000f18c11.png)'
- en: 'You can add the NOT keyword between IS and NULL to discard missing values of
    a particular column:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 IS 和 NULL 之间添加 NOT 关键字，以丢弃某一列的缺失值：
- en: '![](../Images/012687577373b387bf9dbdf4286dd5c7.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/012687577373b387bf9dbdf4286dd5c7.png)'
- en: Better String Matching With LIKE
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 LIKE 进行更好的字符串匹配
- en: In the WHERE clause, we filtered columns based on exact text values. But often,
    we may want to filter textual columns based on a pattern. In Pandas and pure Python,
    we would use regular expressions for pattern matching, which are very powerful
    but regex requires time to master.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在 WHERE 子句中，我们根据精确的文本值过滤列。但通常，我们可能希望根据模式过滤文本列。在 Pandas 和纯 Python 中，我们会使用正则表达式进行模式匹配，这非常强大，但正则表达式需要时间来掌握。
- en: 'As an alternative, SQL offers a ‘%’ wildcard as a placeholder to match any
    character 0 or more times. For example, the ‘gr%’ string matches’ great,’ ‘groom,’
    ‘greed,’ and ‘%ex%’ matches any text with ‘ex’ in the middle, etc. Let’s see how
    to use it with SQL:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 作为替代，SQL 提供了‘%’通配符作为占位符，可以匹配任意字符 0 次或多次。例如，‘gr%’ 字符串匹配‘great’，‘groom’，‘greed’，‘%ex%’
    匹配任何中间有‘ex’的文本等。让我们看看如何在 SQL 中使用它：
- en: '![](../Images/3027ca269d06ef9e1a87879479a72d61.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3027ca269d06ef9e1a87879479a72d61.png)'
- en: The above query finds all songs that start with ‘B.’ The string that contains
    the wildcard should come after the LIKE keyword.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询找到所有以‘B’开头的歌曲。包含通配符的字符串应出现在 LIKE 关键字之后。
- en: 'Now, let’s find all songs that contain the word ‘beautiful’ in their titles:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们找到所有标题中包含‘beautiful’一词的歌曲：
- en: '![](../Images/54dd60788a78237eaa41b85e9cff6ede.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/54dd60788a78237eaa41b85e9cff6ede.png)'
- en: 'You can also use other boolean operators next to LIKE:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在 LIKE 旁边使用其他布尔运算符：
- en: '![](../Images/1720b5fe6e18b784bda4f6db6122e87c.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1720b5fe6e18b784bda4f6db6122e87c.png)'
- en: There are many other wildcards in SQL that have different functionalities. You
    can see the complete list and their usage [here](https://www.w3schools.com/sql/sql_wildcards.asp).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 中还有许多其他通配符具有不同的功能。你可以在[这里](https://www.w3schools.com/sql/sql_wildcards.asp)查看完整列表及其用法。
- en: Aggregate Functions in SQL
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL中的聚合函数
- en: 'It is also possible to perform basic arithmetic operations on columns. These
    operations are called aggregate functions in SQL, and the most common ones are
    `AVG, SUM, MIN, MAX`. Their functionality should be clear from their names:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对列进行基本的算术运算也是可能的。这些运算在SQL中称为聚合函数，最常见的有`AVG、SUM、MIN、MAX`。它们的功能从名称中应当可以清楚地了解到：
- en: '![](../Images/f10d9d963c9631af2a374f9c040bf26c.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f10d9d963c9631af2a374f9c040bf26c.png)'
- en: 'Aggregate functions give only a single result for the column you used them
    on. This means you cannot aggregate across one column and select other unaggregated
    columns:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合函数只会对你使用它们的列给出一个结果。这意味着你不能对一个列进行聚合并选择其他未聚合的列：
- en: '![](../Images/be6816913bd9ab3e0f3a9288c47e37cc.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/be6816913bd9ab3e0f3a9288c47e37cc.png)'
- en: 'You can combine aggregate functions with conditionals using WHERE clauses just
    as easily:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`WHERE`子句将聚合函数与条件结合使用：
- en: '![](../Images/83b9f728d822c748e59f368e21c23d24.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/83b9f728d822c748e59f368e21c23d24.png)'
- en: 'It is also possible to use arithmetic operators such as +, -, *, / on columns,
    and simple numbers. When used on columns, the operation is performed element-wise:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以对列和简单数字使用算术运算符，如 +、-、*、/。当作用于列时，操作是逐元素进行的：
- en: '![](../Images/0e944272637a2ea34be7c5ce7406e5bf.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0e944272637a2ea34be7c5ce7406e5bf.png)'
- en: 'One thing to note about arithmetic operations: if you perform operations on
    integers only, SQL thinks that you are expecting an integer as the answer:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 关于算术运算，有一点需要注意：如果你仅对整数执行操作，SQL会认为你期望整数作为答案：
- en: '[PRE5]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/2cc93888d6c83c6e87e5b7d0368febd6.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2cc93888d6c83c6e87e5b7d0368febd6.png)'
- en: 'Instead of returning 3.33…, the result is 3\. To get a float result, you should
    use at least one float number in the query or use all floats to be safe:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是3而不是3.33…。为了获得浮点结果，你应在查询中使用至少一个浮点数或使用全部浮点数以确保安全：
- en: '[PRE7]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/2432fdca12e14d0a42b848f8fc0b83bd.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2432fdca12e14d0a42b848f8fc0b83bd.png)'
- en: 'Using this knowledge, let’s calculate the average duration of a song in minutes:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 利用这些知识，让我们计算歌曲的平均时长（分钟）：
- en: '![](../Images/2c5b0339aedae5044c05d0283519ae82.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2c5b0339aedae5044c05d0283519ae82.png)'
- en: If you pay attention to the above column, its name is written as “*the query
    used to generate that column*.” Because of this behavior, using long calculations,
    such as finding the standard deviation or variance of a column, can be an issue
    because the column name will be as large as the query itself.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你注意到上面的列，它的名字写作“*生成该列的查询*。”由于这种行为，使用长计算，如计算列的标准差或方差，可能会成为问题，因为列名将和查询本身一样长。
- en: 'To avoid this, SQL allows aliasing, similar to aliasing import statements in
    Python. For example:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种情况，SQL允许使用别名，类似于Python中的导入语句别名。例如：
- en: '![](../Images/533ccfaee872774e4c06b69c86b72455.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/533ccfaee872774e4c06b69c86b72455.png)'
- en: 'Using `as` keyword after a single item in a `SELECT` statement tells SQL that
    we are aliasing. Here are more examples:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在`SELECT`语句中的单个项后使用`as`关键字告诉SQL我们正在使用别名。这里是更多的示例：
- en: '![](../Images/dd8bb65d466cc86d6be7896e4e50504e.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dd8bb65d466cc86d6be7896e4e50504e.png)'
- en: You can use aliasing just as easily for columns with long names.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于长名称的列，你也可以同样轻松地使用别名。
- en: Ordering Results in SQL
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL中的结果排序
- en: 'Just like Pandas has `sort_values` method, SQL supports ordering columns via
    `ORDER BY` clause. Passing a column name after the clause sorts the results in
    ascending order:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Pandas有`sort_values`方法一样，SQL通过`ORDER BY`子句支持对列进行排序。在子句后传递列名会将结果按升序排列：
- en: '![](../Images/5e1d89c8ce00f2d1ef9a301f7bc33924.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5e1d89c8ce00f2d1ef9a301f7bc33924.png)'
- en: 'We order the tracks table in ascending order by the composer’s name. Note that
    the ORDER BY statement should always come after the WHERE clause. It is also possible
    to pass two or more columns to ORDER BY:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们按作曲家的名字升序排列`tracks`表。请注意，`ORDER BY`语句应始终在`WHERE`子句之后。也可以将两个或多个列传递给`ORDER BY`：
- en: '![](../Images/404087b630ec2fbf87892ebf4042f8bc.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/404087b630ec2fbf87892ebf4042f8bc.png)'
- en: 'You can also reverse the ordering by passing the `DESC` keyword after each
    column name:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过在每个列名后传递`DESC`关键字来反转排序：
- en: '![](../Images/39e48cc6cf81385ea9c6a0934a32fbea.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/39e48cc6cf81385ea9c6a0934a32fbea.png)'
- en: The above query returns three columns after ordering the UnitPrice and Compose
    in descending order and the name in ascending order (`ASC` is a default keyword).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询在按`UnitPrice`和`Compose`降序排列以及`name`升序排列后返回三列（`ASC`是默认关键字）。
- en: Grouping in SQL
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL中的分组
- en: 'One of the most powerful functions of Pandas is the `groupby`. You can use
    it to transform a table into virtually any shape you want. Its very close cousin
    in SQL - `GROUP BY` clause can be used to achieve the same functionality. For
    example, the below query counts the number of songs in each genre:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas最强大的功能之一是`groupby`。你可以用它将表格转变成几乎任何你想要的形状。在SQL中，与之非常接近的是`GROUP BY`子句，也可以用来实现相同的功能。例如，下面的查询计算了每个流派的歌曲数量：
- en: '![](../Images/3c12aa5902654883336982ec27625a74.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3c12aa5902654883336982ec27625a74.png)'
- en: 'The difference between the GROUP BY in SQL and `groupby` in Pandas is that
    SQL does not allow selecting columns that weren''t given in the GROUP BY clause.
    For example, adding an extra free column in the above query generates an error:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: SQL中的GROUP BY和Pandas中的`groupby`之间的区别在于SQL不允许选择在GROUP BY子句中没有给出的列。例如，在上面的查询中添加一个额外的自由列会产生错误：
- en: 'However, you can choose as many columns in the SELECT statement as you like
    as long as you are using some type of aggregate function on them:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可以在SELECT语句中选择任意多的列，只要你在这些列上使用了某种聚合函数：
- en: '![](../Images/00c7826c53ce7056b61a5391803e32a6.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/00c7826c53ce7056b61a5391803e32a6.png)'
- en: The above query includes almost all the topics we have learned up to this point.
    We are grouping by both album ID and genre ID, and for each group, we calculate
    the average duration and price of a song. We are also making efficient use of
    aliasing.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的查询包括了我们迄今为止学习的几乎所有主题。我们按专辑ID和流派ID进行分组，并为每个组计算了歌曲的平均时长和价格。我们也有效地利用了别名。
- en: 'We can make the query even more powerful by ordering by the average duration
    and genre count:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过按平均时长和流派数量排序来使查询更强大：
- en: '![](../Images/45426a4b24bb076f7fd4fde15730e1a5.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/45426a4b24bb076f7fd4fde15730e1a5.png)'
- en: Pay attention to how we use the alias names of the aggregate functions in the
    ORDER BY clause. Once you alias a column or the result of the aggregate function,
    you can refer to them only by their alias for the rest of the query.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们在ORDER BY子句中如何使用聚合函数的别名。一旦你对列或聚合函数的结果进行了别名，你可以在查询的其余部分只通过别名来引用它们。
- en: Using conditionals with HAVING
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用HAVING条件
- en: 'By default, SQL does not allow conditional filtering using aggregate functions
    in the WHERE clause. For example, we want to select only the genres where the
    number of songs is greater than 100\. Let’s try this with the WHERE clause:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，SQL不允许在WHERE子句中使用聚合函数进行条件过滤。例如，我们想选择歌曲数量大于100的流派。让我们用WHERE子句尝试一下：
- en: 'The correct way of filtering rows based on the results of aggregate functions
    is using the HAVING clause:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 基于聚合函数结果过滤行的正确方法是使用HAVING子句：
- en: '![](../Images/10f729ee3f781fa996eff4bd3655ba0e.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/10f729ee3f781fa996eff4bd3655ba0e.png)'
- en: HAVING clause is usually used with GROUP BY. Whenever you want to filter rows
    using aggregate functions, the HAVING clause is the way to go!
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: HAVING子句通常与GROUP BY一起使用。每当你想使用聚合函数过滤行时，HAVING子句是最合适的选择！
- en: All images were generated by myself.
  id: totrans-132
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 所有图片均由我自己生成。
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: By now, you should have realized how powerful SQL can be and how much more readable
    it becomes compared to Pandas. Even though we learned a ton, we have barely scratched
    the surface.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你应该已经意识到SQL有多强大，以及与Pandas相比，它变得多么可读。尽管我们学到了很多，但我们仅仅是触及了表面。
- en: For practice problems, I recommend [Data Lemur](https://datalemur.com/questions?category=SQL)
    or [LeetCode](https://leetcode.com/) if you are feeling adventurous.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 对于练习题，我推荐[Data Lemur](https://datalemur.com/questions?category=SQL)或者[LeetCode](https://leetcode.com/)，如果你有冒险的心情。
- en: Loved this article and, let’s face it, its bizarre writing style? Imagine having
    access to dozens more just like it, all written by a brilliant, charming, witty
    author (that’s me, by the way :).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 喜欢这篇文章及其奇特的写作风格？想象一下能访问到更多类似的文章，全部由一个才华横溢、迷人、机智的作者（顺便说一下就是我 :)）撰写。
- en: For only 4.99$ membership, you will get access to not just my stories, but a
    treasure trove of knowledge from the best and brightest minds on Medium. And if
    you use [my referral link](https://ibexorigin.medium.com/membership), you will
    earn my supernova of gratitude and a virtual high-five for supporting my work.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 只需支付4.99$的会员费用，你将不仅可以访问我的故事，还能获得来自Medium上最杰出的头脑的知识宝库。如果你使用[我的推荐链接](https://ibexorigin.medium.com/membership)，你将获得我的超级感激和一个虚拟的击掌以支持我的工作。
- en: '[](https://ibexorigin.medium.com/membership?source=post_page-----c189de9d417d--------------------------------)
    [## Join Medium with my referral link — Bex T.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://ibexorigin.medium.com/membership?source=post_page-----c189de9d417d--------------------------------)
    [## 使用我的推荐链接加入 Medium — Bex T.'
- en: Get exclusive access to all my ⚡premium⚡ content and all over Medium without
    limits. Support my work by buying me a…
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取对我所有⚡优质⚡内容的独家访问权限，以及在 Medium 上无限制地访问所有内容。通过为我购买一份来支持我的工作…
- en: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----c189de9d417d--------------------------------)
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: ibexorigin.medium.com](https://ibexorigin.medium.com/membership?source=post_page-----c189de9d417d--------------------------------)
